
TEST_Jim.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c34  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08005dc4  08005dc4  00006dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005eb4  08005eb4  00007068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005eb4  08005eb4  00006eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ebc  08005ebc  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ebc  08005ebc  00006ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005ec0  08005ec0  00006ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005ec4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000458  20000068  08005f2c  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c0  08005f2c  000074c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000126ad  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000259e  00000000  00000000  00019745  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c8  00000000  00000000  0001bce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d08  00000000  00000000  0001cdb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028c90  00000000  00000000  0001dab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001352f  00000000  00000000  00046748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff9b3  00000000  00000000  00059c77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015962a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ee0  00000000  00000000  00159670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0015e550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005dac 	.word	0x08005dac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08005dac 	.word	0x08005dac

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <lightOffLED>:
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
    //state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8);
    //HAL_Delay(100);
}
void lightOffLED(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	//int count=0;
	//int statusLED=0;

    //將 PB8 Off
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80005a0:	2200      	movs	r2, #0
 80005a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005a6:	4802      	ldr	r0, [pc, #8]	@ (80005b0 <lightOffLED+0x14>)
 80005a8:	f002 f97e 	bl	80028a8 <HAL_GPIO_WritePin>
    //state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8);
    //receive_data_uart();
    //HAL_Delay(100);
    //i++;
}
 80005ac:	bf00      	nop
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	48000400 	.word	0x48000400

080005b4 <updateFSRState>:
        HAL_Delay(5);
    }
    return sum / samples;
}*/
void updateFSRState(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b094      	sub	sp, #80	@ 0x50
 80005b8:	af00      	add	r7, sp, #0
	//char buffer[40]={0};
	char buffer[40] = "234";
 80005ba:	4b40      	ldr	r3, [pc, #256]	@ (80006bc <updateFSRState+0x108>)
 80005bc:	617b      	str	r3, [r7, #20]
 80005be:	f107 0318 	add.w	r3, r7, #24
 80005c2:	2224      	movs	r2, #36	@ 0x24
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f004 fe6e 	bl	80052a8 <memset>
	char rxData[10]={0};
 80005cc:	f107 0308 	add.w	r3, r7, #8
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	811a      	strh	r2, [r3, #8]
	int value=100;
 80005d8:	2364      	movs	r3, #100	@ 0x64
 80005da:	64bb      	str	r3, [r7, #72]	@ 0x48
    //int value = readAnalogFSR();

	//value=sampleAvgValue;
	//value=slidingAvgValue;

    uint32_t currentTime = HAL_GetTick();
 80005dc:	f000 fed4 	bl	8001388 <HAL_GetTick>
 80005e0:	6478      	str	r0, [r7, #68]	@ 0x44

   // if (fsrState == FSR_RELEASED)
    //{
        if (value > FSR_THRESHOLD_PRESS)
 80005e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80005e4:	2b03      	cmp	r3, #3
 80005e6:	dd60      	ble.n	80006aa <updateFSRState+0xf6>
        {
            if ((currentTime - lastDebounceTime) > DEBOUNCE_DELAY_MS)
 80005e8:	4b35      	ldr	r3, [pc, #212]	@ (80006c0 <updateFSRState+0x10c>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80005ee:	1ad3      	subs	r3, r2, r3
 80005f0:	2b32      	cmp	r3, #50	@ 0x32
 80005f2:	d95f      	bls.n	80006b4 <updateFSRState+0x100>
            {
            	fsrState = FSR_PRESSED;
 80005f4:	4b33      	ldr	r3, [pc, #204]	@ (80006c4 <updateFSRState+0x110>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	701a      	strb	r2, [r3, #0]
                lastDebounceTime = currentTime;
 80005fa:	4a31      	ldr	r2, [pc, #196]	@ (80006c0 <updateFSRState+0x10c>)
 80005fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80005fe:	6013      	str	r3, [r2, #0]
                //statusReceive = HAL_UART_Receive(&huart3, (uint8_t*)rxData, 2, 10000);//huart2
                /////////
                //while (i < sizeof(rxData) - 1)
			    //{
				///
                status=HAL_UART_Transmit(&huart3, (uint8_t*)"11223", 5, 1000);
 8000600:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000604:	2205      	movs	r2, #5
 8000606:	4930      	ldr	r1, [pc, #192]	@ (80006c8 <updateFSRState+0x114>)
 8000608:	4830      	ldr	r0, [pc, #192]	@ (80006cc <updateFSRState+0x118>)
 800060a:	f003 fe1d 	bl	8004248 <HAL_UART_Transmit>
 800060e:	4603      	mov	r3, r0
 8000610:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
                HAL_Delay(50); // 增加這個 delay，再進行接收會比較穩
 8000614:	2032      	movs	r0, #50	@ 0x32
 8000616:	f000 fec3 	bl	80013a0 <HAL_Delay>

                i=0;
 800061a:	4b2d      	ldr	r3, [pc, #180]	@ (80006d0 <updateFSRState+0x11c>)
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
                while (i < 5) {
 8000620:	e026      	b.n	8000670 <updateFSRState+0xbc>
                    statusReceive = HAL_UART_Receive(&huart3, (uint8_t*)&ch, 1, 20000);//&huart2
 8000622:	1df9      	adds	r1, r7, #7
 8000624:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8000628:	2201      	movs	r2, #1
 800062a:	4828      	ldr	r0, [pc, #160]	@ (80006cc <updateFSRState+0x118>)
 800062c:	f003 fe95 	bl	800435a <HAL_UART_Receive>
 8000630:	4603      	mov	r3, r0
 8000632:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
                    if (statusReceive == HAL_OK) {
 8000636:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800063a:	2b00      	cmp	r3, #0
 800063c:	d111      	bne.n	8000662 <updateFSRState+0xae>
                        rxData[i] = ch;
 800063e:	4b24      	ldr	r3, [pc, #144]	@ (80006d0 <updateFSRState+0x11c>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	79fa      	ldrb	r2, [r7, #7]
 8000644:	3350      	adds	r3, #80	@ 0x50
 8000646:	443b      	add	r3, r7
 8000648:	f803 2c48 	strb.w	r2, [r3, #-72]
                        printf("Got char: %c\n", ch);
 800064c:	79fb      	ldrb	r3, [r7, #7]
 800064e:	4619      	mov	r1, r3
 8000650:	4820      	ldr	r0, [pc, #128]	@ (80006d4 <updateFSRState+0x120>)
 8000652:	f004 fce1 	bl	8005018 <iprintf>
                        i++;
 8000656:	4b1e      	ldr	r3, [pc, #120]	@ (80006d0 <updateFSRState+0x11c>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	3301      	adds	r3, #1
 800065c:	4a1c      	ldr	r2, [pc, #112]	@ (80006d0 <updateFSRState+0x11c>)
 800065e:	6013      	str	r3, [r2, #0]
 8000660:	e006      	b.n	8000670 <updateFSRState+0xbc>
                    } else {
                        printf("Timeout or error at %d chars\n", i);
 8000662:	4b1b      	ldr	r3, [pc, #108]	@ (80006d0 <updateFSRState+0x11c>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4619      	mov	r1, r3
 8000668:	481b      	ldr	r0, [pc, #108]	@ (80006d8 <updateFSRState+0x124>)
 800066a:	f004 fcd5 	bl	8005018 <iprintf>
                        break;
 800066e:	e003      	b.n	8000678 <updateFSRState+0xc4>
                while (i < 5) {
 8000670:	4b17      	ldr	r3, [pc, #92]	@ (80006d0 <updateFSRState+0x11c>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2b04      	cmp	r3, #4
 8000676:	ddd4      	ble.n	8000622 <updateFSRState+0x6e>

                ////////
                //char ch;
                //HAL_StatusTypeDef status = HAL_UART_Receive(&huart3, (uint8_t*)&ch, 1, 10000);

                if (statusReceive == HAL_OK)
 8000678:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800067c:	2b00      	cmp	r3, #0
 800067e:	d106      	bne.n	800068e <updateFSRState+0xda>
                {
                    printf("Received: %s\n", rxData);
 8000680:	f107 0308 	add.w	r3, r7, #8
 8000684:	4619      	mov	r1, r3
 8000686:	4815      	ldr	r0, [pc, #84]	@ (80006dc <updateFSRState+0x128>)
 8000688:	f004 fcc6 	bl	8005018 <iprintf>
 800068c:	e00a      	b.n	80006a4 <updateFSRState+0xf0>
                }
                else if (statusReceive == HAL_TIMEOUT)
 800068e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000692:	2b03      	cmp	r3, #3
 8000694:	d103      	bne.n	800069e <updateFSRState+0xea>
                {
                    printf("Receive timeout.\n");
 8000696:	4812      	ldr	r0, [pc, #72]	@ (80006e0 <updateFSRState+0x12c>)
 8000698:	f004 fd26 	bl	80050e8 <puts>
 800069c:	e002      	b.n	80006a4 <updateFSRState+0xf0>
                }
                else
                {
                    printf("Receive error.\n");
 800069e:	4811      	ldr	r0, [pc, #68]	@ (80006e4 <updateFSRState+0x130>)
 80006a0:	f004 fd22 	bl	80050e8 <puts>
                }
                //
                //receiveDataUart();
                int b=33;
 80006a4:	2321      	movs	r3, #33	@ 0x21
 80006a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
            lastDebounceTime = currentTime;
        }
    }*/

}
 80006a8:	e004      	b.n	80006b4 <updateFSRState+0x100>
            lastDebounceTime = currentTime;
 80006aa:	4a05      	ldr	r2, [pc, #20]	@ (80006c0 <updateFSRState+0x10c>)
 80006ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80006ae:	6013      	str	r3, [r2, #0]
            lightOffLED();//暫時加上
 80006b0:	f7ff ff74 	bl	800059c <lightOffLED>
}
 80006b4:	bf00      	nop
 80006b6:	3750      	adds	r7, #80	@ 0x50
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	00343332 	.word	0x00343332
 80006c0:	20000364 	.word	0x20000364
 80006c4:	20000368 	.word	0x20000368
 80006c8:	08005dc4 	.word	0x08005dc4
 80006cc:	200002d4 	.word	0x200002d4
 80006d0:	2000035c 	.word	0x2000035c
 80006d4:	08005dcc 	.word	0x08005dcc
 80006d8:	08005ddc 	.word	0x08005ddc
 80006dc:	08005dfc 	.word	0x08005dfc
 80006e0:	08005e0c 	.word	0x08005e0c
 80006e4:	08005e20 	.word	0x08005e20

080006e8 <HAL_GPIO_EXTI_Callback>:
        HAL_Delay(1); // 適當延遲，避免過快取樣
    }
    return sum / samples;
}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
	if(GPIO_Pin == GPIO_PIN_13){
 80006f2:	88fb      	ldrh	r3, [r7, #6]
 80006f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006f8:	d109      	bne.n	800070e <HAL_GPIO_EXTI_Callback+0x26>
		x = (x == 0)? 1:0;
 80006fa:	4b08      	ldr	r3, [pc, #32]	@ (800071c <HAL_GPIO_EXTI_Callback+0x34>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	bf0c      	ite	eq
 8000702:	2301      	moveq	r3, #1
 8000704:	2300      	movne	r3, #0
 8000706:	b2db      	uxtb	r3, r3
 8000708:	461a      	mov	r2, r3
 800070a:	4b04      	ldr	r3, [pc, #16]	@ (800071c <HAL_GPIO_EXTI_Callback+0x34>)
 800070c:	601a      	str	r2, [r3, #0]
	}
}
 800070e:	bf00      	nop
 8000710:	370c      	adds	r7, #12
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	20000360 	.word	0x20000360

08000720 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b098      	sub	sp, #96	@ 0x60
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  char buffer[40]="";
 8000726:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800072a:	2228      	movs	r2, #40	@ 0x28
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f004 fdba 	bl	80052a8 <memset>
  int arr[10] = {0};  // 全部初始化為 0
 8000734:	f107 0308 	add.w	r3, r7, #8
 8000738:	2228      	movs	r2, #40	@ 0x28
 800073a:	2100      	movs	r1, #0
 800073c:	4618      	mov	r0, r3
 800073e:	f004 fdb3 	bl	80052a8 <memset>
  int a=sizeof(arr);  // ✅ 這裡是陣列大小  a=40   10*4
 8000742:	2328      	movs	r3, #40	@ 0x28
 8000744:	65fb      	str	r3, [r7, #92]	@ 0x5c
  int value=2;
 8000746:	2302      	movs	r3, #2
 8000748:	65bb      	str	r3, [r7, #88]	@ 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800074a:	f000 fdad 	bl	80012a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800074e:	f000 f81f 	bl	8000790 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000752:	f000 f9e5 	bl	8000b20 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000756:	f000 f86d 	bl	8000834 <MX_ADC1_Init>
  MX_I2C1_Init();
 800075a:	f000 f8e1 	bl	8000920 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800075e:	f000 f94f 	bl	8000a00 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000762:	f000 f97d 	bl	8000a60 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000766:	f000 f9ab 	bl	8000ac0 <MX_USART3_UART_Init>
  MX_UART4_Init();
 800076a:	f000 f919 	bl	80009a0 <MX_UART4_Init>
	  ///
	  //snprintf(buffer, sizeof(buffer), "%d", value);
	  //transmitDataUart(buffer);

	  //
	  char txData[] = "12345";
 800076e:	4a07      	ldr	r2, [pc, #28]	@ (800078c <main+0x6c>)
 8000770:	463b      	mov	r3, r7
 8000772:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000776:	6018      	str	r0, [r3, #0]
 8000778:	3304      	adds	r3, #4
 800077a:	8019      	strh	r1, [r3, #0]
	      // 接收失敗或超時
	      printf("Receive timeout or error\n");
	  }
*/
	  // 啟用力量感測器功能
	  updateFSRState();   // 呼叫防彈跳判斷
 800077c:	f7ff ff1a 	bl	80005b4 <updateFSRState>
	  HAL_Delay(1000);     // 簡短延遲避免過度讀取ADC
 8000780:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000784:	f000 fe0c 	bl	80013a0 <HAL_Delay>
  {
 8000788:	bf00      	nop
 800078a:	e7f0      	b.n	800076e <main+0x4e>
 800078c:	08005e30 	.word	0x08005e30

08000790 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b096      	sub	sp, #88	@ 0x58
 8000794:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	2244      	movs	r2, #68	@ 0x44
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f004 fd82 	bl	80052a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a4:	463b      	mov	r3, r7
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
 80007b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007b2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80007b6:	f002 f9e7 	bl	8002b88 <HAL_PWREx_ControlVoltageScaling>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007c0:	f000 fa40 	bl	8000c44 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c4:	2302      	movs	r3, #2
 80007c6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007cc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ce:	2310      	movs	r3, #16
 80007d0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d2:	2302      	movs	r3, #2
 80007d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007d6:	2302      	movs	r3, #2
 80007d8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007da:	2301      	movs	r3, #1
 80007dc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80007de:	230a      	movs	r3, #10
 80007e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007e2:	2307      	movs	r3, #7
 80007e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007e6:	2302      	movs	r3, #2
 80007e8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007ea:	2302      	movs	r3, #2
 80007ec:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	4618      	mov	r0, r3
 80007f4:	f002 fa1e 	bl	8002c34 <HAL_RCC_OscConfig>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80007fe:	f000 fa21 	bl	8000c44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000802:	230f      	movs	r3, #15
 8000804:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000806:	2303      	movs	r3, #3
 8000808:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800080a:	2300      	movs	r3, #0
 800080c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000812:	2300      	movs	r3, #0
 8000814:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000816:	463b      	mov	r3, r7
 8000818:	2104      	movs	r1, #4
 800081a:	4618      	mov	r0, r3
 800081c:	f002 fde6 	bl	80033ec <HAL_RCC_ClockConfig>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000826:	f000 fa0d 	bl	8000c44 <Error_Handler>
  }
}
 800082a:	bf00      	nop
 800082c:	3758      	adds	r7, #88	@ 0x58
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
	...

08000834 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08a      	sub	sp, #40	@ 0x28
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800083a:	f107 031c 	add.w	r3, r7, #28
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000846:	1d3b      	adds	r3, r7, #4
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]
 8000854:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000856:	4b2f      	ldr	r3, [pc, #188]	@ (8000914 <MX_ADC1_Init+0xe0>)
 8000858:	4a2f      	ldr	r2, [pc, #188]	@ (8000918 <MX_ADC1_Init+0xe4>)
 800085a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800085c:	4b2d      	ldr	r3, [pc, #180]	@ (8000914 <MX_ADC1_Init+0xe0>)
 800085e:	2200      	movs	r2, #0
 8000860:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000862:	4b2c      	ldr	r3, [pc, #176]	@ (8000914 <MX_ADC1_Init+0xe0>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000868:	4b2a      	ldr	r3, [pc, #168]	@ (8000914 <MX_ADC1_Init+0xe0>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800086e:	4b29      	ldr	r3, [pc, #164]	@ (8000914 <MX_ADC1_Init+0xe0>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000874:	4b27      	ldr	r3, [pc, #156]	@ (8000914 <MX_ADC1_Init+0xe0>)
 8000876:	2204      	movs	r2, #4
 8000878:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800087a:	4b26      	ldr	r3, [pc, #152]	@ (8000914 <MX_ADC1_Init+0xe0>)
 800087c:	2200      	movs	r2, #0
 800087e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000880:	4b24      	ldr	r3, [pc, #144]	@ (8000914 <MX_ADC1_Init+0xe0>)
 8000882:	2200      	movs	r2, #0
 8000884:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000886:	4b23      	ldr	r3, [pc, #140]	@ (8000914 <MX_ADC1_Init+0xe0>)
 8000888:	2201      	movs	r2, #1
 800088a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800088c:	4b21      	ldr	r3, [pc, #132]	@ (8000914 <MX_ADC1_Init+0xe0>)
 800088e:	2200      	movs	r2, #0
 8000890:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000894:	4b1f      	ldr	r3, [pc, #124]	@ (8000914 <MX_ADC1_Init+0xe0>)
 8000896:	2200      	movs	r2, #0
 8000898:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800089a:	4b1e      	ldr	r3, [pc, #120]	@ (8000914 <MX_ADC1_Init+0xe0>)
 800089c:	2200      	movs	r2, #0
 800089e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008a0:	4b1c      	ldr	r3, [pc, #112]	@ (8000914 <MX_ADC1_Init+0xe0>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000914 <MX_ADC1_Init+0xe0>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80008ae:	4b19      	ldr	r3, [pc, #100]	@ (8000914 <MX_ADC1_Init+0xe0>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008b6:	4817      	ldr	r0, [pc, #92]	@ (8000914 <MX_ADC1_Init+0xe0>)
 80008b8:	f000 ff22 	bl	8001700 <HAL_ADC_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80008c2:	f000 f9bf 	bl	8000c44 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	4619      	mov	r1, r3
 80008d0:	4810      	ldr	r0, [pc, #64]	@ (8000914 <MX_ADC1_Init+0xe0>)
 80008d2:	f001 fc7d 	bl	80021d0 <HAL_ADCEx_MultiModeConfigChannel>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80008dc:	f000 f9b2 	bl	8000c44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008e0:	4b0e      	ldr	r3, [pc, #56]	@ (800091c <MX_ADC1_Init+0xe8>)
 80008e2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008e4:	2306      	movs	r3, #6
 80008e6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80008e8:	2300      	movs	r3, #0
 80008ea:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008ec:	237f      	movs	r3, #127	@ 0x7f
 80008ee:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008f0:	2304      	movs	r3, #4
 80008f2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008f8:	1d3b      	adds	r3, r7, #4
 80008fa:	4619      	mov	r1, r3
 80008fc:	4805      	ldr	r0, [pc, #20]	@ (8000914 <MX_ADC1_Init+0xe0>)
 80008fe:	f001 f84f 	bl	80019a0 <HAL_ADC_ConfigChannel>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000908:	f000 f99c 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800090c:	bf00      	nop
 800090e:	3728      	adds	r7, #40	@ 0x28
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20000084 	.word	0x20000084
 8000918:	50040000 	.word	0x50040000
 800091c:	04300002 	.word	0x04300002

08000920 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000924:	4b1b      	ldr	r3, [pc, #108]	@ (8000994 <MX_I2C1_Init+0x74>)
 8000926:	4a1c      	ldr	r2, [pc, #112]	@ (8000998 <MX_I2C1_Init+0x78>)
 8000928:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 800092a:	4b1a      	ldr	r3, [pc, #104]	@ (8000994 <MX_I2C1_Init+0x74>)
 800092c:	4a1b      	ldr	r2, [pc, #108]	@ (800099c <MX_I2C1_Init+0x7c>)
 800092e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000930:	4b18      	ldr	r3, [pc, #96]	@ (8000994 <MX_I2C1_Init+0x74>)
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000936:	4b17      	ldr	r3, [pc, #92]	@ (8000994 <MX_I2C1_Init+0x74>)
 8000938:	2201      	movs	r2, #1
 800093a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800093c:	4b15      	ldr	r3, [pc, #84]	@ (8000994 <MX_I2C1_Init+0x74>)
 800093e:	2200      	movs	r2, #0
 8000940:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000942:	4b14      	ldr	r3, [pc, #80]	@ (8000994 <MX_I2C1_Init+0x74>)
 8000944:	2200      	movs	r2, #0
 8000946:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000948:	4b12      	ldr	r3, [pc, #72]	@ (8000994 <MX_I2C1_Init+0x74>)
 800094a:	2200      	movs	r2, #0
 800094c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800094e:	4b11      	ldr	r3, [pc, #68]	@ (8000994 <MX_I2C1_Init+0x74>)
 8000950:	2200      	movs	r2, #0
 8000952:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000954:	4b0f      	ldr	r3, [pc, #60]	@ (8000994 <MX_I2C1_Init+0x74>)
 8000956:	2200      	movs	r2, #0
 8000958:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800095a:	480e      	ldr	r0, [pc, #56]	@ (8000994 <MX_I2C1_Init+0x74>)
 800095c:	f001 ffd4 	bl	8002908 <HAL_I2C_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000966:	f000 f96d 	bl	8000c44 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800096a:	2100      	movs	r1, #0
 800096c:	4809      	ldr	r0, [pc, #36]	@ (8000994 <MX_I2C1_Init+0x74>)
 800096e:	f002 f866 	bl	8002a3e <HAL_I2CEx_ConfigAnalogFilter>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000978:	f000 f964 	bl	8000c44 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800097c:	2100      	movs	r1, #0
 800097e:	4805      	ldr	r0, [pc, #20]	@ (8000994 <MX_I2C1_Init+0x74>)
 8000980:	f002 f8a8 	bl	8002ad4 <HAL_I2CEx_ConfigDigitalFilter>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800098a:	f000 f95b 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	200000e8 	.word	0x200000e8
 8000998:	40005400 	.word	0x40005400
 800099c:	10d19ce4 	.word	0x10d19ce4

080009a0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80009a4:	4b14      	ldr	r3, [pc, #80]	@ (80009f8 <MX_UART4_Init+0x58>)
 80009a6:	4a15      	ldr	r2, [pc, #84]	@ (80009fc <MX_UART4_Init+0x5c>)
 80009a8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80009aa:	4b13      	ldr	r3, [pc, #76]	@ (80009f8 <MX_UART4_Init+0x58>)
 80009ac:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80009b0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80009b2:	4b11      	ldr	r3, [pc, #68]	@ (80009f8 <MX_UART4_Init+0x58>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80009b8:	4b0f      	ldr	r3, [pc, #60]	@ (80009f8 <MX_UART4_Init+0x58>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80009be:	4b0e      	ldr	r3, [pc, #56]	@ (80009f8 <MX_UART4_Init+0x58>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80009c4:	4b0c      	ldr	r3, [pc, #48]	@ (80009f8 <MX_UART4_Init+0x58>)
 80009c6:	220c      	movs	r2, #12
 80009c8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ca:	4b0b      	ldr	r3, [pc, #44]	@ (80009f8 <MX_UART4_Init+0x58>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d0:	4b09      	ldr	r3, [pc, #36]	@ (80009f8 <MX_UART4_Init+0x58>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009d6:	4b08      	ldr	r3, [pc, #32]	@ (80009f8 <MX_UART4_Init+0x58>)
 80009d8:	2200      	movs	r2, #0
 80009da:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009dc:	4b06      	ldr	r3, [pc, #24]	@ (80009f8 <MX_UART4_Init+0x58>)
 80009de:	2200      	movs	r2, #0
 80009e0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80009e2:	4805      	ldr	r0, [pc, #20]	@ (80009f8 <MX_UART4_Init+0x58>)
 80009e4:	f003 fbe2 	bl	80041ac <HAL_UART_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80009ee:	f000 f929 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	2000013c 	.word	0x2000013c
 80009fc:	40004c00 	.word	0x40004c00

08000a00 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a04:	4b14      	ldr	r3, [pc, #80]	@ (8000a58 <MX_USART1_UART_Init+0x58>)
 8000a06:	4a15      	ldr	r2, [pc, #84]	@ (8000a5c <MX_USART1_UART_Init+0x5c>)
 8000a08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000a0a:	4b13      	ldr	r3, [pc, #76]	@ (8000a58 <MX_USART1_UART_Init+0x58>)
 8000a0c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000a10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a12:	4b11      	ldr	r3, [pc, #68]	@ (8000a58 <MX_USART1_UART_Init+0x58>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a18:	4b0f      	ldr	r3, [pc, #60]	@ (8000a58 <MX_USART1_UART_Init+0x58>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a58 <MX_USART1_UART_Init+0x58>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a24:	4b0c      	ldr	r3, [pc, #48]	@ (8000a58 <MX_USART1_UART_Init+0x58>)
 8000a26:	220c      	movs	r2, #12
 8000a28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a58 <MX_USART1_UART_Init+0x58>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a30:	4b09      	ldr	r3, [pc, #36]	@ (8000a58 <MX_USART1_UART_Init+0x58>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a36:	4b08      	ldr	r3, [pc, #32]	@ (8000a58 <MX_USART1_UART_Init+0x58>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a3c:	4b06      	ldr	r3, [pc, #24]	@ (8000a58 <MX_USART1_UART_Init+0x58>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a42:	4805      	ldr	r0, [pc, #20]	@ (8000a58 <MX_USART1_UART_Init+0x58>)
 8000a44:	f003 fbb2 	bl	80041ac <HAL_UART_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a4e:	f000 f8f9 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	200001c4 	.word	0x200001c4
 8000a5c:	40013800 	.word	0x40013800

08000a60 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a64:	4b14      	ldr	r3, [pc, #80]	@ (8000ab8 <MX_USART2_UART_Init+0x58>)
 8000a66:	4a15      	ldr	r2, [pc, #84]	@ (8000abc <MX_USART2_UART_Init+0x5c>)
 8000a68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000a6a:	4b13      	ldr	r3, [pc, #76]	@ (8000ab8 <MX_USART2_UART_Init+0x58>)
 8000a6c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000a70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a72:	4b11      	ldr	r3, [pc, #68]	@ (8000ab8 <MX_USART2_UART_Init+0x58>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a78:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab8 <MX_USART2_UART_Init+0x58>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab8 <MX_USART2_UART_Init+0x58>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a84:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab8 <MX_USART2_UART_Init+0x58>)
 8000a86:	220c      	movs	r2, #12
 8000a88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab8 <MX_USART2_UART_Init+0x58>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a90:	4b09      	ldr	r3, [pc, #36]	@ (8000ab8 <MX_USART2_UART_Init+0x58>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a96:	4b08      	ldr	r3, [pc, #32]	@ (8000ab8 <MX_USART2_UART_Init+0x58>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	@ (8000ab8 <MX_USART2_UART_Init+0x58>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000aa2:	4805      	ldr	r0, [pc, #20]	@ (8000ab8 <MX_USART2_UART_Init+0x58>)
 8000aa4:	f003 fb82 	bl	80041ac <HAL_UART_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000aae:	f000 f8c9 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	2000024c 	.word	0x2000024c
 8000abc:	40004400 	.word	0x40004400

08000ac0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ac4:	4b14      	ldr	r3, [pc, #80]	@ (8000b18 <MX_USART3_UART_Init+0x58>)
 8000ac6:	4a15      	ldr	r2, [pc, #84]	@ (8000b1c <MX_USART3_UART_Init+0x5c>)
 8000ac8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;//115200
 8000aca:	4b13      	ldr	r3, [pc, #76]	@ (8000b18 <MX_USART3_UART_Init+0x58>)
 8000acc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000ad0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad2:	4b11      	ldr	r3, [pc, #68]	@ (8000b18 <MX_USART3_UART_Init+0x58>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ad8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b18 <MX_USART3_UART_Init+0x58>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ade:	4b0e      	ldr	r3, [pc, #56]	@ (8000b18 <MX_USART3_UART_Init+0x58>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8000b18 <MX_USART3_UART_Init+0x58>)
 8000ae6:	220c      	movs	r2, #12
 8000ae8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aea:	4b0b      	ldr	r3, [pc, #44]	@ (8000b18 <MX_USART3_UART_Init+0x58>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af0:	4b09      	ldr	r3, [pc, #36]	@ (8000b18 <MX_USART3_UART_Init+0x58>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000af6:	4b08      	ldr	r3, [pc, #32]	@ (8000b18 <MX_USART3_UART_Init+0x58>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000afc:	4b06      	ldr	r3, [pc, #24]	@ (8000b18 <MX_USART3_UART_Init+0x58>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b02:	4805      	ldr	r0, [pc, #20]	@ (8000b18 <MX_USART3_UART_Init+0x58>)
 8000b04:	f003 fb52 	bl	80041ac <HAL_UART_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b0e:	f000 f899 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	200002d4 	.word	0x200002d4
 8000b1c:	40004800 	.word	0x40004800

08000b20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08a      	sub	sp, #40	@ 0x28
 8000b24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b26:	f107 0314 	add.w	r3, r7, #20
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]
 8000b32:	60da      	str	r2, [r3, #12]
 8000b34:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b36:	4b40      	ldr	r3, [pc, #256]	@ (8000c38 <MX_GPIO_Init+0x118>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b3a:	4a3f      	ldr	r2, [pc, #252]	@ (8000c38 <MX_GPIO_Init+0x118>)
 8000b3c:	f043 0304 	orr.w	r3, r3, #4
 8000b40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b42:	4b3d      	ldr	r3, [pc, #244]	@ (8000c38 <MX_GPIO_Init+0x118>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b46:	f003 0304 	and.w	r3, r3, #4
 8000b4a:	613b      	str	r3, [r7, #16]
 8000b4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b4e:	4b3a      	ldr	r3, [pc, #232]	@ (8000c38 <MX_GPIO_Init+0x118>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b52:	4a39      	ldr	r2, [pc, #228]	@ (8000c38 <MX_GPIO_Init+0x118>)
 8000b54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b5a:	4b37      	ldr	r3, [pc, #220]	@ (8000c38 <MX_GPIO_Init+0x118>)
 8000b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b66:	4b34      	ldr	r3, [pc, #208]	@ (8000c38 <MX_GPIO_Init+0x118>)
 8000b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b6a:	4a33      	ldr	r2, [pc, #204]	@ (8000c38 <MX_GPIO_Init+0x118>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b72:	4b31      	ldr	r3, [pc, #196]	@ (8000c38 <MX_GPIO_Init+0x118>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7e:	4b2e      	ldr	r3, [pc, #184]	@ (8000c38 <MX_GPIO_Init+0x118>)
 8000b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b82:	4a2d      	ldr	r2, [pc, #180]	@ (8000c38 <MX_GPIO_Init+0x118>)
 8000b84:	f043 0302 	orr.w	r3, r3, #2
 8000b88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b8a:	4b2b      	ldr	r3, [pc, #172]	@ (8000c38 <MX_GPIO_Init+0x118>)
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b8e:	f003 0302 	and.w	r3, r3, #2
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b96:	2200      	movs	r2, #0
 8000b98:	2120      	movs	r1, #32
 8000b9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b9e:	f001 fe83 	bl	80028a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f244 1181 	movw	r1, #16769	@ 0x4181
 8000ba8:	4824      	ldr	r0, [pc, #144]	@ (8000c3c <MX_GPIO_Init+0x11c>)
 8000baa:	f001 fe7d 	bl	80028a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bb4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bbe:	f107 0314 	add.w	r3, r7, #20
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	481e      	ldr	r0, [pc, #120]	@ (8000c40 <MX_GPIO_Init+0x120>)
 8000bc6:	f001 fcc5 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bca:	2320      	movs	r3, #32
 8000bcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bda:	f107 0314 	add.w	r3, r7, #20
 8000bde:	4619      	mov	r1, r3
 8000be0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000be4:	f001 fcb6 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_8;
 8000be8:	f244 1381 	movw	r3, #16769	@ 0x4181
 8000bec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	4619      	mov	r1, r3
 8000c00:	480e      	ldr	r0, [pc, #56]	@ (8000c3c <MX_GPIO_Init+0x11c>)
 8000c02:	f001 fca7 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c06:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4809      	ldr	r0, [pc, #36]	@ (8000c40 <MX_GPIO_Init+0x120>)
 8000c1c:	f001 fc9a 	bl	8002554 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c20:	2200      	movs	r2, #0
 8000c22:	2100      	movs	r1, #0
 8000c24:	2028      	movs	r0, #40	@ 0x28
 8000c26:	f001 fc5e 	bl	80024e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c2a:	2028      	movs	r0, #40	@ 0x28
 8000c2c:	f001 fc77 	bl	800251e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c30:	bf00      	nop
 8000c32:	3728      	adds	r7, #40	@ 0x28
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	48000400 	.word	0x48000400
 8000c40:	48000800 	.word	0x48000800

08000c44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c48:	b672      	cpsid	i
}
 8000c4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c4c:	bf00      	nop
 8000c4e:	e7fd      	b.n	8000c4c <Error_Handler+0x8>

08000c50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c56:	4b0f      	ldr	r3, [pc, #60]	@ (8000c94 <HAL_MspInit+0x44>)
 8000c58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c5a:	4a0e      	ldr	r2, [pc, #56]	@ (8000c94 <HAL_MspInit+0x44>)
 8000c5c:	f043 0301 	orr.w	r3, r3, #1
 8000c60:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c62:	4b0c      	ldr	r3, [pc, #48]	@ (8000c94 <HAL_MspInit+0x44>)
 8000c64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c6e:	4b09      	ldr	r3, [pc, #36]	@ (8000c94 <HAL_MspInit+0x44>)
 8000c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c72:	4a08      	ldr	r2, [pc, #32]	@ (8000c94 <HAL_MspInit+0x44>)
 8000c74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c78:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c7a:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <HAL_MspInit+0x44>)
 8000c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c82:	603b      	str	r3, [r7, #0]
 8000c84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c86:	bf00      	nop
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	40021000 	.word	0x40021000

08000c98 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b0ac      	sub	sp, #176	@ 0xb0
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	2288      	movs	r2, #136	@ 0x88
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f004 faf5 	bl	80052a8 <memset>
  if(hadc->Instance==ADC1)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a27      	ldr	r2, [pc, #156]	@ (8000d60 <HAL_ADC_MspInit+0xc8>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d146      	bne.n	8000d56 <HAL_ADC_MspInit+0xbe>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000cc8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000ccc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000cce:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000cd2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000cde:	2308      	movs	r3, #8
 8000ce0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000ce2:	2307      	movs	r3, #7
 8000ce4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000cea:	2302      	movs	r3, #2
 8000cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000cee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000cf2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f002 fd9b 	bl	8003834 <HAL_RCCEx_PeriphCLKConfig>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000d04:	f7ff ff9e 	bl	8000c44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000d08:	4b16      	ldr	r3, [pc, #88]	@ (8000d64 <HAL_ADC_MspInit+0xcc>)
 8000d0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d0c:	4a15      	ldr	r2, [pc, #84]	@ (8000d64 <HAL_ADC_MspInit+0xcc>)
 8000d0e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000d12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d14:	4b13      	ldr	r3, [pc, #76]	@ (8000d64 <HAL_ADC_MspInit+0xcc>)
 8000d16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d1c:	613b      	str	r3, [r7, #16]
 8000d1e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d20:	4b10      	ldr	r3, [pc, #64]	@ (8000d64 <HAL_ADC_MspInit+0xcc>)
 8000d22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d24:	4a0f      	ldr	r2, [pc, #60]	@ (8000d64 <HAL_ADC_MspInit+0xcc>)
 8000d26:	f043 0304 	orr.w	r3, r3, #4
 8000d2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d2c:	4b0d      	ldr	r3, [pc, #52]	@ (8000d64 <HAL_ADC_MspInit+0xcc>)
 8000d2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d30:	f003 0304 	and.w	r3, r3, #4
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d3e:	230b      	movs	r3, #11
 8000d40:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d4a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4805      	ldr	r0, [pc, #20]	@ (8000d68 <HAL_ADC_MspInit+0xd0>)
 8000d52:	f001 fbff 	bl	8002554 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000d56:	bf00      	nop
 8000d58:	37b0      	adds	r7, #176	@ 0xb0
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	50040000 	.word	0x50040000
 8000d64:	40021000 	.word	0x40021000
 8000d68:	48000800 	.word	0x48000800

08000d6c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b0ac      	sub	sp, #176	@ 0xb0
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d74:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	2288      	movs	r2, #136	@ 0x88
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f004 fa8b 	bl	80052a8 <memset>
  if(hi2c->Instance==I2C1)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a21      	ldr	r2, [pc, #132]	@ (8000e1c <HAL_I2C_MspInit+0xb0>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d13b      	bne.n	8000e14 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d9c:	2340      	movs	r3, #64	@ 0x40
 8000d9e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000da0:	2300      	movs	r3, #0
 8000da2:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	4618      	mov	r0, r3
 8000daa:	f002 fd43 	bl	8003834 <HAL_RCCEx_PeriphCLKConfig>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000db4:	f7ff ff46 	bl	8000c44 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db8:	4b19      	ldr	r3, [pc, #100]	@ (8000e20 <HAL_I2C_MspInit+0xb4>)
 8000dba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dbc:	4a18      	ldr	r2, [pc, #96]	@ (8000e20 <HAL_I2C_MspInit+0xb4>)
 8000dbe:	f043 0302 	orr.w	r3, r3, #2
 8000dc2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dc4:	4b16      	ldr	r3, [pc, #88]	@ (8000e20 <HAL_I2C_MspInit+0xb4>)
 8000dc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dc8:	f003 0302 	and.w	r3, r3, #2
 8000dcc:	613b      	str	r3, [r7, #16]
 8000dce:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000dd0:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000dd4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dd8:	2312      	movs	r3, #18
 8000dda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de4:	2303      	movs	r3, #3
 8000de6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dea:	2304      	movs	r3, #4
 8000dec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000df4:	4619      	mov	r1, r3
 8000df6:	480b      	ldr	r0, [pc, #44]	@ (8000e24 <HAL_I2C_MspInit+0xb8>)
 8000df8:	f001 fbac 	bl	8002554 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dfc:	4b08      	ldr	r3, [pc, #32]	@ (8000e20 <HAL_I2C_MspInit+0xb4>)
 8000dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e00:	4a07      	ldr	r2, [pc, #28]	@ (8000e20 <HAL_I2C_MspInit+0xb4>)
 8000e02:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e06:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e08:	4b05      	ldr	r3, [pc, #20]	@ (8000e20 <HAL_I2C_MspInit+0xb4>)
 8000e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000e14:	bf00      	nop
 8000e16:	37b0      	adds	r7, #176	@ 0xb0
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40005400 	.word	0x40005400
 8000e20:	40021000 	.word	0x40021000
 8000e24:	48000400 	.word	0x48000400

08000e28 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b0b2      	sub	sp, #200	@ 0xc8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e40:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e44:	2288      	movs	r2, #136	@ 0x88
 8000e46:	2100      	movs	r1, #0
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f004 fa2d 	bl	80052a8 <memset>
  if(huart->Instance==UART4)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a84      	ldr	r2, [pc, #528]	@ (8001064 <HAL_UART_MspInit+0x23c>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d13c      	bne.n	8000ed2 <HAL_UART_MspInit+0xaa>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000e58:	2308      	movs	r3, #8
 8000e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e64:	4618      	mov	r0, r3
 8000e66:	f002 fce5 	bl	8003834 <HAL_RCCEx_PeriphCLKConfig>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e70:	f7ff fee8 	bl	8000c44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000e74:	4b7c      	ldr	r3, [pc, #496]	@ (8001068 <HAL_UART_MspInit+0x240>)
 8000e76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e78:	4a7b      	ldr	r2, [pc, #492]	@ (8001068 <HAL_UART_MspInit+0x240>)
 8000e7a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000e7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e80:	4b79      	ldr	r3, [pc, #484]	@ (8001068 <HAL_UART_MspInit+0x240>)
 8000e82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e84:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000e88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8c:	4b76      	ldr	r3, [pc, #472]	@ (8001068 <HAL_UART_MspInit+0x240>)
 8000e8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e90:	4a75      	ldr	r2, [pc, #468]	@ (8001068 <HAL_UART_MspInit+0x240>)
 8000e92:	f043 0301 	orr.w	r3, r3, #1
 8000e96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e98:	4b73      	ldr	r3, [pc, #460]	@ (8001068 <HAL_UART_MspInit+0x240>)
 8000e9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e9c:	f003 0301 	and.w	r3, r3, #1
 8000ea0:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000ebc:	2308      	movs	r3, #8
 8000ebe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec2:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ecc:	f001 fb42 	bl	8002554 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ed0:	e0c4      	b.n	800105c <HAL_UART_MspInit+0x234>
  else if(huart->Instance==USART1)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a65      	ldr	r2, [pc, #404]	@ (800106c <HAL_UART_MspInit+0x244>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d13d      	bne.n	8000f58 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000edc:	2301      	movs	r3, #1
 8000ede:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ee4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f002 fca3 	bl	8003834 <HAL_RCCEx_PeriphCLKConfig>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8000ef4:	f7ff fea6 	bl	8000c44 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ef8:	4b5b      	ldr	r3, [pc, #364]	@ (8001068 <HAL_UART_MspInit+0x240>)
 8000efa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000efc:	4a5a      	ldr	r2, [pc, #360]	@ (8001068 <HAL_UART_MspInit+0x240>)
 8000efe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f02:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f04:	4b58      	ldr	r3, [pc, #352]	@ (8001068 <HAL_UART_MspInit+0x240>)
 8000f06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f0c:	623b      	str	r3, [r7, #32]
 8000f0e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f10:	4b55      	ldr	r3, [pc, #340]	@ (8001068 <HAL_UART_MspInit+0x240>)
 8000f12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f14:	4a54      	ldr	r2, [pc, #336]	@ (8001068 <HAL_UART_MspInit+0x240>)
 8000f16:	f043 0301 	orr.w	r3, r3, #1
 8000f1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f1c:	4b52      	ldr	r3, [pc, #328]	@ (8001068 <HAL_UART_MspInit+0x240>)
 8000f1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f20:	f003 0301 	and.w	r3, r3, #1
 8000f24:	61fb      	str	r3, [r7, #28]
 8000f26:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f28:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000f2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f30:	2302      	movs	r3, #2
 8000f32:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f42:	2307      	movs	r3, #7
 8000f44:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f48:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f52:	f001 faff 	bl	8002554 <HAL_GPIO_Init>
}
 8000f56:	e081      	b.n	800105c <HAL_UART_MspInit+0x234>
  else if(huart->Instance==USART2)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a44      	ldr	r2, [pc, #272]	@ (8001070 <HAL_UART_MspInit+0x248>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d13c      	bne.n	8000fdc <HAL_UART_MspInit+0x1b4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f62:	2302      	movs	r3, #2
 8000f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f66:	2300      	movs	r3, #0
 8000f68:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f6a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f002 fc60 	bl	8003834 <HAL_RCCEx_PeriphCLKConfig>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <HAL_UART_MspInit+0x156>
      Error_Handler();
 8000f7a:	f7ff fe63 	bl	8000c44 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f7e:	4b3a      	ldr	r3, [pc, #232]	@ (8001068 <HAL_UART_MspInit+0x240>)
 8000f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f82:	4a39      	ldr	r2, [pc, #228]	@ (8001068 <HAL_UART_MspInit+0x240>)
 8000f84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f88:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f8a:	4b37      	ldr	r3, [pc, #220]	@ (8001068 <HAL_UART_MspInit+0x240>)
 8000f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f92:	61bb      	str	r3, [r7, #24]
 8000f94:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f96:	4b34      	ldr	r3, [pc, #208]	@ (8001068 <HAL_UART_MspInit+0x240>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f9a:	4a33      	ldr	r2, [pc, #204]	@ (8001068 <HAL_UART_MspInit+0x240>)
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fa2:	4b31      	ldr	r3, [pc, #196]	@ (8001068 <HAL_UART_MspInit+0x240>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	617b      	str	r3, [r7, #20]
 8000fac:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fae:	230c      	movs	r3, #12
 8000fb0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fc6:	2307      	movs	r3, #7
 8000fc8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fcc:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fd6:	f001 fabd 	bl	8002554 <HAL_GPIO_Init>
}
 8000fda:	e03f      	b.n	800105c <HAL_UART_MspInit+0x234>
  else if(huart->Instance==USART3)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a24      	ldr	r2, [pc, #144]	@ (8001074 <HAL_UART_MspInit+0x24c>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d13a      	bne.n	800105c <HAL_UART_MspInit+0x234>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000fe6:	2304      	movs	r3, #4
 8000fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000fea:	2300      	movs	r3, #0
 8000fec:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f002 fc1e 	bl	8003834 <HAL_RCCEx_PeriphCLKConfig>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <HAL_UART_MspInit+0x1da>
      Error_Handler();
 8000ffe:	f7ff fe21 	bl	8000c44 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001002:	4b19      	ldr	r3, [pc, #100]	@ (8001068 <HAL_UART_MspInit+0x240>)
 8001004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001006:	4a18      	ldr	r2, [pc, #96]	@ (8001068 <HAL_UART_MspInit+0x240>)
 8001008:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800100c:	6593      	str	r3, [r2, #88]	@ 0x58
 800100e:	4b16      	ldr	r3, [pc, #88]	@ (8001068 <HAL_UART_MspInit+0x240>)
 8001010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001012:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001016:	613b      	str	r3, [r7, #16]
 8001018:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800101a:	4b13      	ldr	r3, [pc, #76]	@ (8001068 <HAL_UART_MspInit+0x240>)
 800101c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800101e:	4a12      	ldr	r2, [pc, #72]	@ (8001068 <HAL_UART_MspInit+0x240>)
 8001020:	f043 0304 	orr.w	r3, r3, #4
 8001024:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001026:	4b10      	ldr	r3, [pc, #64]	@ (8001068 <HAL_UART_MspInit+0x240>)
 8001028:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800102a:	f003 0304 	and.w	r3, r3, #4
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001032:	2330      	movs	r3, #48	@ 0x30
 8001034:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001038:	2302      	movs	r3, #2
 800103a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001044:	2303      	movs	r3, #3
 8001046:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800104a:	2307      	movs	r3, #7
 800104c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001050:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001054:	4619      	mov	r1, r3
 8001056:	4808      	ldr	r0, [pc, #32]	@ (8001078 <HAL_UART_MspInit+0x250>)
 8001058:	f001 fa7c 	bl	8002554 <HAL_GPIO_Init>
}
 800105c:	bf00      	nop
 800105e:	37c8      	adds	r7, #200	@ 0xc8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40004c00 	.word	0x40004c00
 8001068:	40021000 	.word	0x40021000
 800106c:	40013800 	.word	0x40013800
 8001070:	40004400 	.word	0x40004400
 8001074:	40004800 	.word	0x40004800
 8001078:	48000800 	.word	0x48000800

0800107c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001080:	bf00      	nop
 8001082:	e7fd      	b.n	8001080 <NMI_Handler+0x4>

08001084 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001088:	bf00      	nop
 800108a:	e7fd      	b.n	8001088 <HardFault_Handler+0x4>

0800108c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001090:	bf00      	nop
 8001092:	e7fd      	b.n	8001090 <MemManage_Handler+0x4>

08001094 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001098:	bf00      	nop
 800109a:	e7fd      	b.n	8001098 <BusFault_Handler+0x4>

0800109c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010a0:	bf00      	nop
 80010a2:	e7fd      	b.n	80010a0 <UsageFault_Handler+0x4>

080010a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010d2:	f000 f945 	bl	8001360 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}

080010da <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80010de:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80010e2:	f001 fbf9 	bl	80028d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}

080010ea <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b086      	sub	sp, #24
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	60f8      	str	r0, [r7, #12]
 80010f2:	60b9      	str	r1, [r7, #8]
 80010f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010f6:	2300      	movs	r3, #0
 80010f8:	617b      	str	r3, [r7, #20]
 80010fa:	e00a      	b.n	8001112 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010fc:	f3af 8000 	nop.w
 8001100:	4601      	mov	r1, r0
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	1c5a      	adds	r2, r3, #1
 8001106:	60ba      	str	r2, [r7, #8]
 8001108:	b2ca      	uxtb	r2, r1
 800110a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	3301      	adds	r3, #1
 8001110:	617b      	str	r3, [r7, #20]
 8001112:	697a      	ldr	r2, [r7, #20]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	429a      	cmp	r2, r3
 8001118:	dbf0      	blt.n	80010fc <_read+0x12>
  }

  return len;
 800111a:	687b      	ldr	r3, [r7, #4]
}
 800111c:	4618      	mov	r0, r3
 800111e:	3718      	adds	r7, #24
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]
 8001134:	e009      	b.n	800114a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	1c5a      	adds	r2, r3, #1
 800113a:	60ba      	str	r2, [r7, #8]
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	4618      	mov	r0, r3
 8001140:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	3301      	adds	r3, #1
 8001148:	617b      	str	r3, [r7, #20]
 800114a:	697a      	ldr	r2, [r7, #20]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	429a      	cmp	r2, r3
 8001150:	dbf1      	blt.n	8001136 <_write+0x12>
  }
  return len;
 8001152:	687b      	ldr	r3, [r7, #4]
}
 8001154:	4618      	mov	r0, r3
 8001156:	3718      	adds	r7, #24
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <_close>:

int _close(int file)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001164:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001168:	4618      	mov	r0, r3
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001184:	605a      	str	r2, [r3, #4]
  return 0;
 8001186:	2300      	movs	r3, #0
}
 8001188:	4618      	mov	r0, r3
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <_isatty>:

int _isatty(int file)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800119c:	2301      	movs	r3, #1
}
 800119e:	4618      	mov	r0, r3
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011aa:	b480      	push	{r7}
 80011ac:	b085      	sub	sp, #20
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	60f8      	str	r0, [r7, #12]
 80011b2:	60b9      	str	r1, [r7, #8]
 80011b4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011b6:	2300      	movs	r3, #0
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3714      	adds	r7, #20
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011cc:	4a14      	ldr	r2, [pc, #80]	@ (8001220 <_sbrk+0x5c>)
 80011ce:	4b15      	ldr	r3, [pc, #84]	@ (8001224 <_sbrk+0x60>)
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011d8:	4b13      	ldr	r3, [pc, #76]	@ (8001228 <_sbrk+0x64>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d102      	bne.n	80011e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011e0:	4b11      	ldr	r3, [pc, #68]	@ (8001228 <_sbrk+0x64>)
 80011e2:	4a12      	ldr	r2, [pc, #72]	@ (800122c <_sbrk+0x68>)
 80011e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011e6:	4b10      	ldr	r3, [pc, #64]	@ (8001228 <_sbrk+0x64>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4413      	add	r3, r2
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d207      	bcs.n	8001204 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011f4:	f004 f8a6 	bl	8005344 <__errno>
 80011f8:	4603      	mov	r3, r0
 80011fa:	220c      	movs	r2, #12
 80011fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001202:	e009      	b.n	8001218 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001204:	4b08      	ldr	r3, [pc, #32]	@ (8001228 <_sbrk+0x64>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800120a:	4b07      	ldr	r3, [pc, #28]	@ (8001228 <_sbrk+0x64>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4413      	add	r3, r2
 8001212:	4a05      	ldr	r2, [pc, #20]	@ (8001228 <_sbrk+0x64>)
 8001214:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001216:	68fb      	ldr	r3, [r7, #12]
}
 8001218:	4618      	mov	r0, r3
 800121a:	3718      	adds	r7, #24
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20018000 	.word	0x20018000
 8001224:	00000400 	.word	0x00000400
 8001228:	2000036c 	.word	0x2000036c
 800122c:	200004c0 	.word	0x200004c0

08001230 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001234:	4b06      	ldr	r3, [pc, #24]	@ (8001250 <SystemInit+0x20>)
 8001236:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800123a:	4a05      	ldr	r2, [pc, #20]	@ (8001250 <SystemInit+0x20>)
 800123c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001240:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001254:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800128c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001258:	f7ff ffea 	bl	8001230 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800125c:	480c      	ldr	r0, [pc, #48]	@ (8001290 <LoopForever+0x6>)
  ldr r1, =_edata
 800125e:	490d      	ldr	r1, [pc, #52]	@ (8001294 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001260:	4a0d      	ldr	r2, [pc, #52]	@ (8001298 <LoopForever+0xe>)
  movs r3, #0
 8001262:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001264:	e002      	b.n	800126c <LoopCopyDataInit>

08001266 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001266:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001268:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800126a:	3304      	adds	r3, #4

0800126c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800126c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800126e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001270:	d3f9      	bcc.n	8001266 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001272:	4a0a      	ldr	r2, [pc, #40]	@ (800129c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001274:	4c0a      	ldr	r4, [pc, #40]	@ (80012a0 <LoopForever+0x16>)
  movs r3, #0
 8001276:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001278:	e001      	b.n	800127e <LoopFillZerobss>

0800127a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800127a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800127c:	3204      	adds	r2, #4

0800127e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800127e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001280:	d3fb      	bcc.n	800127a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001282:	f004 f865 	bl	8005350 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001286:	f7ff fa4b 	bl	8000720 <main>

0800128a <LoopForever>:

LoopForever:
    b LoopForever
 800128a:	e7fe      	b.n	800128a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800128c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001290:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001294:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001298:	08005ec4 	.word	0x08005ec4
  ldr r2, =_sbss
 800129c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80012a0:	200004c0 	.word	0x200004c0

080012a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012a4:	e7fe      	b.n	80012a4 <ADC1_2_IRQHandler>
	...

080012a8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012ae:	2300      	movs	r3, #0
 80012b0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012b2:	4b0c      	ldr	r3, [pc, #48]	@ (80012e4 <HAL_Init+0x3c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a0b      	ldr	r2, [pc, #44]	@ (80012e4 <HAL_Init+0x3c>)
 80012b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012bc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012be:	2003      	movs	r0, #3
 80012c0:	f001 f906 	bl	80024d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012c4:	2000      	movs	r0, #0
 80012c6:	f000 f80f 	bl	80012e8 <HAL_InitTick>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d002      	beq.n	80012d6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	71fb      	strb	r3, [r7, #7]
 80012d4:	e001      	b.n	80012da <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012d6:	f7ff fcbb 	bl	8000c50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012da:	79fb      	ldrb	r3, [r7, #7]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40022000 	.word	0x40022000

080012e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012f0:	2300      	movs	r3, #0
 80012f2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80012f4:	4b17      	ldr	r3, [pc, #92]	@ (8001354 <HAL_InitTick+0x6c>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d023      	beq.n	8001344 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80012fc:	4b16      	ldr	r3, [pc, #88]	@ (8001358 <HAL_InitTick+0x70>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	4b14      	ldr	r3, [pc, #80]	@ (8001354 <HAL_InitTick+0x6c>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	4619      	mov	r1, r3
 8001306:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800130a:	fbb3 f3f1 	udiv	r3, r3, r1
 800130e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001312:	4618      	mov	r0, r3
 8001314:	f001 f911 	bl	800253a <HAL_SYSTICK_Config>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d10f      	bne.n	800133e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2b0f      	cmp	r3, #15
 8001322:	d809      	bhi.n	8001338 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001324:	2200      	movs	r2, #0
 8001326:	6879      	ldr	r1, [r7, #4]
 8001328:	f04f 30ff 	mov.w	r0, #4294967295
 800132c:	f001 f8db 	bl	80024e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001330:	4a0a      	ldr	r2, [pc, #40]	@ (800135c <HAL_InitTick+0x74>)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6013      	str	r3, [r2, #0]
 8001336:	e007      	b.n	8001348 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	73fb      	strb	r3, [r7, #15]
 800133c:	e004      	b.n	8001348 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	73fb      	strb	r3, [r7, #15]
 8001342:	e001      	b.n	8001348 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001348:	7bfb      	ldrb	r3, [r7, #15]
}
 800134a:	4618      	mov	r0, r3
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000008 	.word	0x20000008
 8001358:	20000000 	.word	0x20000000
 800135c:	20000004 	.word	0x20000004

08001360 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001364:	4b06      	ldr	r3, [pc, #24]	@ (8001380 <HAL_IncTick+0x20>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	461a      	mov	r2, r3
 800136a:	4b06      	ldr	r3, [pc, #24]	@ (8001384 <HAL_IncTick+0x24>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4413      	add	r3, r2
 8001370:	4a04      	ldr	r2, [pc, #16]	@ (8001384 <HAL_IncTick+0x24>)
 8001372:	6013      	str	r3, [r2, #0]
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	20000008 	.word	0x20000008
 8001384:	20000370 	.word	0x20000370

08001388 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  return uwTick;
 800138c:	4b03      	ldr	r3, [pc, #12]	@ (800139c <HAL_GetTick+0x14>)
 800138e:	681b      	ldr	r3, [r3, #0]
}
 8001390:	4618      	mov	r0, r3
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	20000370 	.word	0x20000370

080013a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013a8:	f7ff ffee 	bl	8001388 <HAL_GetTick>
 80013ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013b8:	d005      	beq.n	80013c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80013ba:	4b0a      	ldr	r3, [pc, #40]	@ (80013e4 <HAL_Delay+0x44>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	461a      	mov	r2, r3
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	4413      	add	r3, r2
 80013c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013c6:	bf00      	nop
 80013c8:	f7ff ffde 	bl	8001388 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	68fa      	ldr	r2, [r7, #12]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d8f7      	bhi.n	80013c8 <HAL_Delay+0x28>
  {
  }
}
 80013d8:	bf00      	nop
 80013da:	bf00      	nop
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000008 	.word	0x20000008

080013e8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	431a      	orrs	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	609a      	str	r2, [r3, #8]
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr

0800140e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800140e:	b480      	push	{r7}
 8001410:	b083      	sub	sp, #12
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
 8001416:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	431a      	orrs	r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	609a      	str	r2, [r3, #8]
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001444:	4618      	mov	r0, r3
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001450:	b480      	push	{r7}
 8001452:	b087      	sub	sp, #28
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
 800145c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	3360      	adds	r3, #96	@ 0x60
 8001462:	461a      	mov	r2, r3
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4413      	add	r3, r2
 800146a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	4b08      	ldr	r3, [pc, #32]	@ (8001494 <LL_ADC_SetOffset+0x44>)
 8001472:	4013      	ands	r3, r2
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800147a:	683a      	ldr	r2, [r7, #0]
 800147c:	430a      	orrs	r2, r1
 800147e:	4313      	orrs	r3, r2
 8001480:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001488:	bf00      	nop
 800148a:	371c      	adds	r7, #28
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	03fff000 	.word	0x03fff000

08001498 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	3360      	adds	r3, #96	@ 0x60
 80014a6:	461a      	mov	r2, r3
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	4413      	add	r3, r2
 80014ae:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3714      	adds	r7, #20
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b087      	sub	sp, #28
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	3360      	adds	r3, #96	@ 0x60
 80014d4:	461a      	mov	r2, r3
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	4413      	add	r3, r2
 80014dc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	431a      	orrs	r2, r3
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80014ee:	bf00      	nop
 80014f0:	371c      	adds	r7, #28
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80014fa:	b480      	push	{r7}
 80014fc:	b087      	sub	sp, #28
 80014fe:	af00      	add	r7, sp, #0
 8001500:	60f8      	str	r0, [r7, #12]
 8001502:	60b9      	str	r1, [r7, #8]
 8001504:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	3330      	adds	r3, #48	@ 0x30
 800150a:	461a      	mov	r2, r3
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	0a1b      	lsrs	r3, r3, #8
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	f003 030c 	and.w	r3, r3, #12
 8001516:	4413      	add	r3, r2
 8001518:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	f003 031f 	and.w	r3, r3, #31
 8001524:	211f      	movs	r1, #31
 8001526:	fa01 f303 	lsl.w	r3, r1, r3
 800152a:	43db      	mvns	r3, r3
 800152c:	401a      	ands	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	0e9b      	lsrs	r3, r3, #26
 8001532:	f003 011f 	and.w	r1, r3, #31
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	f003 031f 	and.w	r3, r3, #31
 800153c:	fa01 f303 	lsl.w	r3, r1, r3
 8001540:	431a      	orrs	r2, r3
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001546:	bf00      	nop
 8001548:	371c      	adds	r7, #28
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001552:	b480      	push	{r7}
 8001554:	b087      	sub	sp, #28
 8001556:	af00      	add	r7, sp, #0
 8001558:	60f8      	str	r0, [r7, #12]
 800155a:	60b9      	str	r1, [r7, #8]
 800155c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	3314      	adds	r3, #20
 8001562:	461a      	mov	r2, r3
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	0e5b      	lsrs	r3, r3, #25
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	f003 0304 	and.w	r3, r3, #4
 800156e:	4413      	add	r3, r2
 8001570:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	0d1b      	lsrs	r3, r3, #20
 800157a:	f003 031f 	and.w	r3, r3, #31
 800157e:	2107      	movs	r1, #7
 8001580:	fa01 f303 	lsl.w	r3, r1, r3
 8001584:	43db      	mvns	r3, r3
 8001586:	401a      	ands	r2, r3
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	0d1b      	lsrs	r3, r3, #20
 800158c:	f003 031f 	and.w	r3, r3, #31
 8001590:	6879      	ldr	r1, [r7, #4]
 8001592:	fa01 f303 	lsl.w	r3, r1, r3
 8001596:	431a      	orrs	r2, r3
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800159c:	bf00      	nop
 800159e:	371c      	adds	r7, #28
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015c0:	43db      	mvns	r3, r3
 80015c2:	401a      	ands	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f003 0318 	and.w	r3, r3, #24
 80015ca:	4908      	ldr	r1, [pc, #32]	@ (80015ec <LL_ADC_SetChannelSingleDiff+0x44>)
 80015cc:	40d9      	lsrs	r1, r3
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	400b      	ands	r3, r1
 80015d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015d6:	431a      	orrs	r2, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80015de:	bf00      	nop
 80015e0:	3714      	adds	r7, #20
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	0007ffff 	.word	0x0007ffff

080015f0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001600:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	6093      	str	r3, [r2, #8]
}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001624:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001628:	d101      	bne.n	800162e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800162a:	2301      	movs	r3, #1
 800162c:	e000      	b.n	8001630 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800162e:	2300      	movs	r3, #0
}
 8001630:	4618      	mov	r0, r3
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800164c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001650:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001674:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001678:	d101      	bne.n	800167e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800167a:	2301      	movs	r3, #1
 800167c:	e000      	b.n	8001680 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800167e:	2300      	movs	r3, #0
}
 8001680:	4618      	mov	r0, r3
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	2b01      	cmp	r3, #1
 800169e:	d101      	bne.n	80016a4 <LL_ADC_IsEnabled+0x18>
 80016a0:	2301      	movs	r3, #1
 80016a2:	e000      	b.n	80016a6 <LL_ADC_IsEnabled+0x1a>
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80016b2:	b480      	push	{r7}
 80016b4:	b083      	sub	sp, #12
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	f003 0304 	and.w	r3, r3, #4
 80016c2:	2b04      	cmp	r3, #4
 80016c4:	d101      	bne.n	80016ca <LL_ADC_REG_IsConversionOngoing+0x18>
 80016c6:	2301      	movs	r3, #1
 80016c8:	e000      	b.n	80016cc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80016ca:	2300      	movs	r3, #0
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f003 0308 	and.w	r3, r3, #8
 80016e8:	2b08      	cmp	r3, #8
 80016ea:	d101      	bne.n	80016f0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80016ec:	2301      	movs	r3, #1
 80016ee:	e000      	b.n	80016f2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
	...

08001700 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001700:	b590      	push	{r4, r7, lr}
 8001702:	b089      	sub	sp, #36	@ 0x24
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001708:	2300      	movs	r3, #0
 800170a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800170c:	2300      	movs	r3, #0
 800170e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d101      	bne.n	800171a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e130      	b.n	800197c <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	691b      	ldr	r3, [r3, #16]
 800171e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001724:	2b00      	cmp	r3, #0
 8001726:	d109      	bne.n	800173c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f7ff fab5 	bl	8000c98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff ff67 	bl	8001614 <LL_ADC_IsDeepPowerDownEnabled>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d004      	beq.n	8001756 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff ff4d 	bl	80015f0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff ff82 	bl	8001664 <LL_ADC_IsInternalRegulatorEnabled>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d115      	bne.n	8001792 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff ff66 	bl	800163c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001770:	4b84      	ldr	r3, [pc, #528]	@ (8001984 <HAL_ADC_Init+0x284>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	099b      	lsrs	r3, r3, #6
 8001776:	4a84      	ldr	r2, [pc, #528]	@ (8001988 <HAL_ADC_Init+0x288>)
 8001778:	fba2 2303 	umull	r2, r3, r2, r3
 800177c:	099b      	lsrs	r3, r3, #6
 800177e:	3301      	adds	r3, #1
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001784:	e002      	b.n	800178c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	3b01      	subs	r3, #1
 800178a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1f9      	bne.n	8001786 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff ff64 	bl	8001664 <LL_ADC_IsInternalRegulatorEnabled>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d10d      	bne.n	80017be <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017a6:	f043 0210 	orr.w	r2, r3, #16
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017b2:	f043 0201 	orr.w	r2, r3, #1
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff ff75 	bl	80016b2 <LL_ADC_REG_IsConversionOngoing>
 80017c8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017ce:	f003 0310 	and.w	r3, r3, #16
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f040 80c9 	bne.w	800196a <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f040 80c5 	bne.w	800196a <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017e4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80017e8:	f043 0202 	orr.w	r2, r3, #2
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff ff49 	bl	800168c <LL_ADC_IsEnabled>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d115      	bne.n	800182c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001800:	4862      	ldr	r0, [pc, #392]	@ (800198c <HAL_ADC_Init+0x28c>)
 8001802:	f7ff ff43 	bl	800168c <LL_ADC_IsEnabled>
 8001806:	4604      	mov	r4, r0
 8001808:	4861      	ldr	r0, [pc, #388]	@ (8001990 <HAL_ADC_Init+0x290>)
 800180a:	f7ff ff3f 	bl	800168c <LL_ADC_IsEnabled>
 800180e:	4603      	mov	r3, r0
 8001810:	431c      	orrs	r4, r3
 8001812:	4860      	ldr	r0, [pc, #384]	@ (8001994 <HAL_ADC_Init+0x294>)
 8001814:	f7ff ff3a 	bl	800168c <LL_ADC_IsEnabled>
 8001818:	4603      	mov	r3, r0
 800181a:	4323      	orrs	r3, r4
 800181c:	2b00      	cmp	r3, #0
 800181e:	d105      	bne.n	800182c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	4619      	mov	r1, r3
 8001826:	485c      	ldr	r0, [pc, #368]	@ (8001998 <HAL_ADC_Init+0x298>)
 8001828:	f7ff fdde 	bl	80013e8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	7e5b      	ldrb	r3, [r3, #25]
 8001830:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001836:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800183c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001842:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f893 3020 	ldrb.w	r3, [r3, #32]
 800184a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800184c:	4313      	orrs	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d106      	bne.n	8001868 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800185e:	3b01      	subs	r3, #1
 8001860:	045b      	lsls	r3, r3, #17
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	4313      	orrs	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800186c:	2b00      	cmp	r3, #0
 800186e:	d009      	beq.n	8001884 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001874:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800187c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4313      	orrs	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	68da      	ldr	r2, [r3, #12]
 800188a:	4b44      	ldr	r3, [pc, #272]	@ (800199c <HAL_ADC_Init+0x29c>)
 800188c:	4013      	ands	r3, r2
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	6812      	ldr	r2, [r2, #0]
 8001892:	69b9      	ldr	r1, [r7, #24]
 8001894:	430b      	orrs	r3, r1
 8001896:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff ff1b 	bl	80016d8 <LL_ADC_INJ_IsConversionOngoing>
 80018a2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d13d      	bne.n	8001926 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d13a      	bne.n	8001926 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80018b4:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80018bc:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80018be:	4313      	orrs	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80018cc:	f023 0302 	bic.w	r3, r3, #2
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	6812      	ldr	r2, [r2, #0]
 80018d4:	69b9      	ldr	r1, [r7, #24]
 80018d6:	430b      	orrs	r3, r1
 80018d8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d118      	bne.n	8001916 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80018ee:	f023 0304 	bic.w	r3, r3, #4
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80018fa:	4311      	orrs	r1, r2
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001900:	4311      	orrs	r1, r2
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001906:	430a      	orrs	r2, r1
 8001908:	431a      	orrs	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f042 0201 	orr.w	r2, r2, #1
 8001912:	611a      	str	r2, [r3, #16]
 8001914:	e007      	b.n	8001926 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	691a      	ldr	r2, [r3, #16]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f022 0201 	bic.w	r2, r2, #1
 8001924:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d10c      	bne.n	8001948 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001934:	f023 010f 	bic.w	r1, r3, #15
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	69db      	ldr	r3, [r3, #28]
 800193c:	1e5a      	subs	r2, r3, #1
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	430a      	orrs	r2, r1
 8001944:	631a      	str	r2, [r3, #48]	@ 0x30
 8001946:	e007      	b.n	8001958 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f022 020f 	bic.w	r2, r2, #15
 8001956:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800195c:	f023 0303 	bic.w	r3, r3, #3
 8001960:	f043 0201 	orr.w	r2, r3, #1
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	655a      	str	r2, [r3, #84]	@ 0x54
 8001968:	e007      	b.n	800197a <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800196e:	f043 0210 	orr.w	r2, r3, #16
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800197a:	7ffb      	ldrb	r3, [r7, #31]
}
 800197c:	4618      	mov	r0, r3
 800197e:	3724      	adds	r7, #36	@ 0x24
 8001980:	46bd      	mov	sp, r7
 8001982:	bd90      	pop	{r4, r7, pc}
 8001984:	20000000 	.word	0x20000000
 8001988:	053e2d63 	.word	0x053e2d63
 800198c:	50040000 	.word	0x50040000
 8001990:	50040100 	.word	0x50040100
 8001994:	50040200 	.word	0x50040200
 8001998:	50040300 	.word	0x50040300
 800199c:	fff0c007 	.word	0xfff0c007

080019a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b0b6      	sub	sp, #216	@ 0xd8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019aa:	2300      	movs	r3, #0
 80019ac:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d101      	bne.n	80019c2 <HAL_ADC_ConfigChannel+0x22>
 80019be:	2302      	movs	r3, #2
 80019c0:	e3c9      	b.n	8002156 <HAL_ADC_ConfigChannel+0x7b6>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2201      	movs	r2, #1
 80019c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff fe6f 	bl	80016b2 <LL_ADC_REG_IsConversionOngoing>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f040 83aa 	bne.w	8002130 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	2b05      	cmp	r3, #5
 80019ea:	d824      	bhi.n	8001a36 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	3b02      	subs	r3, #2
 80019f2:	2b03      	cmp	r3, #3
 80019f4:	d81b      	bhi.n	8001a2e <HAL_ADC_ConfigChannel+0x8e>
 80019f6:	a201      	add	r2, pc, #4	@ (adr r2, 80019fc <HAL_ADC_ConfigChannel+0x5c>)
 80019f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019fc:	08001a0d 	.word	0x08001a0d
 8001a00:	08001a15 	.word	0x08001a15
 8001a04:	08001a1d 	.word	0x08001a1d
 8001a08:	08001a25 	.word	0x08001a25
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001a0c:	230c      	movs	r3, #12
 8001a0e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001a12:	e010      	b.n	8001a36 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001a14:	2312      	movs	r3, #18
 8001a16:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001a1a:	e00c      	b.n	8001a36 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001a1c:	2318      	movs	r3, #24
 8001a1e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001a22:	e008      	b.n	8001a36 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001a24:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001a2c:	e003      	b.n	8001a36 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001a2e:	2306      	movs	r3, #6
 8001a30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001a34:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6818      	ldr	r0, [r3, #0]
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001a44:	f7ff fd59 	bl	80014fa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff fe30 	bl	80016b2 <LL_ADC_REG_IsConversionOngoing>
 8001a52:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff fe3c 	bl	80016d8 <LL_ADC_INJ_IsConversionOngoing>
 8001a60:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f040 81a4 	bne.w	8001db6 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f040 819f 	bne.w	8001db6 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6818      	ldr	r0, [r3, #0]
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	6819      	ldr	r1, [r3, #0]
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	461a      	mov	r2, r3
 8001a86:	f7ff fd64 	bl	8001552 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	695a      	ldr	r2, [r3, #20]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	08db      	lsrs	r3, r3, #3
 8001a96:	f003 0303 	and.w	r3, r3, #3
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	691b      	ldr	r3, [r3, #16]
 8001aa8:	2b04      	cmp	r3, #4
 8001aaa:	d00a      	beq.n	8001ac2 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6818      	ldr	r0, [r3, #0]
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	6919      	ldr	r1, [r3, #16]
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001abc:	f7ff fcc8 	bl	8001450 <LL_ADC_SetOffset>
 8001ac0:	e179      	b.n	8001db6 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff fce5 	bl	8001498 <LL_ADC_GetOffsetChannel>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d10a      	bne.n	8001aee <HAL_ADC_ConfigChannel+0x14e>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2100      	movs	r1, #0
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff fcda 	bl	8001498 <LL_ADC_GetOffsetChannel>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	0e9b      	lsrs	r3, r3, #26
 8001ae8:	f003 021f 	and.w	r2, r3, #31
 8001aec:	e01e      	b.n	8001b2c <HAL_ADC_ConfigChannel+0x18c>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2100      	movs	r1, #0
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff fccf 	bl	8001498 <LL_ADC_GetOffsetChannel>
 8001afa:	4603      	mov	r3, r0
 8001afc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b00:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001b04:	fa93 f3a3 	rbit	r3, r3
 8001b08:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b0c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001b10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001b14:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d101      	bne.n	8001b20 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001b1c:	2320      	movs	r3, #32
 8001b1e:	e004      	b.n	8001b2a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001b20:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001b24:	fab3 f383 	clz	r3, r3
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d105      	bne.n	8001b44 <HAL_ADC_ConfigChannel+0x1a4>
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	0e9b      	lsrs	r3, r3, #26
 8001b3e:	f003 031f 	and.w	r3, r3, #31
 8001b42:	e018      	b.n	8001b76 <HAL_ADC_ConfigChannel+0x1d6>
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001b50:	fa93 f3a3 	rbit	r3, r3
 8001b54:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001b58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001b5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001b60:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d101      	bne.n	8001b6c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001b68:	2320      	movs	r3, #32
 8001b6a:	e004      	b.n	8001b76 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001b6c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001b70:	fab3 f383 	clz	r3, r3
 8001b74:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d106      	bne.n	8001b88 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	2100      	movs	r1, #0
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff fc9e 	bl	80014c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff fc82 	bl	8001498 <LL_ADC_GetOffsetChannel>
 8001b94:	4603      	mov	r3, r0
 8001b96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d10a      	bne.n	8001bb4 <HAL_ADC_ConfigChannel+0x214>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff fc77 	bl	8001498 <LL_ADC_GetOffsetChannel>
 8001baa:	4603      	mov	r3, r0
 8001bac:	0e9b      	lsrs	r3, r3, #26
 8001bae:	f003 021f 	and.w	r2, r3, #31
 8001bb2:	e01e      	b.n	8001bf2 <HAL_ADC_ConfigChannel+0x252>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2101      	movs	r1, #1
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff fc6c 	bl	8001498 <LL_ADC_GetOffsetChannel>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001bca:	fa93 f3a3 	rbit	r3, r3
 8001bce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001bd2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001bd6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001bda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d101      	bne.n	8001be6 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001be2:	2320      	movs	r3, #32
 8001be4:	e004      	b.n	8001bf0 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001be6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001bea:	fab3 f383 	clz	r3, r3
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d105      	bne.n	8001c0a <HAL_ADC_ConfigChannel+0x26a>
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	0e9b      	lsrs	r3, r3, #26
 8001c04:	f003 031f 	and.w	r3, r3, #31
 8001c08:	e018      	b.n	8001c3c <HAL_ADC_ConfigChannel+0x29c>
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c12:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001c16:	fa93 f3a3 	rbit	r3, r3
 8001c1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001c1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001c22:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001c26:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001c2e:	2320      	movs	r3, #32
 8001c30:	e004      	b.n	8001c3c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001c32:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001c36:	fab3 f383 	clz	r3, r3
 8001c3a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d106      	bne.n	8001c4e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2200      	movs	r2, #0
 8001c46:	2101      	movs	r1, #1
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff fc3b 	bl	80014c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2102      	movs	r1, #2
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff fc1f 	bl	8001498 <LL_ADC_GetOffsetChannel>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d10a      	bne.n	8001c7a <HAL_ADC_ConfigChannel+0x2da>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2102      	movs	r1, #2
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff fc14 	bl	8001498 <LL_ADC_GetOffsetChannel>
 8001c70:	4603      	mov	r3, r0
 8001c72:	0e9b      	lsrs	r3, r3, #26
 8001c74:	f003 021f 	and.w	r2, r3, #31
 8001c78:	e01e      	b.n	8001cb8 <HAL_ADC_ConfigChannel+0x318>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2102      	movs	r1, #2
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff fc09 	bl	8001498 <LL_ADC_GetOffsetChannel>
 8001c86:	4603      	mov	r3, r0
 8001c88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001c90:	fa93 f3a3 	rbit	r3, r3
 8001c94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001c98:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001c9c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001ca0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d101      	bne.n	8001cac <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001ca8:	2320      	movs	r3, #32
 8001caa:	e004      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001cac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001cb0:	fab3 f383 	clz	r3, r3
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d105      	bne.n	8001cd0 <HAL_ADC_ConfigChannel+0x330>
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	0e9b      	lsrs	r3, r3, #26
 8001cca:	f003 031f 	and.w	r3, r3, #31
 8001cce:	e014      	b.n	8001cfa <HAL_ADC_ConfigChannel+0x35a>
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001cd8:	fa93 f3a3 	rbit	r3, r3
 8001cdc:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001cde:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001ce0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001ce4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d101      	bne.n	8001cf0 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001cec:	2320      	movs	r3, #32
 8001cee:	e004      	b.n	8001cfa <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001cf0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001cf4:	fab3 f383 	clz	r3, r3
 8001cf8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d106      	bne.n	8001d0c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2200      	movs	r2, #0
 8001d04:	2102      	movs	r1, #2
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff fbdc 	bl	80014c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2103      	movs	r1, #3
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff fbc0 	bl	8001498 <LL_ADC_GetOffsetChannel>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d10a      	bne.n	8001d38 <HAL_ADC_ConfigChannel+0x398>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2103      	movs	r1, #3
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff fbb5 	bl	8001498 <LL_ADC_GetOffsetChannel>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	0e9b      	lsrs	r3, r3, #26
 8001d32:	f003 021f 	and.w	r2, r3, #31
 8001d36:	e017      	b.n	8001d68 <HAL_ADC_ConfigChannel+0x3c8>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2103      	movs	r1, #3
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff fbaa 	bl	8001498 <LL_ADC_GetOffsetChannel>
 8001d44:	4603      	mov	r3, r0
 8001d46:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d48:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001d4a:	fa93 f3a3 	rbit	r3, r3
 8001d4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001d50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001d52:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001d54:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001d5a:	2320      	movs	r3, #32
 8001d5c:	e003      	b.n	8001d66 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001d5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001d60:	fab3 f383 	clz	r3, r3
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d105      	bne.n	8001d80 <HAL_ADC_ConfigChannel+0x3e0>
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	0e9b      	lsrs	r3, r3, #26
 8001d7a:	f003 031f 	and.w	r3, r3, #31
 8001d7e:	e011      	b.n	8001da4 <HAL_ADC_ConfigChannel+0x404>
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001d88:	fa93 f3a3 	rbit	r3, r3
 8001d8c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001d8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001d90:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001d92:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d101      	bne.n	8001d9c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001d98:	2320      	movs	r3, #32
 8001d9a:	e003      	b.n	8001da4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001d9c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001d9e:	fab3 f383 	clz	r3, r3
 8001da2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d106      	bne.n	8001db6 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2200      	movs	r2, #0
 8001dae:	2103      	movs	r1, #3
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff fb87 	bl	80014c4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff fc66 	bl	800168c <LL_ADC_IsEnabled>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f040 8140 	bne.w	8002048 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6818      	ldr	r0, [r3, #0]
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	6819      	ldr	r1, [r3, #0]
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	f7ff fbe7 	bl	80015a8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	4a8f      	ldr	r2, [pc, #572]	@ (800201c <HAL_ADC_ConfigChannel+0x67c>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	f040 8131 	bne.w	8002048 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10b      	bne.n	8001e0e <HAL_ADC_ConfigChannel+0x46e>
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	0e9b      	lsrs	r3, r3, #26
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	f003 031f 	and.w	r3, r3, #31
 8001e02:	2b09      	cmp	r3, #9
 8001e04:	bf94      	ite	ls
 8001e06:	2301      	movls	r3, #1
 8001e08:	2300      	movhi	r3, #0
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	e019      	b.n	8001e42 <HAL_ADC_ConfigChannel+0x4a2>
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001e16:	fa93 f3a3 	rbit	r3, r3
 8001e1a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001e1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001e20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001e26:	2320      	movs	r3, #32
 8001e28:	e003      	b.n	8001e32 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001e2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e2c:	fab3 f383 	clz	r3, r3
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	3301      	adds	r3, #1
 8001e34:	f003 031f 	and.w	r3, r3, #31
 8001e38:	2b09      	cmp	r3, #9
 8001e3a:	bf94      	ite	ls
 8001e3c:	2301      	movls	r3, #1
 8001e3e:	2300      	movhi	r3, #0
 8001e40:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d079      	beq.n	8001f3a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d107      	bne.n	8001e62 <HAL_ADC_ConfigChannel+0x4c2>
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	0e9b      	lsrs	r3, r3, #26
 8001e58:	3301      	adds	r3, #1
 8001e5a:	069b      	lsls	r3, r3, #26
 8001e5c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e60:	e015      	b.n	8001e8e <HAL_ADC_ConfigChannel+0x4ee>
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e6a:	fa93 f3a3 	rbit	r3, r3
 8001e6e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001e70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e72:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001e74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d101      	bne.n	8001e7e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001e7a:	2320      	movs	r3, #32
 8001e7c:	e003      	b.n	8001e86 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001e7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001e80:	fab3 f383 	clz	r3, r3
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	3301      	adds	r3, #1
 8001e88:	069b      	lsls	r3, r3, #26
 8001e8a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d109      	bne.n	8001eae <HAL_ADC_ConfigChannel+0x50e>
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	0e9b      	lsrs	r3, r3, #26
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	f003 031f 	and.w	r3, r3, #31
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8001eac:	e017      	b.n	8001ede <HAL_ADC_ConfigChannel+0x53e>
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001eb6:	fa93 f3a3 	rbit	r3, r3
 8001eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001ebc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ebe:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001ec0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d101      	bne.n	8001eca <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001ec6:	2320      	movs	r3, #32
 8001ec8:	e003      	b.n	8001ed2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001eca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ecc:	fab3 f383 	clz	r3, r3
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	f003 031f 	and.w	r3, r3, #31
 8001ed8:	2101      	movs	r1, #1
 8001eda:	fa01 f303 	lsl.w	r3, r1, r3
 8001ede:	ea42 0103 	orr.w	r1, r2, r3
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d10a      	bne.n	8001f04 <HAL_ADC_ConfigChannel+0x564>
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	0e9b      	lsrs	r3, r3, #26
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	f003 021f 	and.w	r2, r3, #31
 8001efa:	4613      	mov	r3, r2
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	4413      	add	r3, r2
 8001f00:	051b      	lsls	r3, r3, #20
 8001f02:	e018      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x596>
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f0c:	fa93 f3a3 	rbit	r3, r3
 8001f10:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f14:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001f16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d101      	bne.n	8001f20 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001f1c:	2320      	movs	r3, #32
 8001f1e:	e003      	b.n	8001f28 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f22:	fab3 f383 	clz	r3, r3
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	3301      	adds	r3, #1
 8001f2a:	f003 021f 	and.w	r2, r3, #31
 8001f2e:	4613      	mov	r3, r2
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	4413      	add	r3, r2
 8001f34:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f36:	430b      	orrs	r3, r1
 8001f38:	e081      	b.n	800203e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d107      	bne.n	8001f56 <HAL_ADC_ConfigChannel+0x5b6>
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	0e9b      	lsrs	r3, r3, #26
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	069b      	lsls	r3, r3, #26
 8001f50:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f54:	e015      	b.n	8001f82 <HAL_ADC_ConfigChannel+0x5e2>
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f5e:	fa93 f3a3 	rbit	r3, r3
 8001f62:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001f6e:	2320      	movs	r3, #32
 8001f70:	e003      	b.n	8001f7a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f74:	fab3 f383 	clz	r3, r3
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	069b      	lsls	r3, r3, #26
 8001f7e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d109      	bne.n	8001fa2 <HAL_ADC_ConfigChannel+0x602>
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	0e9b      	lsrs	r3, r3, #26
 8001f94:	3301      	adds	r3, #1
 8001f96:	f003 031f 	and.w	r3, r3, #31
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa0:	e017      	b.n	8001fd2 <HAL_ADC_ConfigChannel+0x632>
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	fa93 f3a3 	rbit	r3, r3
 8001fae:	61bb      	str	r3, [r7, #24]
  return result;
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001fb4:	6a3b      	ldr	r3, [r7, #32]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001fba:	2320      	movs	r3, #32
 8001fbc:	e003      	b.n	8001fc6 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001fbe:	6a3b      	ldr	r3, [r7, #32]
 8001fc0:	fab3 f383 	clz	r3, r3
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	f003 031f 	and.w	r3, r3, #31
 8001fcc:	2101      	movs	r1, #1
 8001fce:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd2:	ea42 0103 	orr.w	r1, r2, r3
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d10d      	bne.n	8001ffe <HAL_ADC_ConfigChannel+0x65e>
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	0e9b      	lsrs	r3, r3, #26
 8001fe8:	3301      	adds	r3, #1
 8001fea:	f003 021f 	and.w	r2, r3, #31
 8001fee:	4613      	mov	r3, r2
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	4413      	add	r3, r2
 8001ff4:	3b1e      	subs	r3, #30
 8001ff6:	051b      	lsls	r3, r3, #20
 8001ff8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001ffc:	e01e      	b.n	800203c <HAL_ADC_ConfigChannel+0x69c>
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	fa93 f3a3 	rbit	r3, r3
 800200a:	60fb      	str	r3, [r7, #12]
  return result;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d104      	bne.n	8002020 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002016:	2320      	movs	r3, #32
 8002018:	e006      	b.n	8002028 <HAL_ADC_ConfigChannel+0x688>
 800201a:	bf00      	nop
 800201c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	fab3 f383 	clz	r3, r3
 8002026:	b2db      	uxtb	r3, r3
 8002028:	3301      	adds	r3, #1
 800202a:	f003 021f 	and.w	r2, r3, #31
 800202e:	4613      	mov	r3, r2
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	4413      	add	r3, r2
 8002034:	3b1e      	subs	r3, #30
 8002036:	051b      	lsls	r3, r3, #20
 8002038:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800203c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002042:	4619      	mov	r1, r3
 8002044:	f7ff fa85 	bl	8001552 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	4b44      	ldr	r3, [pc, #272]	@ (8002160 <HAL_ADC_ConfigChannel+0x7c0>)
 800204e:	4013      	ands	r3, r2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d07a      	beq.n	800214a <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002054:	4843      	ldr	r0, [pc, #268]	@ (8002164 <HAL_ADC_ConfigChannel+0x7c4>)
 8002056:	f7ff f9ed 	bl	8001434 <LL_ADC_GetCommonPathInternalCh>
 800205a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a41      	ldr	r2, [pc, #260]	@ (8002168 <HAL_ADC_ConfigChannel+0x7c8>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d12c      	bne.n	80020c2 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002068:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800206c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d126      	bne.n	80020c2 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a3c      	ldr	r2, [pc, #240]	@ (800216c <HAL_ADC_ConfigChannel+0x7cc>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d004      	beq.n	8002088 <HAL_ADC_ConfigChannel+0x6e8>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a3b      	ldr	r2, [pc, #236]	@ (8002170 <HAL_ADC_ConfigChannel+0x7d0>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d15d      	bne.n	8002144 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002088:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800208c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002090:	4619      	mov	r1, r3
 8002092:	4834      	ldr	r0, [pc, #208]	@ (8002164 <HAL_ADC_ConfigChannel+0x7c4>)
 8002094:	f7ff f9bb 	bl	800140e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002098:	4b36      	ldr	r3, [pc, #216]	@ (8002174 <HAL_ADC_ConfigChannel+0x7d4>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	099b      	lsrs	r3, r3, #6
 800209e:	4a36      	ldr	r2, [pc, #216]	@ (8002178 <HAL_ADC_ConfigChannel+0x7d8>)
 80020a0:	fba2 2303 	umull	r2, r3, r2, r3
 80020a4:	099b      	lsrs	r3, r3, #6
 80020a6:	1c5a      	adds	r2, r3, #1
 80020a8:	4613      	mov	r3, r2
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	4413      	add	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80020b2:	e002      	b.n	80020ba <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	3b01      	subs	r3, #1
 80020b8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1f9      	bne.n	80020b4 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020c0:	e040      	b.n	8002144 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a2d      	ldr	r2, [pc, #180]	@ (800217c <HAL_ADC_ConfigChannel+0x7dc>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d118      	bne.n	80020fe <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80020cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80020d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d112      	bne.n	80020fe <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a23      	ldr	r2, [pc, #140]	@ (800216c <HAL_ADC_ConfigChannel+0x7cc>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d004      	beq.n	80020ec <HAL_ADC_ConfigChannel+0x74c>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a22      	ldr	r2, [pc, #136]	@ (8002170 <HAL_ADC_ConfigChannel+0x7d0>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d12d      	bne.n	8002148 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80020f0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020f4:	4619      	mov	r1, r3
 80020f6:	481b      	ldr	r0, [pc, #108]	@ (8002164 <HAL_ADC_ConfigChannel+0x7c4>)
 80020f8:	f7ff f989 	bl	800140e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80020fc:	e024      	b.n	8002148 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a1f      	ldr	r2, [pc, #124]	@ (8002180 <HAL_ADC_ConfigChannel+0x7e0>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d120      	bne.n	800214a <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002108:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800210c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d11a      	bne.n	800214a <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a14      	ldr	r2, [pc, #80]	@ (800216c <HAL_ADC_ConfigChannel+0x7cc>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d115      	bne.n	800214a <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800211e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002122:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002126:	4619      	mov	r1, r3
 8002128:	480e      	ldr	r0, [pc, #56]	@ (8002164 <HAL_ADC_ConfigChannel+0x7c4>)
 800212a:	f7ff f970 	bl	800140e <LL_ADC_SetCommonPathInternalCh>
 800212e:	e00c      	b.n	800214a <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002134:	f043 0220 	orr.w	r2, r3, #32
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002142:	e002      	b.n	800214a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002144:	bf00      	nop
 8002146:	e000      	b.n	800214a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002148:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002152:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002156:	4618      	mov	r0, r3
 8002158:	37d8      	adds	r7, #216	@ 0xd8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	80080000 	.word	0x80080000
 8002164:	50040300 	.word	0x50040300
 8002168:	c7520000 	.word	0xc7520000
 800216c:	50040000 	.word	0x50040000
 8002170:	50040200 	.word	0x50040200
 8002174:	20000000 	.word	0x20000000
 8002178:	053e2d63 	.word	0x053e2d63
 800217c:	cb840000 	.word	0xcb840000
 8002180:	80000001 	.word	0x80000001

08002184 <LL_ADC_IsEnabled>:
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	2b01      	cmp	r3, #1
 8002196:	d101      	bne.n	800219c <LL_ADC_IsEnabled+0x18>
 8002198:	2301      	movs	r3, #1
 800219a:	e000      	b.n	800219e <LL_ADC_IsEnabled+0x1a>
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <LL_ADC_REG_IsConversionOngoing>:
{
 80021aa:	b480      	push	{r7}
 80021ac:	b083      	sub	sp, #12
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f003 0304 	and.w	r3, r3, #4
 80021ba:	2b04      	cmp	r3, #4
 80021bc:	d101      	bne.n	80021c2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80021be:	2301      	movs	r3, #1
 80021c0:	e000      	b.n	80021c4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80021d0:	b590      	push	{r4, r7, lr}
 80021d2:	b09f      	sub	sp, #124	@ 0x7c
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021da:	2300      	movs	r3, #0
 80021dc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d101      	bne.n	80021ee <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80021ea:	2302      	movs	r3, #2
 80021ec:	e093      	b.n	8002316 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80021f6:	2300      	movs	r3, #0
 80021f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80021fa:	2300      	movs	r3, #0
 80021fc:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a47      	ldr	r2, [pc, #284]	@ (8002320 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d102      	bne.n	800220e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002208:	4b46      	ldr	r3, [pc, #280]	@ (8002324 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800220a:	60bb      	str	r3, [r7, #8]
 800220c:	e001      	b.n	8002212 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800220e:	2300      	movs	r3, #0
 8002210:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d10b      	bne.n	8002230 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800221c:	f043 0220 	orr.w	r2, r3, #32
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e072      	b.n	8002316 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff ffb9 	bl	80021aa <LL_ADC_REG_IsConversionOngoing>
 8002238:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff ffb3 	bl	80021aa <LL_ADC_REG_IsConversionOngoing>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d154      	bne.n	80022f4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800224a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800224c:	2b00      	cmp	r3, #0
 800224e:	d151      	bne.n	80022f4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002250:	4b35      	ldr	r3, [pc, #212]	@ (8002328 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002252:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d02c      	beq.n	80022b6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800225c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	6859      	ldr	r1, [r3, #4]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800226e:	035b      	lsls	r3, r3, #13
 8002270:	430b      	orrs	r3, r1
 8002272:	431a      	orrs	r2, r3
 8002274:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002276:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002278:	4829      	ldr	r0, [pc, #164]	@ (8002320 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800227a:	f7ff ff83 	bl	8002184 <LL_ADC_IsEnabled>
 800227e:	4604      	mov	r4, r0
 8002280:	4828      	ldr	r0, [pc, #160]	@ (8002324 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002282:	f7ff ff7f 	bl	8002184 <LL_ADC_IsEnabled>
 8002286:	4603      	mov	r3, r0
 8002288:	431c      	orrs	r4, r3
 800228a:	4828      	ldr	r0, [pc, #160]	@ (800232c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800228c:	f7ff ff7a 	bl	8002184 <LL_ADC_IsEnabled>
 8002290:	4603      	mov	r3, r0
 8002292:	4323      	orrs	r3, r4
 8002294:	2b00      	cmp	r3, #0
 8002296:	d137      	bne.n	8002308 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002298:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80022a0:	f023 030f 	bic.w	r3, r3, #15
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	6811      	ldr	r1, [r2, #0]
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	6892      	ldr	r2, [r2, #8]
 80022ac:	430a      	orrs	r2, r1
 80022ae:	431a      	orrs	r2, r3
 80022b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022b2:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80022b4:	e028      	b.n	8002308 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80022b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80022be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022c0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022c2:	4817      	ldr	r0, [pc, #92]	@ (8002320 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80022c4:	f7ff ff5e 	bl	8002184 <LL_ADC_IsEnabled>
 80022c8:	4604      	mov	r4, r0
 80022ca:	4816      	ldr	r0, [pc, #88]	@ (8002324 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80022cc:	f7ff ff5a 	bl	8002184 <LL_ADC_IsEnabled>
 80022d0:	4603      	mov	r3, r0
 80022d2:	431c      	orrs	r4, r3
 80022d4:	4815      	ldr	r0, [pc, #84]	@ (800232c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80022d6:	f7ff ff55 	bl	8002184 <LL_ADC_IsEnabled>
 80022da:	4603      	mov	r3, r0
 80022dc:	4323      	orrs	r3, r4
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d112      	bne.n	8002308 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80022e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80022ea:	f023 030f 	bic.w	r3, r3, #15
 80022ee:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80022f0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80022f2:	e009      	b.n	8002308 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022f8:	f043 0220 	orr.w	r2, r3, #32
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002306:	e000      	b.n	800230a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002308:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002312:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002316:	4618      	mov	r0, r3
 8002318:	377c      	adds	r7, #124	@ 0x7c
 800231a:	46bd      	mov	sp, r7
 800231c:	bd90      	pop	{r4, r7, pc}
 800231e:	bf00      	nop
 8002320:	50040000 	.word	0x50040000
 8002324:	50040100 	.word	0x50040100
 8002328:	50040300 	.word	0x50040300
 800232c:	50040200 	.word	0x50040200

08002330 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002340:	4b0c      	ldr	r3, [pc, #48]	@ (8002374 <__NVIC_SetPriorityGrouping+0x44>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800234c:	4013      	ands	r3, r2
 800234e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002358:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800235c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002360:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002362:	4a04      	ldr	r2, [pc, #16]	@ (8002374 <__NVIC_SetPriorityGrouping+0x44>)
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	60d3      	str	r3, [r2, #12]
}
 8002368:	bf00      	nop
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	e000ed00 	.word	0xe000ed00

08002378 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800237c:	4b04      	ldr	r3, [pc, #16]	@ (8002390 <__NVIC_GetPriorityGrouping+0x18>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	0a1b      	lsrs	r3, r3, #8
 8002382:	f003 0307 	and.w	r3, r3, #7
}
 8002386:	4618      	mov	r0, r3
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	e000ed00 	.word	0xe000ed00

08002394 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800239e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	db0b      	blt.n	80023be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023a6:	79fb      	ldrb	r3, [r7, #7]
 80023a8:	f003 021f 	and.w	r2, r3, #31
 80023ac:	4907      	ldr	r1, [pc, #28]	@ (80023cc <__NVIC_EnableIRQ+0x38>)
 80023ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b2:	095b      	lsrs	r3, r3, #5
 80023b4:	2001      	movs	r0, #1
 80023b6:	fa00 f202 	lsl.w	r2, r0, r2
 80023ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023be:	bf00      	nop
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	e000e100 	.word	0xe000e100

080023d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	6039      	str	r1, [r7, #0]
 80023da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	db0a      	blt.n	80023fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	b2da      	uxtb	r2, r3
 80023e8:	490c      	ldr	r1, [pc, #48]	@ (800241c <__NVIC_SetPriority+0x4c>)
 80023ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ee:	0112      	lsls	r2, r2, #4
 80023f0:	b2d2      	uxtb	r2, r2
 80023f2:	440b      	add	r3, r1
 80023f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023f8:	e00a      	b.n	8002410 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	4908      	ldr	r1, [pc, #32]	@ (8002420 <__NVIC_SetPriority+0x50>)
 8002400:	79fb      	ldrb	r3, [r7, #7]
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	3b04      	subs	r3, #4
 8002408:	0112      	lsls	r2, r2, #4
 800240a:	b2d2      	uxtb	r2, r2
 800240c:	440b      	add	r3, r1
 800240e:	761a      	strb	r2, [r3, #24]
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	e000e100 	.word	0xe000e100
 8002420:	e000ed00 	.word	0xe000ed00

08002424 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002424:	b480      	push	{r7}
 8002426:	b089      	sub	sp, #36	@ 0x24
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f003 0307 	and.w	r3, r3, #7
 8002436:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	f1c3 0307 	rsb	r3, r3, #7
 800243e:	2b04      	cmp	r3, #4
 8002440:	bf28      	it	cs
 8002442:	2304      	movcs	r3, #4
 8002444:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	3304      	adds	r3, #4
 800244a:	2b06      	cmp	r3, #6
 800244c:	d902      	bls.n	8002454 <NVIC_EncodePriority+0x30>
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	3b03      	subs	r3, #3
 8002452:	e000      	b.n	8002456 <NVIC_EncodePriority+0x32>
 8002454:	2300      	movs	r3, #0
 8002456:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002458:	f04f 32ff 	mov.w	r2, #4294967295
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	43da      	mvns	r2, r3
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	401a      	ands	r2, r3
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800246c:	f04f 31ff 	mov.w	r1, #4294967295
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	fa01 f303 	lsl.w	r3, r1, r3
 8002476:	43d9      	mvns	r1, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800247c:	4313      	orrs	r3, r2
         );
}
 800247e:	4618      	mov	r0, r3
 8002480:	3724      	adds	r7, #36	@ 0x24
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
	...

0800248c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3b01      	subs	r3, #1
 8002498:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800249c:	d301      	bcc.n	80024a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800249e:	2301      	movs	r3, #1
 80024a0:	e00f      	b.n	80024c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024a2:	4a0a      	ldr	r2, [pc, #40]	@ (80024cc <SysTick_Config+0x40>)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3b01      	subs	r3, #1
 80024a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024aa:	210f      	movs	r1, #15
 80024ac:	f04f 30ff 	mov.w	r0, #4294967295
 80024b0:	f7ff ff8e 	bl	80023d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024b4:	4b05      	ldr	r3, [pc, #20]	@ (80024cc <SysTick_Config+0x40>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ba:	4b04      	ldr	r3, [pc, #16]	@ (80024cc <SysTick_Config+0x40>)
 80024bc:	2207      	movs	r2, #7
 80024be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	e000e010 	.word	0xe000e010

080024d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f7ff ff29 	bl	8002330 <__NVIC_SetPriorityGrouping>
}
 80024de:	bf00      	nop
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b086      	sub	sp, #24
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	4603      	mov	r3, r0
 80024ee:	60b9      	str	r1, [r7, #8]
 80024f0:	607a      	str	r2, [r7, #4]
 80024f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024f4:	2300      	movs	r3, #0
 80024f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024f8:	f7ff ff3e 	bl	8002378 <__NVIC_GetPriorityGrouping>
 80024fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	68b9      	ldr	r1, [r7, #8]
 8002502:	6978      	ldr	r0, [r7, #20]
 8002504:	f7ff ff8e 	bl	8002424 <NVIC_EncodePriority>
 8002508:	4602      	mov	r2, r0
 800250a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800250e:	4611      	mov	r1, r2
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff ff5d 	bl	80023d0 <__NVIC_SetPriority>
}
 8002516:	bf00      	nop
 8002518:	3718      	adds	r7, #24
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b082      	sub	sp, #8
 8002522:	af00      	add	r7, sp, #0
 8002524:	4603      	mov	r3, r0
 8002526:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff ff31 	bl	8002394 <__NVIC_EnableIRQ>
}
 8002532:	bf00      	nop
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b082      	sub	sp, #8
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7ff ffa2 	bl	800248c <SysTick_Config>
 8002548:	4603      	mov	r3, r0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
	...

08002554 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002554:	b480      	push	{r7}
 8002556:	b087      	sub	sp, #28
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800255e:	2300      	movs	r3, #0
 8002560:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002562:	e17f      	b.n	8002864 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	2101      	movs	r1, #1
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	fa01 f303 	lsl.w	r3, r1, r3
 8002570:	4013      	ands	r3, r2
 8002572:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2b00      	cmp	r3, #0
 8002578:	f000 8171 	beq.w	800285e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f003 0303 	and.w	r3, r3, #3
 8002584:	2b01      	cmp	r3, #1
 8002586:	d005      	beq.n	8002594 <HAL_GPIO_Init+0x40>
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f003 0303 	and.w	r3, r3, #3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d130      	bne.n	80025f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	2203      	movs	r2, #3
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	43db      	mvns	r3, r3
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	4013      	ands	r3, r2
 80025aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	68da      	ldr	r2, [r3, #12]
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025ca:	2201      	movs	r2, #1
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	43db      	mvns	r3, r3
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	4013      	ands	r3, r2
 80025d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	091b      	lsrs	r3, r3, #4
 80025e0:	f003 0201 	and.w	r2, r3, #1
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f003 0303 	and.w	r3, r3, #3
 80025fe:	2b03      	cmp	r3, #3
 8002600:	d118      	bne.n	8002634 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002606:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002608:	2201      	movs	r2, #1
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	43db      	mvns	r3, r3
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	4013      	ands	r3, r2
 8002616:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	08db      	lsrs	r3, r3, #3
 800261e:	f003 0201 	and.w	r2, r3, #1
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	4313      	orrs	r3, r2
 800262c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f003 0303 	and.w	r3, r3, #3
 800263c:	2b03      	cmp	r3, #3
 800263e:	d017      	beq.n	8002670 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	2203      	movs	r2, #3
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	43db      	mvns	r3, r3
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	4013      	ands	r3, r2
 8002656:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	689a      	ldr	r2, [r3, #8]
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	4313      	orrs	r3, r2
 8002668:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f003 0303 	and.w	r3, r3, #3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d123      	bne.n	80026c4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	08da      	lsrs	r2, r3, #3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	3208      	adds	r2, #8
 8002684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002688:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	f003 0307 	and.w	r3, r3, #7
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	220f      	movs	r2, #15
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	43db      	mvns	r3, r3
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	4013      	ands	r3, r2
 800269e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	691a      	ldr	r2, [r3, #16]
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	f003 0307 	and.w	r3, r3, #7
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	08da      	lsrs	r2, r3, #3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	3208      	adds	r2, #8
 80026be:	6939      	ldr	r1, [r7, #16]
 80026c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	2203      	movs	r2, #3
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	43db      	mvns	r3, r3
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	4013      	ands	r3, r2
 80026da:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f003 0203 	and.w	r2, r3, #3
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002700:	2b00      	cmp	r3, #0
 8002702:	f000 80ac 	beq.w	800285e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002706:	4b5f      	ldr	r3, [pc, #380]	@ (8002884 <HAL_GPIO_Init+0x330>)
 8002708:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800270a:	4a5e      	ldr	r2, [pc, #376]	@ (8002884 <HAL_GPIO_Init+0x330>)
 800270c:	f043 0301 	orr.w	r3, r3, #1
 8002710:	6613      	str	r3, [r2, #96]	@ 0x60
 8002712:	4b5c      	ldr	r3, [pc, #368]	@ (8002884 <HAL_GPIO_Init+0x330>)
 8002714:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	60bb      	str	r3, [r7, #8]
 800271c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800271e:	4a5a      	ldr	r2, [pc, #360]	@ (8002888 <HAL_GPIO_Init+0x334>)
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	089b      	lsrs	r3, r3, #2
 8002724:	3302      	adds	r3, #2
 8002726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800272a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	f003 0303 	and.w	r3, r3, #3
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	220f      	movs	r2, #15
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	43db      	mvns	r3, r3
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	4013      	ands	r3, r2
 8002740:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002748:	d025      	beq.n	8002796 <HAL_GPIO_Init+0x242>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a4f      	ldr	r2, [pc, #316]	@ (800288c <HAL_GPIO_Init+0x338>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d01f      	beq.n	8002792 <HAL_GPIO_Init+0x23e>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a4e      	ldr	r2, [pc, #312]	@ (8002890 <HAL_GPIO_Init+0x33c>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d019      	beq.n	800278e <HAL_GPIO_Init+0x23a>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a4d      	ldr	r2, [pc, #308]	@ (8002894 <HAL_GPIO_Init+0x340>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d013      	beq.n	800278a <HAL_GPIO_Init+0x236>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a4c      	ldr	r2, [pc, #304]	@ (8002898 <HAL_GPIO_Init+0x344>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d00d      	beq.n	8002786 <HAL_GPIO_Init+0x232>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a4b      	ldr	r2, [pc, #300]	@ (800289c <HAL_GPIO_Init+0x348>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d007      	beq.n	8002782 <HAL_GPIO_Init+0x22e>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a4a      	ldr	r2, [pc, #296]	@ (80028a0 <HAL_GPIO_Init+0x34c>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d101      	bne.n	800277e <HAL_GPIO_Init+0x22a>
 800277a:	2306      	movs	r3, #6
 800277c:	e00c      	b.n	8002798 <HAL_GPIO_Init+0x244>
 800277e:	2307      	movs	r3, #7
 8002780:	e00a      	b.n	8002798 <HAL_GPIO_Init+0x244>
 8002782:	2305      	movs	r3, #5
 8002784:	e008      	b.n	8002798 <HAL_GPIO_Init+0x244>
 8002786:	2304      	movs	r3, #4
 8002788:	e006      	b.n	8002798 <HAL_GPIO_Init+0x244>
 800278a:	2303      	movs	r3, #3
 800278c:	e004      	b.n	8002798 <HAL_GPIO_Init+0x244>
 800278e:	2302      	movs	r3, #2
 8002790:	e002      	b.n	8002798 <HAL_GPIO_Init+0x244>
 8002792:	2301      	movs	r3, #1
 8002794:	e000      	b.n	8002798 <HAL_GPIO_Init+0x244>
 8002796:	2300      	movs	r3, #0
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	f002 0203 	and.w	r2, r2, #3
 800279e:	0092      	lsls	r2, r2, #2
 80027a0:	4093      	lsls	r3, r2
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80027a8:	4937      	ldr	r1, [pc, #220]	@ (8002888 <HAL_GPIO_Init+0x334>)
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	089b      	lsrs	r3, r3, #2
 80027ae:	3302      	adds	r3, #2
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027b6:	4b3b      	ldr	r3, [pc, #236]	@ (80028a4 <HAL_GPIO_Init+0x350>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	43db      	mvns	r3, r3
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	4013      	ands	r3, r2
 80027c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027da:	4a32      	ldr	r2, [pc, #200]	@ (80028a4 <HAL_GPIO_Init+0x350>)
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80027e0:	4b30      	ldr	r3, [pc, #192]	@ (80028a4 <HAL_GPIO_Init+0x350>)
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	43db      	mvns	r3, r3
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	4013      	ands	r3, r2
 80027ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d003      	beq.n	8002804 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	4313      	orrs	r3, r2
 8002802:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002804:	4a27      	ldr	r2, [pc, #156]	@ (80028a4 <HAL_GPIO_Init+0x350>)
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800280a:	4b26      	ldr	r3, [pc, #152]	@ (80028a4 <HAL_GPIO_Init+0x350>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	43db      	mvns	r3, r3
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	4013      	ands	r3, r2
 8002818:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d003      	beq.n	800282e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	4313      	orrs	r3, r2
 800282c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800282e:	4a1d      	ldr	r2, [pc, #116]	@ (80028a4 <HAL_GPIO_Init+0x350>)
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002834:	4b1b      	ldr	r3, [pc, #108]	@ (80028a4 <HAL_GPIO_Init+0x350>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	43db      	mvns	r3, r3
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	4013      	ands	r3, r2
 8002842:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d003      	beq.n	8002858 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	4313      	orrs	r3, r2
 8002856:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002858:	4a12      	ldr	r2, [pc, #72]	@ (80028a4 <HAL_GPIO_Init+0x350>)
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	3301      	adds	r3, #1
 8002862:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	fa22 f303 	lsr.w	r3, r2, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	f47f ae78 	bne.w	8002564 <HAL_GPIO_Init+0x10>
  }
}
 8002874:	bf00      	nop
 8002876:	bf00      	nop
 8002878:	371c      	adds	r7, #28
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	40021000 	.word	0x40021000
 8002888:	40010000 	.word	0x40010000
 800288c:	48000400 	.word	0x48000400
 8002890:	48000800 	.word	0x48000800
 8002894:	48000c00 	.word	0x48000c00
 8002898:	48001000 	.word	0x48001000
 800289c:	48001400 	.word	0x48001400
 80028a0:	48001800 	.word	0x48001800
 80028a4:	40010400 	.word	0x40010400

080028a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	460b      	mov	r3, r1
 80028b2:	807b      	strh	r3, [r7, #2]
 80028b4:	4613      	mov	r3, r2
 80028b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028b8:	787b      	ldrb	r3, [r7, #1]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d003      	beq.n	80028c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028be:	887a      	ldrh	r2, [r7, #2]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028c4:	e002      	b.n	80028cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028c6:	887a      	ldrh	r2, [r7, #2]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	4603      	mov	r3, r0
 80028e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80028e2:	4b08      	ldr	r3, [pc, #32]	@ (8002904 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028e4:	695a      	ldr	r2, [r3, #20]
 80028e6:	88fb      	ldrh	r3, [r7, #6]
 80028e8:	4013      	ands	r3, r2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d006      	beq.n	80028fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028ee:	4a05      	ldr	r2, [pc, #20]	@ (8002904 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028f0:	88fb      	ldrh	r3, [r7, #6]
 80028f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028f4:	88fb      	ldrh	r3, [r7, #6]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7fd fef6 	bl	80006e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80028fc:	bf00      	nop
 80028fe:	3708      	adds	r7, #8
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	40010400 	.word	0x40010400

08002908 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e08d      	b.n	8002a36 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d106      	bne.n	8002934 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f7fe fa1c 	bl	8000d6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2224      	movs	r2, #36	@ 0x24
 8002938:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f022 0201 	bic.w	r2, r2, #1
 800294a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002958:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002968:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d107      	bne.n	8002982 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	689a      	ldr	r2, [r3, #8]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800297e:	609a      	str	r2, [r3, #8]
 8002980:	e006      	b.n	8002990 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	689a      	ldr	r2, [r3, #8]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800298e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	2b02      	cmp	r3, #2
 8002996:	d108      	bne.n	80029aa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	685a      	ldr	r2, [r3, #4]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029a6:	605a      	str	r2, [r3, #4]
 80029a8:	e007      	b.n	80029ba <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	685a      	ldr	r2, [r3, #4]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	6812      	ldr	r2, [r2, #0]
 80029c4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80029c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68da      	ldr	r2, [r3, #12]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	691a      	ldr	r2, [r3, #16]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	430a      	orrs	r2, r1
 80029f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	69d9      	ldr	r1, [r3, #28]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a1a      	ldr	r2, [r3, #32]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	430a      	orrs	r2, r1
 8002a06:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f042 0201 	orr.w	r2, r2, #1
 8002a16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2220      	movs	r2, #32
 8002a22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b083      	sub	sp, #12
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
 8002a46:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2b20      	cmp	r3, #32
 8002a52:	d138      	bne.n	8002ac6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d101      	bne.n	8002a62 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a5e:	2302      	movs	r3, #2
 8002a60:	e032      	b.n	8002ac8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2224      	movs	r2, #36	@ 0x24
 8002a6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 0201 	bic.w	r2, r2, #1
 8002a80:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002a90:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	6819      	ldr	r1, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	683a      	ldr	r2, [r7, #0]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f042 0201 	orr.w	r2, r2, #1
 8002ab0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2220      	movs	r2, #32
 8002ab6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	e000      	b.n	8002ac8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ac6:	2302      	movs	r3, #2
  }
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b20      	cmp	r3, #32
 8002ae8:	d139      	bne.n	8002b5e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d101      	bne.n	8002af8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002af4:	2302      	movs	r3, #2
 8002af6:	e033      	b.n	8002b60 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2224      	movs	r2, #36	@ 0x24
 8002b04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f022 0201 	bic.w	r2, r2, #1
 8002b16:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002b26:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	021b      	lsls	r3, r3, #8
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f042 0201 	orr.w	r2, r2, #1
 8002b48:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2220      	movs	r2, #32
 8002b4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	e000      	b.n	8002b60 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002b5e:	2302      	movs	r3, #2
  }
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3714      	adds	r7, #20
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002b70:	4b04      	ldr	r3, [pc, #16]	@ (8002b84 <HAL_PWREx_GetVoltageRange+0x18>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	40007000 	.word	0x40007000

08002b88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b96:	d130      	bne.n	8002bfa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b98:	4b23      	ldr	r3, [pc, #140]	@ (8002c28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ba0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ba4:	d038      	beq.n	8002c18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ba6:	4b20      	ldr	r3, [pc, #128]	@ (8002c28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002bae:	4a1e      	ldr	r2, [pc, #120]	@ (8002c28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bb0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002bb4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002bb6:	4b1d      	ldr	r3, [pc, #116]	@ (8002c2c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2232      	movs	r2, #50	@ 0x32
 8002bbc:	fb02 f303 	mul.w	r3, r2, r3
 8002bc0:	4a1b      	ldr	r2, [pc, #108]	@ (8002c30 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc6:	0c9b      	lsrs	r3, r3, #18
 8002bc8:	3301      	adds	r3, #1
 8002bca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bcc:	e002      	b.n	8002bd4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bd4:	4b14      	ldr	r3, [pc, #80]	@ (8002c28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002be0:	d102      	bne.n	8002be8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1f2      	bne.n	8002bce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002be8:	4b0f      	ldr	r3, [pc, #60]	@ (8002c28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bea:	695b      	ldr	r3, [r3, #20]
 8002bec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bf0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bf4:	d110      	bne.n	8002c18 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e00f      	b.n	8002c1a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8002c28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002c02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c06:	d007      	beq.n	8002c18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c08:	4b07      	ldr	r3, [pc, #28]	@ (8002c28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c10:	4a05      	ldr	r2, [pc, #20]	@ (8002c28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c16:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3714      	adds	r7, #20
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	40007000 	.word	0x40007000
 8002c2c:	20000000 	.word	0x20000000
 8002c30:	431bde83 	.word	0x431bde83

08002c34 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b088      	sub	sp, #32
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e3ca      	b.n	80033dc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c46:	4b97      	ldr	r3, [pc, #604]	@ (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 030c 	and.w	r3, r3, #12
 8002c4e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c50:	4b94      	ldr	r3, [pc, #592]	@ (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	f003 0303 	and.w	r3, r3, #3
 8002c58:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0310 	and.w	r3, r3, #16
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f000 80e4 	beq.w	8002e30 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d007      	beq.n	8002c7e <HAL_RCC_OscConfig+0x4a>
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	2b0c      	cmp	r3, #12
 8002c72:	f040 808b 	bne.w	8002d8c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	f040 8087 	bne.w	8002d8c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c7e:	4b89      	ldr	r3, [pc, #548]	@ (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d005      	beq.n	8002c96 <HAL_RCC_OscConfig+0x62>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e3a2      	b.n	80033dc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a1a      	ldr	r2, [r3, #32]
 8002c9a:	4b82      	ldr	r3, [pc, #520]	@ (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0308 	and.w	r3, r3, #8
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d004      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x7c>
 8002ca6:	4b7f      	ldr	r3, [pc, #508]	@ (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002cae:	e005      	b.n	8002cbc <HAL_RCC_OscConfig+0x88>
 8002cb0:	4b7c      	ldr	r3, [pc, #496]	@ (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002cb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cb6:	091b      	lsrs	r3, r3, #4
 8002cb8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d223      	bcs.n	8002d08 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f000 fd55 	bl	8003774 <RCC_SetFlashLatencyFromMSIRange>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e383      	b.n	80033dc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cd4:	4b73      	ldr	r3, [pc, #460]	@ (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a72      	ldr	r2, [pc, #456]	@ (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002cda:	f043 0308 	orr.w	r3, r3, #8
 8002cde:	6013      	str	r3, [r2, #0]
 8002ce0:	4b70      	ldr	r3, [pc, #448]	@ (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a1b      	ldr	r3, [r3, #32]
 8002cec:	496d      	ldr	r1, [pc, #436]	@ (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cf2:	4b6c      	ldr	r3, [pc, #432]	@ (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	69db      	ldr	r3, [r3, #28]
 8002cfe:	021b      	lsls	r3, r3, #8
 8002d00:	4968      	ldr	r1, [pc, #416]	@ (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	604b      	str	r3, [r1, #4]
 8002d06:	e025      	b.n	8002d54 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d08:	4b66      	ldr	r3, [pc, #408]	@ (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a65      	ldr	r2, [pc, #404]	@ (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002d0e:	f043 0308 	orr.w	r3, r3, #8
 8002d12:	6013      	str	r3, [r2, #0]
 8002d14:	4b63      	ldr	r3, [pc, #396]	@ (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a1b      	ldr	r3, [r3, #32]
 8002d20:	4960      	ldr	r1, [pc, #384]	@ (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d26:	4b5f      	ldr	r3, [pc, #380]	@ (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	021b      	lsls	r3, r3, #8
 8002d34:	495b      	ldr	r1, [pc, #364]	@ (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d109      	bne.n	8002d54 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f000 fd15 	bl	8003774 <RCC_SetFlashLatencyFromMSIRange>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e343      	b.n	80033dc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d54:	f000 fc4a 	bl	80035ec <HAL_RCC_GetSysClockFreq>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	4b52      	ldr	r3, [pc, #328]	@ (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	091b      	lsrs	r3, r3, #4
 8002d60:	f003 030f 	and.w	r3, r3, #15
 8002d64:	4950      	ldr	r1, [pc, #320]	@ (8002ea8 <HAL_RCC_OscConfig+0x274>)
 8002d66:	5ccb      	ldrb	r3, [r1, r3]
 8002d68:	f003 031f 	and.w	r3, r3, #31
 8002d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d70:	4a4e      	ldr	r2, [pc, #312]	@ (8002eac <HAL_RCC_OscConfig+0x278>)
 8002d72:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002d74:	4b4e      	ldr	r3, [pc, #312]	@ (8002eb0 <HAL_RCC_OscConfig+0x27c>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7fe fab5 	bl	80012e8 <HAL_InitTick>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002d82:	7bfb      	ldrb	r3, [r7, #15]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d052      	beq.n	8002e2e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002d88:	7bfb      	ldrb	r3, [r7, #15]
 8002d8a:	e327      	b.n	80033dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d032      	beq.n	8002dfa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d94:	4b43      	ldr	r3, [pc, #268]	@ (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a42      	ldr	r2, [pc, #264]	@ (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002d9a:	f043 0301 	orr.w	r3, r3, #1
 8002d9e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002da0:	f7fe faf2 	bl	8001388 <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002da8:	f7fe faee 	bl	8001388 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e310      	b.n	80033dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002dba:	4b3a      	ldr	r3, [pc, #232]	@ (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d0f0      	beq.n	8002da8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dc6:	4b37      	ldr	r3, [pc, #220]	@ (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a36      	ldr	r2, [pc, #216]	@ (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002dcc:	f043 0308 	orr.w	r3, r3, #8
 8002dd0:	6013      	str	r3, [r2, #0]
 8002dd2:	4b34      	ldr	r3, [pc, #208]	@ (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	4931      	ldr	r1, [pc, #196]	@ (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002de4:	4b2f      	ldr	r3, [pc, #188]	@ (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	69db      	ldr	r3, [r3, #28]
 8002df0:	021b      	lsls	r3, r3, #8
 8002df2:	492c      	ldr	r1, [pc, #176]	@ (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	604b      	str	r3, [r1, #4]
 8002df8:	e01a      	b.n	8002e30 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002dfa:	4b2a      	ldr	r3, [pc, #168]	@ (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a29      	ldr	r2, [pc, #164]	@ (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002e00:	f023 0301 	bic.w	r3, r3, #1
 8002e04:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e06:	f7fe fabf 	bl	8001388 <HAL_GetTick>
 8002e0a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e0c:	e008      	b.n	8002e20 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e0e:	f7fe fabb 	bl	8001388 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d901      	bls.n	8002e20 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e2dd      	b.n	80033dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e20:	4b20      	ldr	r3, [pc, #128]	@ (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1f0      	bne.n	8002e0e <HAL_RCC_OscConfig+0x1da>
 8002e2c:	e000      	b.n	8002e30 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e2e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d074      	beq.n	8002f26 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	2b08      	cmp	r3, #8
 8002e40:	d005      	beq.n	8002e4e <HAL_RCC_OscConfig+0x21a>
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	2b0c      	cmp	r3, #12
 8002e46:	d10e      	bne.n	8002e66 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	2b03      	cmp	r3, #3
 8002e4c:	d10b      	bne.n	8002e66 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e4e:	4b15      	ldr	r3, [pc, #84]	@ (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d064      	beq.n	8002f24 <HAL_RCC_OscConfig+0x2f0>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d160      	bne.n	8002f24 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e2ba      	b.n	80033dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e6e:	d106      	bne.n	8002e7e <HAL_RCC_OscConfig+0x24a>
 8002e70:	4b0c      	ldr	r3, [pc, #48]	@ (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a0b      	ldr	r2, [pc, #44]	@ (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002e76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e7a:	6013      	str	r3, [r2, #0]
 8002e7c:	e026      	b.n	8002ecc <HAL_RCC_OscConfig+0x298>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e86:	d115      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x280>
 8002e88:	4b06      	ldr	r3, [pc, #24]	@ (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a05      	ldr	r2, [pc, #20]	@ (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002e8e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e92:	6013      	str	r3, [r2, #0]
 8002e94:	4b03      	ldr	r3, [pc, #12]	@ (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a02      	ldr	r2, [pc, #8]	@ (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002e9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e9e:	6013      	str	r3, [r2, #0]
 8002ea0:	e014      	b.n	8002ecc <HAL_RCC_OscConfig+0x298>
 8002ea2:	bf00      	nop
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	08005e38 	.word	0x08005e38
 8002eac:	20000000 	.word	0x20000000
 8002eb0:	20000004 	.word	0x20000004
 8002eb4:	4ba0      	ldr	r3, [pc, #640]	@ (8003138 <HAL_RCC_OscConfig+0x504>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a9f      	ldr	r2, [pc, #636]	@ (8003138 <HAL_RCC_OscConfig+0x504>)
 8002eba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ebe:	6013      	str	r3, [r2, #0]
 8002ec0:	4b9d      	ldr	r3, [pc, #628]	@ (8003138 <HAL_RCC_OscConfig+0x504>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a9c      	ldr	r2, [pc, #624]	@ (8003138 <HAL_RCC_OscConfig+0x504>)
 8002ec6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002eca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d013      	beq.n	8002efc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed4:	f7fe fa58 	bl	8001388 <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002edc:	f7fe fa54 	bl	8001388 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b64      	cmp	r3, #100	@ 0x64
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e276      	b.n	80033dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002eee:	4b92      	ldr	r3, [pc, #584]	@ (8003138 <HAL_RCC_OscConfig+0x504>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d0f0      	beq.n	8002edc <HAL_RCC_OscConfig+0x2a8>
 8002efa:	e014      	b.n	8002f26 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002efc:	f7fe fa44 	bl	8001388 <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f04:	f7fe fa40 	bl	8001388 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b64      	cmp	r3, #100	@ 0x64
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e262      	b.n	80033dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f16:	4b88      	ldr	r3, [pc, #544]	@ (8003138 <HAL_RCC_OscConfig+0x504>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1f0      	bne.n	8002f04 <HAL_RCC_OscConfig+0x2d0>
 8002f22:	e000      	b.n	8002f26 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d060      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	2b04      	cmp	r3, #4
 8002f36:	d005      	beq.n	8002f44 <HAL_RCC_OscConfig+0x310>
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	2b0c      	cmp	r3, #12
 8002f3c:	d119      	bne.n	8002f72 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d116      	bne.n	8002f72 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f44:	4b7c      	ldr	r3, [pc, #496]	@ (8003138 <HAL_RCC_OscConfig+0x504>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d005      	beq.n	8002f5c <HAL_RCC_OscConfig+0x328>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d101      	bne.n	8002f5c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e23f      	b.n	80033dc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f5c:	4b76      	ldr	r3, [pc, #472]	@ (8003138 <HAL_RCC_OscConfig+0x504>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	061b      	lsls	r3, r3, #24
 8002f6a:	4973      	ldr	r1, [pc, #460]	@ (8003138 <HAL_RCC_OscConfig+0x504>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f70:	e040      	b.n	8002ff4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d023      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f7a:	4b6f      	ldr	r3, [pc, #444]	@ (8003138 <HAL_RCC_OscConfig+0x504>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a6e      	ldr	r2, [pc, #440]	@ (8003138 <HAL_RCC_OscConfig+0x504>)
 8002f80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f86:	f7fe f9ff 	bl	8001388 <HAL_GetTick>
 8002f8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f8c:	e008      	b.n	8002fa0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f8e:	f7fe f9fb 	bl	8001388 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e21d      	b.n	80033dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fa0:	4b65      	ldr	r3, [pc, #404]	@ (8003138 <HAL_RCC_OscConfig+0x504>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d0f0      	beq.n	8002f8e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fac:	4b62      	ldr	r3, [pc, #392]	@ (8003138 <HAL_RCC_OscConfig+0x504>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	061b      	lsls	r3, r3, #24
 8002fba:	495f      	ldr	r1, [pc, #380]	@ (8003138 <HAL_RCC_OscConfig+0x504>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	604b      	str	r3, [r1, #4]
 8002fc0:	e018      	b.n	8002ff4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fc2:	4b5d      	ldr	r3, [pc, #372]	@ (8003138 <HAL_RCC_OscConfig+0x504>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a5c      	ldr	r2, [pc, #368]	@ (8003138 <HAL_RCC_OscConfig+0x504>)
 8002fc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002fcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fce:	f7fe f9db 	bl	8001388 <HAL_GetTick>
 8002fd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fd4:	e008      	b.n	8002fe8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fd6:	f7fe f9d7 	bl	8001388 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d901      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e1f9      	b.n	80033dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fe8:	4b53      	ldr	r3, [pc, #332]	@ (8003138 <HAL_RCC_OscConfig+0x504>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1f0      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0308 	and.w	r3, r3, #8
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d03c      	beq.n	800307a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	695b      	ldr	r3, [r3, #20]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d01c      	beq.n	8003042 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003008:	4b4b      	ldr	r3, [pc, #300]	@ (8003138 <HAL_RCC_OscConfig+0x504>)
 800300a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800300e:	4a4a      	ldr	r2, [pc, #296]	@ (8003138 <HAL_RCC_OscConfig+0x504>)
 8003010:	f043 0301 	orr.w	r3, r3, #1
 8003014:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003018:	f7fe f9b6 	bl	8001388 <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800301e:	e008      	b.n	8003032 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003020:	f7fe f9b2 	bl	8001388 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e1d4      	b.n	80033dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003032:	4b41      	ldr	r3, [pc, #260]	@ (8003138 <HAL_RCC_OscConfig+0x504>)
 8003034:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003038:	f003 0302 	and.w	r3, r3, #2
 800303c:	2b00      	cmp	r3, #0
 800303e:	d0ef      	beq.n	8003020 <HAL_RCC_OscConfig+0x3ec>
 8003040:	e01b      	b.n	800307a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003042:	4b3d      	ldr	r3, [pc, #244]	@ (8003138 <HAL_RCC_OscConfig+0x504>)
 8003044:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003048:	4a3b      	ldr	r2, [pc, #236]	@ (8003138 <HAL_RCC_OscConfig+0x504>)
 800304a:	f023 0301 	bic.w	r3, r3, #1
 800304e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003052:	f7fe f999 	bl	8001388 <HAL_GetTick>
 8003056:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003058:	e008      	b.n	800306c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800305a:	f7fe f995 	bl	8001388 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	2b02      	cmp	r3, #2
 8003066:	d901      	bls.n	800306c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e1b7      	b.n	80033dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800306c:	4b32      	ldr	r3, [pc, #200]	@ (8003138 <HAL_RCC_OscConfig+0x504>)
 800306e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1ef      	bne.n	800305a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0304 	and.w	r3, r3, #4
 8003082:	2b00      	cmp	r3, #0
 8003084:	f000 80a6 	beq.w	80031d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003088:	2300      	movs	r3, #0
 800308a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800308c:	4b2a      	ldr	r3, [pc, #168]	@ (8003138 <HAL_RCC_OscConfig+0x504>)
 800308e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003090:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d10d      	bne.n	80030b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003098:	4b27      	ldr	r3, [pc, #156]	@ (8003138 <HAL_RCC_OscConfig+0x504>)
 800309a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800309c:	4a26      	ldr	r2, [pc, #152]	@ (8003138 <HAL_RCC_OscConfig+0x504>)
 800309e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80030a4:	4b24      	ldr	r3, [pc, #144]	@ (8003138 <HAL_RCC_OscConfig+0x504>)
 80030a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030ac:	60bb      	str	r3, [r7, #8]
 80030ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030b0:	2301      	movs	r3, #1
 80030b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030b4:	4b21      	ldr	r3, [pc, #132]	@ (800313c <HAL_RCC_OscConfig+0x508>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d118      	bne.n	80030f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030c0:	4b1e      	ldr	r3, [pc, #120]	@ (800313c <HAL_RCC_OscConfig+0x508>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a1d      	ldr	r2, [pc, #116]	@ (800313c <HAL_RCC_OscConfig+0x508>)
 80030c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030cc:	f7fe f95c 	bl	8001388 <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030d2:	e008      	b.n	80030e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030d4:	f7fe f958 	bl	8001388 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e17a      	b.n	80033dc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030e6:	4b15      	ldr	r3, [pc, #84]	@ (800313c <HAL_RCC_OscConfig+0x508>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d0f0      	beq.n	80030d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d108      	bne.n	800310c <HAL_RCC_OscConfig+0x4d8>
 80030fa:	4b0f      	ldr	r3, [pc, #60]	@ (8003138 <HAL_RCC_OscConfig+0x504>)
 80030fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003100:	4a0d      	ldr	r2, [pc, #52]	@ (8003138 <HAL_RCC_OscConfig+0x504>)
 8003102:	f043 0301 	orr.w	r3, r3, #1
 8003106:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800310a:	e029      	b.n	8003160 <HAL_RCC_OscConfig+0x52c>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	2b05      	cmp	r3, #5
 8003112:	d115      	bne.n	8003140 <HAL_RCC_OscConfig+0x50c>
 8003114:	4b08      	ldr	r3, [pc, #32]	@ (8003138 <HAL_RCC_OscConfig+0x504>)
 8003116:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800311a:	4a07      	ldr	r2, [pc, #28]	@ (8003138 <HAL_RCC_OscConfig+0x504>)
 800311c:	f043 0304 	orr.w	r3, r3, #4
 8003120:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003124:	4b04      	ldr	r3, [pc, #16]	@ (8003138 <HAL_RCC_OscConfig+0x504>)
 8003126:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800312a:	4a03      	ldr	r2, [pc, #12]	@ (8003138 <HAL_RCC_OscConfig+0x504>)
 800312c:	f043 0301 	orr.w	r3, r3, #1
 8003130:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003134:	e014      	b.n	8003160 <HAL_RCC_OscConfig+0x52c>
 8003136:	bf00      	nop
 8003138:	40021000 	.word	0x40021000
 800313c:	40007000 	.word	0x40007000
 8003140:	4b9c      	ldr	r3, [pc, #624]	@ (80033b4 <HAL_RCC_OscConfig+0x780>)
 8003142:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003146:	4a9b      	ldr	r2, [pc, #620]	@ (80033b4 <HAL_RCC_OscConfig+0x780>)
 8003148:	f023 0301 	bic.w	r3, r3, #1
 800314c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003150:	4b98      	ldr	r3, [pc, #608]	@ (80033b4 <HAL_RCC_OscConfig+0x780>)
 8003152:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003156:	4a97      	ldr	r2, [pc, #604]	@ (80033b4 <HAL_RCC_OscConfig+0x780>)
 8003158:	f023 0304 	bic.w	r3, r3, #4
 800315c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d016      	beq.n	8003196 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003168:	f7fe f90e 	bl	8001388 <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800316e:	e00a      	b.n	8003186 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003170:	f7fe f90a 	bl	8001388 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800317e:	4293      	cmp	r3, r2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e12a      	b.n	80033dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003186:	4b8b      	ldr	r3, [pc, #556]	@ (80033b4 <HAL_RCC_OscConfig+0x780>)
 8003188:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d0ed      	beq.n	8003170 <HAL_RCC_OscConfig+0x53c>
 8003194:	e015      	b.n	80031c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003196:	f7fe f8f7 	bl	8001388 <HAL_GetTick>
 800319a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800319c:	e00a      	b.n	80031b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800319e:	f7fe f8f3 	bl	8001388 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d901      	bls.n	80031b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e113      	b.n	80033dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031b4:	4b7f      	ldr	r3, [pc, #508]	@ (80033b4 <HAL_RCC_OscConfig+0x780>)
 80031b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1ed      	bne.n	800319e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031c2:	7ffb      	ldrb	r3, [r7, #31]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d105      	bne.n	80031d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031c8:	4b7a      	ldr	r3, [pc, #488]	@ (80033b4 <HAL_RCC_OscConfig+0x780>)
 80031ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031cc:	4a79      	ldr	r2, [pc, #484]	@ (80033b4 <HAL_RCC_OscConfig+0x780>)
 80031ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031d2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f000 80fe 	beq.w	80033da <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	f040 80d0 	bne.w	8003388 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80031e8:	4b72      	ldr	r3, [pc, #456]	@ (80033b4 <HAL_RCC_OscConfig+0x780>)
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	f003 0203 	and.w	r2, r3, #3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d130      	bne.n	800325e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003206:	3b01      	subs	r3, #1
 8003208:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800320a:	429a      	cmp	r2, r3
 800320c:	d127      	bne.n	800325e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003218:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800321a:	429a      	cmp	r2, r3
 800321c:	d11f      	bne.n	800325e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003228:	2a07      	cmp	r2, #7
 800322a:	bf14      	ite	ne
 800322c:	2201      	movne	r2, #1
 800322e:	2200      	moveq	r2, #0
 8003230:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003232:	4293      	cmp	r3, r2
 8003234:	d113      	bne.n	800325e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003240:	085b      	lsrs	r3, r3, #1
 8003242:	3b01      	subs	r3, #1
 8003244:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003246:	429a      	cmp	r2, r3
 8003248:	d109      	bne.n	800325e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003254:	085b      	lsrs	r3, r3, #1
 8003256:	3b01      	subs	r3, #1
 8003258:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800325a:	429a      	cmp	r2, r3
 800325c:	d06e      	beq.n	800333c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	2b0c      	cmp	r3, #12
 8003262:	d069      	beq.n	8003338 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003264:	4b53      	ldr	r3, [pc, #332]	@ (80033b4 <HAL_RCC_OscConfig+0x780>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d105      	bne.n	800327c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003270:	4b50      	ldr	r3, [pc, #320]	@ (80033b4 <HAL_RCC_OscConfig+0x780>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d001      	beq.n	8003280 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e0ad      	b.n	80033dc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003280:	4b4c      	ldr	r3, [pc, #304]	@ (80033b4 <HAL_RCC_OscConfig+0x780>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a4b      	ldr	r2, [pc, #300]	@ (80033b4 <HAL_RCC_OscConfig+0x780>)
 8003286:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800328a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800328c:	f7fe f87c 	bl	8001388 <HAL_GetTick>
 8003290:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003292:	e008      	b.n	80032a6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003294:	f7fe f878 	bl	8001388 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e09a      	b.n	80033dc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032a6:	4b43      	ldr	r3, [pc, #268]	@ (80033b4 <HAL_RCC_OscConfig+0x780>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1f0      	bne.n	8003294 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032b2:	4b40      	ldr	r3, [pc, #256]	@ (80033b4 <HAL_RCC_OscConfig+0x780>)
 80032b4:	68da      	ldr	r2, [r3, #12]
 80032b6:	4b40      	ldr	r3, [pc, #256]	@ (80033b8 <HAL_RCC_OscConfig+0x784>)
 80032b8:	4013      	ands	r3, r2
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80032c2:	3a01      	subs	r2, #1
 80032c4:	0112      	lsls	r2, r2, #4
 80032c6:	4311      	orrs	r1, r2
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80032cc:	0212      	lsls	r2, r2, #8
 80032ce:	4311      	orrs	r1, r2
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80032d4:	0852      	lsrs	r2, r2, #1
 80032d6:	3a01      	subs	r2, #1
 80032d8:	0552      	lsls	r2, r2, #21
 80032da:	4311      	orrs	r1, r2
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80032e0:	0852      	lsrs	r2, r2, #1
 80032e2:	3a01      	subs	r2, #1
 80032e4:	0652      	lsls	r2, r2, #25
 80032e6:	4311      	orrs	r1, r2
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80032ec:	0912      	lsrs	r2, r2, #4
 80032ee:	0452      	lsls	r2, r2, #17
 80032f0:	430a      	orrs	r2, r1
 80032f2:	4930      	ldr	r1, [pc, #192]	@ (80033b4 <HAL_RCC_OscConfig+0x780>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80032f8:	4b2e      	ldr	r3, [pc, #184]	@ (80033b4 <HAL_RCC_OscConfig+0x780>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a2d      	ldr	r2, [pc, #180]	@ (80033b4 <HAL_RCC_OscConfig+0x780>)
 80032fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003302:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003304:	4b2b      	ldr	r3, [pc, #172]	@ (80033b4 <HAL_RCC_OscConfig+0x780>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	4a2a      	ldr	r2, [pc, #168]	@ (80033b4 <HAL_RCC_OscConfig+0x780>)
 800330a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800330e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003310:	f7fe f83a 	bl	8001388 <HAL_GetTick>
 8003314:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003316:	e008      	b.n	800332a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003318:	f7fe f836 	bl	8001388 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b02      	cmp	r3, #2
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e058      	b.n	80033dc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800332a:	4b22      	ldr	r3, [pc, #136]	@ (80033b4 <HAL_RCC_OscConfig+0x780>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d0f0      	beq.n	8003318 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003336:	e050      	b.n	80033da <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e04f      	b.n	80033dc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800333c:	4b1d      	ldr	r3, [pc, #116]	@ (80033b4 <HAL_RCC_OscConfig+0x780>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d148      	bne.n	80033da <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003348:	4b1a      	ldr	r3, [pc, #104]	@ (80033b4 <HAL_RCC_OscConfig+0x780>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a19      	ldr	r2, [pc, #100]	@ (80033b4 <HAL_RCC_OscConfig+0x780>)
 800334e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003352:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003354:	4b17      	ldr	r3, [pc, #92]	@ (80033b4 <HAL_RCC_OscConfig+0x780>)
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	4a16      	ldr	r2, [pc, #88]	@ (80033b4 <HAL_RCC_OscConfig+0x780>)
 800335a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800335e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003360:	f7fe f812 	bl	8001388 <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003368:	f7fe f80e 	bl	8001388 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e030      	b.n	80033dc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800337a:	4b0e      	ldr	r3, [pc, #56]	@ (80033b4 <HAL_RCC_OscConfig+0x780>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d0f0      	beq.n	8003368 <HAL_RCC_OscConfig+0x734>
 8003386:	e028      	b.n	80033da <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	2b0c      	cmp	r3, #12
 800338c:	d023      	beq.n	80033d6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800338e:	4b09      	ldr	r3, [pc, #36]	@ (80033b4 <HAL_RCC_OscConfig+0x780>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a08      	ldr	r2, [pc, #32]	@ (80033b4 <HAL_RCC_OscConfig+0x780>)
 8003394:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003398:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800339a:	f7fd fff5 	bl	8001388 <HAL_GetTick>
 800339e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033a0:	e00c      	b.n	80033bc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a2:	f7fd fff1 	bl	8001388 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d905      	bls.n	80033bc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e013      	b.n	80033dc <HAL_RCC_OscConfig+0x7a8>
 80033b4:	40021000 	.word	0x40021000
 80033b8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033bc:	4b09      	ldr	r3, [pc, #36]	@ (80033e4 <HAL_RCC_OscConfig+0x7b0>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1ec      	bne.n	80033a2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80033c8:	4b06      	ldr	r3, [pc, #24]	@ (80033e4 <HAL_RCC_OscConfig+0x7b0>)
 80033ca:	68da      	ldr	r2, [r3, #12]
 80033cc:	4905      	ldr	r1, [pc, #20]	@ (80033e4 <HAL_RCC_OscConfig+0x7b0>)
 80033ce:	4b06      	ldr	r3, [pc, #24]	@ (80033e8 <HAL_RCC_OscConfig+0x7b4>)
 80033d0:	4013      	ands	r3, r2
 80033d2:	60cb      	str	r3, [r1, #12]
 80033d4:	e001      	b.n	80033da <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e000      	b.n	80033dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3720      	adds	r7, #32
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	40021000 	.word	0x40021000
 80033e8:	feeefffc 	.word	0xfeeefffc

080033ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d101      	bne.n	8003400 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e0e7      	b.n	80035d0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003400:	4b75      	ldr	r3, [pc, #468]	@ (80035d8 <HAL_RCC_ClockConfig+0x1ec>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0307 	and.w	r3, r3, #7
 8003408:	683a      	ldr	r2, [r7, #0]
 800340a:	429a      	cmp	r2, r3
 800340c:	d910      	bls.n	8003430 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800340e:	4b72      	ldr	r3, [pc, #456]	@ (80035d8 <HAL_RCC_ClockConfig+0x1ec>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f023 0207 	bic.w	r2, r3, #7
 8003416:	4970      	ldr	r1, [pc, #448]	@ (80035d8 <HAL_RCC_ClockConfig+0x1ec>)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	4313      	orrs	r3, r2
 800341c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800341e:	4b6e      	ldr	r3, [pc, #440]	@ (80035d8 <HAL_RCC_ClockConfig+0x1ec>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0307 	and.w	r3, r3, #7
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	429a      	cmp	r2, r3
 800342a:	d001      	beq.n	8003430 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e0cf      	b.n	80035d0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d010      	beq.n	800345e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689a      	ldr	r2, [r3, #8]
 8003440:	4b66      	ldr	r3, [pc, #408]	@ (80035dc <HAL_RCC_ClockConfig+0x1f0>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003448:	429a      	cmp	r2, r3
 800344a:	d908      	bls.n	800345e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800344c:	4b63      	ldr	r3, [pc, #396]	@ (80035dc <HAL_RCC_ClockConfig+0x1f0>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	4960      	ldr	r1, [pc, #384]	@ (80035dc <HAL_RCC_ClockConfig+0x1f0>)
 800345a:	4313      	orrs	r3, r2
 800345c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b00      	cmp	r3, #0
 8003468:	d04c      	beq.n	8003504 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	2b03      	cmp	r3, #3
 8003470:	d107      	bne.n	8003482 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003472:	4b5a      	ldr	r3, [pc, #360]	@ (80035dc <HAL_RCC_ClockConfig+0x1f0>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d121      	bne.n	80034c2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e0a6      	b.n	80035d0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	2b02      	cmp	r3, #2
 8003488:	d107      	bne.n	800349a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800348a:	4b54      	ldr	r3, [pc, #336]	@ (80035dc <HAL_RCC_ClockConfig+0x1f0>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d115      	bne.n	80034c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e09a      	b.n	80035d0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d107      	bne.n	80034b2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034a2:	4b4e      	ldr	r3, [pc, #312]	@ (80035dc <HAL_RCC_ClockConfig+0x1f0>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d109      	bne.n	80034c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e08e      	b.n	80035d0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034b2:	4b4a      	ldr	r3, [pc, #296]	@ (80035dc <HAL_RCC_ClockConfig+0x1f0>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e086      	b.n	80035d0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034c2:	4b46      	ldr	r3, [pc, #280]	@ (80035dc <HAL_RCC_ClockConfig+0x1f0>)
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f023 0203 	bic.w	r2, r3, #3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	4943      	ldr	r1, [pc, #268]	@ (80035dc <HAL_RCC_ClockConfig+0x1f0>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034d4:	f7fd ff58 	bl	8001388 <HAL_GetTick>
 80034d8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034da:	e00a      	b.n	80034f2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034dc:	f7fd ff54 	bl	8001388 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e06e      	b.n	80035d0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034f2:	4b3a      	ldr	r3, [pc, #232]	@ (80035dc <HAL_RCC_ClockConfig+0x1f0>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f003 020c 	and.w	r2, r3, #12
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	429a      	cmp	r2, r3
 8003502:	d1eb      	bne.n	80034dc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d010      	beq.n	8003532 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689a      	ldr	r2, [r3, #8]
 8003514:	4b31      	ldr	r3, [pc, #196]	@ (80035dc <HAL_RCC_ClockConfig+0x1f0>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800351c:	429a      	cmp	r2, r3
 800351e:	d208      	bcs.n	8003532 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003520:	4b2e      	ldr	r3, [pc, #184]	@ (80035dc <HAL_RCC_ClockConfig+0x1f0>)
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	492b      	ldr	r1, [pc, #172]	@ (80035dc <HAL_RCC_ClockConfig+0x1f0>)
 800352e:	4313      	orrs	r3, r2
 8003530:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003532:	4b29      	ldr	r3, [pc, #164]	@ (80035d8 <HAL_RCC_ClockConfig+0x1ec>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0307 	and.w	r3, r3, #7
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	429a      	cmp	r2, r3
 800353e:	d210      	bcs.n	8003562 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003540:	4b25      	ldr	r3, [pc, #148]	@ (80035d8 <HAL_RCC_ClockConfig+0x1ec>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f023 0207 	bic.w	r2, r3, #7
 8003548:	4923      	ldr	r1, [pc, #140]	@ (80035d8 <HAL_RCC_ClockConfig+0x1ec>)
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	4313      	orrs	r3, r2
 800354e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003550:	4b21      	ldr	r3, [pc, #132]	@ (80035d8 <HAL_RCC_ClockConfig+0x1ec>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0307 	and.w	r3, r3, #7
 8003558:	683a      	ldr	r2, [r7, #0]
 800355a:	429a      	cmp	r2, r3
 800355c:	d001      	beq.n	8003562 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e036      	b.n	80035d0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0304 	and.w	r3, r3, #4
 800356a:	2b00      	cmp	r3, #0
 800356c:	d008      	beq.n	8003580 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800356e:	4b1b      	ldr	r3, [pc, #108]	@ (80035dc <HAL_RCC_ClockConfig+0x1f0>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	4918      	ldr	r1, [pc, #96]	@ (80035dc <HAL_RCC_ClockConfig+0x1f0>)
 800357c:	4313      	orrs	r3, r2
 800357e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0308 	and.w	r3, r3, #8
 8003588:	2b00      	cmp	r3, #0
 800358a:	d009      	beq.n	80035a0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800358c:	4b13      	ldr	r3, [pc, #76]	@ (80035dc <HAL_RCC_ClockConfig+0x1f0>)
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	00db      	lsls	r3, r3, #3
 800359a:	4910      	ldr	r1, [pc, #64]	@ (80035dc <HAL_RCC_ClockConfig+0x1f0>)
 800359c:	4313      	orrs	r3, r2
 800359e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035a0:	f000 f824 	bl	80035ec <HAL_RCC_GetSysClockFreq>
 80035a4:	4602      	mov	r2, r0
 80035a6:	4b0d      	ldr	r3, [pc, #52]	@ (80035dc <HAL_RCC_ClockConfig+0x1f0>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	091b      	lsrs	r3, r3, #4
 80035ac:	f003 030f 	and.w	r3, r3, #15
 80035b0:	490b      	ldr	r1, [pc, #44]	@ (80035e0 <HAL_RCC_ClockConfig+0x1f4>)
 80035b2:	5ccb      	ldrb	r3, [r1, r3]
 80035b4:	f003 031f 	and.w	r3, r3, #31
 80035b8:	fa22 f303 	lsr.w	r3, r2, r3
 80035bc:	4a09      	ldr	r2, [pc, #36]	@ (80035e4 <HAL_RCC_ClockConfig+0x1f8>)
 80035be:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80035c0:	4b09      	ldr	r3, [pc, #36]	@ (80035e8 <HAL_RCC_ClockConfig+0x1fc>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7fd fe8f 	bl	80012e8 <HAL_InitTick>
 80035ca:	4603      	mov	r3, r0
 80035cc:	72fb      	strb	r3, [r7, #11]

  return status;
 80035ce:	7afb      	ldrb	r3, [r7, #11]
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	40022000 	.word	0x40022000
 80035dc:	40021000 	.word	0x40021000
 80035e0:	08005e38 	.word	0x08005e38
 80035e4:	20000000 	.word	0x20000000
 80035e8:	20000004 	.word	0x20000004

080035ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b089      	sub	sp, #36	@ 0x24
 80035f0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80035f2:	2300      	movs	r3, #0
 80035f4:	61fb      	str	r3, [r7, #28]
 80035f6:	2300      	movs	r3, #0
 80035f8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035fa:	4b3e      	ldr	r3, [pc, #248]	@ (80036f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 030c 	and.w	r3, r3, #12
 8003602:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003604:	4b3b      	ldr	r3, [pc, #236]	@ (80036f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	f003 0303 	and.w	r3, r3, #3
 800360c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d005      	beq.n	8003620 <HAL_RCC_GetSysClockFreq+0x34>
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	2b0c      	cmp	r3, #12
 8003618:	d121      	bne.n	800365e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d11e      	bne.n	800365e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003620:	4b34      	ldr	r3, [pc, #208]	@ (80036f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0308 	and.w	r3, r3, #8
 8003628:	2b00      	cmp	r3, #0
 800362a:	d107      	bne.n	800363c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800362c:	4b31      	ldr	r3, [pc, #196]	@ (80036f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800362e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003632:	0a1b      	lsrs	r3, r3, #8
 8003634:	f003 030f 	and.w	r3, r3, #15
 8003638:	61fb      	str	r3, [r7, #28]
 800363a:	e005      	b.n	8003648 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800363c:	4b2d      	ldr	r3, [pc, #180]	@ (80036f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	091b      	lsrs	r3, r3, #4
 8003642:	f003 030f 	and.w	r3, r3, #15
 8003646:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003648:	4a2b      	ldr	r2, [pc, #172]	@ (80036f8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003650:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d10d      	bne.n	8003674 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800365c:	e00a      	b.n	8003674 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	2b04      	cmp	r3, #4
 8003662:	d102      	bne.n	800366a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003664:	4b25      	ldr	r3, [pc, #148]	@ (80036fc <HAL_RCC_GetSysClockFreq+0x110>)
 8003666:	61bb      	str	r3, [r7, #24]
 8003668:	e004      	b.n	8003674 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	2b08      	cmp	r3, #8
 800366e:	d101      	bne.n	8003674 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003670:	4b23      	ldr	r3, [pc, #140]	@ (8003700 <HAL_RCC_GetSysClockFreq+0x114>)
 8003672:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	2b0c      	cmp	r3, #12
 8003678:	d134      	bne.n	80036e4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800367a:	4b1e      	ldr	r3, [pc, #120]	@ (80036f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	f003 0303 	and.w	r3, r3, #3
 8003682:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	2b02      	cmp	r3, #2
 8003688:	d003      	beq.n	8003692 <HAL_RCC_GetSysClockFreq+0xa6>
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	2b03      	cmp	r3, #3
 800368e:	d003      	beq.n	8003698 <HAL_RCC_GetSysClockFreq+0xac>
 8003690:	e005      	b.n	800369e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003692:	4b1a      	ldr	r3, [pc, #104]	@ (80036fc <HAL_RCC_GetSysClockFreq+0x110>)
 8003694:	617b      	str	r3, [r7, #20]
      break;
 8003696:	e005      	b.n	80036a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003698:	4b19      	ldr	r3, [pc, #100]	@ (8003700 <HAL_RCC_GetSysClockFreq+0x114>)
 800369a:	617b      	str	r3, [r7, #20]
      break;
 800369c:	e002      	b.n	80036a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	617b      	str	r3, [r7, #20]
      break;
 80036a2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036a4:	4b13      	ldr	r3, [pc, #76]	@ (80036f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	091b      	lsrs	r3, r3, #4
 80036aa:	f003 0307 	and.w	r3, r3, #7
 80036ae:	3301      	adds	r3, #1
 80036b0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80036b2:	4b10      	ldr	r3, [pc, #64]	@ (80036f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	0a1b      	lsrs	r3, r3, #8
 80036b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	fb03 f202 	mul.w	r2, r3, r2
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036ca:	4b0a      	ldr	r3, [pc, #40]	@ (80036f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	0e5b      	lsrs	r3, r3, #25
 80036d0:	f003 0303 	and.w	r3, r3, #3
 80036d4:	3301      	adds	r3, #1
 80036d6:	005b      	lsls	r3, r3, #1
 80036d8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80036e4:	69bb      	ldr	r3, [r7, #24]
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3724      	adds	r7, #36	@ 0x24
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	40021000 	.word	0x40021000
 80036f8:	08005e50 	.word	0x08005e50
 80036fc:	00f42400 	.word	0x00f42400
 8003700:	007a1200 	.word	0x007a1200

08003704 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003708:	4b03      	ldr	r3, [pc, #12]	@ (8003718 <HAL_RCC_GetHCLKFreq+0x14>)
 800370a:	681b      	ldr	r3, [r3, #0]
}
 800370c:	4618      	mov	r0, r3
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	20000000 	.word	0x20000000

0800371c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003720:	f7ff fff0 	bl	8003704 <HAL_RCC_GetHCLKFreq>
 8003724:	4602      	mov	r2, r0
 8003726:	4b06      	ldr	r3, [pc, #24]	@ (8003740 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	0a1b      	lsrs	r3, r3, #8
 800372c:	f003 0307 	and.w	r3, r3, #7
 8003730:	4904      	ldr	r1, [pc, #16]	@ (8003744 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003732:	5ccb      	ldrb	r3, [r1, r3]
 8003734:	f003 031f 	and.w	r3, r3, #31
 8003738:	fa22 f303 	lsr.w	r3, r2, r3
}
 800373c:	4618      	mov	r0, r3
 800373e:	bd80      	pop	{r7, pc}
 8003740:	40021000 	.word	0x40021000
 8003744:	08005e48 	.word	0x08005e48

08003748 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800374c:	f7ff ffda 	bl	8003704 <HAL_RCC_GetHCLKFreq>
 8003750:	4602      	mov	r2, r0
 8003752:	4b06      	ldr	r3, [pc, #24]	@ (800376c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	0adb      	lsrs	r3, r3, #11
 8003758:	f003 0307 	and.w	r3, r3, #7
 800375c:	4904      	ldr	r1, [pc, #16]	@ (8003770 <HAL_RCC_GetPCLK2Freq+0x28>)
 800375e:	5ccb      	ldrb	r3, [r1, r3]
 8003760:	f003 031f 	and.w	r3, r3, #31
 8003764:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003768:	4618      	mov	r0, r3
 800376a:	bd80      	pop	{r7, pc}
 800376c:	40021000 	.word	0x40021000
 8003770:	08005e48 	.word	0x08005e48

08003774 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b086      	sub	sp, #24
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800377c:	2300      	movs	r3, #0
 800377e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003780:	4b2a      	ldr	r3, [pc, #168]	@ (800382c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003784:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d003      	beq.n	8003794 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800378c:	f7ff f9ee 	bl	8002b6c <HAL_PWREx_GetVoltageRange>
 8003790:	6178      	str	r0, [r7, #20]
 8003792:	e014      	b.n	80037be <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003794:	4b25      	ldr	r3, [pc, #148]	@ (800382c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003798:	4a24      	ldr	r2, [pc, #144]	@ (800382c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800379a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800379e:	6593      	str	r3, [r2, #88]	@ 0x58
 80037a0:	4b22      	ldr	r3, [pc, #136]	@ (800382c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037a8:	60fb      	str	r3, [r7, #12]
 80037aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80037ac:	f7ff f9de 	bl	8002b6c <HAL_PWREx_GetVoltageRange>
 80037b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80037b2:	4b1e      	ldr	r3, [pc, #120]	@ (800382c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037b6:	4a1d      	ldr	r2, [pc, #116]	@ (800382c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037bc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037c4:	d10b      	bne.n	80037de <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2b80      	cmp	r3, #128	@ 0x80
 80037ca:	d919      	bls.n	8003800 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2ba0      	cmp	r3, #160	@ 0xa0
 80037d0:	d902      	bls.n	80037d8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80037d2:	2302      	movs	r3, #2
 80037d4:	613b      	str	r3, [r7, #16]
 80037d6:	e013      	b.n	8003800 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80037d8:	2301      	movs	r3, #1
 80037da:	613b      	str	r3, [r7, #16]
 80037dc:	e010      	b.n	8003800 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2b80      	cmp	r3, #128	@ 0x80
 80037e2:	d902      	bls.n	80037ea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80037e4:	2303      	movs	r3, #3
 80037e6:	613b      	str	r3, [r7, #16]
 80037e8:	e00a      	b.n	8003800 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2b80      	cmp	r3, #128	@ 0x80
 80037ee:	d102      	bne.n	80037f6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80037f0:	2302      	movs	r3, #2
 80037f2:	613b      	str	r3, [r7, #16]
 80037f4:	e004      	b.n	8003800 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2b70      	cmp	r3, #112	@ 0x70
 80037fa:	d101      	bne.n	8003800 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80037fc:	2301      	movs	r3, #1
 80037fe:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003800:	4b0b      	ldr	r3, [pc, #44]	@ (8003830 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f023 0207 	bic.w	r2, r3, #7
 8003808:	4909      	ldr	r1, [pc, #36]	@ (8003830 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	4313      	orrs	r3, r2
 800380e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003810:	4b07      	ldr	r3, [pc, #28]	@ (8003830 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0307 	and.w	r3, r3, #7
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	429a      	cmp	r2, r3
 800381c:	d001      	beq.n	8003822 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e000      	b.n	8003824 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	3718      	adds	r7, #24
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	40021000 	.word	0x40021000
 8003830:	40022000 	.word	0x40022000

08003834 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800383c:	2300      	movs	r3, #0
 800383e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003840:	2300      	movs	r3, #0
 8003842:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800384c:	2b00      	cmp	r3, #0
 800384e:	d041      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003854:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003858:	d02a      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800385a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800385e:	d824      	bhi.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003860:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003864:	d008      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003866:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800386a:	d81e      	bhi.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00a      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003870:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003874:	d010      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003876:	e018      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003878:	4b86      	ldr	r3, [pc, #536]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	4a85      	ldr	r2, [pc, #532]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800387e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003882:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003884:	e015      	b.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	3304      	adds	r3, #4
 800388a:	2100      	movs	r1, #0
 800388c:	4618      	mov	r0, r3
 800388e:	f000 fabb 	bl	8003e08 <RCCEx_PLLSAI1_Config>
 8003892:	4603      	mov	r3, r0
 8003894:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003896:	e00c      	b.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	3320      	adds	r3, #32
 800389c:	2100      	movs	r1, #0
 800389e:	4618      	mov	r0, r3
 80038a0:	f000 fba6 	bl	8003ff0 <RCCEx_PLLSAI2_Config>
 80038a4:	4603      	mov	r3, r0
 80038a6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80038a8:	e003      	b.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	74fb      	strb	r3, [r7, #19]
      break;
 80038ae:	e000      	b.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80038b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038b2:	7cfb      	ldrb	r3, [r7, #19]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d10b      	bne.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038b8:	4b76      	ldr	r3, [pc, #472]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038be:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038c6:	4973      	ldr	r1, [pc, #460]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80038ce:	e001      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d0:	7cfb      	ldrb	r3, [r7, #19]
 80038d2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d041      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038e4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80038e8:	d02a      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80038ea:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80038ee:	d824      	bhi.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80038f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80038f4:	d008      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80038f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80038fa:	d81e      	bhi.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00a      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003900:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003904:	d010      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003906:	e018      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003908:	4b62      	ldr	r3, [pc, #392]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	4a61      	ldr	r2, [pc, #388]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800390e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003912:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003914:	e015      	b.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	3304      	adds	r3, #4
 800391a:	2100      	movs	r1, #0
 800391c:	4618      	mov	r0, r3
 800391e:	f000 fa73 	bl	8003e08 <RCCEx_PLLSAI1_Config>
 8003922:	4603      	mov	r3, r0
 8003924:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003926:	e00c      	b.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	3320      	adds	r3, #32
 800392c:	2100      	movs	r1, #0
 800392e:	4618      	mov	r0, r3
 8003930:	f000 fb5e 	bl	8003ff0 <RCCEx_PLLSAI2_Config>
 8003934:	4603      	mov	r3, r0
 8003936:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003938:	e003      	b.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	74fb      	strb	r3, [r7, #19]
      break;
 800393e:	e000      	b.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003940:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003942:	7cfb      	ldrb	r3, [r7, #19]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d10b      	bne.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003948:	4b52      	ldr	r3, [pc, #328]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800394a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800394e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003956:	494f      	ldr	r1, [pc, #316]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003958:	4313      	orrs	r3, r2
 800395a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800395e:	e001      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003960:	7cfb      	ldrb	r3, [r7, #19]
 8003962:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 80a0 	beq.w	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003972:	2300      	movs	r3, #0
 8003974:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003976:	4b47      	ldr	r3, [pc, #284]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800397a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003982:	2301      	movs	r3, #1
 8003984:	e000      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003986:	2300      	movs	r3, #0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00d      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800398c:	4b41      	ldr	r3, [pc, #260]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800398e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003990:	4a40      	ldr	r2, [pc, #256]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003992:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003996:	6593      	str	r3, [r2, #88]	@ 0x58
 8003998:	4b3e      	ldr	r3, [pc, #248]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800399a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800399c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039a0:	60bb      	str	r3, [r7, #8]
 80039a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039a4:	2301      	movs	r3, #1
 80039a6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039a8:	4b3b      	ldr	r3, [pc, #236]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a3a      	ldr	r2, [pc, #232]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80039ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039b4:	f7fd fce8 	bl	8001388 <HAL_GetTick>
 80039b8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80039ba:	e009      	b.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039bc:	f7fd fce4 	bl	8001388 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d902      	bls.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	74fb      	strb	r3, [r7, #19]
        break;
 80039ce:	e005      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80039d0:	4b31      	ldr	r3, [pc, #196]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d0ef      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80039dc:	7cfb      	ldrb	r3, [r7, #19]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d15c      	bne.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80039e2:	4b2c      	ldr	r3, [pc, #176]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039ec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d01f      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d019      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a00:	4b24      	ldr	r3, [pc, #144]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a0a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a0c:	4b21      	ldr	r3, [pc, #132]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a12:	4a20      	ldr	r2, [pc, #128]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a1c:	4b1d      	ldr	r3, [pc, #116]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a22:	4a1c      	ldr	r2, [pc, #112]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a2c:	4a19      	ldr	r2, [pc, #100]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d016      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a3e:	f7fd fca3 	bl	8001388 <HAL_GetTick>
 8003a42:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a44:	e00b      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a46:	f7fd fc9f 	bl	8001388 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d902      	bls.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	74fb      	strb	r3, [r7, #19]
            break;
 8003a5c:	e006      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d0ec      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003a6c:	7cfb      	ldrb	r3, [r7, #19]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10c      	bne.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a72:	4b08      	ldr	r3, [pc, #32]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a78:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a82:	4904      	ldr	r1, [pc, #16]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003a8a:	e009      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a8c:	7cfb      	ldrb	r3, [r7, #19]
 8003a8e:	74bb      	strb	r3, [r7, #18]
 8003a90:	e006      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003a92:	bf00      	nop
 8003a94:	40021000 	.word	0x40021000
 8003a98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a9c:	7cfb      	ldrb	r3, [r7, #19]
 8003a9e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003aa0:	7c7b      	ldrb	r3, [r7, #17]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d105      	bne.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aa6:	4b9e      	ldr	r3, [pc, #632]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aaa:	4a9d      	ldr	r2, [pc, #628]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ab0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00a      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003abe:	4b98      	ldr	r3, [pc, #608]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ac4:	f023 0203 	bic.w	r2, r3, #3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003acc:	4994      	ldr	r1, [pc, #592]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00a      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ae0:	4b8f      	ldr	r3, [pc, #572]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ae6:	f023 020c 	bic.w	r2, r3, #12
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aee:	498c      	ldr	r1, [pc, #560]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0304 	and.w	r3, r3, #4
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00a      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b02:	4b87      	ldr	r3, [pc, #540]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b08:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b10:	4983      	ldr	r1, [pc, #524]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0308 	and.w	r3, r3, #8
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00a      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b24:	4b7e      	ldr	r3, [pc, #504]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b2a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b32:	497b      	ldr	r1, [pc, #492]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0310 	and.w	r3, r3, #16
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00a      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b46:	4b76      	ldr	r3, [pc, #472]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b54:	4972      	ldr	r1, [pc, #456]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0320 	and.w	r3, r3, #32
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00a      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b68:	4b6d      	ldr	r3, [pc, #436]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b6e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b76:	496a      	ldr	r1, [pc, #424]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00a      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b8a:	4b65      	ldr	r3, [pc, #404]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b90:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b98:	4961      	ldr	r1, [pc, #388]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00a      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003bac:	4b5c      	ldr	r3, [pc, #368]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bb2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bba:	4959      	ldr	r1, [pc, #356]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00a      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bce:	4b54      	ldr	r3, [pc, #336]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bd4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bdc:	4950      	ldr	r1, [pc, #320]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00a      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003bf0:	4b4b      	ldr	r3, [pc, #300]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bf6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bfe:	4948      	ldr	r1, [pc, #288]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00a      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c12:	4b43      	ldr	r3, [pc, #268]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c18:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c20:	493f      	ldr	r1, [pc, #252]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d028      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c34:	4b3a      	ldr	r3, [pc, #232]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c3a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c42:	4937      	ldr	r1, [pc, #220]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c4e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c52:	d106      	bne.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c54:	4b32      	ldr	r3, [pc, #200]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	4a31      	ldr	r2, [pc, #196]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c5e:	60d3      	str	r3, [r2, #12]
 8003c60:	e011      	b.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c66:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c6a:	d10c      	bne.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	3304      	adds	r3, #4
 8003c70:	2101      	movs	r1, #1
 8003c72:	4618      	mov	r0, r3
 8003c74:	f000 f8c8 	bl	8003e08 <RCCEx_PLLSAI1_Config>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003c7c:	7cfb      	ldrb	r3, [r7, #19]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003c82:	7cfb      	ldrb	r3, [r7, #19]
 8003c84:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d028      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c92:	4b23      	ldr	r3, [pc, #140]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c98:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ca0:	491f      	ldr	r1, [pc, #124]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003cb0:	d106      	bne.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cb2:	4b1b      	ldr	r3, [pc, #108]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	4a1a      	ldr	r2, [pc, #104]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cb8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003cbc:	60d3      	str	r3, [r2, #12]
 8003cbe:	e011      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cc4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003cc8:	d10c      	bne.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	3304      	adds	r3, #4
 8003cce:	2101      	movs	r1, #1
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f000 f899 	bl	8003e08 <RCCEx_PLLSAI1_Config>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003cda:	7cfb      	ldrb	r3, [r7, #19]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d001      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003ce0:	7cfb      	ldrb	r3, [r7, #19]
 8003ce2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d02b      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cf6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cfe:	4908      	ldr	r1, [pc, #32]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d0a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d0e:	d109      	bne.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d10:	4b03      	ldr	r3, [pc, #12]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	4a02      	ldr	r2, [pc, #8]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d1a:	60d3      	str	r3, [r2, #12]
 8003d1c:	e014      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003d1e:	bf00      	nop
 8003d20:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d28:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d2c:	d10c      	bne.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	3304      	adds	r3, #4
 8003d32:	2101      	movs	r1, #1
 8003d34:	4618      	mov	r0, r3
 8003d36:	f000 f867 	bl	8003e08 <RCCEx_PLLSAI1_Config>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d3e:	7cfb      	ldrb	r3, [r7, #19]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d001      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003d44:	7cfb      	ldrb	r3, [r7, #19]
 8003d46:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d02f      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d54:	4b2b      	ldr	r3, [pc, #172]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d5a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d62:	4928      	ldr	r1, [pc, #160]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d72:	d10d      	bne.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	3304      	adds	r3, #4
 8003d78:	2102      	movs	r1, #2
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f000 f844 	bl	8003e08 <RCCEx_PLLSAI1_Config>
 8003d80:	4603      	mov	r3, r0
 8003d82:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d84:	7cfb      	ldrb	r3, [r7, #19]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d014      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003d8a:	7cfb      	ldrb	r3, [r7, #19]
 8003d8c:	74bb      	strb	r3, [r7, #18]
 8003d8e:	e011      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d98:	d10c      	bne.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	3320      	adds	r3, #32
 8003d9e:	2102      	movs	r1, #2
 8003da0:	4618      	mov	r0, r3
 8003da2:	f000 f925 	bl	8003ff0 <RCCEx_PLLSAI2_Config>
 8003da6:	4603      	mov	r3, r0
 8003da8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003daa:	7cfb      	ldrb	r3, [r7, #19]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003db0:	7cfb      	ldrb	r3, [r7, #19]
 8003db2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00a      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003dc0:	4b10      	ldr	r3, [pc, #64]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dc6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003dce:	490d      	ldr	r1, [pc, #52]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00b      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003de2:	4b08      	ldr	r3, [pc, #32]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003de8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003df2:	4904      	ldr	r1, [pc, #16]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003dfa:	7cbb      	ldrb	r3, [r7, #18]
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3718      	adds	r7, #24
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	40021000 	.word	0x40021000

08003e08 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e12:	2300      	movs	r3, #0
 8003e14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e16:	4b75      	ldr	r3, [pc, #468]	@ (8003fec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	f003 0303 	and.w	r3, r3, #3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d018      	beq.n	8003e54 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003e22:	4b72      	ldr	r3, [pc, #456]	@ (8003fec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	f003 0203 	and.w	r2, r3, #3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d10d      	bne.n	8003e4e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
       ||
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d009      	beq.n	8003e4e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003e3a:	4b6c      	ldr	r3, [pc, #432]	@ (8003fec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	091b      	lsrs	r3, r3, #4
 8003e40:	f003 0307 	and.w	r3, r3, #7
 8003e44:	1c5a      	adds	r2, r3, #1
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
       ||
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d047      	beq.n	8003ede <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	73fb      	strb	r3, [r7, #15]
 8003e52:	e044      	b.n	8003ede <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2b03      	cmp	r3, #3
 8003e5a:	d018      	beq.n	8003e8e <RCCEx_PLLSAI1_Config+0x86>
 8003e5c:	2b03      	cmp	r3, #3
 8003e5e:	d825      	bhi.n	8003eac <RCCEx_PLLSAI1_Config+0xa4>
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d002      	beq.n	8003e6a <RCCEx_PLLSAI1_Config+0x62>
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d009      	beq.n	8003e7c <RCCEx_PLLSAI1_Config+0x74>
 8003e68:	e020      	b.n	8003eac <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e6a:	4b60      	ldr	r3, [pc, #384]	@ (8003fec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d11d      	bne.n	8003eb2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e7a:	e01a      	b.n	8003eb2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e7c:	4b5b      	ldr	r3, [pc, #364]	@ (8003fec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d116      	bne.n	8003eb6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e8c:	e013      	b.n	8003eb6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e8e:	4b57      	ldr	r3, [pc, #348]	@ (8003fec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10f      	bne.n	8003eba <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e9a:	4b54      	ldr	r3, [pc, #336]	@ (8003fec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d109      	bne.n	8003eba <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003eaa:	e006      	b.n	8003eba <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	73fb      	strb	r3, [r7, #15]
      break;
 8003eb0:	e004      	b.n	8003ebc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003eb2:	bf00      	nop
 8003eb4:	e002      	b.n	8003ebc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003eb6:	bf00      	nop
 8003eb8:	e000      	b.n	8003ebc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003eba:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ebc:	7bfb      	ldrb	r3, [r7, #15]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10d      	bne.n	8003ede <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ec2:	4b4a      	ldr	r3, [pc, #296]	@ (8003fec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6819      	ldr	r1, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	011b      	lsls	r3, r3, #4
 8003ed6:	430b      	orrs	r3, r1
 8003ed8:	4944      	ldr	r1, [pc, #272]	@ (8003fec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003ede:	7bfb      	ldrb	r3, [r7, #15]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d17d      	bne.n	8003fe0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003ee4:	4b41      	ldr	r3, [pc, #260]	@ (8003fec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a40      	ldr	r2, [pc, #256]	@ (8003fec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003eee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ef0:	f7fd fa4a 	bl	8001388 <HAL_GetTick>
 8003ef4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ef6:	e009      	b.n	8003f0c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ef8:	f7fd fa46 	bl	8001388 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d902      	bls.n	8003f0c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	73fb      	strb	r3, [r7, #15]
        break;
 8003f0a:	e005      	b.n	8003f18 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f0c:	4b37      	ldr	r3, [pc, #220]	@ (8003fec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1ef      	bne.n	8003ef8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003f18:	7bfb      	ldrb	r3, [r7, #15]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d160      	bne.n	8003fe0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d111      	bne.n	8003f48 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f24:	4b31      	ldr	r3, [pc, #196]	@ (8003fec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003f2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	6892      	ldr	r2, [r2, #8]
 8003f34:	0211      	lsls	r1, r2, #8
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	68d2      	ldr	r2, [r2, #12]
 8003f3a:	0912      	lsrs	r2, r2, #4
 8003f3c:	0452      	lsls	r2, r2, #17
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	492a      	ldr	r1, [pc, #168]	@ (8003fec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	610b      	str	r3, [r1, #16]
 8003f46:	e027      	b.n	8003f98 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d112      	bne.n	8003f74 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f4e:	4b27      	ldr	r3, [pc, #156]	@ (8003fec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003f56:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	6892      	ldr	r2, [r2, #8]
 8003f5e:	0211      	lsls	r1, r2, #8
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	6912      	ldr	r2, [r2, #16]
 8003f64:	0852      	lsrs	r2, r2, #1
 8003f66:	3a01      	subs	r2, #1
 8003f68:	0552      	lsls	r2, r2, #21
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	491f      	ldr	r1, [pc, #124]	@ (8003fec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	610b      	str	r3, [r1, #16]
 8003f72:	e011      	b.n	8003f98 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f74:	4b1d      	ldr	r3, [pc, #116]	@ (8003fec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003f7c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	6892      	ldr	r2, [r2, #8]
 8003f84:	0211      	lsls	r1, r2, #8
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	6952      	ldr	r2, [r2, #20]
 8003f8a:	0852      	lsrs	r2, r2, #1
 8003f8c:	3a01      	subs	r2, #1
 8003f8e:	0652      	lsls	r2, r2, #25
 8003f90:	430a      	orrs	r2, r1
 8003f92:	4916      	ldr	r1, [pc, #88]	@ (8003fec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003f98:	4b14      	ldr	r3, [pc, #80]	@ (8003fec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a13      	ldr	r2, [pc, #76]	@ (8003fec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f9e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003fa2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fa4:	f7fd f9f0 	bl	8001388 <HAL_GetTick>
 8003fa8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003faa:	e009      	b.n	8003fc0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003fac:	f7fd f9ec 	bl	8001388 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d902      	bls.n	8003fc0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	73fb      	strb	r3, [r7, #15]
          break;
 8003fbe:	e005      	b.n	8003fcc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8003fec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d0ef      	beq.n	8003fac <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003fcc:	7bfb      	ldrb	r3, [r7, #15]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d106      	bne.n	8003fe0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003fd2:	4b06      	ldr	r3, [pc, #24]	@ (8003fec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fd4:	691a      	ldr	r2, [r3, #16]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	4904      	ldr	r1, [pc, #16]	@ (8003fec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3710      	adds	r7, #16
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	40021000 	.word	0x40021000

08003ff0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003ffe:	4b6a      	ldr	r3, [pc, #424]	@ (80041a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	f003 0303 	and.w	r3, r3, #3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d018      	beq.n	800403c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800400a:	4b67      	ldr	r3, [pc, #412]	@ (80041a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	f003 0203 	and.w	r2, r3, #3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	429a      	cmp	r2, r3
 8004018:	d10d      	bne.n	8004036 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
       ||
 800401e:	2b00      	cmp	r3, #0
 8004020:	d009      	beq.n	8004036 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004022:	4b61      	ldr	r3, [pc, #388]	@ (80041a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	091b      	lsrs	r3, r3, #4
 8004028:	f003 0307 	and.w	r3, r3, #7
 800402c:	1c5a      	adds	r2, r3, #1
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
       ||
 8004032:	429a      	cmp	r2, r3
 8004034:	d047      	beq.n	80040c6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	73fb      	strb	r3, [r7, #15]
 800403a:	e044      	b.n	80040c6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2b03      	cmp	r3, #3
 8004042:	d018      	beq.n	8004076 <RCCEx_PLLSAI2_Config+0x86>
 8004044:	2b03      	cmp	r3, #3
 8004046:	d825      	bhi.n	8004094 <RCCEx_PLLSAI2_Config+0xa4>
 8004048:	2b01      	cmp	r3, #1
 800404a:	d002      	beq.n	8004052 <RCCEx_PLLSAI2_Config+0x62>
 800404c:	2b02      	cmp	r3, #2
 800404e:	d009      	beq.n	8004064 <RCCEx_PLLSAI2_Config+0x74>
 8004050:	e020      	b.n	8004094 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004052:	4b55      	ldr	r3, [pc, #340]	@ (80041a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	2b00      	cmp	r3, #0
 800405c:	d11d      	bne.n	800409a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004062:	e01a      	b.n	800409a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004064:	4b50      	ldr	r3, [pc, #320]	@ (80041a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800406c:	2b00      	cmp	r3, #0
 800406e:	d116      	bne.n	800409e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004074:	e013      	b.n	800409e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004076:	4b4c      	ldr	r3, [pc, #304]	@ (80041a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d10f      	bne.n	80040a2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004082:	4b49      	ldr	r3, [pc, #292]	@ (80041a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d109      	bne.n	80040a2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004092:	e006      	b.n	80040a2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	73fb      	strb	r3, [r7, #15]
      break;
 8004098:	e004      	b.n	80040a4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800409a:	bf00      	nop
 800409c:	e002      	b.n	80040a4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800409e:	bf00      	nop
 80040a0:	e000      	b.n	80040a4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80040a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80040a4:	7bfb      	ldrb	r3, [r7, #15]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d10d      	bne.n	80040c6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80040aa:	4b3f      	ldr	r3, [pc, #252]	@ (80041a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6819      	ldr	r1, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	3b01      	subs	r3, #1
 80040bc:	011b      	lsls	r3, r3, #4
 80040be:	430b      	orrs	r3, r1
 80040c0:	4939      	ldr	r1, [pc, #228]	@ (80041a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80040c6:	7bfb      	ldrb	r3, [r7, #15]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d167      	bne.n	800419c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80040cc:	4b36      	ldr	r3, [pc, #216]	@ (80041a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a35      	ldr	r2, [pc, #212]	@ (80041a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040d8:	f7fd f956 	bl	8001388 <HAL_GetTick>
 80040dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80040de:	e009      	b.n	80040f4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80040e0:	f7fd f952 	bl	8001388 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d902      	bls.n	80040f4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	73fb      	strb	r3, [r7, #15]
        break;
 80040f2:	e005      	b.n	8004100 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80040f4:	4b2c      	ldr	r3, [pc, #176]	@ (80041a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1ef      	bne.n	80040e0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004100:	7bfb      	ldrb	r3, [r7, #15]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d14a      	bne.n	800419c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d111      	bne.n	8004130 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800410c:	4b26      	ldr	r3, [pc, #152]	@ (80041a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004114:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	6892      	ldr	r2, [r2, #8]
 800411c:	0211      	lsls	r1, r2, #8
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	68d2      	ldr	r2, [r2, #12]
 8004122:	0912      	lsrs	r2, r2, #4
 8004124:	0452      	lsls	r2, r2, #17
 8004126:	430a      	orrs	r2, r1
 8004128:	491f      	ldr	r1, [pc, #124]	@ (80041a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800412a:	4313      	orrs	r3, r2
 800412c:	614b      	str	r3, [r1, #20]
 800412e:	e011      	b.n	8004154 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004130:	4b1d      	ldr	r3, [pc, #116]	@ (80041a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004138:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	6892      	ldr	r2, [r2, #8]
 8004140:	0211      	lsls	r1, r2, #8
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	6912      	ldr	r2, [r2, #16]
 8004146:	0852      	lsrs	r2, r2, #1
 8004148:	3a01      	subs	r2, #1
 800414a:	0652      	lsls	r2, r2, #25
 800414c:	430a      	orrs	r2, r1
 800414e:	4916      	ldr	r1, [pc, #88]	@ (80041a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004150:	4313      	orrs	r3, r2
 8004152:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004154:	4b14      	ldr	r3, [pc, #80]	@ (80041a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a13      	ldr	r2, [pc, #76]	@ (80041a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800415a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800415e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004160:	f7fd f912 	bl	8001388 <HAL_GetTick>
 8004164:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004166:	e009      	b.n	800417c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004168:	f7fd f90e 	bl	8001388 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b02      	cmp	r3, #2
 8004174:	d902      	bls.n	800417c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	73fb      	strb	r3, [r7, #15]
          break;
 800417a:	e005      	b.n	8004188 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800417c:	4b0a      	ldr	r3, [pc, #40]	@ (80041a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d0ef      	beq.n	8004168 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004188:	7bfb      	ldrb	r3, [r7, #15]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d106      	bne.n	800419c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800418e:	4b06      	ldr	r3, [pc, #24]	@ (80041a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004190:	695a      	ldr	r2, [r3, #20]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	4904      	ldr	r1, [pc, #16]	@ (80041a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004198:	4313      	orrs	r3, r2
 800419a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800419c:	7bfb      	ldrb	r3, [r7, #15]
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	40021000 	.word	0x40021000

080041ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e040      	b.n	8004240 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d106      	bne.n	80041d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f7fc fe2a 	bl	8000e28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2224      	movs	r2, #36	@ 0x24
 80041d8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f022 0201 	bic.w	r2, r2, #1
 80041e8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d002      	beq.n	80041f8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 fc32 	bl	8004a5c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 f977 	bl	80044ec <UART_SetConfig>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b01      	cmp	r3, #1
 8004202:	d101      	bne.n	8004208 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e01b      	b.n	8004240 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004216:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	689a      	ldr	r2, [r3, #8]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004226:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f042 0201 	orr.w	r2, r2, #1
 8004236:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 fcb1 	bl	8004ba0 <UART_CheckIdleState>
 800423e:	4603      	mov	r3, r0
}
 8004240:	4618      	mov	r0, r3
 8004242:	3708      	adds	r7, #8
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b08a      	sub	sp, #40	@ 0x28
 800424c:	af02      	add	r7, sp, #8
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	603b      	str	r3, [r7, #0]
 8004254:	4613      	mov	r3, r2
 8004256:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800425c:	2b20      	cmp	r3, #32
 800425e:	d177      	bne.n	8004350 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d002      	beq.n	800426c <HAL_UART_Transmit+0x24>
 8004266:	88fb      	ldrh	r3, [r7, #6]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d101      	bne.n	8004270 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e070      	b.n	8004352 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2221      	movs	r2, #33	@ 0x21
 800427c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800427e:	f7fd f883 	bl	8001388 <HAL_GetTick>
 8004282:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	88fa      	ldrh	r2, [r7, #6]
 8004288:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	88fa      	ldrh	r2, [r7, #6]
 8004290:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800429c:	d108      	bne.n	80042b0 <HAL_UART_Transmit+0x68>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d104      	bne.n	80042b0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80042a6:	2300      	movs	r3, #0
 80042a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	61bb      	str	r3, [r7, #24]
 80042ae:	e003      	b.n	80042b8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042b4:	2300      	movs	r3, #0
 80042b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80042b8:	e02f      	b.n	800431a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	9300      	str	r3, [sp, #0]
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	2200      	movs	r2, #0
 80042c2:	2180      	movs	r1, #128	@ 0x80
 80042c4:	68f8      	ldr	r0, [r7, #12]
 80042c6:	f000 fd13 	bl	8004cf0 <UART_WaitOnFlagUntilTimeout>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d004      	beq.n	80042da <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2220      	movs	r2, #32
 80042d4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e03b      	b.n	8004352 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d10b      	bne.n	80042f8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	881a      	ldrh	r2, [r3, #0]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042ec:	b292      	uxth	r2, r2
 80042ee:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	3302      	adds	r3, #2
 80042f4:	61bb      	str	r3, [r7, #24]
 80042f6:	e007      	b.n	8004308 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	781a      	ldrb	r2, [r3, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	3301      	adds	r3, #1
 8004306:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800430e:	b29b      	uxth	r3, r3
 8004310:	3b01      	subs	r3, #1
 8004312:	b29a      	uxth	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004320:	b29b      	uxth	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1c9      	bne.n	80042ba <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	9300      	str	r3, [sp, #0]
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	2200      	movs	r2, #0
 800432e:	2140      	movs	r1, #64	@ 0x40
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f000 fcdd 	bl	8004cf0 <UART_WaitOnFlagUntilTimeout>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d004      	beq.n	8004346 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2220      	movs	r2, #32
 8004340:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e005      	b.n	8004352 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2220      	movs	r2, #32
 800434a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800434c:	2300      	movs	r3, #0
 800434e:	e000      	b.n	8004352 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004350:	2302      	movs	r3, #2
  }
}
 8004352:	4618      	mov	r0, r3
 8004354:	3720      	adds	r7, #32
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800435a:	b580      	push	{r7, lr}
 800435c:	b08a      	sub	sp, #40	@ 0x28
 800435e:	af02      	add	r7, sp, #8
 8004360:	60f8      	str	r0, [r7, #12]
 8004362:	60b9      	str	r1, [r7, #8]
 8004364:	603b      	str	r3, [r7, #0]
 8004366:	4613      	mov	r3, r2
 8004368:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004370:	2b20      	cmp	r3, #32
 8004372:	f040 80b6 	bne.w	80044e2 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d002      	beq.n	8004382 <HAL_UART_Receive+0x28>
 800437c:	88fb      	ldrh	r3, [r7, #6]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d101      	bne.n	8004386 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e0ae      	b.n	80044e4 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2222      	movs	r2, #34	@ 0x22
 8004392:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800439c:	f7fc fff4 	bl	8001388 <HAL_GetTick>
 80043a0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	88fa      	ldrh	r2, [r7, #6]
 80043a6:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	88fa      	ldrh	r2, [r7, #6]
 80043ae:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043ba:	d10e      	bne.n	80043da <HAL_UART_Receive+0x80>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d105      	bne.n	80043d0 <HAL_UART_Receive+0x76>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80043ca:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80043ce:	e02d      	b.n	800442c <HAL_UART_Receive+0xd2>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	22ff      	movs	r2, #255	@ 0xff
 80043d4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80043d8:	e028      	b.n	800442c <HAL_UART_Receive+0xd2>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10d      	bne.n	80043fe <HAL_UART_Receive+0xa4>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d104      	bne.n	80043f4 <HAL_UART_Receive+0x9a>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	22ff      	movs	r2, #255	@ 0xff
 80043ee:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80043f2:	e01b      	b.n	800442c <HAL_UART_Receive+0xd2>
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	227f      	movs	r2, #127	@ 0x7f
 80043f8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80043fc:	e016      	b.n	800442c <HAL_UART_Receive+0xd2>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004406:	d10d      	bne.n	8004424 <HAL_UART_Receive+0xca>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d104      	bne.n	800441a <HAL_UART_Receive+0xc0>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	227f      	movs	r2, #127	@ 0x7f
 8004414:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004418:	e008      	b.n	800442c <HAL_UART_Receive+0xd2>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	223f      	movs	r2, #63	@ 0x3f
 800441e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004422:	e003      	b.n	800442c <HAL_UART_Receive+0xd2>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004432:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800443c:	d108      	bne.n	8004450 <HAL_UART_Receive+0xf6>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d104      	bne.n	8004450 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004446:	2300      	movs	r3, #0
 8004448:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	61bb      	str	r3, [r7, #24]
 800444e:	e003      	b.n	8004458 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004454:	2300      	movs	r3, #0
 8004456:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004458:	e037      	b.n	80044ca <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	9300      	str	r3, [sp, #0]
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	2200      	movs	r2, #0
 8004462:	2120      	movs	r1, #32
 8004464:	68f8      	ldr	r0, [r7, #12]
 8004466:	f000 fc43 	bl	8004cf0 <UART_WaitOnFlagUntilTimeout>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d005      	beq.n	800447c <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2220      	movs	r2, #32
 8004474:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e033      	b.n	80044e4 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10c      	bne.n	800449c <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004488:	b29a      	uxth	r2, r3
 800448a:	8a7b      	ldrh	r3, [r7, #18]
 800448c:	4013      	ands	r3, r2
 800448e:	b29a      	uxth	r2, r3
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	3302      	adds	r3, #2
 8004498:	61bb      	str	r3, [r7, #24]
 800449a:	e00d      	b.n	80044b8 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	b2da      	uxtb	r2, r3
 80044a6:	8a7b      	ldrh	r3, [r7, #18]
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	4013      	ands	r3, r2
 80044ac:	b2da      	uxtb	r2, r3
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	3301      	adds	r3, #1
 80044b6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80044be:	b29b      	uxth	r3, r3
 80044c0:	3b01      	subs	r3, #1
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d1c1      	bne.n	800445a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2220      	movs	r2, #32
 80044da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 80044de:	2300      	movs	r3, #0
 80044e0:	e000      	b.n	80044e4 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80044e2:	2302      	movs	r3, #2
  }
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3720      	adds	r7, #32
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044f0:	b08a      	sub	sp, #40	@ 0x28
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044f6:	2300      	movs	r3, #0
 80044f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	689a      	ldr	r2, [r3, #8]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	431a      	orrs	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	431a      	orrs	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	69db      	ldr	r3, [r3, #28]
 8004510:	4313      	orrs	r3, r2
 8004512:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	4ba4      	ldr	r3, [pc, #656]	@ (80047ac <UART_SetConfig+0x2c0>)
 800451c:	4013      	ands	r3, r2
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	6812      	ldr	r2, [r2, #0]
 8004522:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004524:	430b      	orrs	r3, r1
 8004526:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	68da      	ldr	r2, [r3, #12]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	430a      	orrs	r2, r1
 800453c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	699b      	ldr	r3, [r3, #24]
 8004542:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a99      	ldr	r2, [pc, #612]	@ (80047b0 <UART_SetConfig+0x2c4>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d004      	beq.n	8004558 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6a1b      	ldr	r3, [r3, #32]
 8004552:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004554:	4313      	orrs	r3, r2
 8004556:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004568:	430a      	orrs	r2, r1
 800456a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a90      	ldr	r2, [pc, #576]	@ (80047b4 <UART_SetConfig+0x2c8>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d126      	bne.n	80045c4 <UART_SetConfig+0xd8>
 8004576:	4b90      	ldr	r3, [pc, #576]	@ (80047b8 <UART_SetConfig+0x2cc>)
 8004578:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800457c:	f003 0303 	and.w	r3, r3, #3
 8004580:	2b03      	cmp	r3, #3
 8004582:	d81b      	bhi.n	80045bc <UART_SetConfig+0xd0>
 8004584:	a201      	add	r2, pc, #4	@ (adr r2, 800458c <UART_SetConfig+0xa0>)
 8004586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800458a:	bf00      	nop
 800458c:	0800459d 	.word	0x0800459d
 8004590:	080045ad 	.word	0x080045ad
 8004594:	080045a5 	.word	0x080045a5
 8004598:	080045b5 	.word	0x080045b5
 800459c:	2301      	movs	r3, #1
 800459e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045a2:	e116      	b.n	80047d2 <UART_SetConfig+0x2e6>
 80045a4:	2302      	movs	r3, #2
 80045a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045aa:	e112      	b.n	80047d2 <UART_SetConfig+0x2e6>
 80045ac:	2304      	movs	r3, #4
 80045ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045b2:	e10e      	b.n	80047d2 <UART_SetConfig+0x2e6>
 80045b4:	2308      	movs	r3, #8
 80045b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045ba:	e10a      	b.n	80047d2 <UART_SetConfig+0x2e6>
 80045bc:	2310      	movs	r3, #16
 80045be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045c2:	e106      	b.n	80047d2 <UART_SetConfig+0x2e6>
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a7c      	ldr	r2, [pc, #496]	@ (80047bc <UART_SetConfig+0x2d0>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d138      	bne.n	8004640 <UART_SetConfig+0x154>
 80045ce:	4b7a      	ldr	r3, [pc, #488]	@ (80047b8 <UART_SetConfig+0x2cc>)
 80045d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045d4:	f003 030c 	and.w	r3, r3, #12
 80045d8:	2b0c      	cmp	r3, #12
 80045da:	d82d      	bhi.n	8004638 <UART_SetConfig+0x14c>
 80045dc:	a201      	add	r2, pc, #4	@ (adr r2, 80045e4 <UART_SetConfig+0xf8>)
 80045de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e2:	bf00      	nop
 80045e4:	08004619 	.word	0x08004619
 80045e8:	08004639 	.word	0x08004639
 80045ec:	08004639 	.word	0x08004639
 80045f0:	08004639 	.word	0x08004639
 80045f4:	08004629 	.word	0x08004629
 80045f8:	08004639 	.word	0x08004639
 80045fc:	08004639 	.word	0x08004639
 8004600:	08004639 	.word	0x08004639
 8004604:	08004621 	.word	0x08004621
 8004608:	08004639 	.word	0x08004639
 800460c:	08004639 	.word	0x08004639
 8004610:	08004639 	.word	0x08004639
 8004614:	08004631 	.word	0x08004631
 8004618:	2300      	movs	r3, #0
 800461a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800461e:	e0d8      	b.n	80047d2 <UART_SetConfig+0x2e6>
 8004620:	2302      	movs	r3, #2
 8004622:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004626:	e0d4      	b.n	80047d2 <UART_SetConfig+0x2e6>
 8004628:	2304      	movs	r3, #4
 800462a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800462e:	e0d0      	b.n	80047d2 <UART_SetConfig+0x2e6>
 8004630:	2308      	movs	r3, #8
 8004632:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004636:	e0cc      	b.n	80047d2 <UART_SetConfig+0x2e6>
 8004638:	2310      	movs	r3, #16
 800463a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800463e:	e0c8      	b.n	80047d2 <UART_SetConfig+0x2e6>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a5e      	ldr	r2, [pc, #376]	@ (80047c0 <UART_SetConfig+0x2d4>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d125      	bne.n	8004696 <UART_SetConfig+0x1aa>
 800464a:	4b5b      	ldr	r3, [pc, #364]	@ (80047b8 <UART_SetConfig+0x2cc>)
 800464c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004650:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004654:	2b30      	cmp	r3, #48	@ 0x30
 8004656:	d016      	beq.n	8004686 <UART_SetConfig+0x19a>
 8004658:	2b30      	cmp	r3, #48	@ 0x30
 800465a:	d818      	bhi.n	800468e <UART_SetConfig+0x1a2>
 800465c:	2b20      	cmp	r3, #32
 800465e:	d00a      	beq.n	8004676 <UART_SetConfig+0x18a>
 8004660:	2b20      	cmp	r3, #32
 8004662:	d814      	bhi.n	800468e <UART_SetConfig+0x1a2>
 8004664:	2b00      	cmp	r3, #0
 8004666:	d002      	beq.n	800466e <UART_SetConfig+0x182>
 8004668:	2b10      	cmp	r3, #16
 800466a:	d008      	beq.n	800467e <UART_SetConfig+0x192>
 800466c:	e00f      	b.n	800468e <UART_SetConfig+0x1a2>
 800466e:	2300      	movs	r3, #0
 8004670:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004674:	e0ad      	b.n	80047d2 <UART_SetConfig+0x2e6>
 8004676:	2302      	movs	r3, #2
 8004678:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800467c:	e0a9      	b.n	80047d2 <UART_SetConfig+0x2e6>
 800467e:	2304      	movs	r3, #4
 8004680:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004684:	e0a5      	b.n	80047d2 <UART_SetConfig+0x2e6>
 8004686:	2308      	movs	r3, #8
 8004688:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800468c:	e0a1      	b.n	80047d2 <UART_SetConfig+0x2e6>
 800468e:	2310      	movs	r3, #16
 8004690:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004694:	e09d      	b.n	80047d2 <UART_SetConfig+0x2e6>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a4a      	ldr	r2, [pc, #296]	@ (80047c4 <UART_SetConfig+0x2d8>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d125      	bne.n	80046ec <UART_SetConfig+0x200>
 80046a0:	4b45      	ldr	r3, [pc, #276]	@ (80047b8 <UART_SetConfig+0x2cc>)
 80046a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046a6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80046aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80046ac:	d016      	beq.n	80046dc <UART_SetConfig+0x1f0>
 80046ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80046b0:	d818      	bhi.n	80046e4 <UART_SetConfig+0x1f8>
 80046b2:	2b80      	cmp	r3, #128	@ 0x80
 80046b4:	d00a      	beq.n	80046cc <UART_SetConfig+0x1e0>
 80046b6:	2b80      	cmp	r3, #128	@ 0x80
 80046b8:	d814      	bhi.n	80046e4 <UART_SetConfig+0x1f8>
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d002      	beq.n	80046c4 <UART_SetConfig+0x1d8>
 80046be:	2b40      	cmp	r3, #64	@ 0x40
 80046c0:	d008      	beq.n	80046d4 <UART_SetConfig+0x1e8>
 80046c2:	e00f      	b.n	80046e4 <UART_SetConfig+0x1f8>
 80046c4:	2300      	movs	r3, #0
 80046c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046ca:	e082      	b.n	80047d2 <UART_SetConfig+0x2e6>
 80046cc:	2302      	movs	r3, #2
 80046ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046d2:	e07e      	b.n	80047d2 <UART_SetConfig+0x2e6>
 80046d4:	2304      	movs	r3, #4
 80046d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046da:	e07a      	b.n	80047d2 <UART_SetConfig+0x2e6>
 80046dc:	2308      	movs	r3, #8
 80046de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046e2:	e076      	b.n	80047d2 <UART_SetConfig+0x2e6>
 80046e4:	2310      	movs	r3, #16
 80046e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046ea:	e072      	b.n	80047d2 <UART_SetConfig+0x2e6>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a35      	ldr	r2, [pc, #212]	@ (80047c8 <UART_SetConfig+0x2dc>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d12a      	bne.n	800474c <UART_SetConfig+0x260>
 80046f6:	4b30      	ldr	r3, [pc, #192]	@ (80047b8 <UART_SetConfig+0x2cc>)
 80046f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004700:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004704:	d01a      	beq.n	800473c <UART_SetConfig+0x250>
 8004706:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800470a:	d81b      	bhi.n	8004744 <UART_SetConfig+0x258>
 800470c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004710:	d00c      	beq.n	800472c <UART_SetConfig+0x240>
 8004712:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004716:	d815      	bhi.n	8004744 <UART_SetConfig+0x258>
 8004718:	2b00      	cmp	r3, #0
 800471a:	d003      	beq.n	8004724 <UART_SetConfig+0x238>
 800471c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004720:	d008      	beq.n	8004734 <UART_SetConfig+0x248>
 8004722:	e00f      	b.n	8004744 <UART_SetConfig+0x258>
 8004724:	2300      	movs	r3, #0
 8004726:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800472a:	e052      	b.n	80047d2 <UART_SetConfig+0x2e6>
 800472c:	2302      	movs	r3, #2
 800472e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004732:	e04e      	b.n	80047d2 <UART_SetConfig+0x2e6>
 8004734:	2304      	movs	r3, #4
 8004736:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800473a:	e04a      	b.n	80047d2 <UART_SetConfig+0x2e6>
 800473c:	2308      	movs	r3, #8
 800473e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004742:	e046      	b.n	80047d2 <UART_SetConfig+0x2e6>
 8004744:	2310      	movs	r3, #16
 8004746:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800474a:	e042      	b.n	80047d2 <UART_SetConfig+0x2e6>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a17      	ldr	r2, [pc, #92]	@ (80047b0 <UART_SetConfig+0x2c4>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d13a      	bne.n	80047cc <UART_SetConfig+0x2e0>
 8004756:	4b18      	ldr	r3, [pc, #96]	@ (80047b8 <UART_SetConfig+0x2cc>)
 8004758:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800475c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004760:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004764:	d01a      	beq.n	800479c <UART_SetConfig+0x2b0>
 8004766:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800476a:	d81b      	bhi.n	80047a4 <UART_SetConfig+0x2b8>
 800476c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004770:	d00c      	beq.n	800478c <UART_SetConfig+0x2a0>
 8004772:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004776:	d815      	bhi.n	80047a4 <UART_SetConfig+0x2b8>
 8004778:	2b00      	cmp	r3, #0
 800477a:	d003      	beq.n	8004784 <UART_SetConfig+0x298>
 800477c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004780:	d008      	beq.n	8004794 <UART_SetConfig+0x2a8>
 8004782:	e00f      	b.n	80047a4 <UART_SetConfig+0x2b8>
 8004784:	2300      	movs	r3, #0
 8004786:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800478a:	e022      	b.n	80047d2 <UART_SetConfig+0x2e6>
 800478c:	2302      	movs	r3, #2
 800478e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004792:	e01e      	b.n	80047d2 <UART_SetConfig+0x2e6>
 8004794:	2304      	movs	r3, #4
 8004796:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800479a:	e01a      	b.n	80047d2 <UART_SetConfig+0x2e6>
 800479c:	2308      	movs	r3, #8
 800479e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047a2:	e016      	b.n	80047d2 <UART_SetConfig+0x2e6>
 80047a4:	2310      	movs	r3, #16
 80047a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047aa:	e012      	b.n	80047d2 <UART_SetConfig+0x2e6>
 80047ac:	efff69f3 	.word	0xefff69f3
 80047b0:	40008000 	.word	0x40008000
 80047b4:	40013800 	.word	0x40013800
 80047b8:	40021000 	.word	0x40021000
 80047bc:	40004400 	.word	0x40004400
 80047c0:	40004800 	.word	0x40004800
 80047c4:	40004c00 	.word	0x40004c00
 80047c8:	40005000 	.word	0x40005000
 80047cc:	2310      	movs	r3, #16
 80047ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a9f      	ldr	r2, [pc, #636]	@ (8004a54 <UART_SetConfig+0x568>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d17a      	bne.n	80048d2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80047dc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80047e0:	2b08      	cmp	r3, #8
 80047e2:	d824      	bhi.n	800482e <UART_SetConfig+0x342>
 80047e4:	a201      	add	r2, pc, #4	@ (adr r2, 80047ec <UART_SetConfig+0x300>)
 80047e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ea:	bf00      	nop
 80047ec:	08004811 	.word	0x08004811
 80047f0:	0800482f 	.word	0x0800482f
 80047f4:	08004819 	.word	0x08004819
 80047f8:	0800482f 	.word	0x0800482f
 80047fc:	0800481f 	.word	0x0800481f
 8004800:	0800482f 	.word	0x0800482f
 8004804:	0800482f 	.word	0x0800482f
 8004808:	0800482f 	.word	0x0800482f
 800480c:	08004827 	.word	0x08004827
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004810:	f7fe ff84 	bl	800371c <HAL_RCC_GetPCLK1Freq>
 8004814:	61f8      	str	r0, [r7, #28]
        break;
 8004816:	e010      	b.n	800483a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004818:	4b8f      	ldr	r3, [pc, #572]	@ (8004a58 <UART_SetConfig+0x56c>)
 800481a:	61fb      	str	r3, [r7, #28]
        break;
 800481c:	e00d      	b.n	800483a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800481e:	f7fe fee5 	bl	80035ec <HAL_RCC_GetSysClockFreq>
 8004822:	61f8      	str	r0, [r7, #28]
        break;
 8004824:	e009      	b.n	800483a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004826:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800482a:	61fb      	str	r3, [r7, #28]
        break;
 800482c:	e005      	b.n	800483a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800482e:	2300      	movs	r3, #0
 8004830:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004838:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	2b00      	cmp	r3, #0
 800483e:	f000 80fb 	beq.w	8004a38 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	685a      	ldr	r2, [r3, #4]
 8004846:	4613      	mov	r3, r2
 8004848:	005b      	lsls	r3, r3, #1
 800484a:	4413      	add	r3, r2
 800484c:	69fa      	ldr	r2, [r7, #28]
 800484e:	429a      	cmp	r2, r3
 8004850:	d305      	bcc.n	800485e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004858:	69fa      	ldr	r2, [r7, #28]
 800485a:	429a      	cmp	r2, r3
 800485c:	d903      	bls.n	8004866 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004864:	e0e8      	b.n	8004a38 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	2200      	movs	r2, #0
 800486a:	461c      	mov	r4, r3
 800486c:	4615      	mov	r5, r2
 800486e:	f04f 0200 	mov.w	r2, #0
 8004872:	f04f 0300 	mov.w	r3, #0
 8004876:	022b      	lsls	r3, r5, #8
 8004878:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800487c:	0222      	lsls	r2, r4, #8
 800487e:	68f9      	ldr	r1, [r7, #12]
 8004880:	6849      	ldr	r1, [r1, #4]
 8004882:	0849      	lsrs	r1, r1, #1
 8004884:	2000      	movs	r0, #0
 8004886:	4688      	mov	r8, r1
 8004888:	4681      	mov	r9, r0
 800488a:	eb12 0a08 	adds.w	sl, r2, r8
 800488e:	eb43 0b09 	adc.w	fp, r3, r9
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	603b      	str	r3, [r7, #0]
 800489a:	607a      	str	r2, [r7, #4]
 800489c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048a0:	4650      	mov	r0, sl
 80048a2:	4659      	mov	r1, fp
 80048a4:	f7fb fce4 	bl	8000270 <__aeabi_uldivmod>
 80048a8:	4602      	mov	r2, r0
 80048aa:	460b      	mov	r3, r1
 80048ac:	4613      	mov	r3, r2
 80048ae:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048b6:	d308      	bcc.n	80048ca <UART_SetConfig+0x3de>
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048be:	d204      	bcs.n	80048ca <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	60da      	str	r2, [r3, #12]
 80048c8:	e0b6      	b.n	8004a38 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80048d0:	e0b2      	b.n	8004a38 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	69db      	ldr	r3, [r3, #28]
 80048d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048da:	d15e      	bne.n	800499a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80048dc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80048e0:	2b08      	cmp	r3, #8
 80048e2:	d828      	bhi.n	8004936 <UART_SetConfig+0x44a>
 80048e4:	a201      	add	r2, pc, #4	@ (adr r2, 80048ec <UART_SetConfig+0x400>)
 80048e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ea:	bf00      	nop
 80048ec:	08004911 	.word	0x08004911
 80048f0:	08004919 	.word	0x08004919
 80048f4:	08004921 	.word	0x08004921
 80048f8:	08004937 	.word	0x08004937
 80048fc:	08004927 	.word	0x08004927
 8004900:	08004937 	.word	0x08004937
 8004904:	08004937 	.word	0x08004937
 8004908:	08004937 	.word	0x08004937
 800490c:	0800492f 	.word	0x0800492f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004910:	f7fe ff04 	bl	800371c <HAL_RCC_GetPCLK1Freq>
 8004914:	61f8      	str	r0, [r7, #28]
        break;
 8004916:	e014      	b.n	8004942 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004918:	f7fe ff16 	bl	8003748 <HAL_RCC_GetPCLK2Freq>
 800491c:	61f8      	str	r0, [r7, #28]
        break;
 800491e:	e010      	b.n	8004942 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004920:	4b4d      	ldr	r3, [pc, #308]	@ (8004a58 <UART_SetConfig+0x56c>)
 8004922:	61fb      	str	r3, [r7, #28]
        break;
 8004924:	e00d      	b.n	8004942 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004926:	f7fe fe61 	bl	80035ec <HAL_RCC_GetSysClockFreq>
 800492a:	61f8      	str	r0, [r7, #28]
        break;
 800492c:	e009      	b.n	8004942 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800492e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004932:	61fb      	str	r3, [r7, #28]
        break;
 8004934:	e005      	b.n	8004942 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004936:	2300      	movs	r3, #0
 8004938:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004940:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d077      	beq.n	8004a38 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	005a      	lsls	r2, r3, #1
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	085b      	lsrs	r3, r3, #1
 8004952:	441a      	add	r2, r3
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	fbb2 f3f3 	udiv	r3, r2, r3
 800495c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	2b0f      	cmp	r3, #15
 8004962:	d916      	bls.n	8004992 <UART_SetConfig+0x4a6>
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800496a:	d212      	bcs.n	8004992 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	b29b      	uxth	r3, r3
 8004970:	f023 030f 	bic.w	r3, r3, #15
 8004974:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	085b      	lsrs	r3, r3, #1
 800497a:	b29b      	uxth	r3, r3
 800497c:	f003 0307 	and.w	r3, r3, #7
 8004980:	b29a      	uxth	r2, r3
 8004982:	8afb      	ldrh	r3, [r7, #22]
 8004984:	4313      	orrs	r3, r2
 8004986:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	8afa      	ldrh	r2, [r7, #22]
 800498e:	60da      	str	r2, [r3, #12]
 8004990:	e052      	b.n	8004a38 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004998:	e04e      	b.n	8004a38 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800499a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800499e:	2b08      	cmp	r3, #8
 80049a0:	d827      	bhi.n	80049f2 <UART_SetConfig+0x506>
 80049a2:	a201      	add	r2, pc, #4	@ (adr r2, 80049a8 <UART_SetConfig+0x4bc>)
 80049a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a8:	080049cd 	.word	0x080049cd
 80049ac:	080049d5 	.word	0x080049d5
 80049b0:	080049dd 	.word	0x080049dd
 80049b4:	080049f3 	.word	0x080049f3
 80049b8:	080049e3 	.word	0x080049e3
 80049bc:	080049f3 	.word	0x080049f3
 80049c0:	080049f3 	.word	0x080049f3
 80049c4:	080049f3 	.word	0x080049f3
 80049c8:	080049eb 	.word	0x080049eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049cc:	f7fe fea6 	bl	800371c <HAL_RCC_GetPCLK1Freq>
 80049d0:	61f8      	str	r0, [r7, #28]
        break;
 80049d2:	e014      	b.n	80049fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049d4:	f7fe feb8 	bl	8003748 <HAL_RCC_GetPCLK2Freq>
 80049d8:	61f8      	str	r0, [r7, #28]
        break;
 80049da:	e010      	b.n	80049fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049dc:	4b1e      	ldr	r3, [pc, #120]	@ (8004a58 <UART_SetConfig+0x56c>)
 80049de:	61fb      	str	r3, [r7, #28]
        break;
 80049e0:	e00d      	b.n	80049fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049e2:	f7fe fe03 	bl	80035ec <HAL_RCC_GetSysClockFreq>
 80049e6:	61f8      	str	r0, [r7, #28]
        break;
 80049e8:	e009      	b.n	80049fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049ee:	61fb      	str	r3, [r7, #28]
        break;
 80049f0:	e005      	b.n	80049fe <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80049f2:	2300      	movs	r3, #0
 80049f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80049fc:	bf00      	nop
    }

    if (pclk != 0U)
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d019      	beq.n	8004a38 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	085a      	lsrs	r2, r3, #1
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	441a      	add	r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a16:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	2b0f      	cmp	r3, #15
 8004a1c:	d909      	bls.n	8004a32 <UART_SetConfig+0x546>
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a24:	d205      	bcs.n	8004a32 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	b29a      	uxth	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	60da      	str	r2, [r3, #12]
 8004a30:	e002      	b.n	8004a38 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004a44:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3728      	adds	r7, #40	@ 0x28
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a52:	bf00      	nop
 8004a54:	40008000 	.word	0x40008000
 8004a58:	00f42400 	.word	0x00f42400

08004a5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a68:	f003 0308 	and.w	r3, r3, #8
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00a      	beq.n	8004a86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	430a      	orrs	r2, r1
 8004a84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00a      	beq.n	8004aa8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aac:	f003 0302 	and.w	r3, r3, #2
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d00a      	beq.n	8004aca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ace:	f003 0304 	and.w	r3, r3, #4
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00a      	beq.n	8004aec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	430a      	orrs	r2, r1
 8004aea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af0:	f003 0310 	and.w	r3, r3, #16
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d00a      	beq.n	8004b0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b12:	f003 0320 	and.w	r3, r3, #32
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00a      	beq.n	8004b30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d01a      	beq.n	8004b72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b5a:	d10a      	bne.n	8004b72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00a      	beq.n	8004b94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	430a      	orrs	r2, r1
 8004b92:	605a      	str	r2, [r3, #4]
  }
}
 8004b94:	bf00      	nop
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b098      	sub	sp, #96	@ 0x60
 8004ba4:	af02      	add	r7, sp, #8
 8004ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004bb0:	f7fc fbea 	bl	8001388 <HAL_GetTick>
 8004bb4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0308 	and.w	r3, r3, #8
 8004bc0:	2b08      	cmp	r3, #8
 8004bc2:	d12e      	bne.n	8004c22 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bc4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004bc8:	9300      	str	r3, [sp, #0]
 8004bca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 f88c 	bl	8004cf0 <UART_WaitOnFlagUntilTimeout>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d021      	beq.n	8004c22 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004be6:	e853 3f00 	ldrex	r3, [r3]
 8004bea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004bec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004bf2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bfc:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bfe:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c00:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c04:	e841 2300 	strex	r3, r2, [r1]
 8004c08:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d1e6      	bne.n	8004bde <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2220      	movs	r2, #32
 8004c14:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e062      	b.n	8004ce8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0304 	and.w	r3, r3, #4
 8004c2c:	2b04      	cmp	r3, #4
 8004c2e:	d149      	bne.n	8004cc4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c30:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004c34:	9300      	str	r3, [sp, #0]
 8004c36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f856 	bl	8004cf0 <UART_WaitOnFlagUntilTimeout>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d03c      	beq.n	8004cc4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c52:	e853 3f00 	ldrex	r3, [r3]
 8004c56:	623b      	str	r3, [r7, #32]
   return(result);
 8004c58:	6a3b      	ldr	r3, [r7, #32]
 8004c5a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	461a      	mov	r2, r3
 8004c66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c68:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c6c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c70:	e841 2300 	strex	r3, r2, [r1]
 8004c74:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1e6      	bne.n	8004c4a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	3308      	adds	r3, #8
 8004c82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	e853 3f00 	ldrex	r3, [r3]
 8004c8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f023 0301 	bic.w	r3, r3, #1
 8004c92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	3308      	adds	r3, #8
 8004c9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c9c:	61fa      	str	r2, [r7, #28]
 8004c9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca0:	69b9      	ldr	r1, [r7, #24]
 8004ca2:	69fa      	ldr	r2, [r7, #28]
 8004ca4:	e841 2300 	strex	r3, r2, [r1]
 8004ca8:	617b      	str	r3, [r7, #20]
   return(result);
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1e5      	bne.n	8004c7c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2220      	movs	r2, #32
 8004cb4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e011      	b.n	8004ce8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2220      	movs	r2, #32
 8004cce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3758      	adds	r7, #88	@ 0x58
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	603b      	str	r3, [r7, #0]
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d00:	e04f      	b.n	8004da2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d08:	d04b      	beq.n	8004da2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d0a:	f7fc fb3d 	bl	8001388 <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	69ba      	ldr	r2, [r7, #24]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d302      	bcc.n	8004d20 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d101      	bne.n	8004d24 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e04e      	b.n	8004dc2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0304 	and.w	r3, r3, #4
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d037      	beq.n	8004da2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	2b80      	cmp	r3, #128	@ 0x80
 8004d36:	d034      	beq.n	8004da2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	2b40      	cmp	r3, #64	@ 0x40
 8004d3c:	d031      	beq.n	8004da2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	69db      	ldr	r3, [r3, #28]
 8004d44:	f003 0308 	and.w	r3, r3, #8
 8004d48:	2b08      	cmp	r3, #8
 8004d4a:	d110      	bne.n	8004d6e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2208      	movs	r2, #8
 8004d52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f000 f838 	bl	8004dca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2208      	movs	r2, #8
 8004d5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e029      	b.n	8004dc2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	69db      	ldr	r3, [r3, #28]
 8004d74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d7c:	d111      	bne.n	8004da2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004d86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	f000 f81e 	bl	8004dca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2220      	movs	r2, #32
 8004d92:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e00f      	b.n	8004dc2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	69da      	ldr	r2, [r3, #28]
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	4013      	ands	r3, r2
 8004dac:	68ba      	ldr	r2, [r7, #8]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	bf0c      	ite	eq
 8004db2:	2301      	moveq	r3, #1
 8004db4:	2300      	movne	r3, #0
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	461a      	mov	r2, r3
 8004dba:	79fb      	ldrb	r3, [r7, #7]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d0a0      	beq.n	8004d02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3710      	adds	r7, #16
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004dca:	b480      	push	{r7}
 8004dcc:	b095      	sub	sp, #84	@ 0x54
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dda:	e853 3f00 	ldrex	r3, [r3]
 8004dde:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004de2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004de6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	461a      	mov	r2, r3
 8004dee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004df0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004df2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004df6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004df8:	e841 2300 	strex	r3, r2, [r1]
 8004dfc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004dfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1e6      	bne.n	8004dd2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	3308      	adds	r3, #8
 8004e0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e0c:	6a3b      	ldr	r3, [r7, #32]
 8004e0e:	e853 3f00 	ldrex	r3, [r3]
 8004e12:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	f023 0301 	bic.w	r3, r3, #1
 8004e1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	3308      	adds	r3, #8
 8004e22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e24:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e26:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e2c:	e841 2300 	strex	r3, r2, [r1]
 8004e30:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d1e5      	bne.n	8004e04 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d118      	bne.n	8004e72 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	e853 3f00 	ldrex	r3, [r3]
 8004e4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	f023 0310 	bic.w	r3, r3, #16
 8004e54:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e5e:	61bb      	str	r3, [r7, #24]
 8004e60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e62:	6979      	ldr	r1, [r7, #20]
 8004e64:	69ba      	ldr	r2, [r7, #24]
 8004e66:	e841 2300 	strex	r3, r2, [r1]
 8004e6a:	613b      	str	r3, [r7, #16]
   return(result);
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1e6      	bne.n	8004e40 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2220      	movs	r2, #32
 8004e76:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004e86:	bf00      	nop
 8004e88:	3754      	adds	r7, #84	@ 0x54
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
	...

08004e94 <std>:
 8004e94:	2300      	movs	r3, #0
 8004e96:	b510      	push	{r4, lr}
 8004e98:	4604      	mov	r4, r0
 8004e9a:	e9c0 3300 	strd	r3, r3, [r0]
 8004e9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ea2:	6083      	str	r3, [r0, #8]
 8004ea4:	8181      	strh	r1, [r0, #12]
 8004ea6:	6643      	str	r3, [r0, #100]	@ 0x64
 8004ea8:	81c2      	strh	r2, [r0, #14]
 8004eaa:	6183      	str	r3, [r0, #24]
 8004eac:	4619      	mov	r1, r3
 8004eae:	2208      	movs	r2, #8
 8004eb0:	305c      	adds	r0, #92	@ 0x5c
 8004eb2:	f000 f9f9 	bl	80052a8 <memset>
 8004eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8004eec <std+0x58>)
 8004eb8:	6263      	str	r3, [r4, #36]	@ 0x24
 8004eba:	4b0d      	ldr	r3, [pc, #52]	@ (8004ef0 <std+0x5c>)
 8004ebc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004ebe:	4b0d      	ldr	r3, [pc, #52]	@ (8004ef4 <std+0x60>)
 8004ec0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8004ef8 <std+0x64>)
 8004ec4:	6323      	str	r3, [r4, #48]	@ 0x30
 8004ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8004efc <std+0x68>)
 8004ec8:	6224      	str	r4, [r4, #32]
 8004eca:	429c      	cmp	r4, r3
 8004ecc:	d006      	beq.n	8004edc <std+0x48>
 8004ece:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004ed2:	4294      	cmp	r4, r2
 8004ed4:	d002      	beq.n	8004edc <std+0x48>
 8004ed6:	33d0      	adds	r3, #208	@ 0xd0
 8004ed8:	429c      	cmp	r4, r3
 8004eda:	d105      	bne.n	8004ee8 <std+0x54>
 8004edc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004ee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ee4:	f000 ba58 	b.w	8005398 <__retarget_lock_init_recursive>
 8004ee8:	bd10      	pop	{r4, pc}
 8004eea:	bf00      	nop
 8004eec:	080050f9 	.word	0x080050f9
 8004ef0:	0800511b 	.word	0x0800511b
 8004ef4:	08005153 	.word	0x08005153
 8004ef8:	08005177 	.word	0x08005177
 8004efc:	20000374 	.word	0x20000374

08004f00 <stdio_exit_handler>:
 8004f00:	4a02      	ldr	r2, [pc, #8]	@ (8004f0c <stdio_exit_handler+0xc>)
 8004f02:	4903      	ldr	r1, [pc, #12]	@ (8004f10 <stdio_exit_handler+0x10>)
 8004f04:	4803      	ldr	r0, [pc, #12]	@ (8004f14 <stdio_exit_handler+0x14>)
 8004f06:	f000 b869 	b.w	8004fdc <_fwalk_sglue>
 8004f0a:	bf00      	nop
 8004f0c:	2000000c 	.word	0x2000000c
 8004f10:	08005c35 	.word	0x08005c35
 8004f14:	2000001c 	.word	0x2000001c

08004f18 <cleanup_stdio>:
 8004f18:	6841      	ldr	r1, [r0, #4]
 8004f1a:	4b0c      	ldr	r3, [pc, #48]	@ (8004f4c <cleanup_stdio+0x34>)
 8004f1c:	4299      	cmp	r1, r3
 8004f1e:	b510      	push	{r4, lr}
 8004f20:	4604      	mov	r4, r0
 8004f22:	d001      	beq.n	8004f28 <cleanup_stdio+0x10>
 8004f24:	f000 fe86 	bl	8005c34 <_fflush_r>
 8004f28:	68a1      	ldr	r1, [r4, #8]
 8004f2a:	4b09      	ldr	r3, [pc, #36]	@ (8004f50 <cleanup_stdio+0x38>)
 8004f2c:	4299      	cmp	r1, r3
 8004f2e:	d002      	beq.n	8004f36 <cleanup_stdio+0x1e>
 8004f30:	4620      	mov	r0, r4
 8004f32:	f000 fe7f 	bl	8005c34 <_fflush_r>
 8004f36:	68e1      	ldr	r1, [r4, #12]
 8004f38:	4b06      	ldr	r3, [pc, #24]	@ (8004f54 <cleanup_stdio+0x3c>)
 8004f3a:	4299      	cmp	r1, r3
 8004f3c:	d004      	beq.n	8004f48 <cleanup_stdio+0x30>
 8004f3e:	4620      	mov	r0, r4
 8004f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f44:	f000 be76 	b.w	8005c34 <_fflush_r>
 8004f48:	bd10      	pop	{r4, pc}
 8004f4a:	bf00      	nop
 8004f4c:	20000374 	.word	0x20000374
 8004f50:	200003dc 	.word	0x200003dc
 8004f54:	20000444 	.word	0x20000444

08004f58 <global_stdio_init.part.0>:
 8004f58:	b510      	push	{r4, lr}
 8004f5a:	4b0b      	ldr	r3, [pc, #44]	@ (8004f88 <global_stdio_init.part.0+0x30>)
 8004f5c:	4c0b      	ldr	r4, [pc, #44]	@ (8004f8c <global_stdio_init.part.0+0x34>)
 8004f5e:	4a0c      	ldr	r2, [pc, #48]	@ (8004f90 <global_stdio_init.part.0+0x38>)
 8004f60:	601a      	str	r2, [r3, #0]
 8004f62:	4620      	mov	r0, r4
 8004f64:	2200      	movs	r2, #0
 8004f66:	2104      	movs	r1, #4
 8004f68:	f7ff ff94 	bl	8004e94 <std>
 8004f6c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004f70:	2201      	movs	r2, #1
 8004f72:	2109      	movs	r1, #9
 8004f74:	f7ff ff8e 	bl	8004e94 <std>
 8004f78:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004f7c:	2202      	movs	r2, #2
 8004f7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f82:	2112      	movs	r1, #18
 8004f84:	f7ff bf86 	b.w	8004e94 <std>
 8004f88:	200004ac 	.word	0x200004ac
 8004f8c:	20000374 	.word	0x20000374
 8004f90:	08004f01 	.word	0x08004f01

08004f94 <__sfp_lock_acquire>:
 8004f94:	4801      	ldr	r0, [pc, #4]	@ (8004f9c <__sfp_lock_acquire+0x8>)
 8004f96:	f000 ba00 	b.w	800539a <__retarget_lock_acquire_recursive>
 8004f9a:	bf00      	nop
 8004f9c:	200004b5 	.word	0x200004b5

08004fa0 <__sfp_lock_release>:
 8004fa0:	4801      	ldr	r0, [pc, #4]	@ (8004fa8 <__sfp_lock_release+0x8>)
 8004fa2:	f000 b9fb 	b.w	800539c <__retarget_lock_release_recursive>
 8004fa6:	bf00      	nop
 8004fa8:	200004b5 	.word	0x200004b5

08004fac <__sinit>:
 8004fac:	b510      	push	{r4, lr}
 8004fae:	4604      	mov	r4, r0
 8004fb0:	f7ff fff0 	bl	8004f94 <__sfp_lock_acquire>
 8004fb4:	6a23      	ldr	r3, [r4, #32]
 8004fb6:	b11b      	cbz	r3, 8004fc0 <__sinit+0x14>
 8004fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fbc:	f7ff bff0 	b.w	8004fa0 <__sfp_lock_release>
 8004fc0:	4b04      	ldr	r3, [pc, #16]	@ (8004fd4 <__sinit+0x28>)
 8004fc2:	6223      	str	r3, [r4, #32]
 8004fc4:	4b04      	ldr	r3, [pc, #16]	@ (8004fd8 <__sinit+0x2c>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d1f5      	bne.n	8004fb8 <__sinit+0xc>
 8004fcc:	f7ff ffc4 	bl	8004f58 <global_stdio_init.part.0>
 8004fd0:	e7f2      	b.n	8004fb8 <__sinit+0xc>
 8004fd2:	bf00      	nop
 8004fd4:	08004f19 	.word	0x08004f19
 8004fd8:	200004ac 	.word	0x200004ac

08004fdc <_fwalk_sglue>:
 8004fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fe0:	4607      	mov	r7, r0
 8004fe2:	4688      	mov	r8, r1
 8004fe4:	4614      	mov	r4, r2
 8004fe6:	2600      	movs	r6, #0
 8004fe8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004fec:	f1b9 0901 	subs.w	r9, r9, #1
 8004ff0:	d505      	bpl.n	8004ffe <_fwalk_sglue+0x22>
 8004ff2:	6824      	ldr	r4, [r4, #0]
 8004ff4:	2c00      	cmp	r4, #0
 8004ff6:	d1f7      	bne.n	8004fe8 <_fwalk_sglue+0xc>
 8004ff8:	4630      	mov	r0, r6
 8004ffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ffe:	89ab      	ldrh	r3, [r5, #12]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d907      	bls.n	8005014 <_fwalk_sglue+0x38>
 8005004:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005008:	3301      	adds	r3, #1
 800500a:	d003      	beq.n	8005014 <_fwalk_sglue+0x38>
 800500c:	4629      	mov	r1, r5
 800500e:	4638      	mov	r0, r7
 8005010:	47c0      	blx	r8
 8005012:	4306      	orrs	r6, r0
 8005014:	3568      	adds	r5, #104	@ 0x68
 8005016:	e7e9      	b.n	8004fec <_fwalk_sglue+0x10>

08005018 <iprintf>:
 8005018:	b40f      	push	{r0, r1, r2, r3}
 800501a:	b507      	push	{r0, r1, r2, lr}
 800501c:	4906      	ldr	r1, [pc, #24]	@ (8005038 <iprintf+0x20>)
 800501e:	ab04      	add	r3, sp, #16
 8005020:	6808      	ldr	r0, [r1, #0]
 8005022:	f853 2b04 	ldr.w	r2, [r3], #4
 8005026:	6881      	ldr	r1, [r0, #8]
 8005028:	9301      	str	r3, [sp, #4]
 800502a:	f000 fadb 	bl	80055e4 <_vfiprintf_r>
 800502e:	b003      	add	sp, #12
 8005030:	f85d eb04 	ldr.w	lr, [sp], #4
 8005034:	b004      	add	sp, #16
 8005036:	4770      	bx	lr
 8005038:	20000018 	.word	0x20000018

0800503c <_puts_r>:
 800503c:	6a03      	ldr	r3, [r0, #32]
 800503e:	b570      	push	{r4, r5, r6, lr}
 8005040:	6884      	ldr	r4, [r0, #8]
 8005042:	4605      	mov	r5, r0
 8005044:	460e      	mov	r6, r1
 8005046:	b90b      	cbnz	r3, 800504c <_puts_r+0x10>
 8005048:	f7ff ffb0 	bl	8004fac <__sinit>
 800504c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800504e:	07db      	lsls	r3, r3, #31
 8005050:	d405      	bmi.n	800505e <_puts_r+0x22>
 8005052:	89a3      	ldrh	r3, [r4, #12]
 8005054:	0598      	lsls	r0, r3, #22
 8005056:	d402      	bmi.n	800505e <_puts_r+0x22>
 8005058:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800505a:	f000 f99e 	bl	800539a <__retarget_lock_acquire_recursive>
 800505e:	89a3      	ldrh	r3, [r4, #12]
 8005060:	0719      	lsls	r1, r3, #28
 8005062:	d502      	bpl.n	800506a <_puts_r+0x2e>
 8005064:	6923      	ldr	r3, [r4, #16]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d135      	bne.n	80050d6 <_puts_r+0x9a>
 800506a:	4621      	mov	r1, r4
 800506c:	4628      	mov	r0, r5
 800506e:	f000 f8c5 	bl	80051fc <__swsetup_r>
 8005072:	b380      	cbz	r0, 80050d6 <_puts_r+0x9a>
 8005074:	f04f 35ff 	mov.w	r5, #4294967295
 8005078:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800507a:	07da      	lsls	r2, r3, #31
 800507c:	d405      	bmi.n	800508a <_puts_r+0x4e>
 800507e:	89a3      	ldrh	r3, [r4, #12]
 8005080:	059b      	lsls	r3, r3, #22
 8005082:	d402      	bmi.n	800508a <_puts_r+0x4e>
 8005084:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005086:	f000 f989 	bl	800539c <__retarget_lock_release_recursive>
 800508a:	4628      	mov	r0, r5
 800508c:	bd70      	pop	{r4, r5, r6, pc}
 800508e:	2b00      	cmp	r3, #0
 8005090:	da04      	bge.n	800509c <_puts_r+0x60>
 8005092:	69a2      	ldr	r2, [r4, #24]
 8005094:	429a      	cmp	r2, r3
 8005096:	dc17      	bgt.n	80050c8 <_puts_r+0x8c>
 8005098:	290a      	cmp	r1, #10
 800509a:	d015      	beq.n	80050c8 <_puts_r+0x8c>
 800509c:	6823      	ldr	r3, [r4, #0]
 800509e:	1c5a      	adds	r2, r3, #1
 80050a0:	6022      	str	r2, [r4, #0]
 80050a2:	7019      	strb	r1, [r3, #0]
 80050a4:	68a3      	ldr	r3, [r4, #8]
 80050a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80050aa:	3b01      	subs	r3, #1
 80050ac:	60a3      	str	r3, [r4, #8]
 80050ae:	2900      	cmp	r1, #0
 80050b0:	d1ed      	bne.n	800508e <_puts_r+0x52>
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	da11      	bge.n	80050da <_puts_r+0x9e>
 80050b6:	4622      	mov	r2, r4
 80050b8:	210a      	movs	r1, #10
 80050ba:	4628      	mov	r0, r5
 80050bc:	f000 f85f 	bl	800517e <__swbuf_r>
 80050c0:	3001      	adds	r0, #1
 80050c2:	d0d7      	beq.n	8005074 <_puts_r+0x38>
 80050c4:	250a      	movs	r5, #10
 80050c6:	e7d7      	b.n	8005078 <_puts_r+0x3c>
 80050c8:	4622      	mov	r2, r4
 80050ca:	4628      	mov	r0, r5
 80050cc:	f000 f857 	bl	800517e <__swbuf_r>
 80050d0:	3001      	adds	r0, #1
 80050d2:	d1e7      	bne.n	80050a4 <_puts_r+0x68>
 80050d4:	e7ce      	b.n	8005074 <_puts_r+0x38>
 80050d6:	3e01      	subs	r6, #1
 80050d8:	e7e4      	b.n	80050a4 <_puts_r+0x68>
 80050da:	6823      	ldr	r3, [r4, #0]
 80050dc:	1c5a      	adds	r2, r3, #1
 80050de:	6022      	str	r2, [r4, #0]
 80050e0:	220a      	movs	r2, #10
 80050e2:	701a      	strb	r2, [r3, #0]
 80050e4:	e7ee      	b.n	80050c4 <_puts_r+0x88>
	...

080050e8 <puts>:
 80050e8:	4b02      	ldr	r3, [pc, #8]	@ (80050f4 <puts+0xc>)
 80050ea:	4601      	mov	r1, r0
 80050ec:	6818      	ldr	r0, [r3, #0]
 80050ee:	f7ff bfa5 	b.w	800503c <_puts_r>
 80050f2:	bf00      	nop
 80050f4:	20000018 	.word	0x20000018

080050f8 <__sread>:
 80050f8:	b510      	push	{r4, lr}
 80050fa:	460c      	mov	r4, r1
 80050fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005100:	f000 f8fc 	bl	80052fc <_read_r>
 8005104:	2800      	cmp	r0, #0
 8005106:	bfab      	itete	ge
 8005108:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800510a:	89a3      	ldrhlt	r3, [r4, #12]
 800510c:	181b      	addge	r3, r3, r0
 800510e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005112:	bfac      	ite	ge
 8005114:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005116:	81a3      	strhlt	r3, [r4, #12]
 8005118:	bd10      	pop	{r4, pc}

0800511a <__swrite>:
 800511a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800511e:	461f      	mov	r7, r3
 8005120:	898b      	ldrh	r3, [r1, #12]
 8005122:	05db      	lsls	r3, r3, #23
 8005124:	4605      	mov	r5, r0
 8005126:	460c      	mov	r4, r1
 8005128:	4616      	mov	r6, r2
 800512a:	d505      	bpl.n	8005138 <__swrite+0x1e>
 800512c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005130:	2302      	movs	r3, #2
 8005132:	2200      	movs	r2, #0
 8005134:	f000 f8d0 	bl	80052d8 <_lseek_r>
 8005138:	89a3      	ldrh	r3, [r4, #12]
 800513a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800513e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005142:	81a3      	strh	r3, [r4, #12]
 8005144:	4632      	mov	r2, r6
 8005146:	463b      	mov	r3, r7
 8005148:	4628      	mov	r0, r5
 800514a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800514e:	f000 b8e7 	b.w	8005320 <_write_r>

08005152 <__sseek>:
 8005152:	b510      	push	{r4, lr}
 8005154:	460c      	mov	r4, r1
 8005156:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800515a:	f000 f8bd 	bl	80052d8 <_lseek_r>
 800515e:	1c43      	adds	r3, r0, #1
 8005160:	89a3      	ldrh	r3, [r4, #12]
 8005162:	bf15      	itete	ne
 8005164:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005166:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800516a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800516e:	81a3      	strheq	r3, [r4, #12]
 8005170:	bf18      	it	ne
 8005172:	81a3      	strhne	r3, [r4, #12]
 8005174:	bd10      	pop	{r4, pc}

08005176 <__sclose>:
 8005176:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800517a:	f000 b89d 	b.w	80052b8 <_close_r>

0800517e <__swbuf_r>:
 800517e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005180:	460e      	mov	r6, r1
 8005182:	4614      	mov	r4, r2
 8005184:	4605      	mov	r5, r0
 8005186:	b118      	cbz	r0, 8005190 <__swbuf_r+0x12>
 8005188:	6a03      	ldr	r3, [r0, #32]
 800518a:	b90b      	cbnz	r3, 8005190 <__swbuf_r+0x12>
 800518c:	f7ff ff0e 	bl	8004fac <__sinit>
 8005190:	69a3      	ldr	r3, [r4, #24]
 8005192:	60a3      	str	r3, [r4, #8]
 8005194:	89a3      	ldrh	r3, [r4, #12]
 8005196:	071a      	lsls	r2, r3, #28
 8005198:	d501      	bpl.n	800519e <__swbuf_r+0x20>
 800519a:	6923      	ldr	r3, [r4, #16]
 800519c:	b943      	cbnz	r3, 80051b0 <__swbuf_r+0x32>
 800519e:	4621      	mov	r1, r4
 80051a0:	4628      	mov	r0, r5
 80051a2:	f000 f82b 	bl	80051fc <__swsetup_r>
 80051a6:	b118      	cbz	r0, 80051b0 <__swbuf_r+0x32>
 80051a8:	f04f 37ff 	mov.w	r7, #4294967295
 80051ac:	4638      	mov	r0, r7
 80051ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051b0:	6823      	ldr	r3, [r4, #0]
 80051b2:	6922      	ldr	r2, [r4, #16]
 80051b4:	1a98      	subs	r0, r3, r2
 80051b6:	6963      	ldr	r3, [r4, #20]
 80051b8:	b2f6      	uxtb	r6, r6
 80051ba:	4283      	cmp	r3, r0
 80051bc:	4637      	mov	r7, r6
 80051be:	dc05      	bgt.n	80051cc <__swbuf_r+0x4e>
 80051c0:	4621      	mov	r1, r4
 80051c2:	4628      	mov	r0, r5
 80051c4:	f000 fd36 	bl	8005c34 <_fflush_r>
 80051c8:	2800      	cmp	r0, #0
 80051ca:	d1ed      	bne.n	80051a8 <__swbuf_r+0x2a>
 80051cc:	68a3      	ldr	r3, [r4, #8]
 80051ce:	3b01      	subs	r3, #1
 80051d0:	60a3      	str	r3, [r4, #8]
 80051d2:	6823      	ldr	r3, [r4, #0]
 80051d4:	1c5a      	adds	r2, r3, #1
 80051d6:	6022      	str	r2, [r4, #0]
 80051d8:	701e      	strb	r6, [r3, #0]
 80051da:	6962      	ldr	r2, [r4, #20]
 80051dc:	1c43      	adds	r3, r0, #1
 80051de:	429a      	cmp	r2, r3
 80051e0:	d004      	beq.n	80051ec <__swbuf_r+0x6e>
 80051e2:	89a3      	ldrh	r3, [r4, #12]
 80051e4:	07db      	lsls	r3, r3, #31
 80051e6:	d5e1      	bpl.n	80051ac <__swbuf_r+0x2e>
 80051e8:	2e0a      	cmp	r6, #10
 80051ea:	d1df      	bne.n	80051ac <__swbuf_r+0x2e>
 80051ec:	4621      	mov	r1, r4
 80051ee:	4628      	mov	r0, r5
 80051f0:	f000 fd20 	bl	8005c34 <_fflush_r>
 80051f4:	2800      	cmp	r0, #0
 80051f6:	d0d9      	beq.n	80051ac <__swbuf_r+0x2e>
 80051f8:	e7d6      	b.n	80051a8 <__swbuf_r+0x2a>
	...

080051fc <__swsetup_r>:
 80051fc:	b538      	push	{r3, r4, r5, lr}
 80051fe:	4b29      	ldr	r3, [pc, #164]	@ (80052a4 <__swsetup_r+0xa8>)
 8005200:	4605      	mov	r5, r0
 8005202:	6818      	ldr	r0, [r3, #0]
 8005204:	460c      	mov	r4, r1
 8005206:	b118      	cbz	r0, 8005210 <__swsetup_r+0x14>
 8005208:	6a03      	ldr	r3, [r0, #32]
 800520a:	b90b      	cbnz	r3, 8005210 <__swsetup_r+0x14>
 800520c:	f7ff fece 	bl	8004fac <__sinit>
 8005210:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005214:	0719      	lsls	r1, r3, #28
 8005216:	d422      	bmi.n	800525e <__swsetup_r+0x62>
 8005218:	06da      	lsls	r2, r3, #27
 800521a:	d407      	bmi.n	800522c <__swsetup_r+0x30>
 800521c:	2209      	movs	r2, #9
 800521e:	602a      	str	r2, [r5, #0]
 8005220:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005224:	81a3      	strh	r3, [r4, #12]
 8005226:	f04f 30ff 	mov.w	r0, #4294967295
 800522a:	e033      	b.n	8005294 <__swsetup_r+0x98>
 800522c:	0758      	lsls	r0, r3, #29
 800522e:	d512      	bpl.n	8005256 <__swsetup_r+0x5a>
 8005230:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005232:	b141      	cbz	r1, 8005246 <__swsetup_r+0x4a>
 8005234:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005238:	4299      	cmp	r1, r3
 800523a:	d002      	beq.n	8005242 <__swsetup_r+0x46>
 800523c:	4628      	mov	r0, r5
 800523e:	f000 f8af 	bl	80053a0 <_free_r>
 8005242:	2300      	movs	r3, #0
 8005244:	6363      	str	r3, [r4, #52]	@ 0x34
 8005246:	89a3      	ldrh	r3, [r4, #12]
 8005248:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800524c:	81a3      	strh	r3, [r4, #12]
 800524e:	2300      	movs	r3, #0
 8005250:	6063      	str	r3, [r4, #4]
 8005252:	6923      	ldr	r3, [r4, #16]
 8005254:	6023      	str	r3, [r4, #0]
 8005256:	89a3      	ldrh	r3, [r4, #12]
 8005258:	f043 0308 	orr.w	r3, r3, #8
 800525c:	81a3      	strh	r3, [r4, #12]
 800525e:	6923      	ldr	r3, [r4, #16]
 8005260:	b94b      	cbnz	r3, 8005276 <__swsetup_r+0x7a>
 8005262:	89a3      	ldrh	r3, [r4, #12]
 8005264:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005268:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800526c:	d003      	beq.n	8005276 <__swsetup_r+0x7a>
 800526e:	4621      	mov	r1, r4
 8005270:	4628      	mov	r0, r5
 8005272:	f000 fd2d 	bl	8005cd0 <__smakebuf_r>
 8005276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800527a:	f013 0201 	ands.w	r2, r3, #1
 800527e:	d00a      	beq.n	8005296 <__swsetup_r+0x9a>
 8005280:	2200      	movs	r2, #0
 8005282:	60a2      	str	r2, [r4, #8]
 8005284:	6962      	ldr	r2, [r4, #20]
 8005286:	4252      	negs	r2, r2
 8005288:	61a2      	str	r2, [r4, #24]
 800528a:	6922      	ldr	r2, [r4, #16]
 800528c:	b942      	cbnz	r2, 80052a0 <__swsetup_r+0xa4>
 800528e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005292:	d1c5      	bne.n	8005220 <__swsetup_r+0x24>
 8005294:	bd38      	pop	{r3, r4, r5, pc}
 8005296:	0799      	lsls	r1, r3, #30
 8005298:	bf58      	it	pl
 800529a:	6962      	ldrpl	r2, [r4, #20]
 800529c:	60a2      	str	r2, [r4, #8]
 800529e:	e7f4      	b.n	800528a <__swsetup_r+0x8e>
 80052a0:	2000      	movs	r0, #0
 80052a2:	e7f7      	b.n	8005294 <__swsetup_r+0x98>
 80052a4:	20000018 	.word	0x20000018

080052a8 <memset>:
 80052a8:	4402      	add	r2, r0
 80052aa:	4603      	mov	r3, r0
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d100      	bne.n	80052b2 <memset+0xa>
 80052b0:	4770      	bx	lr
 80052b2:	f803 1b01 	strb.w	r1, [r3], #1
 80052b6:	e7f9      	b.n	80052ac <memset+0x4>

080052b8 <_close_r>:
 80052b8:	b538      	push	{r3, r4, r5, lr}
 80052ba:	4d06      	ldr	r5, [pc, #24]	@ (80052d4 <_close_r+0x1c>)
 80052bc:	2300      	movs	r3, #0
 80052be:	4604      	mov	r4, r0
 80052c0:	4608      	mov	r0, r1
 80052c2:	602b      	str	r3, [r5, #0]
 80052c4:	f7fb ff4a 	bl	800115c <_close>
 80052c8:	1c43      	adds	r3, r0, #1
 80052ca:	d102      	bne.n	80052d2 <_close_r+0x1a>
 80052cc:	682b      	ldr	r3, [r5, #0]
 80052ce:	b103      	cbz	r3, 80052d2 <_close_r+0x1a>
 80052d0:	6023      	str	r3, [r4, #0]
 80052d2:	bd38      	pop	{r3, r4, r5, pc}
 80052d4:	200004b0 	.word	0x200004b0

080052d8 <_lseek_r>:
 80052d8:	b538      	push	{r3, r4, r5, lr}
 80052da:	4d07      	ldr	r5, [pc, #28]	@ (80052f8 <_lseek_r+0x20>)
 80052dc:	4604      	mov	r4, r0
 80052de:	4608      	mov	r0, r1
 80052e0:	4611      	mov	r1, r2
 80052e2:	2200      	movs	r2, #0
 80052e4:	602a      	str	r2, [r5, #0]
 80052e6:	461a      	mov	r2, r3
 80052e8:	f7fb ff5f 	bl	80011aa <_lseek>
 80052ec:	1c43      	adds	r3, r0, #1
 80052ee:	d102      	bne.n	80052f6 <_lseek_r+0x1e>
 80052f0:	682b      	ldr	r3, [r5, #0]
 80052f2:	b103      	cbz	r3, 80052f6 <_lseek_r+0x1e>
 80052f4:	6023      	str	r3, [r4, #0]
 80052f6:	bd38      	pop	{r3, r4, r5, pc}
 80052f8:	200004b0 	.word	0x200004b0

080052fc <_read_r>:
 80052fc:	b538      	push	{r3, r4, r5, lr}
 80052fe:	4d07      	ldr	r5, [pc, #28]	@ (800531c <_read_r+0x20>)
 8005300:	4604      	mov	r4, r0
 8005302:	4608      	mov	r0, r1
 8005304:	4611      	mov	r1, r2
 8005306:	2200      	movs	r2, #0
 8005308:	602a      	str	r2, [r5, #0]
 800530a:	461a      	mov	r2, r3
 800530c:	f7fb feed 	bl	80010ea <_read>
 8005310:	1c43      	adds	r3, r0, #1
 8005312:	d102      	bne.n	800531a <_read_r+0x1e>
 8005314:	682b      	ldr	r3, [r5, #0]
 8005316:	b103      	cbz	r3, 800531a <_read_r+0x1e>
 8005318:	6023      	str	r3, [r4, #0]
 800531a:	bd38      	pop	{r3, r4, r5, pc}
 800531c:	200004b0 	.word	0x200004b0

08005320 <_write_r>:
 8005320:	b538      	push	{r3, r4, r5, lr}
 8005322:	4d07      	ldr	r5, [pc, #28]	@ (8005340 <_write_r+0x20>)
 8005324:	4604      	mov	r4, r0
 8005326:	4608      	mov	r0, r1
 8005328:	4611      	mov	r1, r2
 800532a:	2200      	movs	r2, #0
 800532c:	602a      	str	r2, [r5, #0]
 800532e:	461a      	mov	r2, r3
 8005330:	f7fb fef8 	bl	8001124 <_write>
 8005334:	1c43      	adds	r3, r0, #1
 8005336:	d102      	bne.n	800533e <_write_r+0x1e>
 8005338:	682b      	ldr	r3, [r5, #0]
 800533a:	b103      	cbz	r3, 800533e <_write_r+0x1e>
 800533c:	6023      	str	r3, [r4, #0]
 800533e:	bd38      	pop	{r3, r4, r5, pc}
 8005340:	200004b0 	.word	0x200004b0

08005344 <__errno>:
 8005344:	4b01      	ldr	r3, [pc, #4]	@ (800534c <__errno+0x8>)
 8005346:	6818      	ldr	r0, [r3, #0]
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	20000018 	.word	0x20000018

08005350 <__libc_init_array>:
 8005350:	b570      	push	{r4, r5, r6, lr}
 8005352:	4d0d      	ldr	r5, [pc, #52]	@ (8005388 <__libc_init_array+0x38>)
 8005354:	4c0d      	ldr	r4, [pc, #52]	@ (800538c <__libc_init_array+0x3c>)
 8005356:	1b64      	subs	r4, r4, r5
 8005358:	10a4      	asrs	r4, r4, #2
 800535a:	2600      	movs	r6, #0
 800535c:	42a6      	cmp	r6, r4
 800535e:	d109      	bne.n	8005374 <__libc_init_array+0x24>
 8005360:	4d0b      	ldr	r5, [pc, #44]	@ (8005390 <__libc_init_array+0x40>)
 8005362:	4c0c      	ldr	r4, [pc, #48]	@ (8005394 <__libc_init_array+0x44>)
 8005364:	f000 fd22 	bl	8005dac <_init>
 8005368:	1b64      	subs	r4, r4, r5
 800536a:	10a4      	asrs	r4, r4, #2
 800536c:	2600      	movs	r6, #0
 800536e:	42a6      	cmp	r6, r4
 8005370:	d105      	bne.n	800537e <__libc_init_array+0x2e>
 8005372:	bd70      	pop	{r4, r5, r6, pc}
 8005374:	f855 3b04 	ldr.w	r3, [r5], #4
 8005378:	4798      	blx	r3
 800537a:	3601      	adds	r6, #1
 800537c:	e7ee      	b.n	800535c <__libc_init_array+0xc>
 800537e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005382:	4798      	blx	r3
 8005384:	3601      	adds	r6, #1
 8005386:	e7f2      	b.n	800536e <__libc_init_array+0x1e>
 8005388:	08005ebc 	.word	0x08005ebc
 800538c:	08005ebc 	.word	0x08005ebc
 8005390:	08005ebc 	.word	0x08005ebc
 8005394:	08005ec0 	.word	0x08005ec0

08005398 <__retarget_lock_init_recursive>:
 8005398:	4770      	bx	lr

0800539a <__retarget_lock_acquire_recursive>:
 800539a:	4770      	bx	lr

0800539c <__retarget_lock_release_recursive>:
 800539c:	4770      	bx	lr
	...

080053a0 <_free_r>:
 80053a0:	b538      	push	{r3, r4, r5, lr}
 80053a2:	4605      	mov	r5, r0
 80053a4:	2900      	cmp	r1, #0
 80053a6:	d041      	beq.n	800542c <_free_r+0x8c>
 80053a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053ac:	1f0c      	subs	r4, r1, #4
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	bfb8      	it	lt
 80053b2:	18e4      	addlt	r4, r4, r3
 80053b4:	f000 f8e0 	bl	8005578 <__malloc_lock>
 80053b8:	4a1d      	ldr	r2, [pc, #116]	@ (8005430 <_free_r+0x90>)
 80053ba:	6813      	ldr	r3, [r2, #0]
 80053bc:	b933      	cbnz	r3, 80053cc <_free_r+0x2c>
 80053be:	6063      	str	r3, [r4, #4]
 80053c0:	6014      	str	r4, [r2, #0]
 80053c2:	4628      	mov	r0, r5
 80053c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053c8:	f000 b8dc 	b.w	8005584 <__malloc_unlock>
 80053cc:	42a3      	cmp	r3, r4
 80053ce:	d908      	bls.n	80053e2 <_free_r+0x42>
 80053d0:	6820      	ldr	r0, [r4, #0]
 80053d2:	1821      	adds	r1, r4, r0
 80053d4:	428b      	cmp	r3, r1
 80053d6:	bf01      	itttt	eq
 80053d8:	6819      	ldreq	r1, [r3, #0]
 80053da:	685b      	ldreq	r3, [r3, #4]
 80053dc:	1809      	addeq	r1, r1, r0
 80053de:	6021      	streq	r1, [r4, #0]
 80053e0:	e7ed      	b.n	80053be <_free_r+0x1e>
 80053e2:	461a      	mov	r2, r3
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	b10b      	cbz	r3, 80053ec <_free_r+0x4c>
 80053e8:	42a3      	cmp	r3, r4
 80053ea:	d9fa      	bls.n	80053e2 <_free_r+0x42>
 80053ec:	6811      	ldr	r1, [r2, #0]
 80053ee:	1850      	adds	r0, r2, r1
 80053f0:	42a0      	cmp	r0, r4
 80053f2:	d10b      	bne.n	800540c <_free_r+0x6c>
 80053f4:	6820      	ldr	r0, [r4, #0]
 80053f6:	4401      	add	r1, r0
 80053f8:	1850      	adds	r0, r2, r1
 80053fa:	4283      	cmp	r3, r0
 80053fc:	6011      	str	r1, [r2, #0]
 80053fe:	d1e0      	bne.n	80053c2 <_free_r+0x22>
 8005400:	6818      	ldr	r0, [r3, #0]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	6053      	str	r3, [r2, #4]
 8005406:	4408      	add	r0, r1
 8005408:	6010      	str	r0, [r2, #0]
 800540a:	e7da      	b.n	80053c2 <_free_r+0x22>
 800540c:	d902      	bls.n	8005414 <_free_r+0x74>
 800540e:	230c      	movs	r3, #12
 8005410:	602b      	str	r3, [r5, #0]
 8005412:	e7d6      	b.n	80053c2 <_free_r+0x22>
 8005414:	6820      	ldr	r0, [r4, #0]
 8005416:	1821      	adds	r1, r4, r0
 8005418:	428b      	cmp	r3, r1
 800541a:	bf04      	itt	eq
 800541c:	6819      	ldreq	r1, [r3, #0]
 800541e:	685b      	ldreq	r3, [r3, #4]
 8005420:	6063      	str	r3, [r4, #4]
 8005422:	bf04      	itt	eq
 8005424:	1809      	addeq	r1, r1, r0
 8005426:	6021      	streq	r1, [r4, #0]
 8005428:	6054      	str	r4, [r2, #4]
 800542a:	e7ca      	b.n	80053c2 <_free_r+0x22>
 800542c:	bd38      	pop	{r3, r4, r5, pc}
 800542e:	bf00      	nop
 8005430:	200004bc 	.word	0x200004bc

08005434 <sbrk_aligned>:
 8005434:	b570      	push	{r4, r5, r6, lr}
 8005436:	4e0f      	ldr	r6, [pc, #60]	@ (8005474 <sbrk_aligned+0x40>)
 8005438:	460c      	mov	r4, r1
 800543a:	6831      	ldr	r1, [r6, #0]
 800543c:	4605      	mov	r5, r0
 800543e:	b911      	cbnz	r1, 8005446 <sbrk_aligned+0x12>
 8005440:	f000 fca4 	bl	8005d8c <_sbrk_r>
 8005444:	6030      	str	r0, [r6, #0]
 8005446:	4621      	mov	r1, r4
 8005448:	4628      	mov	r0, r5
 800544a:	f000 fc9f 	bl	8005d8c <_sbrk_r>
 800544e:	1c43      	adds	r3, r0, #1
 8005450:	d103      	bne.n	800545a <sbrk_aligned+0x26>
 8005452:	f04f 34ff 	mov.w	r4, #4294967295
 8005456:	4620      	mov	r0, r4
 8005458:	bd70      	pop	{r4, r5, r6, pc}
 800545a:	1cc4      	adds	r4, r0, #3
 800545c:	f024 0403 	bic.w	r4, r4, #3
 8005460:	42a0      	cmp	r0, r4
 8005462:	d0f8      	beq.n	8005456 <sbrk_aligned+0x22>
 8005464:	1a21      	subs	r1, r4, r0
 8005466:	4628      	mov	r0, r5
 8005468:	f000 fc90 	bl	8005d8c <_sbrk_r>
 800546c:	3001      	adds	r0, #1
 800546e:	d1f2      	bne.n	8005456 <sbrk_aligned+0x22>
 8005470:	e7ef      	b.n	8005452 <sbrk_aligned+0x1e>
 8005472:	bf00      	nop
 8005474:	200004b8 	.word	0x200004b8

08005478 <_malloc_r>:
 8005478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800547c:	1ccd      	adds	r5, r1, #3
 800547e:	f025 0503 	bic.w	r5, r5, #3
 8005482:	3508      	adds	r5, #8
 8005484:	2d0c      	cmp	r5, #12
 8005486:	bf38      	it	cc
 8005488:	250c      	movcc	r5, #12
 800548a:	2d00      	cmp	r5, #0
 800548c:	4606      	mov	r6, r0
 800548e:	db01      	blt.n	8005494 <_malloc_r+0x1c>
 8005490:	42a9      	cmp	r1, r5
 8005492:	d904      	bls.n	800549e <_malloc_r+0x26>
 8005494:	230c      	movs	r3, #12
 8005496:	6033      	str	r3, [r6, #0]
 8005498:	2000      	movs	r0, #0
 800549a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800549e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005574 <_malloc_r+0xfc>
 80054a2:	f000 f869 	bl	8005578 <__malloc_lock>
 80054a6:	f8d8 3000 	ldr.w	r3, [r8]
 80054aa:	461c      	mov	r4, r3
 80054ac:	bb44      	cbnz	r4, 8005500 <_malloc_r+0x88>
 80054ae:	4629      	mov	r1, r5
 80054b0:	4630      	mov	r0, r6
 80054b2:	f7ff ffbf 	bl	8005434 <sbrk_aligned>
 80054b6:	1c43      	adds	r3, r0, #1
 80054b8:	4604      	mov	r4, r0
 80054ba:	d158      	bne.n	800556e <_malloc_r+0xf6>
 80054bc:	f8d8 4000 	ldr.w	r4, [r8]
 80054c0:	4627      	mov	r7, r4
 80054c2:	2f00      	cmp	r7, #0
 80054c4:	d143      	bne.n	800554e <_malloc_r+0xd6>
 80054c6:	2c00      	cmp	r4, #0
 80054c8:	d04b      	beq.n	8005562 <_malloc_r+0xea>
 80054ca:	6823      	ldr	r3, [r4, #0]
 80054cc:	4639      	mov	r1, r7
 80054ce:	4630      	mov	r0, r6
 80054d0:	eb04 0903 	add.w	r9, r4, r3
 80054d4:	f000 fc5a 	bl	8005d8c <_sbrk_r>
 80054d8:	4581      	cmp	r9, r0
 80054da:	d142      	bne.n	8005562 <_malloc_r+0xea>
 80054dc:	6821      	ldr	r1, [r4, #0]
 80054de:	1a6d      	subs	r5, r5, r1
 80054e0:	4629      	mov	r1, r5
 80054e2:	4630      	mov	r0, r6
 80054e4:	f7ff ffa6 	bl	8005434 <sbrk_aligned>
 80054e8:	3001      	adds	r0, #1
 80054ea:	d03a      	beq.n	8005562 <_malloc_r+0xea>
 80054ec:	6823      	ldr	r3, [r4, #0]
 80054ee:	442b      	add	r3, r5
 80054f0:	6023      	str	r3, [r4, #0]
 80054f2:	f8d8 3000 	ldr.w	r3, [r8]
 80054f6:	685a      	ldr	r2, [r3, #4]
 80054f8:	bb62      	cbnz	r2, 8005554 <_malloc_r+0xdc>
 80054fa:	f8c8 7000 	str.w	r7, [r8]
 80054fe:	e00f      	b.n	8005520 <_malloc_r+0xa8>
 8005500:	6822      	ldr	r2, [r4, #0]
 8005502:	1b52      	subs	r2, r2, r5
 8005504:	d420      	bmi.n	8005548 <_malloc_r+0xd0>
 8005506:	2a0b      	cmp	r2, #11
 8005508:	d917      	bls.n	800553a <_malloc_r+0xc2>
 800550a:	1961      	adds	r1, r4, r5
 800550c:	42a3      	cmp	r3, r4
 800550e:	6025      	str	r5, [r4, #0]
 8005510:	bf18      	it	ne
 8005512:	6059      	strne	r1, [r3, #4]
 8005514:	6863      	ldr	r3, [r4, #4]
 8005516:	bf08      	it	eq
 8005518:	f8c8 1000 	streq.w	r1, [r8]
 800551c:	5162      	str	r2, [r4, r5]
 800551e:	604b      	str	r3, [r1, #4]
 8005520:	4630      	mov	r0, r6
 8005522:	f000 f82f 	bl	8005584 <__malloc_unlock>
 8005526:	f104 000b 	add.w	r0, r4, #11
 800552a:	1d23      	adds	r3, r4, #4
 800552c:	f020 0007 	bic.w	r0, r0, #7
 8005530:	1ac2      	subs	r2, r0, r3
 8005532:	bf1c      	itt	ne
 8005534:	1a1b      	subne	r3, r3, r0
 8005536:	50a3      	strne	r3, [r4, r2]
 8005538:	e7af      	b.n	800549a <_malloc_r+0x22>
 800553a:	6862      	ldr	r2, [r4, #4]
 800553c:	42a3      	cmp	r3, r4
 800553e:	bf0c      	ite	eq
 8005540:	f8c8 2000 	streq.w	r2, [r8]
 8005544:	605a      	strne	r2, [r3, #4]
 8005546:	e7eb      	b.n	8005520 <_malloc_r+0xa8>
 8005548:	4623      	mov	r3, r4
 800554a:	6864      	ldr	r4, [r4, #4]
 800554c:	e7ae      	b.n	80054ac <_malloc_r+0x34>
 800554e:	463c      	mov	r4, r7
 8005550:	687f      	ldr	r7, [r7, #4]
 8005552:	e7b6      	b.n	80054c2 <_malloc_r+0x4a>
 8005554:	461a      	mov	r2, r3
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	42a3      	cmp	r3, r4
 800555a:	d1fb      	bne.n	8005554 <_malloc_r+0xdc>
 800555c:	2300      	movs	r3, #0
 800555e:	6053      	str	r3, [r2, #4]
 8005560:	e7de      	b.n	8005520 <_malloc_r+0xa8>
 8005562:	230c      	movs	r3, #12
 8005564:	6033      	str	r3, [r6, #0]
 8005566:	4630      	mov	r0, r6
 8005568:	f000 f80c 	bl	8005584 <__malloc_unlock>
 800556c:	e794      	b.n	8005498 <_malloc_r+0x20>
 800556e:	6005      	str	r5, [r0, #0]
 8005570:	e7d6      	b.n	8005520 <_malloc_r+0xa8>
 8005572:	bf00      	nop
 8005574:	200004bc 	.word	0x200004bc

08005578 <__malloc_lock>:
 8005578:	4801      	ldr	r0, [pc, #4]	@ (8005580 <__malloc_lock+0x8>)
 800557a:	f7ff bf0e 	b.w	800539a <__retarget_lock_acquire_recursive>
 800557e:	bf00      	nop
 8005580:	200004b4 	.word	0x200004b4

08005584 <__malloc_unlock>:
 8005584:	4801      	ldr	r0, [pc, #4]	@ (800558c <__malloc_unlock+0x8>)
 8005586:	f7ff bf09 	b.w	800539c <__retarget_lock_release_recursive>
 800558a:	bf00      	nop
 800558c:	200004b4 	.word	0x200004b4

08005590 <__sfputc_r>:
 8005590:	6893      	ldr	r3, [r2, #8]
 8005592:	3b01      	subs	r3, #1
 8005594:	2b00      	cmp	r3, #0
 8005596:	b410      	push	{r4}
 8005598:	6093      	str	r3, [r2, #8]
 800559a:	da08      	bge.n	80055ae <__sfputc_r+0x1e>
 800559c:	6994      	ldr	r4, [r2, #24]
 800559e:	42a3      	cmp	r3, r4
 80055a0:	db01      	blt.n	80055a6 <__sfputc_r+0x16>
 80055a2:	290a      	cmp	r1, #10
 80055a4:	d103      	bne.n	80055ae <__sfputc_r+0x1e>
 80055a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055aa:	f7ff bde8 	b.w	800517e <__swbuf_r>
 80055ae:	6813      	ldr	r3, [r2, #0]
 80055b0:	1c58      	adds	r0, r3, #1
 80055b2:	6010      	str	r0, [r2, #0]
 80055b4:	7019      	strb	r1, [r3, #0]
 80055b6:	4608      	mov	r0, r1
 80055b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055bc:	4770      	bx	lr

080055be <__sfputs_r>:
 80055be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055c0:	4606      	mov	r6, r0
 80055c2:	460f      	mov	r7, r1
 80055c4:	4614      	mov	r4, r2
 80055c6:	18d5      	adds	r5, r2, r3
 80055c8:	42ac      	cmp	r4, r5
 80055ca:	d101      	bne.n	80055d0 <__sfputs_r+0x12>
 80055cc:	2000      	movs	r0, #0
 80055ce:	e007      	b.n	80055e0 <__sfputs_r+0x22>
 80055d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055d4:	463a      	mov	r2, r7
 80055d6:	4630      	mov	r0, r6
 80055d8:	f7ff ffda 	bl	8005590 <__sfputc_r>
 80055dc:	1c43      	adds	r3, r0, #1
 80055de:	d1f3      	bne.n	80055c8 <__sfputs_r+0xa>
 80055e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080055e4 <_vfiprintf_r>:
 80055e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055e8:	460d      	mov	r5, r1
 80055ea:	b09d      	sub	sp, #116	@ 0x74
 80055ec:	4614      	mov	r4, r2
 80055ee:	4698      	mov	r8, r3
 80055f0:	4606      	mov	r6, r0
 80055f2:	b118      	cbz	r0, 80055fc <_vfiprintf_r+0x18>
 80055f4:	6a03      	ldr	r3, [r0, #32]
 80055f6:	b90b      	cbnz	r3, 80055fc <_vfiprintf_r+0x18>
 80055f8:	f7ff fcd8 	bl	8004fac <__sinit>
 80055fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80055fe:	07d9      	lsls	r1, r3, #31
 8005600:	d405      	bmi.n	800560e <_vfiprintf_r+0x2a>
 8005602:	89ab      	ldrh	r3, [r5, #12]
 8005604:	059a      	lsls	r2, r3, #22
 8005606:	d402      	bmi.n	800560e <_vfiprintf_r+0x2a>
 8005608:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800560a:	f7ff fec6 	bl	800539a <__retarget_lock_acquire_recursive>
 800560e:	89ab      	ldrh	r3, [r5, #12]
 8005610:	071b      	lsls	r3, r3, #28
 8005612:	d501      	bpl.n	8005618 <_vfiprintf_r+0x34>
 8005614:	692b      	ldr	r3, [r5, #16]
 8005616:	b99b      	cbnz	r3, 8005640 <_vfiprintf_r+0x5c>
 8005618:	4629      	mov	r1, r5
 800561a:	4630      	mov	r0, r6
 800561c:	f7ff fdee 	bl	80051fc <__swsetup_r>
 8005620:	b170      	cbz	r0, 8005640 <_vfiprintf_r+0x5c>
 8005622:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005624:	07dc      	lsls	r4, r3, #31
 8005626:	d504      	bpl.n	8005632 <_vfiprintf_r+0x4e>
 8005628:	f04f 30ff 	mov.w	r0, #4294967295
 800562c:	b01d      	add	sp, #116	@ 0x74
 800562e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005632:	89ab      	ldrh	r3, [r5, #12]
 8005634:	0598      	lsls	r0, r3, #22
 8005636:	d4f7      	bmi.n	8005628 <_vfiprintf_r+0x44>
 8005638:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800563a:	f7ff feaf 	bl	800539c <__retarget_lock_release_recursive>
 800563e:	e7f3      	b.n	8005628 <_vfiprintf_r+0x44>
 8005640:	2300      	movs	r3, #0
 8005642:	9309      	str	r3, [sp, #36]	@ 0x24
 8005644:	2320      	movs	r3, #32
 8005646:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800564a:	f8cd 800c 	str.w	r8, [sp, #12]
 800564e:	2330      	movs	r3, #48	@ 0x30
 8005650:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005800 <_vfiprintf_r+0x21c>
 8005654:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005658:	f04f 0901 	mov.w	r9, #1
 800565c:	4623      	mov	r3, r4
 800565e:	469a      	mov	sl, r3
 8005660:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005664:	b10a      	cbz	r2, 800566a <_vfiprintf_r+0x86>
 8005666:	2a25      	cmp	r2, #37	@ 0x25
 8005668:	d1f9      	bne.n	800565e <_vfiprintf_r+0x7a>
 800566a:	ebba 0b04 	subs.w	fp, sl, r4
 800566e:	d00b      	beq.n	8005688 <_vfiprintf_r+0xa4>
 8005670:	465b      	mov	r3, fp
 8005672:	4622      	mov	r2, r4
 8005674:	4629      	mov	r1, r5
 8005676:	4630      	mov	r0, r6
 8005678:	f7ff ffa1 	bl	80055be <__sfputs_r>
 800567c:	3001      	adds	r0, #1
 800567e:	f000 80a7 	beq.w	80057d0 <_vfiprintf_r+0x1ec>
 8005682:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005684:	445a      	add	r2, fp
 8005686:	9209      	str	r2, [sp, #36]	@ 0x24
 8005688:	f89a 3000 	ldrb.w	r3, [sl]
 800568c:	2b00      	cmp	r3, #0
 800568e:	f000 809f 	beq.w	80057d0 <_vfiprintf_r+0x1ec>
 8005692:	2300      	movs	r3, #0
 8005694:	f04f 32ff 	mov.w	r2, #4294967295
 8005698:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800569c:	f10a 0a01 	add.w	sl, sl, #1
 80056a0:	9304      	str	r3, [sp, #16]
 80056a2:	9307      	str	r3, [sp, #28]
 80056a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80056a8:	931a      	str	r3, [sp, #104]	@ 0x68
 80056aa:	4654      	mov	r4, sl
 80056ac:	2205      	movs	r2, #5
 80056ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056b2:	4853      	ldr	r0, [pc, #332]	@ (8005800 <_vfiprintf_r+0x21c>)
 80056b4:	f7fa fd8c 	bl	80001d0 <memchr>
 80056b8:	9a04      	ldr	r2, [sp, #16]
 80056ba:	b9d8      	cbnz	r0, 80056f4 <_vfiprintf_r+0x110>
 80056bc:	06d1      	lsls	r1, r2, #27
 80056be:	bf44      	itt	mi
 80056c0:	2320      	movmi	r3, #32
 80056c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80056c6:	0713      	lsls	r3, r2, #28
 80056c8:	bf44      	itt	mi
 80056ca:	232b      	movmi	r3, #43	@ 0x2b
 80056cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80056d0:	f89a 3000 	ldrb.w	r3, [sl]
 80056d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80056d6:	d015      	beq.n	8005704 <_vfiprintf_r+0x120>
 80056d8:	9a07      	ldr	r2, [sp, #28]
 80056da:	4654      	mov	r4, sl
 80056dc:	2000      	movs	r0, #0
 80056de:	f04f 0c0a 	mov.w	ip, #10
 80056e2:	4621      	mov	r1, r4
 80056e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056e8:	3b30      	subs	r3, #48	@ 0x30
 80056ea:	2b09      	cmp	r3, #9
 80056ec:	d94b      	bls.n	8005786 <_vfiprintf_r+0x1a2>
 80056ee:	b1b0      	cbz	r0, 800571e <_vfiprintf_r+0x13a>
 80056f0:	9207      	str	r2, [sp, #28]
 80056f2:	e014      	b.n	800571e <_vfiprintf_r+0x13a>
 80056f4:	eba0 0308 	sub.w	r3, r0, r8
 80056f8:	fa09 f303 	lsl.w	r3, r9, r3
 80056fc:	4313      	orrs	r3, r2
 80056fe:	9304      	str	r3, [sp, #16]
 8005700:	46a2      	mov	sl, r4
 8005702:	e7d2      	b.n	80056aa <_vfiprintf_r+0xc6>
 8005704:	9b03      	ldr	r3, [sp, #12]
 8005706:	1d19      	adds	r1, r3, #4
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	9103      	str	r1, [sp, #12]
 800570c:	2b00      	cmp	r3, #0
 800570e:	bfbb      	ittet	lt
 8005710:	425b      	neglt	r3, r3
 8005712:	f042 0202 	orrlt.w	r2, r2, #2
 8005716:	9307      	strge	r3, [sp, #28]
 8005718:	9307      	strlt	r3, [sp, #28]
 800571a:	bfb8      	it	lt
 800571c:	9204      	strlt	r2, [sp, #16]
 800571e:	7823      	ldrb	r3, [r4, #0]
 8005720:	2b2e      	cmp	r3, #46	@ 0x2e
 8005722:	d10a      	bne.n	800573a <_vfiprintf_r+0x156>
 8005724:	7863      	ldrb	r3, [r4, #1]
 8005726:	2b2a      	cmp	r3, #42	@ 0x2a
 8005728:	d132      	bne.n	8005790 <_vfiprintf_r+0x1ac>
 800572a:	9b03      	ldr	r3, [sp, #12]
 800572c:	1d1a      	adds	r2, r3, #4
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	9203      	str	r2, [sp, #12]
 8005732:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005736:	3402      	adds	r4, #2
 8005738:	9305      	str	r3, [sp, #20]
 800573a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005810 <_vfiprintf_r+0x22c>
 800573e:	7821      	ldrb	r1, [r4, #0]
 8005740:	2203      	movs	r2, #3
 8005742:	4650      	mov	r0, sl
 8005744:	f7fa fd44 	bl	80001d0 <memchr>
 8005748:	b138      	cbz	r0, 800575a <_vfiprintf_r+0x176>
 800574a:	9b04      	ldr	r3, [sp, #16]
 800574c:	eba0 000a 	sub.w	r0, r0, sl
 8005750:	2240      	movs	r2, #64	@ 0x40
 8005752:	4082      	lsls	r2, r0
 8005754:	4313      	orrs	r3, r2
 8005756:	3401      	adds	r4, #1
 8005758:	9304      	str	r3, [sp, #16]
 800575a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800575e:	4829      	ldr	r0, [pc, #164]	@ (8005804 <_vfiprintf_r+0x220>)
 8005760:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005764:	2206      	movs	r2, #6
 8005766:	f7fa fd33 	bl	80001d0 <memchr>
 800576a:	2800      	cmp	r0, #0
 800576c:	d03f      	beq.n	80057ee <_vfiprintf_r+0x20a>
 800576e:	4b26      	ldr	r3, [pc, #152]	@ (8005808 <_vfiprintf_r+0x224>)
 8005770:	bb1b      	cbnz	r3, 80057ba <_vfiprintf_r+0x1d6>
 8005772:	9b03      	ldr	r3, [sp, #12]
 8005774:	3307      	adds	r3, #7
 8005776:	f023 0307 	bic.w	r3, r3, #7
 800577a:	3308      	adds	r3, #8
 800577c:	9303      	str	r3, [sp, #12]
 800577e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005780:	443b      	add	r3, r7
 8005782:	9309      	str	r3, [sp, #36]	@ 0x24
 8005784:	e76a      	b.n	800565c <_vfiprintf_r+0x78>
 8005786:	fb0c 3202 	mla	r2, ip, r2, r3
 800578a:	460c      	mov	r4, r1
 800578c:	2001      	movs	r0, #1
 800578e:	e7a8      	b.n	80056e2 <_vfiprintf_r+0xfe>
 8005790:	2300      	movs	r3, #0
 8005792:	3401      	adds	r4, #1
 8005794:	9305      	str	r3, [sp, #20]
 8005796:	4619      	mov	r1, r3
 8005798:	f04f 0c0a 	mov.w	ip, #10
 800579c:	4620      	mov	r0, r4
 800579e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057a2:	3a30      	subs	r2, #48	@ 0x30
 80057a4:	2a09      	cmp	r2, #9
 80057a6:	d903      	bls.n	80057b0 <_vfiprintf_r+0x1cc>
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d0c6      	beq.n	800573a <_vfiprintf_r+0x156>
 80057ac:	9105      	str	r1, [sp, #20]
 80057ae:	e7c4      	b.n	800573a <_vfiprintf_r+0x156>
 80057b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80057b4:	4604      	mov	r4, r0
 80057b6:	2301      	movs	r3, #1
 80057b8:	e7f0      	b.n	800579c <_vfiprintf_r+0x1b8>
 80057ba:	ab03      	add	r3, sp, #12
 80057bc:	9300      	str	r3, [sp, #0]
 80057be:	462a      	mov	r2, r5
 80057c0:	4b12      	ldr	r3, [pc, #72]	@ (800580c <_vfiprintf_r+0x228>)
 80057c2:	a904      	add	r1, sp, #16
 80057c4:	4630      	mov	r0, r6
 80057c6:	f3af 8000 	nop.w
 80057ca:	4607      	mov	r7, r0
 80057cc:	1c78      	adds	r0, r7, #1
 80057ce:	d1d6      	bne.n	800577e <_vfiprintf_r+0x19a>
 80057d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80057d2:	07d9      	lsls	r1, r3, #31
 80057d4:	d405      	bmi.n	80057e2 <_vfiprintf_r+0x1fe>
 80057d6:	89ab      	ldrh	r3, [r5, #12]
 80057d8:	059a      	lsls	r2, r3, #22
 80057da:	d402      	bmi.n	80057e2 <_vfiprintf_r+0x1fe>
 80057dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80057de:	f7ff fddd 	bl	800539c <__retarget_lock_release_recursive>
 80057e2:	89ab      	ldrh	r3, [r5, #12]
 80057e4:	065b      	lsls	r3, r3, #25
 80057e6:	f53f af1f 	bmi.w	8005628 <_vfiprintf_r+0x44>
 80057ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80057ec:	e71e      	b.n	800562c <_vfiprintf_r+0x48>
 80057ee:	ab03      	add	r3, sp, #12
 80057f0:	9300      	str	r3, [sp, #0]
 80057f2:	462a      	mov	r2, r5
 80057f4:	4b05      	ldr	r3, [pc, #20]	@ (800580c <_vfiprintf_r+0x228>)
 80057f6:	a904      	add	r1, sp, #16
 80057f8:	4630      	mov	r0, r6
 80057fa:	f000 f879 	bl	80058f0 <_printf_i>
 80057fe:	e7e4      	b.n	80057ca <_vfiprintf_r+0x1e6>
 8005800:	08005e80 	.word	0x08005e80
 8005804:	08005e8a 	.word	0x08005e8a
 8005808:	00000000 	.word	0x00000000
 800580c:	080055bf 	.word	0x080055bf
 8005810:	08005e86 	.word	0x08005e86

08005814 <_printf_common>:
 8005814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005818:	4616      	mov	r6, r2
 800581a:	4698      	mov	r8, r3
 800581c:	688a      	ldr	r2, [r1, #8]
 800581e:	690b      	ldr	r3, [r1, #16]
 8005820:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005824:	4293      	cmp	r3, r2
 8005826:	bfb8      	it	lt
 8005828:	4613      	movlt	r3, r2
 800582a:	6033      	str	r3, [r6, #0]
 800582c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005830:	4607      	mov	r7, r0
 8005832:	460c      	mov	r4, r1
 8005834:	b10a      	cbz	r2, 800583a <_printf_common+0x26>
 8005836:	3301      	adds	r3, #1
 8005838:	6033      	str	r3, [r6, #0]
 800583a:	6823      	ldr	r3, [r4, #0]
 800583c:	0699      	lsls	r1, r3, #26
 800583e:	bf42      	ittt	mi
 8005840:	6833      	ldrmi	r3, [r6, #0]
 8005842:	3302      	addmi	r3, #2
 8005844:	6033      	strmi	r3, [r6, #0]
 8005846:	6825      	ldr	r5, [r4, #0]
 8005848:	f015 0506 	ands.w	r5, r5, #6
 800584c:	d106      	bne.n	800585c <_printf_common+0x48>
 800584e:	f104 0a19 	add.w	sl, r4, #25
 8005852:	68e3      	ldr	r3, [r4, #12]
 8005854:	6832      	ldr	r2, [r6, #0]
 8005856:	1a9b      	subs	r3, r3, r2
 8005858:	42ab      	cmp	r3, r5
 800585a:	dc26      	bgt.n	80058aa <_printf_common+0x96>
 800585c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005860:	6822      	ldr	r2, [r4, #0]
 8005862:	3b00      	subs	r3, #0
 8005864:	bf18      	it	ne
 8005866:	2301      	movne	r3, #1
 8005868:	0692      	lsls	r2, r2, #26
 800586a:	d42b      	bmi.n	80058c4 <_printf_common+0xb0>
 800586c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005870:	4641      	mov	r1, r8
 8005872:	4638      	mov	r0, r7
 8005874:	47c8      	blx	r9
 8005876:	3001      	adds	r0, #1
 8005878:	d01e      	beq.n	80058b8 <_printf_common+0xa4>
 800587a:	6823      	ldr	r3, [r4, #0]
 800587c:	6922      	ldr	r2, [r4, #16]
 800587e:	f003 0306 	and.w	r3, r3, #6
 8005882:	2b04      	cmp	r3, #4
 8005884:	bf02      	ittt	eq
 8005886:	68e5      	ldreq	r5, [r4, #12]
 8005888:	6833      	ldreq	r3, [r6, #0]
 800588a:	1aed      	subeq	r5, r5, r3
 800588c:	68a3      	ldr	r3, [r4, #8]
 800588e:	bf0c      	ite	eq
 8005890:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005894:	2500      	movne	r5, #0
 8005896:	4293      	cmp	r3, r2
 8005898:	bfc4      	itt	gt
 800589a:	1a9b      	subgt	r3, r3, r2
 800589c:	18ed      	addgt	r5, r5, r3
 800589e:	2600      	movs	r6, #0
 80058a0:	341a      	adds	r4, #26
 80058a2:	42b5      	cmp	r5, r6
 80058a4:	d11a      	bne.n	80058dc <_printf_common+0xc8>
 80058a6:	2000      	movs	r0, #0
 80058a8:	e008      	b.n	80058bc <_printf_common+0xa8>
 80058aa:	2301      	movs	r3, #1
 80058ac:	4652      	mov	r2, sl
 80058ae:	4641      	mov	r1, r8
 80058b0:	4638      	mov	r0, r7
 80058b2:	47c8      	blx	r9
 80058b4:	3001      	adds	r0, #1
 80058b6:	d103      	bne.n	80058c0 <_printf_common+0xac>
 80058b8:	f04f 30ff 	mov.w	r0, #4294967295
 80058bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058c0:	3501      	adds	r5, #1
 80058c2:	e7c6      	b.n	8005852 <_printf_common+0x3e>
 80058c4:	18e1      	adds	r1, r4, r3
 80058c6:	1c5a      	adds	r2, r3, #1
 80058c8:	2030      	movs	r0, #48	@ 0x30
 80058ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80058ce:	4422      	add	r2, r4
 80058d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80058d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80058d8:	3302      	adds	r3, #2
 80058da:	e7c7      	b.n	800586c <_printf_common+0x58>
 80058dc:	2301      	movs	r3, #1
 80058de:	4622      	mov	r2, r4
 80058e0:	4641      	mov	r1, r8
 80058e2:	4638      	mov	r0, r7
 80058e4:	47c8      	blx	r9
 80058e6:	3001      	adds	r0, #1
 80058e8:	d0e6      	beq.n	80058b8 <_printf_common+0xa4>
 80058ea:	3601      	adds	r6, #1
 80058ec:	e7d9      	b.n	80058a2 <_printf_common+0x8e>
	...

080058f0 <_printf_i>:
 80058f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058f4:	7e0f      	ldrb	r7, [r1, #24]
 80058f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80058f8:	2f78      	cmp	r7, #120	@ 0x78
 80058fa:	4691      	mov	r9, r2
 80058fc:	4680      	mov	r8, r0
 80058fe:	460c      	mov	r4, r1
 8005900:	469a      	mov	sl, r3
 8005902:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005906:	d807      	bhi.n	8005918 <_printf_i+0x28>
 8005908:	2f62      	cmp	r7, #98	@ 0x62
 800590a:	d80a      	bhi.n	8005922 <_printf_i+0x32>
 800590c:	2f00      	cmp	r7, #0
 800590e:	f000 80d1 	beq.w	8005ab4 <_printf_i+0x1c4>
 8005912:	2f58      	cmp	r7, #88	@ 0x58
 8005914:	f000 80b8 	beq.w	8005a88 <_printf_i+0x198>
 8005918:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800591c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005920:	e03a      	b.n	8005998 <_printf_i+0xa8>
 8005922:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005926:	2b15      	cmp	r3, #21
 8005928:	d8f6      	bhi.n	8005918 <_printf_i+0x28>
 800592a:	a101      	add	r1, pc, #4	@ (adr r1, 8005930 <_printf_i+0x40>)
 800592c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005930:	08005989 	.word	0x08005989
 8005934:	0800599d 	.word	0x0800599d
 8005938:	08005919 	.word	0x08005919
 800593c:	08005919 	.word	0x08005919
 8005940:	08005919 	.word	0x08005919
 8005944:	08005919 	.word	0x08005919
 8005948:	0800599d 	.word	0x0800599d
 800594c:	08005919 	.word	0x08005919
 8005950:	08005919 	.word	0x08005919
 8005954:	08005919 	.word	0x08005919
 8005958:	08005919 	.word	0x08005919
 800595c:	08005a9b 	.word	0x08005a9b
 8005960:	080059c7 	.word	0x080059c7
 8005964:	08005a55 	.word	0x08005a55
 8005968:	08005919 	.word	0x08005919
 800596c:	08005919 	.word	0x08005919
 8005970:	08005abd 	.word	0x08005abd
 8005974:	08005919 	.word	0x08005919
 8005978:	080059c7 	.word	0x080059c7
 800597c:	08005919 	.word	0x08005919
 8005980:	08005919 	.word	0x08005919
 8005984:	08005a5d 	.word	0x08005a5d
 8005988:	6833      	ldr	r3, [r6, #0]
 800598a:	1d1a      	adds	r2, r3, #4
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	6032      	str	r2, [r6, #0]
 8005990:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005994:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005998:	2301      	movs	r3, #1
 800599a:	e09c      	b.n	8005ad6 <_printf_i+0x1e6>
 800599c:	6833      	ldr	r3, [r6, #0]
 800599e:	6820      	ldr	r0, [r4, #0]
 80059a0:	1d19      	adds	r1, r3, #4
 80059a2:	6031      	str	r1, [r6, #0]
 80059a4:	0606      	lsls	r6, r0, #24
 80059a6:	d501      	bpl.n	80059ac <_printf_i+0xbc>
 80059a8:	681d      	ldr	r5, [r3, #0]
 80059aa:	e003      	b.n	80059b4 <_printf_i+0xc4>
 80059ac:	0645      	lsls	r5, r0, #25
 80059ae:	d5fb      	bpl.n	80059a8 <_printf_i+0xb8>
 80059b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80059b4:	2d00      	cmp	r5, #0
 80059b6:	da03      	bge.n	80059c0 <_printf_i+0xd0>
 80059b8:	232d      	movs	r3, #45	@ 0x2d
 80059ba:	426d      	negs	r5, r5
 80059bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80059c0:	4858      	ldr	r0, [pc, #352]	@ (8005b24 <_printf_i+0x234>)
 80059c2:	230a      	movs	r3, #10
 80059c4:	e011      	b.n	80059ea <_printf_i+0xfa>
 80059c6:	6821      	ldr	r1, [r4, #0]
 80059c8:	6833      	ldr	r3, [r6, #0]
 80059ca:	0608      	lsls	r0, r1, #24
 80059cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80059d0:	d402      	bmi.n	80059d8 <_printf_i+0xe8>
 80059d2:	0649      	lsls	r1, r1, #25
 80059d4:	bf48      	it	mi
 80059d6:	b2ad      	uxthmi	r5, r5
 80059d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80059da:	4852      	ldr	r0, [pc, #328]	@ (8005b24 <_printf_i+0x234>)
 80059dc:	6033      	str	r3, [r6, #0]
 80059de:	bf14      	ite	ne
 80059e0:	230a      	movne	r3, #10
 80059e2:	2308      	moveq	r3, #8
 80059e4:	2100      	movs	r1, #0
 80059e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80059ea:	6866      	ldr	r6, [r4, #4]
 80059ec:	60a6      	str	r6, [r4, #8]
 80059ee:	2e00      	cmp	r6, #0
 80059f0:	db05      	blt.n	80059fe <_printf_i+0x10e>
 80059f2:	6821      	ldr	r1, [r4, #0]
 80059f4:	432e      	orrs	r6, r5
 80059f6:	f021 0104 	bic.w	r1, r1, #4
 80059fa:	6021      	str	r1, [r4, #0]
 80059fc:	d04b      	beq.n	8005a96 <_printf_i+0x1a6>
 80059fe:	4616      	mov	r6, r2
 8005a00:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a04:	fb03 5711 	mls	r7, r3, r1, r5
 8005a08:	5dc7      	ldrb	r7, [r0, r7]
 8005a0a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a0e:	462f      	mov	r7, r5
 8005a10:	42bb      	cmp	r3, r7
 8005a12:	460d      	mov	r5, r1
 8005a14:	d9f4      	bls.n	8005a00 <_printf_i+0x110>
 8005a16:	2b08      	cmp	r3, #8
 8005a18:	d10b      	bne.n	8005a32 <_printf_i+0x142>
 8005a1a:	6823      	ldr	r3, [r4, #0]
 8005a1c:	07df      	lsls	r7, r3, #31
 8005a1e:	d508      	bpl.n	8005a32 <_printf_i+0x142>
 8005a20:	6923      	ldr	r3, [r4, #16]
 8005a22:	6861      	ldr	r1, [r4, #4]
 8005a24:	4299      	cmp	r1, r3
 8005a26:	bfde      	ittt	le
 8005a28:	2330      	movle	r3, #48	@ 0x30
 8005a2a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a2e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005a32:	1b92      	subs	r2, r2, r6
 8005a34:	6122      	str	r2, [r4, #16]
 8005a36:	f8cd a000 	str.w	sl, [sp]
 8005a3a:	464b      	mov	r3, r9
 8005a3c:	aa03      	add	r2, sp, #12
 8005a3e:	4621      	mov	r1, r4
 8005a40:	4640      	mov	r0, r8
 8005a42:	f7ff fee7 	bl	8005814 <_printf_common>
 8005a46:	3001      	adds	r0, #1
 8005a48:	d14a      	bne.n	8005ae0 <_printf_i+0x1f0>
 8005a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8005a4e:	b004      	add	sp, #16
 8005a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a54:	6823      	ldr	r3, [r4, #0]
 8005a56:	f043 0320 	orr.w	r3, r3, #32
 8005a5a:	6023      	str	r3, [r4, #0]
 8005a5c:	4832      	ldr	r0, [pc, #200]	@ (8005b28 <_printf_i+0x238>)
 8005a5e:	2778      	movs	r7, #120	@ 0x78
 8005a60:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005a64:	6823      	ldr	r3, [r4, #0]
 8005a66:	6831      	ldr	r1, [r6, #0]
 8005a68:	061f      	lsls	r7, r3, #24
 8005a6a:	f851 5b04 	ldr.w	r5, [r1], #4
 8005a6e:	d402      	bmi.n	8005a76 <_printf_i+0x186>
 8005a70:	065f      	lsls	r7, r3, #25
 8005a72:	bf48      	it	mi
 8005a74:	b2ad      	uxthmi	r5, r5
 8005a76:	6031      	str	r1, [r6, #0]
 8005a78:	07d9      	lsls	r1, r3, #31
 8005a7a:	bf44      	itt	mi
 8005a7c:	f043 0320 	orrmi.w	r3, r3, #32
 8005a80:	6023      	strmi	r3, [r4, #0]
 8005a82:	b11d      	cbz	r5, 8005a8c <_printf_i+0x19c>
 8005a84:	2310      	movs	r3, #16
 8005a86:	e7ad      	b.n	80059e4 <_printf_i+0xf4>
 8005a88:	4826      	ldr	r0, [pc, #152]	@ (8005b24 <_printf_i+0x234>)
 8005a8a:	e7e9      	b.n	8005a60 <_printf_i+0x170>
 8005a8c:	6823      	ldr	r3, [r4, #0]
 8005a8e:	f023 0320 	bic.w	r3, r3, #32
 8005a92:	6023      	str	r3, [r4, #0]
 8005a94:	e7f6      	b.n	8005a84 <_printf_i+0x194>
 8005a96:	4616      	mov	r6, r2
 8005a98:	e7bd      	b.n	8005a16 <_printf_i+0x126>
 8005a9a:	6833      	ldr	r3, [r6, #0]
 8005a9c:	6825      	ldr	r5, [r4, #0]
 8005a9e:	6961      	ldr	r1, [r4, #20]
 8005aa0:	1d18      	adds	r0, r3, #4
 8005aa2:	6030      	str	r0, [r6, #0]
 8005aa4:	062e      	lsls	r6, r5, #24
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	d501      	bpl.n	8005aae <_printf_i+0x1be>
 8005aaa:	6019      	str	r1, [r3, #0]
 8005aac:	e002      	b.n	8005ab4 <_printf_i+0x1c4>
 8005aae:	0668      	lsls	r0, r5, #25
 8005ab0:	d5fb      	bpl.n	8005aaa <_printf_i+0x1ba>
 8005ab2:	8019      	strh	r1, [r3, #0]
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	6123      	str	r3, [r4, #16]
 8005ab8:	4616      	mov	r6, r2
 8005aba:	e7bc      	b.n	8005a36 <_printf_i+0x146>
 8005abc:	6833      	ldr	r3, [r6, #0]
 8005abe:	1d1a      	adds	r2, r3, #4
 8005ac0:	6032      	str	r2, [r6, #0]
 8005ac2:	681e      	ldr	r6, [r3, #0]
 8005ac4:	6862      	ldr	r2, [r4, #4]
 8005ac6:	2100      	movs	r1, #0
 8005ac8:	4630      	mov	r0, r6
 8005aca:	f7fa fb81 	bl	80001d0 <memchr>
 8005ace:	b108      	cbz	r0, 8005ad4 <_printf_i+0x1e4>
 8005ad0:	1b80      	subs	r0, r0, r6
 8005ad2:	6060      	str	r0, [r4, #4]
 8005ad4:	6863      	ldr	r3, [r4, #4]
 8005ad6:	6123      	str	r3, [r4, #16]
 8005ad8:	2300      	movs	r3, #0
 8005ada:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ade:	e7aa      	b.n	8005a36 <_printf_i+0x146>
 8005ae0:	6923      	ldr	r3, [r4, #16]
 8005ae2:	4632      	mov	r2, r6
 8005ae4:	4649      	mov	r1, r9
 8005ae6:	4640      	mov	r0, r8
 8005ae8:	47d0      	blx	sl
 8005aea:	3001      	adds	r0, #1
 8005aec:	d0ad      	beq.n	8005a4a <_printf_i+0x15a>
 8005aee:	6823      	ldr	r3, [r4, #0]
 8005af0:	079b      	lsls	r3, r3, #30
 8005af2:	d413      	bmi.n	8005b1c <_printf_i+0x22c>
 8005af4:	68e0      	ldr	r0, [r4, #12]
 8005af6:	9b03      	ldr	r3, [sp, #12]
 8005af8:	4298      	cmp	r0, r3
 8005afa:	bfb8      	it	lt
 8005afc:	4618      	movlt	r0, r3
 8005afe:	e7a6      	b.n	8005a4e <_printf_i+0x15e>
 8005b00:	2301      	movs	r3, #1
 8005b02:	4632      	mov	r2, r6
 8005b04:	4649      	mov	r1, r9
 8005b06:	4640      	mov	r0, r8
 8005b08:	47d0      	blx	sl
 8005b0a:	3001      	adds	r0, #1
 8005b0c:	d09d      	beq.n	8005a4a <_printf_i+0x15a>
 8005b0e:	3501      	adds	r5, #1
 8005b10:	68e3      	ldr	r3, [r4, #12]
 8005b12:	9903      	ldr	r1, [sp, #12]
 8005b14:	1a5b      	subs	r3, r3, r1
 8005b16:	42ab      	cmp	r3, r5
 8005b18:	dcf2      	bgt.n	8005b00 <_printf_i+0x210>
 8005b1a:	e7eb      	b.n	8005af4 <_printf_i+0x204>
 8005b1c:	2500      	movs	r5, #0
 8005b1e:	f104 0619 	add.w	r6, r4, #25
 8005b22:	e7f5      	b.n	8005b10 <_printf_i+0x220>
 8005b24:	08005e91 	.word	0x08005e91
 8005b28:	08005ea2 	.word	0x08005ea2

08005b2c <__sflush_r>:
 8005b2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b34:	0716      	lsls	r6, r2, #28
 8005b36:	4605      	mov	r5, r0
 8005b38:	460c      	mov	r4, r1
 8005b3a:	d454      	bmi.n	8005be6 <__sflush_r+0xba>
 8005b3c:	684b      	ldr	r3, [r1, #4]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	dc02      	bgt.n	8005b48 <__sflush_r+0x1c>
 8005b42:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	dd48      	ble.n	8005bda <__sflush_r+0xae>
 8005b48:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005b4a:	2e00      	cmp	r6, #0
 8005b4c:	d045      	beq.n	8005bda <__sflush_r+0xae>
 8005b4e:	2300      	movs	r3, #0
 8005b50:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005b54:	682f      	ldr	r7, [r5, #0]
 8005b56:	6a21      	ldr	r1, [r4, #32]
 8005b58:	602b      	str	r3, [r5, #0]
 8005b5a:	d030      	beq.n	8005bbe <__sflush_r+0x92>
 8005b5c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005b5e:	89a3      	ldrh	r3, [r4, #12]
 8005b60:	0759      	lsls	r1, r3, #29
 8005b62:	d505      	bpl.n	8005b70 <__sflush_r+0x44>
 8005b64:	6863      	ldr	r3, [r4, #4]
 8005b66:	1ad2      	subs	r2, r2, r3
 8005b68:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005b6a:	b10b      	cbz	r3, 8005b70 <__sflush_r+0x44>
 8005b6c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005b6e:	1ad2      	subs	r2, r2, r3
 8005b70:	2300      	movs	r3, #0
 8005b72:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005b74:	6a21      	ldr	r1, [r4, #32]
 8005b76:	4628      	mov	r0, r5
 8005b78:	47b0      	blx	r6
 8005b7a:	1c43      	adds	r3, r0, #1
 8005b7c:	89a3      	ldrh	r3, [r4, #12]
 8005b7e:	d106      	bne.n	8005b8e <__sflush_r+0x62>
 8005b80:	6829      	ldr	r1, [r5, #0]
 8005b82:	291d      	cmp	r1, #29
 8005b84:	d82b      	bhi.n	8005bde <__sflush_r+0xb2>
 8005b86:	4a2a      	ldr	r2, [pc, #168]	@ (8005c30 <__sflush_r+0x104>)
 8005b88:	40ca      	lsrs	r2, r1
 8005b8a:	07d6      	lsls	r6, r2, #31
 8005b8c:	d527      	bpl.n	8005bde <__sflush_r+0xb2>
 8005b8e:	2200      	movs	r2, #0
 8005b90:	6062      	str	r2, [r4, #4]
 8005b92:	04d9      	lsls	r1, r3, #19
 8005b94:	6922      	ldr	r2, [r4, #16]
 8005b96:	6022      	str	r2, [r4, #0]
 8005b98:	d504      	bpl.n	8005ba4 <__sflush_r+0x78>
 8005b9a:	1c42      	adds	r2, r0, #1
 8005b9c:	d101      	bne.n	8005ba2 <__sflush_r+0x76>
 8005b9e:	682b      	ldr	r3, [r5, #0]
 8005ba0:	b903      	cbnz	r3, 8005ba4 <__sflush_r+0x78>
 8005ba2:	6560      	str	r0, [r4, #84]	@ 0x54
 8005ba4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005ba6:	602f      	str	r7, [r5, #0]
 8005ba8:	b1b9      	cbz	r1, 8005bda <__sflush_r+0xae>
 8005baa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005bae:	4299      	cmp	r1, r3
 8005bb0:	d002      	beq.n	8005bb8 <__sflush_r+0x8c>
 8005bb2:	4628      	mov	r0, r5
 8005bb4:	f7ff fbf4 	bl	80053a0 <_free_r>
 8005bb8:	2300      	movs	r3, #0
 8005bba:	6363      	str	r3, [r4, #52]	@ 0x34
 8005bbc:	e00d      	b.n	8005bda <__sflush_r+0xae>
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	4628      	mov	r0, r5
 8005bc2:	47b0      	blx	r6
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	1c50      	adds	r0, r2, #1
 8005bc8:	d1c9      	bne.n	8005b5e <__sflush_r+0x32>
 8005bca:	682b      	ldr	r3, [r5, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d0c6      	beq.n	8005b5e <__sflush_r+0x32>
 8005bd0:	2b1d      	cmp	r3, #29
 8005bd2:	d001      	beq.n	8005bd8 <__sflush_r+0xac>
 8005bd4:	2b16      	cmp	r3, #22
 8005bd6:	d11e      	bne.n	8005c16 <__sflush_r+0xea>
 8005bd8:	602f      	str	r7, [r5, #0]
 8005bda:	2000      	movs	r0, #0
 8005bdc:	e022      	b.n	8005c24 <__sflush_r+0xf8>
 8005bde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005be2:	b21b      	sxth	r3, r3
 8005be4:	e01b      	b.n	8005c1e <__sflush_r+0xf2>
 8005be6:	690f      	ldr	r7, [r1, #16]
 8005be8:	2f00      	cmp	r7, #0
 8005bea:	d0f6      	beq.n	8005bda <__sflush_r+0xae>
 8005bec:	0793      	lsls	r3, r2, #30
 8005bee:	680e      	ldr	r6, [r1, #0]
 8005bf0:	bf08      	it	eq
 8005bf2:	694b      	ldreq	r3, [r1, #20]
 8005bf4:	600f      	str	r7, [r1, #0]
 8005bf6:	bf18      	it	ne
 8005bf8:	2300      	movne	r3, #0
 8005bfa:	eba6 0807 	sub.w	r8, r6, r7
 8005bfe:	608b      	str	r3, [r1, #8]
 8005c00:	f1b8 0f00 	cmp.w	r8, #0
 8005c04:	dde9      	ble.n	8005bda <__sflush_r+0xae>
 8005c06:	6a21      	ldr	r1, [r4, #32]
 8005c08:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005c0a:	4643      	mov	r3, r8
 8005c0c:	463a      	mov	r2, r7
 8005c0e:	4628      	mov	r0, r5
 8005c10:	47b0      	blx	r6
 8005c12:	2800      	cmp	r0, #0
 8005c14:	dc08      	bgt.n	8005c28 <__sflush_r+0xfc>
 8005c16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c1e:	81a3      	strh	r3, [r4, #12]
 8005c20:	f04f 30ff 	mov.w	r0, #4294967295
 8005c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c28:	4407      	add	r7, r0
 8005c2a:	eba8 0800 	sub.w	r8, r8, r0
 8005c2e:	e7e7      	b.n	8005c00 <__sflush_r+0xd4>
 8005c30:	20400001 	.word	0x20400001

08005c34 <_fflush_r>:
 8005c34:	b538      	push	{r3, r4, r5, lr}
 8005c36:	690b      	ldr	r3, [r1, #16]
 8005c38:	4605      	mov	r5, r0
 8005c3a:	460c      	mov	r4, r1
 8005c3c:	b913      	cbnz	r3, 8005c44 <_fflush_r+0x10>
 8005c3e:	2500      	movs	r5, #0
 8005c40:	4628      	mov	r0, r5
 8005c42:	bd38      	pop	{r3, r4, r5, pc}
 8005c44:	b118      	cbz	r0, 8005c4e <_fflush_r+0x1a>
 8005c46:	6a03      	ldr	r3, [r0, #32]
 8005c48:	b90b      	cbnz	r3, 8005c4e <_fflush_r+0x1a>
 8005c4a:	f7ff f9af 	bl	8004fac <__sinit>
 8005c4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d0f3      	beq.n	8005c3e <_fflush_r+0xa>
 8005c56:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005c58:	07d0      	lsls	r0, r2, #31
 8005c5a:	d404      	bmi.n	8005c66 <_fflush_r+0x32>
 8005c5c:	0599      	lsls	r1, r3, #22
 8005c5e:	d402      	bmi.n	8005c66 <_fflush_r+0x32>
 8005c60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c62:	f7ff fb9a 	bl	800539a <__retarget_lock_acquire_recursive>
 8005c66:	4628      	mov	r0, r5
 8005c68:	4621      	mov	r1, r4
 8005c6a:	f7ff ff5f 	bl	8005b2c <__sflush_r>
 8005c6e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005c70:	07da      	lsls	r2, r3, #31
 8005c72:	4605      	mov	r5, r0
 8005c74:	d4e4      	bmi.n	8005c40 <_fflush_r+0xc>
 8005c76:	89a3      	ldrh	r3, [r4, #12]
 8005c78:	059b      	lsls	r3, r3, #22
 8005c7a:	d4e1      	bmi.n	8005c40 <_fflush_r+0xc>
 8005c7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c7e:	f7ff fb8d 	bl	800539c <__retarget_lock_release_recursive>
 8005c82:	e7dd      	b.n	8005c40 <_fflush_r+0xc>

08005c84 <__swhatbuf_r>:
 8005c84:	b570      	push	{r4, r5, r6, lr}
 8005c86:	460c      	mov	r4, r1
 8005c88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c8c:	2900      	cmp	r1, #0
 8005c8e:	b096      	sub	sp, #88	@ 0x58
 8005c90:	4615      	mov	r5, r2
 8005c92:	461e      	mov	r6, r3
 8005c94:	da0d      	bge.n	8005cb2 <__swhatbuf_r+0x2e>
 8005c96:	89a3      	ldrh	r3, [r4, #12]
 8005c98:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005c9c:	f04f 0100 	mov.w	r1, #0
 8005ca0:	bf14      	ite	ne
 8005ca2:	2340      	movne	r3, #64	@ 0x40
 8005ca4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005ca8:	2000      	movs	r0, #0
 8005caa:	6031      	str	r1, [r6, #0]
 8005cac:	602b      	str	r3, [r5, #0]
 8005cae:	b016      	add	sp, #88	@ 0x58
 8005cb0:	bd70      	pop	{r4, r5, r6, pc}
 8005cb2:	466a      	mov	r2, sp
 8005cb4:	f000 f848 	bl	8005d48 <_fstat_r>
 8005cb8:	2800      	cmp	r0, #0
 8005cba:	dbec      	blt.n	8005c96 <__swhatbuf_r+0x12>
 8005cbc:	9901      	ldr	r1, [sp, #4]
 8005cbe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005cc2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005cc6:	4259      	negs	r1, r3
 8005cc8:	4159      	adcs	r1, r3
 8005cca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005cce:	e7eb      	b.n	8005ca8 <__swhatbuf_r+0x24>

08005cd0 <__smakebuf_r>:
 8005cd0:	898b      	ldrh	r3, [r1, #12]
 8005cd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005cd4:	079d      	lsls	r5, r3, #30
 8005cd6:	4606      	mov	r6, r0
 8005cd8:	460c      	mov	r4, r1
 8005cda:	d507      	bpl.n	8005cec <__smakebuf_r+0x1c>
 8005cdc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005ce0:	6023      	str	r3, [r4, #0]
 8005ce2:	6123      	str	r3, [r4, #16]
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	6163      	str	r3, [r4, #20]
 8005ce8:	b003      	add	sp, #12
 8005cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cec:	ab01      	add	r3, sp, #4
 8005cee:	466a      	mov	r2, sp
 8005cf0:	f7ff ffc8 	bl	8005c84 <__swhatbuf_r>
 8005cf4:	9f00      	ldr	r7, [sp, #0]
 8005cf6:	4605      	mov	r5, r0
 8005cf8:	4639      	mov	r1, r7
 8005cfa:	4630      	mov	r0, r6
 8005cfc:	f7ff fbbc 	bl	8005478 <_malloc_r>
 8005d00:	b948      	cbnz	r0, 8005d16 <__smakebuf_r+0x46>
 8005d02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d06:	059a      	lsls	r2, r3, #22
 8005d08:	d4ee      	bmi.n	8005ce8 <__smakebuf_r+0x18>
 8005d0a:	f023 0303 	bic.w	r3, r3, #3
 8005d0e:	f043 0302 	orr.w	r3, r3, #2
 8005d12:	81a3      	strh	r3, [r4, #12]
 8005d14:	e7e2      	b.n	8005cdc <__smakebuf_r+0xc>
 8005d16:	89a3      	ldrh	r3, [r4, #12]
 8005d18:	6020      	str	r0, [r4, #0]
 8005d1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d1e:	81a3      	strh	r3, [r4, #12]
 8005d20:	9b01      	ldr	r3, [sp, #4]
 8005d22:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005d26:	b15b      	cbz	r3, 8005d40 <__smakebuf_r+0x70>
 8005d28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d2c:	4630      	mov	r0, r6
 8005d2e:	f000 f81d 	bl	8005d6c <_isatty_r>
 8005d32:	b128      	cbz	r0, 8005d40 <__smakebuf_r+0x70>
 8005d34:	89a3      	ldrh	r3, [r4, #12]
 8005d36:	f023 0303 	bic.w	r3, r3, #3
 8005d3a:	f043 0301 	orr.w	r3, r3, #1
 8005d3e:	81a3      	strh	r3, [r4, #12]
 8005d40:	89a3      	ldrh	r3, [r4, #12]
 8005d42:	431d      	orrs	r5, r3
 8005d44:	81a5      	strh	r5, [r4, #12]
 8005d46:	e7cf      	b.n	8005ce8 <__smakebuf_r+0x18>

08005d48 <_fstat_r>:
 8005d48:	b538      	push	{r3, r4, r5, lr}
 8005d4a:	4d07      	ldr	r5, [pc, #28]	@ (8005d68 <_fstat_r+0x20>)
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	4604      	mov	r4, r0
 8005d50:	4608      	mov	r0, r1
 8005d52:	4611      	mov	r1, r2
 8005d54:	602b      	str	r3, [r5, #0]
 8005d56:	f7fb fa0d 	bl	8001174 <_fstat>
 8005d5a:	1c43      	adds	r3, r0, #1
 8005d5c:	d102      	bne.n	8005d64 <_fstat_r+0x1c>
 8005d5e:	682b      	ldr	r3, [r5, #0]
 8005d60:	b103      	cbz	r3, 8005d64 <_fstat_r+0x1c>
 8005d62:	6023      	str	r3, [r4, #0]
 8005d64:	bd38      	pop	{r3, r4, r5, pc}
 8005d66:	bf00      	nop
 8005d68:	200004b0 	.word	0x200004b0

08005d6c <_isatty_r>:
 8005d6c:	b538      	push	{r3, r4, r5, lr}
 8005d6e:	4d06      	ldr	r5, [pc, #24]	@ (8005d88 <_isatty_r+0x1c>)
 8005d70:	2300      	movs	r3, #0
 8005d72:	4604      	mov	r4, r0
 8005d74:	4608      	mov	r0, r1
 8005d76:	602b      	str	r3, [r5, #0]
 8005d78:	f7fb fa0c 	bl	8001194 <_isatty>
 8005d7c:	1c43      	adds	r3, r0, #1
 8005d7e:	d102      	bne.n	8005d86 <_isatty_r+0x1a>
 8005d80:	682b      	ldr	r3, [r5, #0]
 8005d82:	b103      	cbz	r3, 8005d86 <_isatty_r+0x1a>
 8005d84:	6023      	str	r3, [r4, #0]
 8005d86:	bd38      	pop	{r3, r4, r5, pc}
 8005d88:	200004b0 	.word	0x200004b0

08005d8c <_sbrk_r>:
 8005d8c:	b538      	push	{r3, r4, r5, lr}
 8005d8e:	4d06      	ldr	r5, [pc, #24]	@ (8005da8 <_sbrk_r+0x1c>)
 8005d90:	2300      	movs	r3, #0
 8005d92:	4604      	mov	r4, r0
 8005d94:	4608      	mov	r0, r1
 8005d96:	602b      	str	r3, [r5, #0]
 8005d98:	f7fb fa14 	bl	80011c4 <_sbrk>
 8005d9c:	1c43      	adds	r3, r0, #1
 8005d9e:	d102      	bne.n	8005da6 <_sbrk_r+0x1a>
 8005da0:	682b      	ldr	r3, [r5, #0]
 8005da2:	b103      	cbz	r3, 8005da6 <_sbrk_r+0x1a>
 8005da4:	6023      	str	r3, [r4, #0]
 8005da6:	bd38      	pop	{r3, r4, r5, pc}
 8005da8:	200004b0 	.word	0x200004b0

08005dac <_init>:
 8005dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dae:	bf00      	nop
 8005db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005db2:	bc08      	pop	{r3}
 8005db4:	469e      	mov	lr, r3
 8005db6:	4770      	bx	lr

08005db8 <_fini>:
 8005db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dba:	bf00      	nop
 8005dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dbe:	bc08      	pop	{r3}
 8005dc0:	469e      	mov	lr, r3
 8005dc2:	4770      	bx	lr
