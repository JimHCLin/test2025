
TEST_Jim.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cfc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08005e8c  08005e8c  00006e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fe0  08005fe0  0000706c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005fe0  08005fe0  00006fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fe8  08005fe8  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fe8  08005fe8  00006fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005fec  08005fec  00006fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08005ff0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b8  2000006c  0800605c  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000524  0800605c  00007524  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012971  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002546  00000000  00000000  00019a0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b8  00000000  00000000  0001bf58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cff  00000000  00000000  0001d010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000321a  00000000  00000000  0001dd0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000137bd  00000000  00000000  00020f29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ffcb7  00000000  00000000  000346e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013439d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ea8  00000000  00000000  001343e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00139288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005e74 	.word	0x08005e74

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08005e74 	.word	0x08005e74

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <HAL_GPIO_EXTI_Callback>:

}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
	if(GPIO_Pin == GPIO_PIN_13){
 80005a6:	88fb      	ldrh	r3, [r7, #6]
 80005a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80005ac:	d10e      	bne.n	80005cc <HAL_GPIO_EXTI_Callback+0x30>
		ledTrigger = 1;
 80005ae:	4b09      	ldr	r3, [pc, #36]	@ (80005d4 <HAL_GPIO_EXTI_Callback+0x38>)
 80005b0:	2201      	movs	r2, #1
 80005b2:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80005b4:	2201      	movs	r2, #1
 80005b6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005ba:	4807      	ldr	r0, [pc, #28]	@ (80005d8 <HAL_GPIO_EXTI_Callback+0x3c>)
 80005bc:	f002 fb2a 	bl	8002c14 <HAL_GPIO_WritePin>
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);  // 切換燈狀態
	    //HAL_Delay(200);
	    //將 PB8 Off
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80005c0:	2200      	movs	r2, #0
 80005c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005c6:	4804      	ldr	r0, [pc, #16]	@ (80005d8 <HAL_GPIO_EXTI_Callback+0x3c>)
 80005c8:	f002 fb24 	bl	8002c14 <HAL_GPIO_WritePin>
		//x = (x == 0)? 1:0;
	}
}
 80005cc:	bf00      	nop
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	200003c4 	.word	0x200003c4
 80005d8:	48000400 	.word	0x48000400

080005dc <checkSwitchState>:


////////////////////

bool checkSwitchState(int sensorIndex,uint32_t switchDebounceDuration)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	6039      	str	r1, [r7, #0]
	bool isTouchSwitchPressed=false;
 80005e6:	2300      	movs	r3, #0
 80005e8:	75fb      	strb	r3, [r7, #23]
	uint16_t pin = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	82bb      	strh	r3, [r7, #20]
	uint32_t static lastDebounceTime = 0;//它只會在程式執行到該行定義時 初始化一次（第一次呼叫函數時）。
    //之後每次呼叫 checkSwitchState() 時，這個變數都會保留上一次的值，不會再被重設為 0
    static GPIO_PinState lastButtonState = GPIO_PIN_SET;//沒按下 右上PC8 透過電阻拉到 3.3V（邏輯高  , 右下pc6   左上pc9  右下下 pc5
    switch(sensorIndex) {
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	3b01      	subs	r3, #1
 80005f2:	2b03      	cmp	r3, #3
 80005f4:	d818      	bhi.n	8000628 <checkSwitchState+0x4c>
 80005f6:	a201      	add	r2, pc, #4	@ (adr r2, 80005fc <checkSwitchState+0x20>)
 80005f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005fc:	0800060d 	.word	0x0800060d
 8000600:	08000615 	.word	0x08000615
 8000604:	0800061b 	.word	0x0800061b
 8000608:	08000623 	.word	0x08000623
            case 1:
                pin=GPIO_PIN_8;
 800060c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000610:	82bb      	strh	r3, [r7, #20]
                break;
 8000612:	e00d      	b.n	8000630 <checkSwitchState+0x54>
            case 2:
            	pin=GPIO_PIN_6;
 8000614:	2340      	movs	r3, #64	@ 0x40
 8000616:	82bb      	strh	r3, [r7, #20]
                break;
 8000618:	e00a      	b.n	8000630 <checkSwitchState+0x54>
            case 3:
            	pin=GPIO_PIN_9;
 800061a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800061e:	82bb      	strh	r3, [r7, #20]
			    break;
 8000620:	e006      	b.n	8000630 <checkSwitchState+0x54>
            case 4:
            	pin=GPIO_PIN_5;
 8000622:	2320      	movs	r3, #32
 8000624:	82bb      	strh	r3, [r7, #20]
				break;
 8000626:	e003      	b.n	8000630 <checkSwitchState+0x54>

            default:
                // 可以回報錯誤或回傳一個預設值
            	pin = GPIO_PIN_8;
 8000628:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800062c:	82bb      	strh	r3, [r7, #20]
                break;
 800062e:	bf00      	nop
        }


    GPIO_PinState currentState=HAL_GPIO_ReadPin(GPIOC, pin);
 8000630:	8abb      	ldrh	r3, [r7, #20]
 8000632:	4619      	mov	r1, r3
 8000634:	4813      	ldr	r0, [pc, #76]	@ (8000684 <checkSwitchState+0xa8>)
 8000636:	f002 fad5 	bl	8002be4 <HAL_GPIO_ReadPin>
 800063a:	4603      	mov	r3, r0
 800063c:	74fb      	strb	r3, [r7, #19]

	//GPIO_PinState currentState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6);//低電位
	if (currentState != lastButtonState)
 800063e:	4b12      	ldr	r3, [pc, #72]	@ (8000688 <checkSwitchState+0xac>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	7cfa      	ldrb	r2, [r7, #19]
 8000644:	429a      	cmp	r2, r3
 8000646:	d004      	beq.n	8000652 <checkSwitchState+0x76>
	{
		lastDebounceTime = HAL_GetTick();  // 有變化就重設時間
 8000648:	f001 f83c 	bl	80016c4 <HAL_GetTick>
 800064c:	4603      	mov	r3, r0
 800064e:	4a0f      	ldr	r2, [pc, #60]	@ (800068c <checkSwitchState+0xb0>)
 8000650:	6013      	str	r3, [r2, #0]
	}
	uint32_t elapsed = HAL_GetTick() - lastDebounceTime;  // 算出經過了多少毫秒
 8000652:	f001 f837 	bl	80016c4 <HAL_GetTick>
 8000656:	4602      	mov	r2, r0
 8000658:	4b0c      	ldr	r3, [pc, #48]	@ (800068c <checkSwitchState+0xb0>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	1ad3      	subs	r3, r2, r3
 800065e:	60fb      	str	r3, [r7, #12]
	if (elapsed > switchDebounceDuration)
 8000660:	68fa      	ldr	r2, [r7, #12]
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	429a      	cmp	r2, r3
 8000666:	d904      	bls.n	8000672 <checkSwitchState+0x96>
	{
		if (currentState == GPIO_PIN_RESET)
 8000668:	7cfb      	ldrb	r3, [r7, #19]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d101      	bne.n	8000672 <checkSwitchState+0x96>
		{
			// 按鈕已穩定按下，可以執行動作
			isTouchSwitchPressed=true;
 800066e:	2301      	movs	r3, #1
 8000670:	75fb      	strb	r3, [r7, #23]

		}
	}

	lastButtonState = currentState;
 8000672:	4a05      	ldr	r2, [pc, #20]	@ (8000688 <checkSwitchState+0xac>)
 8000674:	7cfb      	ldrb	r3, [r7, #19]
 8000676:	7013      	strb	r3, [r2, #0]
	return isTouchSwitchPressed;
 8000678:	7dfb      	ldrb	r3, [r7, #23]
}
 800067a:	4618      	mov	r0, r3
 800067c:	3718      	adds	r7, #24
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	48000800 	.word	0x48000800
 8000688:	20000000 	.word	0x20000000
 800068c:	200003c8 	.word	0x200003c8

08000690 <getAllTouchSwitchState>:
bool getAllTouchSwitchState(bool isSwitch1Enabled,bool isSwitch2Enabled,bool isSwitch3Enabled,bool isSwitch4Enabled,uint32_t touchSwitchDebounceDuration)
{
 8000690:	b590      	push	{r4, r7, lr}
 8000692:	b089      	sub	sp, #36	@ 0x24
 8000694:	af00      	add	r7, sp, #0
 8000696:	4604      	mov	r4, r0
 8000698:	4608      	mov	r0, r1
 800069a:	4611      	mov	r1, r2
 800069c:	461a      	mov	r2, r3
 800069e:	4623      	mov	r3, r4
 80006a0:	71fb      	strb	r3, [r7, #7]
 80006a2:	4603      	mov	r3, r0
 80006a4:	71bb      	strb	r3, [r7, #6]
 80006a6:	460b      	mov	r3, r1
 80006a8:	717b      	strb	r3, [r7, #5]
 80006aa:	4613      	mov	r3, r2
 80006ac:	713b      	strb	r3, [r7, #4]
	bool allTouchSwitchStateResult=false;
 80006ae:	2300      	movs	r3, #0
 80006b0:	74fb      	strb	r3, [r7, #19]
	//bool isTouchSwitch1Pressed = true;  // 開關1被按下
	bool isTouchSwitch1Pressed = false; // 開關1沒被按下
 80006b2:	2300      	movs	r3, #0
 80006b4:	77fb      	strb	r3, [r7, #31]
	bool isTouchSwitch2Pressed = false;
 80006b6:	2300      	movs	r3, #0
 80006b8:	77bb      	strb	r3, [r7, #30]
	bool isTouchSwitch3Pressed = false;
 80006ba:	2300      	movs	r3, #0
 80006bc:	74bb      	strb	r3, [r7, #18]
	bool isTouchSwitch4Pressed = false;
 80006be:	2300      	movs	r3, #0
 80006c0:	747b      	strb	r3, [r7, #17]
	uint32_t forceSensor2AveragedaValue=0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	60fb      	str	r3, [r7, #12]
	int disabledCount = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61bb      	str	r3, [r7, #24]
	if (!isSwitch1Enabled) disabledCount++;
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	f083 0301 	eor.w	r3, r3, #1
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d002      	beq.n	80006dc <getAllTouchSwitchState+0x4c>
 80006d6:	69bb      	ldr	r3, [r7, #24]
 80006d8:	3301      	adds	r3, #1
 80006da:	61bb      	str	r3, [r7, #24]
	if (!isSwitch2Enabled) disabledCount++;
 80006dc:	79bb      	ldrb	r3, [r7, #6]
 80006de:	f083 0301 	eor.w	r3, r3, #1
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d002      	beq.n	80006ee <getAllTouchSwitchState+0x5e>
 80006e8:	69bb      	ldr	r3, [r7, #24]
 80006ea:	3301      	adds	r3, #1
 80006ec:	61bb      	str	r3, [r7, #24]
	if (!isSwitch3Enabled) disabledCount++;
 80006ee:	797b      	ldrb	r3, [r7, #5]
 80006f0:	f083 0301 	eor.w	r3, r3, #1
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d002      	beq.n	8000700 <getAllTouchSwitchState+0x70>
 80006fa:	69bb      	ldr	r3, [r7, #24]
 80006fc:	3301      	adds	r3, #1
 80006fe:	61bb      	str	r3, [r7, #24]
	if (!isSwitch4Enabled) disabledCount++;
 8000700:	793b      	ldrb	r3, [r7, #4]
 8000702:	f083 0301 	eor.w	r3, r3, #1
 8000706:	b2db      	uxtb	r3, r3
 8000708:	2b00      	cmp	r3, #0
 800070a:	d002      	beq.n	8000712 <getAllTouchSwitchState+0x82>
 800070c:	69bb      	ldr	r3, [r7, #24]
 800070e:	3301      	adds	r3, #1
 8000710:	61bb      	str	r3, [r7, #24]

	if (disabledCount == 0)
 8000712:	69bb      	ldr	r3, [r7, #24]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d12c      	bne.n	8000772 <getAllTouchSwitchState+0xe2>
	{   //四個開關都啟用

		//
		for(int i=0;i<2;i++)
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]
 800071c:	e01d      	b.n	800075a <getAllTouchSwitchState+0xca>
		{

			isTouchSwitch1Pressed=checkSwitchState(1,touchSwitchDebounceDuration);
 800071e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000720:	2001      	movs	r0, #1
 8000722:	f7ff ff5b 	bl	80005dc <checkSwitchState>
 8000726:	4603      	mov	r3, r0
 8000728:	77fb      	strb	r3, [r7, #31]
			isTouchSwitch2Pressed=checkSwitchState(2,touchSwitchDebounceDuration);//再改成2
 800072a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800072c:	2002      	movs	r0, #2
 800072e:	f7ff ff55 	bl	80005dc <checkSwitchState>
 8000732:	4603      	mov	r3, r0
 8000734:	77bb      	strb	r3, [r7, #30]
			isTouchSwitch1Pressed=checkSwitchState(3,touchSwitchDebounceDuration);
 8000736:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000738:	2003      	movs	r0, #3
 800073a:	f7ff ff4f 	bl	80005dc <checkSwitchState>
 800073e:	4603      	mov	r3, r0
 8000740:	77fb      	strb	r3, [r7, #31]
			isTouchSwitch2Pressed=checkSwitchState(4,touchSwitchDebounceDuration);//再改成2
 8000742:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000744:	2004      	movs	r0, #4
 8000746:	f7ff ff49 	bl	80005dc <checkSwitchState>
 800074a:	4603      	mov	r3, r0
 800074c:	77bb      	strb	r3, [r7, #30]


			HAL_Delay(100); // 每10毫秒檢查一次按鈕狀態
 800074e:	2064      	movs	r0, #100	@ 0x64
 8000750:	f000 ffc4 	bl	80016dc <HAL_Delay>
		for(int i=0;i<2;i++)
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	3301      	adds	r3, #1
 8000758:	617b      	str	r3, [r7, #20]
 800075a:	697b      	ldr	r3, [r7, #20]
 800075c:	2b01      	cmp	r3, #1
 800075e:	ddde      	ble.n	800071e <getAllTouchSwitchState+0x8e>
		}

		//


		int pressedCount = isTouchSwitch1Pressed + isTouchSwitch2Pressed + isTouchSwitch3Pressed + isTouchSwitch4Pressed;
 8000760:	7ffa      	ldrb	r2, [r7, #31]
 8000762:	7fbb      	ldrb	r3, [r7, #30]
 8000764:	441a      	add	r2, r3
 8000766:	7cbb      	ldrb	r3, [r7, #18]
 8000768:	441a      	add	r2, r3
 800076a:	7c7b      	ldrb	r3, [r7, #17]
 800076c:	4413      	add	r3, r2
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	e05d      	b.n	800082e <getAllTouchSwitchState+0x19e>
			//allForceSensorStateResult=true;
		//}
		 //return true; // 兩個sensor都沒啟用，回傳 false

	}
	else if (disabledCount == 1)
 8000772:	69bb      	ldr	r3, [r7, #24]
 8000774:	2b01      	cmp	r3, #1
 8000776:	d10c      	bne.n	8000792 <getAllTouchSwitchState+0x102>
	{
		printf("一個 switch 不啟用\n");
 8000778:	482f      	ldr	r0, [pc, #188]	@ (8000838 <getAllTouchSwitchState+0x1a8>)
 800077a:	f004 fd19 	bl	80051b0 <puts>
		printf("啟用的 switch 有：");
 800077e:	482f      	ldr	r0, [pc, #188]	@ (800083c <getAllTouchSwitchState+0x1ac>)
 8000780:	f004 fcae 	bl	80050e0 <iprintf>
		if (isSwitch1Enabled) printf("Switch1 ");
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d051      	beq.n	800082e <getAllTouchSwitchState+0x19e>
 800078a:	482d      	ldr	r0, [pc, #180]	@ (8000840 <getAllTouchSwitchState+0x1b0>)
 800078c:	f004 fca8 	bl	80050e0 <iprintf>
 8000790:	e04d      	b.n	800082e <getAllTouchSwitchState+0x19e>

	}
	else if (disabledCount == 2)
 8000792:	69bb      	ldr	r3, [r7, #24]
 8000794:	2b02      	cmp	r3, #2
 8000796:	d11e      	bne.n	80007d6 <getAllTouchSwitchState+0x146>
	{
		printf("兩個 switch 不啟用\n");
 8000798:	482a      	ldr	r0, [pc, #168]	@ (8000844 <getAllTouchSwitchState+0x1b4>)
 800079a:	f004 fd09 	bl	80051b0 <puts>
		printf("啟用的 switch 有：");
 800079e:	4827      	ldr	r0, [pc, #156]	@ (800083c <getAllTouchSwitchState+0x1ac>)
 80007a0:	f004 fc9e 	bl	80050e0 <iprintf>
		if (isSwitch1Enabled) printf("Switch1 ");
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d002      	beq.n	80007b0 <getAllTouchSwitchState+0x120>
 80007aa:	4825      	ldr	r0, [pc, #148]	@ (8000840 <getAllTouchSwitchState+0x1b0>)
 80007ac:	f004 fc98 	bl	80050e0 <iprintf>
		if (isSwitch2Enabled) printf("Switch2 ");
 80007b0:	79bb      	ldrb	r3, [r7, #6]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d002      	beq.n	80007bc <getAllTouchSwitchState+0x12c>
 80007b6:	4824      	ldr	r0, [pc, #144]	@ (8000848 <getAllTouchSwitchState+0x1b8>)
 80007b8:	f004 fc92 	bl	80050e0 <iprintf>
		if (isSwitch3Enabled) printf("Switch3 ");
 80007bc:	797b      	ldrb	r3, [r7, #5]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d002      	beq.n	80007c8 <getAllTouchSwitchState+0x138>
 80007c2:	4822      	ldr	r0, [pc, #136]	@ (800084c <getAllTouchSwitchState+0x1bc>)
 80007c4:	f004 fc8c 	bl	80050e0 <iprintf>
		if (isSwitch4Enabled) printf("Switch4 ");
 80007c8:	793b      	ldrb	r3, [r7, #4]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d02f      	beq.n	800082e <getAllTouchSwitchState+0x19e>
 80007ce:	4820      	ldr	r0, [pc, #128]	@ (8000850 <getAllTouchSwitchState+0x1c0>)
 80007d0:	f004 fc86 	bl	80050e0 <iprintf>
 80007d4:	e02b      	b.n	800082e <getAllTouchSwitchState+0x19e>

	}
	else if (disabledCount == 3) {
 80007d6:	69bb      	ldr	r3, [r7, #24]
 80007d8:	2b03      	cmp	r3, #3
 80007da:	d11e      	bne.n	800081a <getAllTouchSwitchState+0x18a>
		printf("三個 switch 不啟用\n");
 80007dc:	481d      	ldr	r0, [pc, #116]	@ (8000854 <getAllTouchSwitchState+0x1c4>)
 80007de:	f004 fce7 	bl	80051b0 <puts>
		printf("啟用的 switch 有：");
 80007e2:	4816      	ldr	r0, [pc, #88]	@ (800083c <getAllTouchSwitchState+0x1ac>)
 80007e4:	f004 fc7c 	bl	80050e0 <iprintf>
		if (isSwitch1Enabled) printf("Switch1 ");
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d002      	beq.n	80007f4 <getAllTouchSwitchState+0x164>
 80007ee:	4814      	ldr	r0, [pc, #80]	@ (8000840 <getAllTouchSwitchState+0x1b0>)
 80007f0:	f004 fc76 	bl	80050e0 <iprintf>
		if (isSwitch2Enabled) printf("Switch2 ");
 80007f4:	79bb      	ldrb	r3, [r7, #6]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d002      	beq.n	8000800 <getAllTouchSwitchState+0x170>
 80007fa:	4813      	ldr	r0, [pc, #76]	@ (8000848 <getAllTouchSwitchState+0x1b8>)
 80007fc:	f004 fc70 	bl	80050e0 <iprintf>
		if (isSwitch3Enabled) printf("Switch3 ");
 8000800:	797b      	ldrb	r3, [r7, #5]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d002      	beq.n	800080c <getAllTouchSwitchState+0x17c>
 8000806:	4811      	ldr	r0, [pc, #68]	@ (800084c <getAllTouchSwitchState+0x1bc>)
 8000808:	f004 fc6a 	bl	80050e0 <iprintf>
		if (isSwitch4Enabled) printf("Switch4 ");
 800080c:	793b      	ldrb	r3, [r7, #4]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d00d      	beq.n	800082e <getAllTouchSwitchState+0x19e>
 8000812:	480f      	ldr	r0, [pc, #60]	@ (8000850 <getAllTouchSwitchState+0x1c0>)
 8000814:	f004 fc64 	bl	80050e0 <iprintf>
 8000818:	e009      	b.n	800082e <getAllTouchSwitchState+0x19e>

	}
	else if (disabledCount == 4) {
 800081a:	69bb      	ldr	r3, [r7, #24]
 800081c:	2b04      	cmp	r3, #4
 800081e:	d103      	bne.n	8000828 <getAllTouchSwitchState+0x198>
		printf("全部 switch 都不啟用\n");
 8000820:	480d      	ldr	r0, [pc, #52]	@ (8000858 <getAllTouchSwitchState+0x1c8>)
 8000822:	f004 fcc5 	bl	80051b0 <puts>
 8000826:	e002      	b.n	800082e <getAllTouchSwitchState+0x19e>
	}
	else {
		printf("狀況不明\n");
 8000828:	480c      	ldr	r0, [pc, #48]	@ (800085c <getAllTouchSwitchState+0x1cc>)
 800082a:	f004 fcc1 	bl	80051b0 <puts>
	}
	return allTouchSwitchStateResult;
 800082e:	7cfb      	ldrb	r3, [r7, #19]
}
 8000830:	4618      	mov	r0, r3
 8000832:	3724      	adds	r7, #36	@ 0x24
 8000834:	46bd      	mov	sp, r7
 8000836:	bd90      	pop	{r4, r7, pc}
 8000838:	08005e8c 	.word	0x08005e8c
 800083c:	08005ea4 	.word	0x08005ea4
 8000840:	08005ebc 	.word	0x08005ebc
 8000844:	08005ec8 	.word	0x08005ec8
 8000848:	08005ee0 	.word	0x08005ee0
 800084c:	08005eec 	.word	0x08005eec
 8000850:	08005ef8 	.word	0x08005ef8
 8000854:	08005f04 	.word	0x08005f04
 8000858:	08005f1c 	.word	0x08005f1c
 800085c:	08005f38 	.word	0x08005f38

08000860 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000860:	b5b0      	push	{r4, r5, r7, lr}
 8000862:	b0a4      	sub	sp, #144	@ 0x90
 8000864:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
  //char buffer[40]="";
  int arr[10] = {0};  // 全部初始化為 0
 8000866:	f107 0320 	add.w	r3, r7, #32
 800086a:	2228      	movs	r2, #40	@ 0x28
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f004 fd7e 	bl	8005370 <memset>
  int a=sizeof(arr);  // ✅ 這裡是陣列大小  a=40   10*4
 8000874:	2328      	movs	r3, #40	@ 0x28
 8000876:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  int value=2;
 800087a:	2302      	movs	r3, #2
 800087c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000880:	f000 feb0 	bl	80015e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000884:	f000 f870 	bl	8000968 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000888:	f000 f8bf 	bl	8000a0a <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800088c:	f000 fac2 	bl	8000e14 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000890:	f000 f8e6 	bl	8000a60 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000894:	f000 f9be 	bl	8000c14 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000898:	f000 fa2c 	bl	8000cf4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800089c:	f000 fa5a 	bl	8000d54 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80008a0:	f000 fa88 	bl	8000db4 <MX_USART3_UART_Init>
  MX_UART4_Init();
 80008a4:	f000 f9f6 	bl	8000c94 <MX_UART4_Init>
  MX_ADC2_Init();
 80008a8:	f000 f950 	bl	8000b4c <MX_ADC2_Init>




	  //下方為同時讀取兩種感測器函式
	  ForceSwitchSensorConfig sensorInputConfig =
 80008ac:	4b2c      	ldr	r3, [pc, #176]	@ (8000960 <main+0x100>)
 80008ae:	f107 040c 	add.w	r4, r7, #12
 80008b2:	461d      	mov	r5, r3
 80008b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008b8:	682b      	ldr	r3, [r5, #0]
 80008ba:	6023      	str	r3, [r4, #0]
	  //if(finalState.sensor2) { /* ... */ }
	  /////////////////////////////////////////////////////

	  //下方為讀取力量感測器函式//
	  // 全部力量感測器回傳值//
	  bool forceSensorFinalState=false;
 80008bc:	2300      	movs	r3, #0
 80008be:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	  //從flash讀取力量感測器初始參數
	  uint32_t forceSensorPressDuration = 100;
 80008c2:	2364      	movs	r3, #100	@ 0x64
 80008c4:	67bb      	str	r3, [r7, #120]	@ 0x78
	  uint32_t forcePressValueThreshold = 3000; //
 80008c6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80008ca:	677b      	str	r3, [r7, #116]	@ 0x74
	  bool isForceSensor1Enabled=true;
 80008cc:	2301      	movs	r3, #1
 80008ce:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
	  bool isForceSensor2Enabled=true;
 80008d2:	2301      	movs	r3, #1
 80008d4:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72

	  //呼叫讀取所有力量感測器數值
	  uint32_t forceSensorStartTime = HAL_GetTick();
 80008d8:	f000 fef4 	bl	80016c4 <HAL_GetTick>
 80008dc:	66f8      	str	r0, [r7, #108]	@ 0x6c

	  //forceSensorFinalState=getAllForceSensorState(isForceSensor1Enabled,isForceSensor2Enabled,forceSensorPressDuration,forcePressValueThreshold);
	  uint32_t forceSensorEndTime = HAL_GetTick();
 80008de:	f000 fef1 	bl	80016c4 <HAL_GetTick>
 80008e2:	66b8      	str	r0, [r7, #104]	@ 0x68
	  uint32_t forceSensorDuration = forceSensorEndTime - forceSensorStartTime;
 80008e4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80008e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80008e8:	1ad3      	subs	r3, r2, r3
 80008ea:	667b      	str	r3, [r7, #100]	@ 0x64
	  ///////////////////////////////////////////////////////

	  //下方為讀取接觸開關感測器函式//
	  // 從flash讀取Touch switch enabled flags 初始參數
	  bool isTouchSwitch1Enabled = true;
 80008ec:	2301      	movs	r3, #1
 80008ee:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
	  bool isTouchSwitch2Enabled = true;
 80008f2:	2301      	movs	r3, #1
 80008f4:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
	  bool isTouchSwitch3Enabled = true;
 80008f8:	2301      	movs	r3, #1
 80008fa:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
	  bool isTouchSwitch4Enabled = true;
 80008fe:	2301      	movs	r3, #1
 8000900:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
	  // Touch switch behavior parameters
	  uint32_t touchSwitchDebounceDuration = 100;
 8000904:	2364      	movs	r3, #100	@ 0x64
 8000906:	65fb      	str	r3, [r7, #92]	@ 0x5c
	  uint32_t touchSwitchPressThreshold = 3000;
 8000908:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800090c:	65bb      	str	r3, [r7, #88]	@ 0x58
	  // 全部接袃開關回傳值
	  bool touchSwitchFinalState = false;
 800090e:	2300      	movs	r3, #0
 8000910:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	  //呼叫讀取所有力量感測器數值
	  uint32_t touchSwitchStartTime = HAL_GetTick();
 8000914:	f000 fed6 	bl	80016c4 <HAL_GetTick>
 8000918:	6538      	str	r0, [r7, #80]	@ 0x50

	  touchSwitchFinalState = getAllTouchSwitchState(
 800091a:	f897 4060 	ldrb.w	r4, [r7, #96]	@ 0x60
 800091e:	f897 2061 	ldrb.w	r2, [r7, #97]	@ 0x61
 8000922:	f897 1062 	ldrb.w	r1, [r7, #98]	@ 0x62
 8000926:	f897 0063 	ldrb.w	r0, [r7, #99]	@ 0x63
 800092a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800092c:	9300      	str	r3, [sp, #0]
 800092e:	4623      	mov	r3, r4
 8000930:	f7ff feae 	bl	8000690 <getAllTouchSwitchState>
 8000934:	4603      	mov	r3, r0
 8000936:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	      isTouchSwitch3Enabled,
	      isTouchSwitch4Enabled,
	      touchSwitchDebounceDuration);
	  //

	  uint32_t touchSwitchEndTime = HAL_GetTick();
 800093a:	f000 fec3 	bl	80016c4 <HAL_GetTick>
 800093e:	64f8      	str	r0, [r7, #76]	@ 0x4c
	  uint32_t touchSwitchDuration = touchSwitchEndTime - touchSwitchStartTime;
 8000940:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000942:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000944:	1ad3      	subs	r3, r2, r3
 8000946:	64bb      	str	r3, [r7, #72]	@ 0x48
	  ///
	  //snprintf(buffer, sizeof(buffer), "%d", value);
	  //transmitDataUart(buffer);

	  //
	  char txData[] = "12345";
 8000948:	4a06      	ldr	r2, [pc, #24]	@ (8000964 <main+0x104>)
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000950:	6018      	str	r0, [r3, #0]
 8000952:	3304      	adds	r3, #4
 8000954:	8019      	strh	r1, [r3, #0]
	      printf("Receive timeout or error\n");
	  }
*/
	  // 啟用力量感測器功能
	  //updateFSRState();   // 呼叫防彈跳判斷
	  HAL_Delay(100);     // 簡短延遲避免過度讀取ADC
 8000956:	2064      	movs	r0, #100	@ 0x64
 8000958:	f000 fec0 	bl	80016dc <HAL_Delay>
  {
 800095c:	bf00      	nop
 800095e:	e7a5      	b.n	80008ac <main+0x4c>
 8000960:	08005f48 	.word	0x08005f48
 8000964:	08005f5c 	.word	0x08005f5c

08000968 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b096      	sub	sp, #88	@ 0x58
 800096c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	2244      	movs	r2, #68	@ 0x44
 8000974:	2100      	movs	r1, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f004 fcfa 	bl	8005370 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800097c:	463b      	mov	r3, r7
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
 8000986:	60da      	str	r2, [r3, #12]
 8000988:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800098a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800098e:	f002 fab1 	bl	8002ef4 <HAL_PWREx_ControlVoltageScaling>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000998:	f000 fadc 	bl	8000f54 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800099c:	2302      	movs	r3, #2
 800099e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009a4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009a6:	2310      	movs	r3, #16
 80009a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009aa:	2302      	movs	r3, #2
 80009ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009ae:	2302      	movs	r3, #2
 80009b0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009b2:	2301      	movs	r3, #1
 80009b4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80009b6:	230a      	movs	r3, #10
 80009b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80009ba:	2307      	movs	r3, #7
 80009bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009be:	2302      	movs	r3, #2
 80009c0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009c2:	2302      	movs	r3, #2
 80009c4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c6:	f107 0314 	add.w	r3, r7, #20
 80009ca:	4618      	mov	r0, r3
 80009cc:	f002 fae8 	bl	8002fa0 <HAL_RCC_OscConfig>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <SystemClock_Config+0x72>
  {
    Error_Handler();
 80009d6:	f000 fabd 	bl	8000f54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009da:	230f      	movs	r3, #15
 80009dc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009de:	2303      	movs	r3, #3
 80009e0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e2:	2300      	movs	r3, #0
 80009e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009e6:	2300      	movs	r3, #0
 80009e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009ee:	463b      	mov	r3, r7
 80009f0:	2104      	movs	r1, #4
 80009f2:	4618      	mov	r0, r3
 80009f4:	f002 feb0 	bl	8003758 <HAL_RCC_ClockConfig>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80009fe:	f000 faa9 	bl	8000f54 <Error_Handler>
  }
}
 8000a02:	bf00      	nop
 8000a04:	3758      	adds	r7, #88	@ 0x58
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b0a2      	sub	sp, #136	@ 0x88
 8000a0e:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a10:	463b      	mov	r3, r7
 8000a12:	2288      	movs	r2, #136	@ 0x88
 8000a14:	2100      	movs	r1, #0
 8000a16:	4618      	mov	r0, r3
 8000a18:	f004 fcaa 	bl	8005370 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a1c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000a20:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000a22:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000a26:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000a30:	2308      	movs	r3, #8
 8000a32:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000a34:	2307      	movs	r3, #7
 8000a36:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000a40:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000a44:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a46:	463b      	mov	r3, r7
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f003 f8a9 	bl	8003ba0 <HAL_RCCEx_PeriphCLKConfig>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8000a54:	f000 fa7e 	bl	8000f54 <Error_Handler>
  }
}
 8000a58:	bf00      	nop
 8000a5a:	3788      	adds	r7, #136	@ 0x88
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	@ 0x28
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a66:	f107 031c 	add.w	r3, r7, #28
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]
 8000a80:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a82:	4b2f      	ldr	r3, [pc, #188]	@ (8000b40 <MX_ADC1_Init+0xe0>)
 8000a84:	4a2f      	ldr	r2, [pc, #188]	@ (8000b44 <MX_ADC1_Init+0xe4>)
 8000a86:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a88:	4b2d      	ldr	r3, [pc, #180]	@ (8000b40 <MX_ADC1_Init+0xe0>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a8e:	4b2c      	ldr	r3, [pc, #176]	@ (8000b40 <MX_ADC1_Init+0xe0>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a94:	4b2a      	ldr	r3, [pc, #168]	@ (8000b40 <MX_ADC1_Init+0xe0>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a9a:	4b29      	ldr	r3, [pc, #164]	@ (8000b40 <MX_ADC1_Init+0xe0>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000aa0:	4b27      	ldr	r3, [pc, #156]	@ (8000b40 <MX_ADC1_Init+0xe0>)
 8000aa2:	2204      	movs	r2, #4
 8000aa4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000aa6:	4b26      	ldr	r3, [pc, #152]	@ (8000b40 <MX_ADC1_Init+0xe0>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000aac:	4b24      	ldr	r3, [pc, #144]	@ (8000b40 <MX_ADC1_Init+0xe0>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000ab2:	4b23      	ldr	r3, [pc, #140]	@ (8000b40 <MX_ADC1_Init+0xe0>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ab8:	4b21      	ldr	r3, [pc, #132]	@ (8000b40 <MX_ADC1_Init+0xe0>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ac0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b40 <MX_ADC1_Init+0xe0>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ac6:	4b1e      	ldr	r3, [pc, #120]	@ (8000b40 <MX_ADC1_Init+0xe0>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000acc:	4b1c      	ldr	r3, [pc, #112]	@ (8000b40 <MX_ADC1_Init+0xe0>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ad4:	4b1a      	ldr	r3, [pc, #104]	@ (8000b40 <MX_ADC1_Init+0xe0>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000ada:	4b19      	ldr	r3, [pc, #100]	@ (8000b40 <MX_ADC1_Init+0xe0>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ae2:	4817      	ldr	r0, [pc, #92]	@ (8000b40 <MX_ADC1_Init+0xe0>)
 8000ae4:	f000 ffaa 	bl	8001a3c <HAL_ADC_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000aee:	f000 fa31 	bl	8000f54 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000af6:	f107 031c 	add.w	r3, r7, #28
 8000afa:	4619      	mov	r1, r3
 8000afc:	4810      	ldr	r0, [pc, #64]	@ (8000b40 <MX_ADC1_Init+0xe0>)
 8000afe:	f001 fd05 	bl	800250c <HAL_ADCEx_MultiModeConfigChannel>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000b08:	f000 fa24 	bl	8000f54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b48 <MX_ADC1_Init+0xe8>)
 8000b0e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b10:	2306      	movs	r3, #6
 8000b12:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000b14:	2300      	movs	r3, #0
 8000b16:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b18:	237f      	movs	r3, #127	@ 0x7f
 8000b1a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b1c:	2304      	movs	r3, #4
 8000b1e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b24:	1d3b      	adds	r3, r7, #4
 8000b26:	4619      	mov	r1, r3
 8000b28:	4805      	ldr	r0, [pc, #20]	@ (8000b40 <MX_ADC1_Init+0xe0>)
 8000b2a:	f001 f8d7 	bl	8001cdc <HAL_ADC_ConfigChannel>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000b34:	f000 fa0e 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b38:	bf00      	nop
 8000b3a:	3728      	adds	r7, #40	@ 0x28
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20000088 	.word	0x20000088
 8000b44:	50040000 	.word	0x50040000
 8000b48:	04300002 	.word	0x04300002

08000b4c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b52:	463b      	mov	r3, r7
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
 8000b60:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000b62:	4b29      	ldr	r3, [pc, #164]	@ (8000c08 <MX_ADC2_Init+0xbc>)
 8000b64:	4a29      	ldr	r2, [pc, #164]	@ (8000c0c <MX_ADC2_Init+0xc0>)
 8000b66:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b68:	4b27      	ldr	r3, [pc, #156]	@ (8000c08 <MX_ADC2_Init+0xbc>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000b6e:	4b26      	ldr	r3, [pc, #152]	@ (8000c08 <MX_ADC2_Init+0xbc>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b74:	4b24      	ldr	r3, [pc, #144]	@ (8000c08 <MX_ADC2_Init+0xbc>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b7a:	4b23      	ldr	r3, [pc, #140]	@ (8000c08 <MX_ADC2_Init+0xbc>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b80:	4b21      	ldr	r3, [pc, #132]	@ (8000c08 <MX_ADC2_Init+0xbc>)
 8000b82:	2204      	movs	r2, #4
 8000b84:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000b86:	4b20      	ldr	r3, [pc, #128]	@ (8000c08 <MX_ADC2_Init+0xbc>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000b8c:	4b1e      	ldr	r3, [pc, #120]	@ (8000c08 <MX_ADC2_Init+0xbc>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000b92:	4b1d      	ldr	r3, [pc, #116]	@ (8000c08 <MX_ADC2_Init+0xbc>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b98:	4b1b      	ldr	r3, [pc, #108]	@ (8000c08 <MX_ADC2_Init+0xbc>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ba0:	4b19      	ldr	r3, [pc, #100]	@ (8000c08 <MX_ADC2_Init+0xbc>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ba6:	4b18      	ldr	r3, [pc, #96]	@ (8000c08 <MX_ADC2_Init+0xbc>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000bac:	4b16      	ldr	r3, [pc, #88]	@ (8000c08 <MX_ADC2_Init+0xbc>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bb4:	4b14      	ldr	r3, [pc, #80]	@ (8000c08 <MX_ADC2_Init+0xbc>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000bba:	4b13      	ldr	r3, [pc, #76]	@ (8000c08 <MX_ADC2_Init+0xbc>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000bc2:	4811      	ldr	r0, [pc, #68]	@ (8000c08 <MX_ADC2_Init+0xbc>)
 8000bc4:	f000 ff3a 	bl	8001a3c <HAL_ADC_Init>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000bce:	f000 f9c1 	bl	8000f54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000bd2:	4b0f      	ldr	r3, [pc, #60]	@ (8000c10 <MX_ADC2_Init+0xc4>)
 8000bd4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bd6:	2306      	movs	r3, #6
 8000bd8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bde:	237f      	movs	r3, #127	@ 0x7f
 8000be0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000be2:	2304      	movs	r3, #4
 8000be4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000bea:	463b      	mov	r3, r7
 8000bec:	4619      	mov	r1, r3
 8000bee:	4806      	ldr	r0, [pc, #24]	@ (8000c08 <MX_ADC2_Init+0xbc>)
 8000bf0:	f001 f874 	bl	8001cdc <HAL_ADC_ConfigChannel>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8000bfa:	f000 f9ab 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000bfe:	bf00      	nop
 8000c00:	3718      	adds	r7, #24
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	200000ec 	.word	0x200000ec
 8000c0c:	50040100 	.word	0x50040100
 8000c10:	08600004 	.word	0x08600004

08000c14 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c18:	4b1b      	ldr	r3, [pc, #108]	@ (8000c88 <MX_I2C1_Init+0x74>)
 8000c1a:	4a1c      	ldr	r2, [pc, #112]	@ (8000c8c <MX_I2C1_Init+0x78>)
 8000c1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8000c1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c88 <MX_I2C1_Init+0x74>)
 8000c20:	4a1b      	ldr	r2, [pc, #108]	@ (8000c90 <MX_I2C1_Init+0x7c>)
 8000c22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c24:	4b18      	ldr	r3, [pc, #96]	@ (8000c88 <MX_I2C1_Init+0x74>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c2a:	4b17      	ldr	r3, [pc, #92]	@ (8000c88 <MX_I2C1_Init+0x74>)
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c30:	4b15      	ldr	r3, [pc, #84]	@ (8000c88 <MX_I2C1_Init+0x74>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c36:	4b14      	ldr	r3, [pc, #80]	@ (8000c88 <MX_I2C1_Init+0x74>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c3c:	4b12      	ldr	r3, [pc, #72]	@ (8000c88 <MX_I2C1_Init+0x74>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c42:	4b11      	ldr	r3, [pc, #68]	@ (8000c88 <MX_I2C1_Init+0x74>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c48:	4b0f      	ldr	r3, [pc, #60]	@ (8000c88 <MX_I2C1_Init+0x74>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c4e:	480e      	ldr	r0, [pc, #56]	@ (8000c88 <MX_I2C1_Init+0x74>)
 8000c50:	f002 f810 	bl	8002c74 <HAL_I2C_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c5a:	f000 f97b 	bl	8000f54 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c5e:	2100      	movs	r1, #0
 8000c60:	4809      	ldr	r0, [pc, #36]	@ (8000c88 <MX_I2C1_Init+0x74>)
 8000c62:	f002 f8a2 	bl	8002daa <HAL_I2CEx_ConfigAnalogFilter>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c6c:	f000 f972 	bl	8000f54 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c70:	2100      	movs	r1, #0
 8000c72:	4805      	ldr	r0, [pc, #20]	@ (8000c88 <MX_I2C1_Init+0x74>)
 8000c74:	f002 f8e4 	bl	8002e40 <HAL_I2CEx_ConfigDigitalFilter>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c7e:	f000 f969 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000150 	.word	0x20000150
 8000c8c:	40005400 	.word	0x40005400
 8000c90:	10d19ce4 	.word	0x10d19ce4

08000c94 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000c98:	4b14      	ldr	r3, [pc, #80]	@ (8000cec <MX_UART4_Init+0x58>)
 8000c9a:	4a15      	ldr	r2, [pc, #84]	@ (8000cf0 <MX_UART4_Init+0x5c>)
 8000c9c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000c9e:	4b13      	ldr	r3, [pc, #76]	@ (8000cec <MX_UART4_Init+0x58>)
 8000ca0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ca4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000ca6:	4b11      	ldr	r3, [pc, #68]	@ (8000cec <MX_UART4_Init+0x58>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000cac:	4b0f      	ldr	r3, [pc, #60]	@ (8000cec <MX_UART4_Init+0x58>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cec <MX_UART4_Init+0x58>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <MX_UART4_Init+0x58>)
 8000cba:	220c      	movs	r2, #12
 8000cbc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000cec <MX_UART4_Init+0x58>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc4:	4b09      	ldr	r3, [pc, #36]	@ (8000cec <MX_UART4_Init+0x58>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cca:	4b08      	ldr	r3, [pc, #32]	@ (8000cec <MX_UART4_Init+0x58>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cd0:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <MX_UART4_Init+0x58>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000cd6:	4805      	ldr	r0, [pc, #20]	@ (8000cec <MX_UART4_Init+0x58>)
 8000cd8:	f003 fc1e 	bl	8004518 <HAL_UART_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000ce2:	f000 f937 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	200001a4 	.word	0x200001a4
 8000cf0:	40004c00 	.word	0x40004c00

08000cf4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cf8:	4b14      	ldr	r3, [pc, #80]	@ (8000d4c <MX_USART1_UART_Init+0x58>)
 8000cfa:	4a15      	ldr	r2, [pc, #84]	@ (8000d50 <MX_USART1_UART_Init+0x5c>)
 8000cfc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000cfe:	4b13      	ldr	r3, [pc, #76]	@ (8000d4c <MX_USART1_UART_Init+0x58>)
 8000d00:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000d04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d06:	4b11      	ldr	r3, [pc, #68]	@ (8000d4c <MX_USART1_UART_Init+0x58>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d4c <MX_USART1_UART_Init+0x58>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d12:	4b0e      	ldr	r3, [pc, #56]	@ (8000d4c <MX_USART1_UART_Init+0x58>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d18:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <MX_USART1_UART_Init+0x58>)
 8000d1a:	220c      	movs	r2, #12
 8000d1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d4c <MX_USART1_UART_Init+0x58>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d24:	4b09      	ldr	r3, [pc, #36]	@ (8000d4c <MX_USART1_UART_Init+0x58>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d2a:	4b08      	ldr	r3, [pc, #32]	@ (8000d4c <MX_USART1_UART_Init+0x58>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d30:	4b06      	ldr	r3, [pc, #24]	@ (8000d4c <MX_USART1_UART_Init+0x58>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d36:	4805      	ldr	r0, [pc, #20]	@ (8000d4c <MX_USART1_UART_Init+0x58>)
 8000d38:	f003 fbee 	bl	8004518 <HAL_UART_Init>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000d42:	f000 f907 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	2000022c 	.word	0x2000022c
 8000d50:	40013800 	.word	0x40013800

08000d54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d58:	4b14      	ldr	r3, [pc, #80]	@ (8000dac <MX_USART2_UART_Init+0x58>)
 8000d5a:	4a15      	ldr	r2, [pc, #84]	@ (8000db0 <MX_USART2_UART_Init+0x5c>)
 8000d5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d5e:	4b13      	ldr	r3, [pc, #76]	@ (8000dac <MX_USART2_UART_Init+0x58>)
 8000d60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d66:	4b11      	ldr	r3, [pc, #68]	@ (8000dac <MX_USART2_UART_Init+0x58>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000dac <MX_USART2_UART_Init+0x58>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d72:	4b0e      	ldr	r3, [pc, #56]	@ (8000dac <MX_USART2_UART_Init+0x58>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d78:	4b0c      	ldr	r3, [pc, #48]	@ (8000dac <MX_USART2_UART_Init+0x58>)
 8000d7a:	220c      	movs	r2, #12
 8000d7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000dac <MX_USART2_UART_Init+0x58>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d84:	4b09      	ldr	r3, [pc, #36]	@ (8000dac <MX_USART2_UART_Init+0x58>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d8a:	4b08      	ldr	r3, [pc, #32]	@ (8000dac <MX_USART2_UART_Init+0x58>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d90:	4b06      	ldr	r3, [pc, #24]	@ (8000dac <MX_USART2_UART_Init+0x58>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d96:	4805      	ldr	r0, [pc, #20]	@ (8000dac <MX_USART2_UART_Init+0x58>)
 8000d98:	f003 fbbe 	bl	8004518 <HAL_UART_Init>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000da2:	f000 f8d7 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	200002b4 	.word	0x200002b4
 8000db0:	40004400 	.word	0x40004400

08000db4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000db8:	4b14      	ldr	r3, [pc, #80]	@ (8000e0c <MX_USART3_UART_Init+0x58>)
 8000dba:	4a15      	ldr	r2, [pc, #84]	@ (8000e10 <MX_USART3_UART_Init+0x5c>)
 8000dbc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000dbe:	4b13      	ldr	r3, [pc, #76]	@ (8000e0c <MX_USART3_UART_Init+0x58>)
 8000dc0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000dc4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dc6:	4b11      	ldr	r3, [pc, #68]	@ (8000e0c <MX_USART3_UART_Init+0x58>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000dcc:	4b0f      	ldr	r3, [pc, #60]	@ (8000e0c <MX_USART3_UART_Init+0x58>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000dd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000e0c <MX_USART3_UART_Init+0x58>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8000e0c <MX_USART3_UART_Init+0x58>)
 8000dda:	220c      	movs	r2, #12
 8000ddc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dde:	4b0b      	ldr	r3, [pc, #44]	@ (8000e0c <MX_USART3_UART_Init+0x58>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000de4:	4b09      	ldr	r3, [pc, #36]	@ (8000e0c <MX_USART3_UART_Init+0x58>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dea:	4b08      	ldr	r3, [pc, #32]	@ (8000e0c <MX_USART3_UART_Init+0x58>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000df0:	4b06      	ldr	r3, [pc, #24]	@ (8000e0c <MX_USART3_UART_Init+0x58>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000df6:	4805      	ldr	r0, [pc, #20]	@ (8000e0c <MX_USART3_UART_Init+0x58>)
 8000df8:	f003 fb8e 	bl	8004518 <HAL_UART_Init>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000e02:	f000 f8a7 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	2000033c 	.word	0x2000033c
 8000e10:	40004800 	.word	0x40004800

08000e14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08a      	sub	sp, #40	@ 0x28
 8000e18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1a:	f107 0314 	add.w	r3, r7, #20
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	605a      	str	r2, [r3, #4]
 8000e24:	609a      	str	r2, [r3, #8]
 8000e26:	60da      	str	r2, [r3, #12]
 8000e28:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e2a:	4b47      	ldr	r3, [pc, #284]	@ (8000f48 <MX_GPIO_Init+0x134>)
 8000e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e2e:	4a46      	ldr	r2, [pc, #280]	@ (8000f48 <MX_GPIO_Init+0x134>)
 8000e30:	f043 0304 	orr.w	r3, r3, #4
 8000e34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e36:	4b44      	ldr	r3, [pc, #272]	@ (8000f48 <MX_GPIO_Init+0x134>)
 8000e38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e3a:	f003 0304 	and.w	r3, r3, #4
 8000e3e:	613b      	str	r3, [r7, #16]
 8000e40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e42:	4b41      	ldr	r3, [pc, #260]	@ (8000f48 <MX_GPIO_Init+0x134>)
 8000e44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e46:	4a40      	ldr	r2, [pc, #256]	@ (8000f48 <MX_GPIO_Init+0x134>)
 8000e48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e4e:	4b3e      	ldr	r3, [pc, #248]	@ (8000f48 <MX_GPIO_Init+0x134>)
 8000e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5a:	4b3b      	ldr	r3, [pc, #236]	@ (8000f48 <MX_GPIO_Init+0x134>)
 8000e5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e5e:	4a3a      	ldr	r2, [pc, #232]	@ (8000f48 <MX_GPIO_Init+0x134>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e66:	4b38      	ldr	r3, [pc, #224]	@ (8000f48 <MX_GPIO_Init+0x134>)
 8000e68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	60bb      	str	r3, [r7, #8]
 8000e70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e72:	4b35      	ldr	r3, [pc, #212]	@ (8000f48 <MX_GPIO_Init+0x134>)
 8000e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e76:	4a34      	ldr	r2, [pc, #208]	@ (8000f48 <MX_GPIO_Init+0x134>)
 8000e78:	f043 0302 	orr.w	r3, r3, #2
 8000e7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e7e:	4b32      	ldr	r3, [pc, #200]	@ (8000f48 <MX_GPIO_Init+0x134>)
 8000e80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e82:	f003 0302 	and.w	r3, r3, #2
 8000e86:	607b      	str	r3, [r7, #4]
 8000e88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2120      	movs	r1, #32
 8000e8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e92:	f001 febf 	bl	8002c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8000e96:	2200      	movs	r2, #0
 8000e98:	f244 1181 	movw	r1, #16769	@ 0x4181
 8000e9c:	482b      	ldr	r0, [pc, #172]	@ (8000f4c <MX_GPIO_Init+0x138>)
 8000e9e:	f001 feb9 	bl	8002c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ea2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ea6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ea8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000eac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4825      	ldr	r0, [pc, #148]	@ (8000f50 <MX_GPIO_Init+0x13c>)
 8000eba:	f001 fce9 	bl	8002890 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ebe:	2320      	movs	r3, #32
 8000ec0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ece:	f107 0314 	add.w	r3, r7, #20
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ed8:	f001 fcda 	bl	8002890 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_8;
 8000edc:	f244 1381 	movw	r3, #16769	@ 0x4181
 8000ee0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eea:	2300      	movs	r3, #0
 8000eec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eee:	f107 0314 	add.w	r3, r7, #20
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4815      	ldr	r0, [pc, #84]	@ (8000f4c <MX_GPIO_Init+0x138>)
 8000ef6:	f001 fccb 	bl	8002890 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8000efa:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000efe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f00:	2300      	movs	r3, #0
 8000f02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f04:	2301      	movs	r3, #1
 8000f06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4810      	ldr	r0, [pc, #64]	@ (8000f50 <MX_GPIO_Init+0x13c>)
 8000f10:	f001 fcbe 	bl	8002890 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f22:	f107 0314 	add.w	r3, r7, #20
 8000f26:	4619      	mov	r1, r3
 8000f28:	4809      	ldr	r0, [pc, #36]	@ (8000f50 <MX_GPIO_Init+0x13c>)
 8000f2a:	f001 fcb1 	bl	8002890 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2100      	movs	r1, #0
 8000f32:	2028      	movs	r0, #40	@ 0x28
 8000f34:	f001 fc75 	bl	8002822 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f38:	2028      	movs	r0, #40	@ 0x28
 8000f3a:	f001 fc8e 	bl	800285a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f3e:	bf00      	nop
 8000f40:	3728      	adds	r7, #40	@ 0x28
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	48000400 	.word	0x48000400
 8000f50:	48000800 	.word	0x48000800

08000f54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f58:	b672      	cpsid	i
}
 8000f5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f5c:	bf00      	nop
 8000f5e:	e7fd      	b.n	8000f5c <Error_Handler+0x8>

08000f60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f66:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa4 <HAL_MspInit+0x44>)
 8000f68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f6a:	4a0e      	ldr	r2, [pc, #56]	@ (8000fa4 <HAL_MspInit+0x44>)
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f72:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa4 <HAL_MspInit+0x44>)
 8000f74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	607b      	str	r3, [r7, #4]
 8000f7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7e:	4b09      	ldr	r3, [pc, #36]	@ (8000fa4 <HAL_MspInit+0x44>)
 8000f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f82:	4a08      	ldr	r2, [pc, #32]	@ (8000fa4 <HAL_MspInit+0x44>)
 8000f84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f88:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f8a:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <HAL_MspInit+0x44>)
 8000f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f92:	603b      	str	r3, [r7, #0]
 8000f94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	40021000 	.word	0x40021000

08000fa8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08c      	sub	sp, #48	@ 0x30
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb0:	f107 031c 	add.w	r3, r7, #28
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a33      	ldr	r2, [pc, #204]	@ (8001094 <HAL_ADC_MspInit+0xec>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d12d      	bne.n	8001026 <HAL_ADC_MspInit+0x7e>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8000fca:	4b33      	ldr	r3, [pc, #204]	@ (8001098 <HAL_ADC_MspInit+0xf0>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	4a31      	ldr	r2, [pc, #196]	@ (8001098 <HAL_ADC_MspInit+0xf0>)
 8000fd2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000fd4:	4b30      	ldr	r3, [pc, #192]	@ (8001098 <HAL_ADC_MspInit+0xf0>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d10b      	bne.n	8000ff4 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000fdc:	4b2f      	ldr	r3, [pc, #188]	@ (800109c <HAL_ADC_MspInit+0xf4>)
 8000fde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe0:	4a2e      	ldr	r2, [pc, #184]	@ (800109c <HAL_ADC_MspInit+0xf4>)
 8000fe2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000fe6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fe8:	4b2c      	ldr	r3, [pc, #176]	@ (800109c <HAL_ADC_MspInit+0xf4>)
 8000fea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ff0:	61bb      	str	r3, [r7, #24]
 8000ff2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff4:	4b29      	ldr	r3, [pc, #164]	@ (800109c <HAL_ADC_MspInit+0xf4>)
 8000ff6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ff8:	4a28      	ldr	r2, [pc, #160]	@ (800109c <HAL_ADC_MspInit+0xf4>)
 8000ffa:	f043 0304 	orr.w	r3, r3, #4
 8000ffe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001000:	4b26      	ldr	r3, [pc, #152]	@ (800109c <HAL_ADC_MspInit+0xf4>)
 8001002:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001004:	f003 0304 	and.w	r3, r3, #4
 8001008:	617b      	str	r3, [r7, #20]
 800100a:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800100c:	2301      	movs	r3, #1
 800100e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001010:	230b      	movs	r3, #11
 8001012:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001018:	f107 031c 	add.w	r3, r7, #28
 800101c:	4619      	mov	r1, r3
 800101e:	4820      	ldr	r0, [pc, #128]	@ (80010a0 <HAL_ADC_MspInit+0xf8>)
 8001020:	f001 fc36 	bl	8002890 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001024:	e031      	b.n	800108a <HAL_ADC_MspInit+0xe2>
  else if(hadc->Instance==ADC2)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a1e      	ldr	r2, [pc, #120]	@ (80010a4 <HAL_ADC_MspInit+0xfc>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d12c      	bne.n	800108a <HAL_ADC_MspInit+0xe2>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001030:	4b19      	ldr	r3, [pc, #100]	@ (8001098 <HAL_ADC_MspInit+0xf0>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	3301      	adds	r3, #1
 8001036:	4a18      	ldr	r2, [pc, #96]	@ (8001098 <HAL_ADC_MspInit+0xf0>)
 8001038:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800103a:	4b17      	ldr	r3, [pc, #92]	@ (8001098 <HAL_ADC_MspInit+0xf0>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d10b      	bne.n	800105a <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001042:	4b16      	ldr	r3, [pc, #88]	@ (800109c <HAL_ADC_MspInit+0xf4>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001046:	4a15      	ldr	r2, [pc, #84]	@ (800109c <HAL_ADC_MspInit+0xf4>)
 8001048:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800104c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800104e:	4b13      	ldr	r3, [pc, #76]	@ (800109c <HAL_ADC_MspInit+0xf4>)
 8001050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001052:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001056:	613b      	str	r3, [r7, #16]
 8001058:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800105a:	4b10      	ldr	r3, [pc, #64]	@ (800109c <HAL_ADC_MspInit+0xf4>)
 800105c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800105e:	4a0f      	ldr	r2, [pc, #60]	@ (800109c <HAL_ADC_MspInit+0xf4>)
 8001060:	f043 0304 	orr.w	r3, r3, #4
 8001064:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001066:	4b0d      	ldr	r3, [pc, #52]	@ (800109c <HAL_ADC_MspInit+0xf4>)
 8001068:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800106a:	f003 0304 	and.w	r3, r3, #4
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001072:	2302      	movs	r3, #2
 8001074:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001076:	230b      	movs	r3, #11
 8001078:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800107e:	f107 031c 	add.w	r3, r7, #28
 8001082:	4619      	mov	r1, r3
 8001084:	4806      	ldr	r0, [pc, #24]	@ (80010a0 <HAL_ADC_MspInit+0xf8>)
 8001086:	f001 fc03 	bl	8002890 <HAL_GPIO_Init>
}
 800108a:	bf00      	nop
 800108c:	3730      	adds	r7, #48	@ 0x30
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	50040000 	.word	0x50040000
 8001098:	200003cc 	.word	0x200003cc
 800109c:	40021000 	.word	0x40021000
 80010a0:	48000800 	.word	0x48000800
 80010a4:	50040100 	.word	0x50040100

080010a8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b0ac      	sub	sp, #176	@ 0xb0
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	2288      	movs	r2, #136	@ 0x88
 80010c6:	2100      	movs	r1, #0
 80010c8:	4618      	mov	r0, r3
 80010ca:	f004 f951 	bl	8005370 <memset>
  if(hi2c->Instance==I2C1)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a21      	ldr	r2, [pc, #132]	@ (8001158 <HAL_I2C_MspInit+0xb0>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d13b      	bne.n	8001150 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80010d8:	2340      	movs	r3, #64	@ 0x40
 80010da:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80010dc:	2300      	movs	r3, #0
 80010de:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	4618      	mov	r0, r3
 80010e6:	f002 fd5b 	bl	8003ba0 <HAL_RCCEx_PeriphCLKConfig>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80010f0:	f7ff ff30 	bl	8000f54 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f4:	4b19      	ldr	r3, [pc, #100]	@ (800115c <HAL_I2C_MspInit+0xb4>)
 80010f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f8:	4a18      	ldr	r2, [pc, #96]	@ (800115c <HAL_I2C_MspInit+0xb4>)
 80010fa:	f043 0302 	orr.w	r3, r3, #2
 80010fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001100:	4b16      	ldr	r3, [pc, #88]	@ (800115c <HAL_I2C_MspInit+0xb4>)
 8001102:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001104:	f003 0302 	and.w	r3, r3, #2
 8001108:	613b      	str	r3, [r7, #16]
 800110a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800110c:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001110:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001114:	2312      	movs	r3, #18
 8001116:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001120:	2303      	movs	r3, #3
 8001122:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001126:	2304      	movs	r3, #4
 8001128:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001130:	4619      	mov	r1, r3
 8001132:	480b      	ldr	r0, [pc, #44]	@ (8001160 <HAL_I2C_MspInit+0xb8>)
 8001134:	f001 fbac 	bl	8002890 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001138:	4b08      	ldr	r3, [pc, #32]	@ (800115c <HAL_I2C_MspInit+0xb4>)
 800113a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800113c:	4a07      	ldr	r2, [pc, #28]	@ (800115c <HAL_I2C_MspInit+0xb4>)
 800113e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001142:	6593      	str	r3, [r2, #88]	@ 0x58
 8001144:	4b05      	ldr	r3, [pc, #20]	@ (800115c <HAL_I2C_MspInit+0xb4>)
 8001146:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001148:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001150:	bf00      	nop
 8001152:	37b0      	adds	r7, #176	@ 0xb0
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40005400 	.word	0x40005400
 800115c:	40021000 	.word	0x40021000
 8001160:	48000400 	.word	0x48000400

08001164 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b0b2      	sub	sp, #200	@ 0xc8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116c:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800117c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001180:	2288      	movs	r2, #136	@ 0x88
 8001182:	2100      	movs	r1, #0
 8001184:	4618      	mov	r0, r3
 8001186:	f004 f8f3 	bl	8005370 <memset>
  if(huart->Instance==UART4)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a84      	ldr	r2, [pc, #528]	@ (80013a0 <HAL_UART_MspInit+0x23c>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d13c      	bne.n	800120e <HAL_UART_MspInit+0xaa>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001194:	2308      	movs	r3, #8
 8001196:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001198:	2300      	movs	r3, #0
 800119a:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800119c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011a0:	4618      	mov	r0, r3
 80011a2:	f002 fcfd 	bl	8003ba0 <HAL_RCCEx_PeriphCLKConfig>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011ac:	f7ff fed2 	bl	8000f54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80011b0:	4b7c      	ldr	r3, [pc, #496]	@ (80013a4 <HAL_UART_MspInit+0x240>)
 80011b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011b4:	4a7b      	ldr	r2, [pc, #492]	@ (80013a4 <HAL_UART_MspInit+0x240>)
 80011b6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80011ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80011bc:	4b79      	ldr	r3, [pc, #484]	@ (80013a4 <HAL_UART_MspInit+0x240>)
 80011be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80011c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80011c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c8:	4b76      	ldr	r3, [pc, #472]	@ (80013a4 <HAL_UART_MspInit+0x240>)
 80011ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011cc:	4a75      	ldr	r2, [pc, #468]	@ (80013a4 <HAL_UART_MspInit+0x240>)
 80011ce:	f043 0301 	orr.w	r3, r3, #1
 80011d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011d4:	4b73      	ldr	r3, [pc, #460]	@ (80013a4 <HAL_UART_MspInit+0x240>)
 80011d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80011de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011e0:	2303      	movs	r3, #3
 80011e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e6:	2302      	movs	r3, #2
 80011e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f2:	2303      	movs	r3, #3
 80011f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80011f8:	2308      	movs	r3, #8
 80011fa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fe:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001202:	4619      	mov	r1, r3
 8001204:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001208:	f001 fb42 	bl	8002890 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 800120c:	e0c4      	b.n	8001398 <HAL_UART_MspInit+0x234>
  else if(huart->Instance==USART1)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a65      	ldr	r2, [pc, #404]	@ (80013a8 <HAL_UART_MspInit+0x244>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d13d      	bne.n	8001294 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001218:	2301      	movs	r3, #1
 800121a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800121c:	2300      	movs	r3, #0
 800121e:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001220:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001224:	4618      	mov	r0, r3
 8001226:	f002 fcbb 	bl	8003ba0 <HAL_RCCEx_PeriphCLKConfig>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8001230:	f7ff fe90 	bl	8000f54 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001234:	4b5b      	ldr	r3, [pc, #364]	@ (80013a4 <HAL_UART_MspInit+0x240>)
 8001236:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001238:	4a5a      	ldr	r2, [pc, #360]	@ (80013a4 <HAL_UART_MspInit+0x240>)
 800123a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800123e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001240:	4b58      	ldr	r3, [pc, #352]	@ (80013a4 <HAL_UART_MspInit+0x240>)
 8001242:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001244:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001248:	623b      	str	r3, [r7, #32]
 800124a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124c:	4b55      	ldr	r3, [pc, #340]	@ (80013a4 <HAL_UART_MspInit+0x240>)
 800124e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001250:	4a54      	ldr	r2, [pc, #336]	@ (80013a4 <HAL_UART_MspInit+0x240>)
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001258:	4b52      	ldr	r3, [pc, #328]	@ (80013a4 <HAL_UART_MspInit+0x240>)
 800125a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800125c:	f003 0301 	and.w	r3, r3, #1
 8001260:	61fb      	str	r3, [r7, #28]
 8001262:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001264:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001268:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126c:	2302      	movs	r3, #2
 800126e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001278:	2303      	movs	r3, #3
 800127a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800127e:	2307      	movs	r3, #7
 8001280:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001284:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001288:	4619      	mov	r1, r3
 800128a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800128e:	f001 faff 	bl	8002890 <HAL_GPIO_Init>
}
 8001292:	e081      	b.n	8001398 <HAL_UART_MspInit+0x234>
  else if(huart->Instance==USART2)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a44      	ldr	r2, [pc, #272]	@ (80013ac <HAL_UART_MspInit+0x248>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d13c      	bne.n	8001318 <HAL_UART_MspInit+0x1b4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800129e:	2302      	movs	r3, #2
 80012a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80012a2:	2300      	movs	r3, #0
 80012a4:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012aa:	4618      	mov	r0, r3
 80012ac:	f002 fc78 	bl	8003ba0 <HAL_RCCEx_PeriphCLKConfig>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <HAL_UART_MspInit+0x156>
      Error_Handler();
 80012b6:	f7ff fe4d 	bl	8000f54 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80012ba:	4b3a      	ldr	r3, [pc, #232]	@ (80013a4 <HAL_UART_MspInit+0x240>)
 80012bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012be:	4a39      	ldr	r2, [pc, #228]	@ (80013a4 <HAL_UART_MspInit+0x240>)
 80012c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80012c6:	4b37      	ldr	r3, [pc, #220]	@ (80013a4 <HAL_UART_MspInit+0x240>)
 80012c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ce:	61bb      	str	r3, [r7, #24]
 80012d0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d2:	4b34      	ldr	r3, [pc, #208]	@ (80013a4 <HAL_UART_MspInit+0x240>)
 80012d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d6:	4a33      	ldr	r2, [pc, #204]	@ (80013a4 <HAL_UART_MspInit+0x240>)
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012de:	4b31      	ldr	r3, [pc, #196]	@ (80013a4 <HAL_UART_MspInit+0x240>)
 80012e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	617b      	str	r3, [r7, #20]
 80012e8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012ea:	230c      	movs	r3, #12
 80012ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f0:	2302      	movs	r3, #2
 80012f2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fc:	2303      	movs	r3, #3
 80012fe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001302:	2307      	movs	r3, #7
 8001304:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001308:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800130c:	4619      	mov	r1, r3
 800130e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001312:	f001 fabd 	bl	8002890 <HAL_GPIO_Init>
}
 8001316:	e03f      	b.n	8001398 <HAL_UART_MspInit+0x234>
  else if(huart->Instance==USART3)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a24      	ldr	r2, [pc, #144]	@ (80013b0 <HAL_UART_MspInit+0x24c>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d13a      	bne.n	8001398 <HAL_UART_MspInit+0x234>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001322:	2304      	movs	r3, #4
 8001324:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001326:	2300      	movs	r3, #0
 8001328:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800132a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800132e:	4618      	mov	r0, r3
 8001330:	f002 fc36 	bl	8003ba0 <HAL_RCCEx_PeriphCLKConfig>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <HAL_UART_MspInit+0x1da>
      Error_Handler();
 800133a:	f7ff fe0b 	bl	8000f54 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800133e:	4b19      	ldr	r3, [pc, #100]	@ (80013a4 <HAL_UART_MspInit+0x240>)
 8001340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001342:	4a18      	ldr	r2, [pc, #96]	@ (80013a4 <HAL_UART_MspInit+0x240>)
 8001344:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001348:	6593      	str	r3, [r2, #88]	@ 0x58
 800134a:	4b16      	ldr	r3, [pc, #88]	@ (80013a4 <HAL_UART_MspInit+0x240>)
 800134c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800134e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001352:	613b      	str	r3, [r7, #16]
 8001354:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001356:	4b13      	ldr	r3, [pc, #76]	@ (80013a4 <HAL_UART_MspInit+0x240>)
 8001358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800135a:	4a12      	ldr	r2, [pc, #72]	@ (80013a4 <HAL_UART_MspInit+0x240>)
 800135c:	f043 0304 	orr.w	r3, r3, #4
 8001360:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001362:	4b10      	ldr	r3, [pc, #64]	@ (80013a4 <HAL_UART_MspInit+0x240>)
 8001364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001366:	f003 0304 	and.w	r3, r3, #4
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800136e:	2330      	movs	r3, #48	@ 0x30
 8001370:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001374:	2302      	movs	r3, #2
 8001376:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001380:	2303      	movs	r3, #3
 8001382:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001386:	2307      	movs	r3, #7
 8001388:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800138c:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001390:	4619      	mov	r1, r3
 8001392:	4808      	ldr	r0, [pc, #32]	@ (80013b4 <HAL_UART_MspInit+0x250>)
 8001394:	f001 fa7c 	bl	8002890 <HAL_GPIO_Init>
}
 8001398:	bf00      	nop
 800139a:	37c8      	adds	r7, #200	@ 0xc8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40004c00 	.word	0x40004c00
 80013a4:	40021000 	.word	0x40021000
 80013a8:	40013800 	.word	0x40013800
 80013ac:	40004400 	.word	0x40004400
 80013b0:	40004800 	.word	0x40004800
 80013b4:	48000800 	.word	0x48000800

080013b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013bc:	bf00      	nop
 80013be:	e7fd      	b.n	80013bc <NMI_Handler+0x4>

080013c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013c4:	bf00      	nop
 80013c6:	e7fd      	b.n	80013c4 <HardFault_Handler+0x4>

080013c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013cc:	bf00      	nop
 80013ce:	e7fd      	b.n	80013cc <MemManage_Handler+0x4>

080013d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013d4:	bf00      	nop
 80013d6:	e7fd      	b.n	80013d4 <BusFault_Handler+0x4>

080013d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013dc:	bf00      	nop
 80013de:	e7fd      	b.n	80013dc <UsageFault_Handler+0x4>

080013e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800140e:	f000 f945 	bl	800169c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}

08001416 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800141a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800141e:	f001 fc11 	bl	8002c44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}

08001426 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b086      	sub	sp, #24
 800142a:	af00      	add	r7, sp, #0
 800142c:	60f8      	str	r0, [r7, #12]
 800142e:	60b9      	str	r1, [r7, #8]
 8001430:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001432:	2300      	movs	r3, #0
 8001434:	617b      	str	r3, [r7, #20]
 8001436:	e00a      	b.n	800144e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001438:	f3af 8000 	nop.w
 800143c:	4601      	mov	r1, r0
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	1c5a      	adds	r2, r3, #1
 8001442:	60ba      	str	r2, [r7, #8]
 8001444:	b2ca      	uxtb	r2, r1
 8001446:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	3301      	adds	r3, #1
 800144c:	617b      	str	r3, [r7, #20]
 800144e:	697a      	ldr	r2, [r7, #20]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	429a      	cmp	r2, r3
 8001454:	dbf0      	blt.n	8001438 <_read+0x12>
  }

  return len;
 8001456:	687b      	ldr	r3, [r7, #4]
}
 8001458:	4618      	mov	r0, r3
 800145a:	3718      	adds	r7, #24
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]
 8001470:	e009      	b.n	8001486 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	1c5a      	adds	r2, r3, #1
 8001476:	60ba      	str	r2, [r7, #8]
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	4618      	mov	r0, r3
 800147c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	3301      	adds	r3, #1
 8001484:	617b      	str	r3, [r7, #20]
 8001486:	697a      	ldr	r2, [r7, #20]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	429a      	cmp	r2, r3
 800148c:	dbf1      	blt.n	8001472 <_write+0x12>
  }
  return len;
 800148e:	687b      	ldr	r3, [r7, #4]
}
 8001490:	4618      	mov	r0, r3
 8001492:	3718      	adds	r7, #24
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <_close>:

int _close(int file)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014c0:	605a      	str	r2, [r3, #4]
  return 0;
 80014c2:	2300      	movs	r3, #0
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <_isatty>:

int _isatty(int file)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014d8:	2301      	movs	r3, #1
}
 80014da:	4618      	mov	r0, r3
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b085      	sub	sp, #20
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	60f8      	str	r0, [r7, #12]
 80014ee:	60b9      	str	r1, [r7, #8]
 80014f0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014f2:	2300      	movs	r3, #0
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3714      	adds	r7, #20
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001508:	4a14      	ldr	r2, [pc, #80]	@ (800155c <_sbrk+0x5c>)
 800150a:	4b15      	ldr	r3, [pc, #84]	@ (8001560 <_sbrk+0x60>)
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001514:	4b13      	ldr	r3, [pc, #76]	@ (8001564 <_sbrk+0x64>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d102      	bne.n	8001522 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800151c:	4b11      	ldr	r3, [pc, #68]	@ (8001564 <_sbrk+0x64>)
 800151e:	4a12      	ldr	r2, [pc, #72]	@ (8001568 <_sbrk+0x68>)
 8001520:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001522:	4b10      	ldr	r3, [pc, #64]	@ (8001564 <_sbrk+0x64>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4413      	add	r3, r2
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	429a      	cmp	r2, r3
 800152e:	d207      	bcs.n	8001540 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001530:	f003 ff6c 	bl	800540c <__errno>
 8001534:	4603      	mov	r3, r0
 8001536:	220c      	movs	r2, #12
 8001538:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800153a:	f04f 33ff 	mov.w	r3, #4294967295
 800153e:	e009      	b.n	8001554 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001540:	4b08      	ldr	r3, [pc, #32]	@ (8001564 <_sbrk+0x64>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001546:	4b07      	ldr	r3, [pc, #28]	@ (8001564 <_sbrk+0x64>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4413      	add	r3, r2
 800154e:	4a05      	ldr	r2, [pc, #20]	@ (8001564 <_sbrk+0x64>)
 8001550:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001552:	68fb      	ldr	r3, [r7, #12]
}
 8001554:	4618      	mov	r0, r3
 8001556:	3718      	adds	r7, #24
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20018000 	.word	0x20018000
 8001560:	00000400 	.word	0x00000400
 8001564:	200003d0 	.word	0x200003d0
 8001568:	20000528 	.word	0x20000528

0800156c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001570:	4b06      	ldr	r3, [pc, #24]	@ (800158c <SystemInit+0x20>)
 8001572:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001576:	4a05      	ldr	r2, [pc, #20]	@ (800158c <SystemInit+0x20>)
 8001578:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800157c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001590:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015c8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001594:	f7ff ffea 	bl	800156c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001598:	480c      	ldr	r0, [pc, #48]	@ (80015cc <LoopForever+0x6>)
  ldr r1, =_edata
 800159a:	490d      	ldr	r1, [pc, #52]	@ (80015d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800159c:	4a0d      	ldr	r2, [pc, #52]	@ (80015d4 <LoopForever+0xe>)
  movs r3, #0
 800159e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015a0:	e002      	b.n	80015a8 <LoopCopyDataInit>

080015a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015a6:	3304      	adds	r3, #4

080015a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015ac:	d3f9      	bcc.n	80015a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ae:	4a0a      	ldr	r2, [pc, #40]	@ (80015d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015b0:	4c0a      	ldr	r4, [pc, #40]	@ (80015dc <LoopForever+0x16>)
  movs r3, #0
 80015b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015b4:	e001      	b.n	80015ba <LoopFillZerobss>

080015b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015b8:	3204      	adds	r2, #4

080015ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015bc:	d3fb      	bcc.n	80015b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015be:	f003 ff2b 	bl	8005418 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015c2:	f7ff f94d 	bl	8000860 <main>

080015c6 <LoopForever>:

LoopForever:
    b LoopForever
 80015c6:	e7fe      	b.n	80015c6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80015c8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80015cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015d0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80015d4:	08005ff0 	.word	0x08005ff0
  ldr r2, =_sbss
 80015d8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80015dc:	20000524 	.word	0x20000524

080015e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015e0:	e7fe      	b.n	80015e0 <ADC1_2_IRQHandler>
	...

080015e4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015ea:	2300      	movs	r3, #0
 80015ec:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001620 <HAL_Init+0x3c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a0b      	ldr	r2, [pc, #44]	@ (8001620 <HAL_Init+0x3c>)
 80015f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015f8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015fa:	2003      	movs	r0, #3
 80015fc:	f001 f906 	bl	800280c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001600:	2000      	movs	r0, #0
 8001602:	f000 f80f 	bl	8001624 <HAL_InitTick>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d002      	beq.n	8001612 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	71fb      	strb	r3, [r7, #7]
 8001610:	e001      	b.n	8001616 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001612:	f7ff fca5 	bl	8000f60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001616:	79fb      	ldrb	r3, [r7, #7]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40022000 	.word	0x40022000

08001624 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800162c:	2300      	movs	r3, #0
 800162e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001630:	4b17      	ldr	r3, [pc, #92]	@ (8001690 <HAL_InitTick+0x6c>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d023      	beq.n	8001680 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001638:	4b16      	ldr	r3, [pc, #88]	@ (8001694 <HAL_InitTick+0x70>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	4b14      	ldr	r3, [pc, #80]	@ (8001690 <HAL_InitTick+0x6c>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	4619      	mov	r1, r3
 8001642:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001646:	fbb3 f3f1 	udiv	r3, r3, r1
 800164a:	fbb2 f3f3 	udiv	r3, r2, r3
 800164e:	4618      	mov	r0, r3
 8001650:	f001 f911 	bl	8002876 <HAL_SYSTICK_Config>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d10f      	bne.n	800167a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2b0f      	cmp	r3, #15
 800165e:	d809      	bhi.n	8001674 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001660:	2200      	movs	r2, #0
 8001662:	6879      	ldr	r1, [r7, #4]
 8001664:	f04f 30ff 	mov.w	r0, #4294967295
 8001668:	f001 f8db 	bl	8002822 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800166c:	4a0a      	ldr	r2, [pc, #40]	@ (8001698 <HAL_InitTick+0x74>)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6013      	str	r3, [r2, #0]
 8001672:	e007      	b.n	8001684 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	73fb      	strb	r3, [r7, #15]
 8001678:	e004      	b.n	8001684 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	73fb      	strb	r3, [r7, #15]
 800167e:	e001      	b.n	8001684 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001684:	7bfb      	ldrb	r3, [r7, #15]
}
 8001686:	4618      	mov	r0, r3
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	2000000c 	.word	0x2000000c
 8001694:	20000004 	.word	0x20000004
 8001698:	20000008 	.word	0x20000008

0800169c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016a0:	4b06      	ldr	r3, [pc, #24]	@ (80016bc <HAL_IncTick+0x20>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	461a      	mov	r2, r3
 80016a6:	4b06      	ldr	r3, [pc, #24]	@ (80016c0 <HAL_IncTick+0x24>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4413      	add	r3, r2
 80016ac:	4a04      	ldr	r2, [pc, #16]	@ (80016c0 <HAL_IncTick+0x24>)
 80016ae:	6013      	str	r3, [r2, #0]
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	2000000c 	.word	0x2000000c
 80016c0:	200003d4 	.word	0x200003d4

080016c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  return uwTick;
 80016c8:	4b03      	ldr	r3, [pc, #12]	@ (80016d8 <HAL_GetTick+0x14>)
 80016ca:	681b      	ldr	r3, [r3, #0]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	200003d4 	.word	0x200003d4

080016dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016e4:	f7ff ffee 	bl	80016c4 <HAL_GetTick>
 80016e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016f4:	d005      	beq.n	8001702 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80016f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001720 <HAL_Delay+0x44>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	461a      	mov	r2, r3
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	4413      	add	r3, r2
 8001700:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001702:	bf00      	nop
 8001704:	f7ff ffde 	bl	80016c4 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	429a      	cmp	r2, r3
 8001712:	d8f7      	bhi.n	8001704 <HAL_Delay+0x28>
  {
  }
}
 8001714:	bf00      	nop
 8001716:	bf00      	nop
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	2000000c 	.word	0x2000000c

08001724 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	431a      	orrs	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	609a      	str	r2, [r3, #8]
}
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800174a:	b480      	push	{r7}
 800174c:	b083      	sub	sp, #12
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
 8001752:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	431a      	orrs	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	609a      	str	r2, [r3, #8]
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001780:	4618      	mov	r0, r3
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800178c:	b480      	push	{r7}
 800178e:	b087      	sub	sp, #28
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
 8001798:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	3360      	adds	r3, #96	@ 0x60
 800179e:	461a      	mov	r2, r3
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4413      	add	r3, r2
 80017a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	4b08      	ldr	r3, [pc, #32]	@ (80017d0 <LL_ADC_SetOffset+0x44>)
 80017ae:	4013      	ands	r3, r2
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	430a      	orrs	r2, r1
 80017ba:	4313      	orrs	r3, r2
 80017bc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80017c4:	bf00      	nop
 80017c6:	371c      	adds	r7, #28
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	03fff000 	.word	0x03fff000

080017d4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	3360      	adds	r3, #96	@ 0x60
 80017e2:	461a      	mov	r2, r3
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	4413      	add	r3, r2
 80017ea:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3714      	adds	r7, #20
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001800:	b480      	push	{r7}
 8001802:	b087      	sub	sp, #28
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	3360      	adds	r3, #96	@ 0x60
 8001810:	461a      	mov	r2, r3
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	4413      	add	r3, r2
 8001818:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	431a      	orrs	r2, r3
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800182a:	bf00      	nop
 800182c:	371c      	adds	r7, #28
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001836:	b480      	push	{r7}
 8001838:	b087      	sub	sp, #28
 800183a:	af00      	add	r7, sp, #0
 800183c:	60f8      	str	r0, [r7, #12]
 800183e:	60b9      	str	r1, [r7, #8]
 8001840:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	3330      	adds	r3, #48	@ 0x30
 8001846:	461a      	mov	r2, r3
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	0a1b      	lsrs	r3, r3, #8
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	f003 030c 	and.w	r3, r3, #12
 8001852:	4413      	add	r3, r2
 8001854:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	f003 031f 	and.w	r3, r3, #31
 8001860:	211f      	movs	r1, #31
 8001862:	fa01 f303 	lsl.w	r3, r1, r3
 8001866:	43db      	mvns	r3, r3
 8001868:	401a      	ands	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	0e9b      	lsrs	r3, r3, #26
 800186e:	f003 011f 	and.w	r1, r3, #31
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	f003 031f 	and.w	r3, r3, #31
 8001878:	fa01 f303 	lsl.w	r3, r1, r3
 800187c:	431a      	orrs	r2, r3
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001882:	bf00      	nop
 8001884:	371c      	adds	r7, #28
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr

0800188e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800188e:	b480      	push	{r7}
 8001890:	b087      	sub	sp, #28
 8001892:	af00      	add	r7, sp, #0
 8001894:	60f8      	str	r0, [r7, #12]
 8001896:	60b9      	str	r1, [r7, #8]
 8001898:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	3314      	adds	r3, #20
 800189e:	461a      	mov	r2, r3
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	0e5b      	lsrs	r3, r3, #25
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	f003 0304 	and.w	r3, r3, #4
 80018aa:	4413      	add	r3, r2
 80018ac:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	0d1b      	lsrs	r3, r3, #20
 80018b6:	f003 031f 	and.w	r3, r3, #31
 80018ba:	2107      	movs	r1, #7
 80018bc:	fa01 f303 	lsl.w	r3, r1, r3
 80018c0:	43db      	mvns	r3, r3
 80018c2:	401a      	ands	r2, r3
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	0d1b      	lsrs	r3, r3, #20
 80018c8:	f003 031f 	and.w	r3, r3, #31
 80018cc:	6879      	ldr	r1, [r7, #4]
 80018ce:	fa01 f303 	lsl.w	r3, r1, r3
 80018d2:	431a      	orrs	r2, r3
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80018d8:	bf00      	nop
 80018da:	371c      	adds	r7, #28
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018fc:	43db      	mvns	r3, r3
 80018fe:	401a      	ands	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f003 0318 	and.w	r3, r3, #24
 8001906:	4908      	ldr	r1, [pc, #32]	@ (8001928 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001908:	40d9      	lsrs	r1, r3
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	400b      	ands	r3, r1
 800190e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001912:	431a      	orrs	r2, r3
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800191a:	bf00      	nop
 800191c:	3714      	adds	r7, #20
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	0007ffff 	.word	0x0007ffff

0800192c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800193c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	6093      	str	r3, [r2, #8]
}
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001960:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001964:	d101      	bne.n	800196a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001966:	2301      	movs	r3, #1
 8001968:	e000      	b.n	800196c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800196a:	2300      	movs	r3, #0
}
 800196c:	4618      	mov	r0, r3
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001988:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800198c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80019b4:	d101      	bne.n	80019ba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80019b6:	2301      	movs	r3, #1
 80019b8:	e000      	b.n	80019bc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80019ba:	2300      	movs	r3, #0
}
 80019bc:	4618      	mov	r0, r3
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f003 0301 	and.w	r3, r3, #1
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d101      	bne.n	80019e0 <LL_ADC_IsEnabled+0x18>
 80019dc:	2301      	movs	r3, #1
 80019de:	e000      	b.n	80019e2 <LL_ADC_IsEnabled+0x1a>
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80019ee:	b480      	push	{r7}
 80019f0:	b083      	sub	sp, #12
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f003 0304 	and.w	r3, r3, #4
 80019fe:	2b04      	cmp	r3, #4
 8001a00:	d101      	bne.n	8001a06 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a02:	2301      	movs	r3, #1
 8001a04:	e000      	b.n	8001a08 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f003 0308 	and.w	r3, r3, #8
 8001a24:	2b08      	cmp	r3, #8
 8001a26:	d101      	bne.n	8001a2c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e000      	b.n	8001a2e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
	...

08001a3c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a3c:	b590      	push	{r4, r7, lr}
 8001a3e:	b089      	sub	sp, #36	@ 0x24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a44:	2300      	movs	r3, #0
 8001a46:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e130      	b.n	8001cb8 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d109      	bne.n	8001a78 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f7ff fa9f 	bl	8000fa8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff ff67 	bl	8001950 <LL_ADC_IsDeepPowerDownEnabled>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d004      	beq.n	8001a92 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff ff4d 	bl	800192c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff ff82 	bl	80019a0 <LL_ADC_IsInternalRegulatorEnabled>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d115      	bne.n	8001ace <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff ff66 	bl	8001978 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001aac:	4b84      	ldr	r3, [pc, #528]	@ (8001cc0 <HAL_ADC_Init+0x284>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	099b      	lsrs	r3, r3, #6
 8001ab2:	4a84      	ldr	r2, [pc, #528]	@ (8001cc4 <HAL_ADC_Init+0x288>)
 8001ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab8:	099b      	lsrs	r3, r3, #6
 8001aba:	3301      	adds	r3, #1
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ac0:	e002      	b.n	8001ac8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1f9      	bne.n	8001ac2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff ff64 	bl	80019a0 <LL_ADC_IsInternalRegulatorEnabled>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d10d      	bne.n	8001afa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ae2:	f043 0210 	orr.w	r2, r3, #16
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aee:	f043 0201 	orr.w	r2, r3, #1
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff ff75 	bl	80019ee <LL_ADC_REG_IsConversionOngoing>
 8001b04:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b0a:	f003 0310 	and.w	r3, r3, #16
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f040 80c9 	bne.w	8001ca6 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f040 80c5 	bne.w	8001ca6 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b20:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001b24:	f043 0202 	orr.w	r2, r3, #2
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff ff49 	bl	80019c8 <LL_ADC_IsEnabled>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d115      	bne.n	8001b68 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b3c:	4862      	ldr	r0, [pc, #392]	@ (8001cc8 <HAL_ADC_Init+0x28c>)
 8001b3e:	f7ff ff43 	bl	80019c8 <LL_ADC_IsEnabled>
 8001b42:	4604      	mov	r4, r0
 8001b44:	4861      	ldr	r0, [pc, #388]	@ (8001ccc <HAL_ADC_Init+0x290>)
 8001b46:	f7ff ff3f 	bl	80019c8 <LL_ADC_IsEnabled>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	431c      	orrs	r4, r3
 8001b4e:	4860      	ldr	r0, [pc, #384]	@ (8001cd0 <HAL_ADC_Init+0x294>)
 8001b50:	f7ff ff3a 	bl	80019c8 <LL_ADC_IsEnabled>
 8001b54:	4603      	mov	r3, r0
 8001b56:	4323      	orrs	r3, r4
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d105      	bne.n	8001b68 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	4619      	mov	r1, r3
 8001b62:	485c      	ldr	r0, [pc, #368]	@ (8001cd4 <HAL_ADC_Init+0x298>)
 8001b64:	f7ff fdde 	bl	8001724 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	7e5b      	ldrb	r3, [r3, #25]
 8001b6c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b72:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001b78:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001b7e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b86:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d106      	bne.n	8001ba4 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	045b      	lsls	r3, r3, #17
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d009      	beq.n	8001bc0 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bb0:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bb8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	68da      	ldr	r2, [r3, #12]
 8001bc6:	4b44      	ldr	r3, [pc, #272]	@ (8001cd8 <HAL_ADC_Init+0x29c>)
 8001bc8:	4013      	ands	r3, r2
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	6812      	ldr	r2, [r2, #0]
 8001bce:	69b9      	ldr	r1, [r7, #24]
 8001bd0:	430b      	orrs	r3, r1
 8001bd2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff ff1b 	bl	8001a14 <LL_ADC_INJ_IsConversionOngoing>
 8001bde:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d13d      	bne.n	8001c62 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d13a      	bne.n	8001c62 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bf0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001bf8:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001c08:	f023 0302 	bic.w	r3, r3, #2
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	6812      	ldr	r2, [r2, #0]
 8001c10:	69b9      	ldr	r1, [r7, #24]
 8001c12:	430b      	orrs	r3, r1
 8001c14:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d118      	bne.n	8001c52 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001c2a:	f023 0304 	bic.w	r3, r3, #4
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001c36:	4311      	orrs	r1, r2
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001c3c:	4311      	orrs	r1, r2
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001c42:	430a      	orrs	r2, r1
 8001c44:	431a      	orrs	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f042 0201 	orr.w	r2, r2, #1
 8001c4e:	611a      	str	r2, [r3, #16]
 8001c50:	e007      	b.n	8001c62 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	691a      	ldr	r2, [r3, #16]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f022 0201 	bic.w	r2, r2, #1
 8001c60:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d10c      	bne.n	8001c84 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c70:	f023 010f 	bic.w	r1, r3, #15
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	69db      	ldr	r3, [r3, #28]
 8001c78:	1e5a      	subs	r2, r3, #1
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c82:	e007      	b.n	8001c94 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f022 020f 	bic.w	r2, r2, #15
 8001c92:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c98:	f023 0303 	bic.w	r3, r3, #3
 8001c9c:	f043 0201 	orr.w	r2, r3, #1
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	655a      	str	r2, [r3, #84]	@ 0x54
 8001ca4:	e007      	b.n	8001cb6 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001caa:	f043 0210 	orr.w	r2, r3, #16
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001cb6:	7ffb      	ldrb	r3, [r7, #31]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3724      	adds	r7, #36	@ 0x24
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd90      	pop	{r4, r7, pc}
 8001cc0:	20000004 	.word	0x20000004
 8001cc4:	053e2d63 	.word	0x053e2d63
 8001cc8:	50040000 	.word	0x50040000
 8001ccc:	50040100 	.word	0x50040100
 8001cd0:	50040200 	.word	0x50040200
 8001cd4:	50040300 	.word	0x50040300
 8001cd8:	fff0c007 	.word	0xfff0c007

08001cdc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b0b6      	sub	sp, #216	@ 0xd8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d101      	bne.n	8001cfe <HAL_ADC_ConfigChannel+0x22>
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	e3c9      	b.n	8002492 <HAL_ADC_ConfigChannel+0x7b6>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2201      	movs	r2, #1
 8001d02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff fe6f 	bl	80019ee <LL_ADC_REG_IsConversionOngoing>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f040 83aa 	bne.w	800246c <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	2b05      	cmp	r3, #5
 8001d26:	d824      	bhi.n	8001d72 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	3b02      	subs	r3, #2
 8001d2e:	2b03      	cmp	r3, #3
 8001d30:	d81b      	bhi.n	8001d6a <HAL_ADC_ConfigChannel+0x8e>
 8001d32:	a201      	add	r2, pc, #4	@ (adr r2, 8001d38 <HAL_ADC_ConfigChannel+0x5c>)
 8001d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d38:	08001d49 	.word	0x08001d49
 8001d3c:	08001d51 	.word	0x08001d51
 8001d40:	08001d59 	.word	0x08001d59
 8001d44:	08001d61 	.word	0x08001d61
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001d48:	230c      	movs	r3, #12
 8001d4a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001d4e:	e010      	b.n	8001d72 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001d50:	2312      	movs	r3, #18
 8001d52:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001d56:	e00c      	b.n	8001d72 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001d58:	2318      	movs	r3, #24
 8001d5a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001d5e:	e008      	b.n	8001d72 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001d60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001d68:	e003      	b.n	8001d72 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001d6a:	2306      	movs	r3, #6
 8001d6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001d70:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6818      	ldr	r0, [r3, #0]
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001d80:	f7ff fd59 	bl	8001836 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff fe30 	bl	80019ee <LL_ADC_REG_IsConversionOngoing>
 8001d8e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff fe3c 	bl	8001a14 <LL_ADC_INJ_IsConversionOngoing>
 8001d9c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001da0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f040 81a4 	bne.w	80020f2 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001daa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f040 819f 	bne.w	80020f2 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6818      	ldr	r0, [r3, #0]
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	6819      	ldr	r1, [r3, #0]
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	f7ff fd64 	bl	800188e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	695a      	ldr	r2, [r3, #20]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	08db      	lsrs	r3, r3, #3
 8001dd2:	f003 0303 	and.w	r3, r3, #3
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	2b04      	cmp	r3, #4
 8001de6:	d00a      	beq.n	8001dfe <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6818      	ldr	r0, [r3, #0]
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	6919      	ldr	r1, [r3, #16]
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001df8:	f7ff fcc8 	bl	800178c <LL_ADC_SetOffset>
 8001dfc:	e179      	b.n	80020f2 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2100      	movs	r1, #0
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff fce5 	bl	80017d4 <LL_ADC_GetOffsetChannel>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d10a      	bne.n	8001e2a <HAL_ADC_ConfigChannel+0x14e>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2100      	movs	r1, #0
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff fcda 	bl	80017d4 <LL_ADC_GetOffsetChannel>
 8001e20:	4603      	mov	r3, r0
 8001e22:	0e9b      	lsrs	r3, r3, #26
 8001e24:	f003 021f 	and.w	r2, r3, #31
 8001e28:	e01e      	b.n	8001e68 <HAL_ADC_ConfigChannel+0x18c>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2100      	movs	r1, #0
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff fccf 	bl	80017d4 <LL_ADC_GetOffsetChannel>
 8001e36:	4603      	mov	r3, r0
 8001e38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001e40:	fa93 f3a3 	rbit	r3, r3
 8001e44:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e48:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001e4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e50:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d101      	bne.n	8001e5c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001e58:	2320      	movs	r3, #32
 8001e5a:	e004      	b.n	8001e66 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001e5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001e60:	fab3 f383 	clz	r3, r3
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d105      	bne.n	8001e80 <HAL_ADC_ConfigChannel+0x1a4>
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	0e9b      	lsrs	r3, r3, #26
 8001e7a:	f003 031f 	and.w	r3, r3, #31
 8001e7e:	e018      	b.n	8001eb2 <HAL_ADC_ConfigChannel+0x1d6>
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001e8c:	fa93 f3a3 	rbit	r3, r3
 8001e90:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001e94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001e98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001e9c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d101      	bne.n	8001ea8 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001ea4:	2320      	movs	r3, #32
 8001ea6:	e004      	b.n	8001eb2 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001ea8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001eac:	fab3 f383 	clz	r3, r3
 8001eb0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d106      	bne.n	8001ec4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff fc9e 	bl	8001800 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2101      	movs	r1, #1
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff fc82 	bl	80017d4 <LL_ADC_GetOffsetChannel>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d10a      	bne.n	8001ef0 <HAL_ADC_ConfigChannel+0x214>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2101      	movs	r1, #1
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff fc77 	bl	80017d4 <LL_ADC_GetOffsetChannel>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	0e9b      	lsrs	r3, r3, #26
 8001eea:	f003 021f 	and.w	r2, r3, #31
 8001eee:	e01e      	b.n	8001f2e <HAL_ADC_ConfigChannel+0x252>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff fc6c 	bl	80017d4 <LL_ADC_GetOffsetChannel>
 8001efc:	4603      	mov	r3, r0
 8001efe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001f06:	fa93 f3a3 	rbit	r3, r3
 8001f0a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001f0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001f12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001f16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001f1e:	2320      	movs	r3, #32
 8001f20:	e004      	b.n	8001f2c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001f22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001f26:	fab3 f383 	clz	r3, r3
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d105      	bne.n	8001f46 <HAL_ADC_ConfigChannel+0x26a>
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	0e9b      	lsrs	r3, r3, #26
 8001f40:	f003 031f 	and.w	r3, r3, #31
 8001f44:	e018      	b.n	8001f78 <HAL_ADC_ConfigChannel+0x29c>
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001f52:	fa93 f3a3 	rbit	r3, r3
 8001f56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001f5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001f5e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001f62:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001f6a:	2320      	movs	r3, #32
 8001f6c:	e004      	b.n	8001f78 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001f6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001f72:	fab3 f383 	clz	r3, r3
 8001f76:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d106      	bne.n	8001f8a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2200      	movs	r2, #0
 8001f82:	2101      	movs	r1, #1
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff fc3b 	bl	8001800 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2102      	movs	r1, #2
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff fc1f 	bl	80017d4 <LL_ADC_GetOffsetChannel>
 8001f96:	4603      	mov	r3, r0
 8001f98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d10a      	bne.n	8001fb6 <HAL_ADC_ConfigChannel+0x2da>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2102      	movs	r1, #2
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff fc14 	bl	80017d4 <LL_ADC_GetOffsetChannel>
 8001fac:	4603      	mov	r3, r0
 8001fae:	0e9b      	lsrs	r3, r3, #26
 8001fb0:	f003 021f 	and.w	r2, r3, #31
 8001fb4:	e01e      	b.n	8001ff4 <HAL_ADC_ConfigChannel+0x318>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2102      	movs	r1, #2
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff fc09 	bl	80017d4 <LL_ADC_GetOffsetChannel>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001fcc:	fa93 f3a3 	rbit	r3, r3
 8001fd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001fd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001fd8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001fdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001fe4:	2320      	movs	r3, #32
 8001fe6:	e004      	b.n	8001ff2 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001fe8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001fec:	fab3 f383 	clz	r3, r3
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d105      	bne.n	800200c <HAL_ADC_ConfigChannel+0x330>
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	0e9b      	lsrs	r3, r3, #26
 8002006:	f003 031f 	and.w	r3, r3, #31
 800200a:	e014      	b.n	8002036 <HAL_ADC_ConfigChannel+0x35a>
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002012:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002014:	fa93 f3a3 	rbit	r3, r3
 8002018:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800201a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800201c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002020:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002024:	2b00      	cmp	r3, #0
 8002026:	d101      	bne.n	800202c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002028:	2320      	movs	r3, #32
 800202a:	e004      	b.n	8002036 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 800202c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002030:	fab3 f383 	clz	r3, r3
 8002034:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002036:	429a      	cmp	r2, r3
 8002038:	d106      	bne.n	8002048 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2200      	movs	r2, #0
 8002040:	2102      	movs	r1, #2
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff fbdc 	bl	8001800 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2103      	movs	r1, #3
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff fbc0 	bl	80017d4 <LL_ADC_GetOffsetChannel>
 8002054:	4603      	mov	r3, r0
 8002056:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800205a:	2b00      	cmp	r3, #0
 800205c:	d10a      	bne.n	8002074 <HAL_ADC_ConfigChannel+0x398>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2103      	movs	r1, #3
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff fbb5 	bl	80017d4 <LL_ADC_GetOffsetChannel>
 800206a:	4603      	mov	r3, r0
 800206c:	0e9b      	lsrs	r3, r3, #26
 800206e:	f003 021f 	and.w	r2, r3, #31
 8002072:	e017      	b.n	80020a4 <HAL_ADC_ConfigChannel+0x3c8>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2103      	movs	r1, #3
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff fbaa 	bl	80017d4 <LL_ADC_GetOffsetChannel>
 8002080:	4603      	mov	r3, r0
 8002082:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002084:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002086:	fa93 f3a3 	rbit	r3, r3
 800208a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800208c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800208e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002090:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002096:	2320      	movs	r3, #32
 8002098:	e003      	b.n	80020a2 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800209a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800209c:	fab3 f383 	clz	r3, r3
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d105      	bne.n	80020bc <HAL_ADC_ConfigChannel+0x3e0>
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	0e9b      	lsrs	r3, r3, #26
 80020b6:	f003 031f 	and.w	r3, r3, #31
 80020ba:	e011      	b.n	80020e0 <HAL_ADC_ConfigChannel+0x404>
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020c4:	fa93 f3a3 	rbit	r3, r3
 80020c8:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80020ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80020cc:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80020ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d101      	bne.n	80020d8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80020d4:	2320      	movs	r3, #32
 80020d6:	e003      	b.n	80020e0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80020d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80020da:	fab3 f383 	clz	r3, r3
 80020de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d106      	bne.n	80020f2 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2200      	movs	r2, #0
 80020ea:	2103      	movs	r1, #3
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff fb87 	bl	8001800 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff fc66 	bl	80019c8 <LL_ADC_IsEnabled>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f040 8140 	bne.w	8002384 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6818      	ldr	r0, [r3, #0]
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	6819      	ldr	r1, [r3, #0]
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	461a      	mov	r2, r3
 8002112:	f7ff fbe7 	bl	80018e4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	4a8f      	ldr	r2, [pc, #572]	@ (8002358 <HAL_ADC_ConfigChannel+0x67c>)
 800211c:	4293      	cmp	r3, r2
 800211e:	f040 8131 	bne.w	8002384 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800212e:	2b00      	cmp	r3, #0
 8002130:	d10b      	bne.n	800214a <HAL_ADC_ConfigChannel+0x46e>
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	0e9b      	lsrs	r3, r3, #26
 8002138:	3301      	adds	r3, #1
 800213a:	f003 031f 	and.w	r3, r3, #31
 800213e:	2b09      	cmp	r3, #9
 8002140:	bf94      	ite	ls
 8002142:	2301      	movls	r3, #1
 8002144:	2300      	movhi	r3, #0
 8002146:	b2db      	uxtb	r3, r3
 8002148:	e019      	b.n	800217e <HAL_ADC_ConfigChannel+0x4a2>
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002150:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002152:	fa93 f3a3 	rbit	r3, r3
 8002156:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002158:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800215a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800215c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002162:	2320      	movs	r3, #32
 8002164:	e003      	b.n	800216e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002166:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002168:	fab3 f383 	clz	r3, r3
 800216c:	b2db      	uxtb	r3, r3
 800216e:	3301      	adds	r3, #1
 8002170:	f003 031f 	and.w	r3, r3, #31
 8002174:	2b09      	cmp	r3, #9
 8002176:	bf94      	ite	ls
 8002178:	2301      	movls	r3, #1
 800217a:	2300      	movhi	r3, #0
 800217c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800217e:	2b00      	cmp	r3, #0
 8002180:	d079      	beq.n	8002276 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800218a:	2b00      	cmp	r3, #0
 800218c:	d107      	bne.n	800219e <HAL_ADC_ConfigChannel+0x4c2>
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	0e9b      	lsrs	r3, r3, #26
 8002194:	3301      	adds	r3, #1
 8002196:	069b      	lsls	r3, r3, #26
 8002198:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800219c:	e015      	b.n	80021ca <HAL_ADC_ConfigChannel+0x4ee>
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021a6:	fa93 f3a3 	rbit	r3, r3
 80021aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80021ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80021ae:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80021b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80021b6:	2320      	movs	r3, #32
 80021b8:	e003      	b.n	80021c2 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80021ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80021bc:	fab3 f383 	clz	r3, r3
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	3301      	adds	r3, #1
 80021c4:	069b      	lsls	r3, r3, #26
 80021c6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d109      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x50e>
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	0e9b      	lsrs	r3, r3, #26
 80021dc:	3301      	adds	r3, #1
 80021de:	f003 031f 	and.w	r3, r3, #31
 80021e2:	2101      	movs	r1, #1
 80021e4:	fa01 f303 	lsl.w	r3, r1, r3
 80021e8:	e017      	b.n	800221a <HAL_ADC_ConfigChannel+0x53e>
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021f2:	fa93 f3a3 	rbit	r3, r3
 80021f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80021f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021fa:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80021fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002202:	2320      	movs	r3, #32
 8002204:	e003      	b.n	800220e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002206:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002208:	fab3 f383 	clz	r3, r3
 800220c:	b2db      	uxtb	r3, r3
 800220e:	3301      	adds	r3, #1
 8002210:	f003 031f 	and.w	r3, r3, #31
 8002214:	2101      	movs	r1, #1
 8002216:	fa01 f303 	lsl.w	r3, r1, r3
 800221a:	ea42 0103 	orr.w	r1, r2, r3
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002226:	2b00      	cmp	r3, #0
 8002228:	d10a      	bne.n	8002240 <HAL_ADC_ConfigChannel+0x564>
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	0e9b      	lsrs	r3, r3, #26
 8002230:	3301      	adds	r3, #1
 8002232:	f003 021f 	and.w	r2, r3, #31
 8002236:	4613      	mov	r3, r2
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	4413      	add	r3, r2
 800223c:	051b      	lsls	r3, r3, #20
 800223e:	e018      	b.n	8002272 <HAL_ADC_ConfigChannel+0x596>
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002248:	fa93 f3a3 	rbit	r3, r3
 800224c:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800224e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002250:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002258:	2320      	movs	r3, #32
 800225a:	e003      	b.n	8002264 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800225c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800225e:	fab3 f383 	clz	r3, r3
 8002262:	b2db      	uxtb	r3, r3
 8002264:	3301      	adds	r3, #1
 8002266:	f003 021f 	and.w	r2, r3, #31
 800226a:	4613      	mov	r3, r2
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	4413      	add	r3, r2
 8002270:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002272:	430b      	orrs	r3, r1
 8002274:	e081      	b.n	800237a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800227e:	2b00      	cmp	r3, #0
 8002280:	d107      	bne.n	8002292 <HAL_ADC_ConfigChannel+0x5b6>
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	0e9b      	lsrs	r3, r3, #26
 8002288:	3301      	adds	r3, #1
 800228a:	069b      	lsls	r3, r3, #26
 800228c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002290:	e015      	b.n	80022be <HAL_ADC_ConfigChannel+0x5e2>
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800229a:	fa93 f3a3 	rbit	r3, r3
 800229e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80022a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80022a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80022aa:	2320      	movs	r3, #32
 80022ac:	e003      	b.n	80022b6 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80022ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022b0:	fab3 f383 	clz	r3, r3
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	3301      	adds	r3, #1
 80022b8:	069b      	lsls	r3, r3, #26
 80022ba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d109      	bne.n	80022de <HAL_ADC_ConfigChannel+0x602>
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	0e9b      	lsrs	r3, r3, #26
 80022d0:	3301      	adds	r3, #1
 80022d2:	f003 031f 	and.w	r3, r3, #31
 80022d6:	2101      	movs	r1, #1
 80022d8:	fa01 f303 	lsl.w	r3, r1, r3
 80022dc:	e017      	b.n	800230e <HAL_ADC_ConfigChannel+0x632>
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	fa93 f3a3 	rbit	r3, r3
 80022ea:	61bb      	str	r3, [r7, #24]
  return result;
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80022f0:	6a3b      	ldr	r3, [r7, #32]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80022f6:	2320      	movs	r3, #32
 80022f8:	e003      	b.n	8002302 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80022fa:	6a3b      	ldr	r3, [r7, #32]
 80022fc:	fab3 f383 	clz	r3, r3
 8002300:	b2db      	uxtb	r3, r3
 8002302:	3301      	adds	r3, #1
 8002304:	f003 031f 	and.w	r3, r3, #31
 8002308:	2101      	movs	r1, #1
 800230a:	fa01 f303 	lsl.w	r3, r1, r3
 800230e:	ea42 0103 	orr.w	r1, r2, r3
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800231a:	2b00      	cmp	r3, #0
 800231c:	d10d      	bne.n	800233a <HAL_ADC_ConfigChannel+0x65e>
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	0e9b      	lsrs	r3, r3, #26
 8002324:	3301      	adds	r3, #1
 8002326:	f003 021f 	and.w	r2, r3, #31
 800232a:	4613      	mov	r3, r2
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	4413      	add	r3, r2
 8002330:	3b1e      	subs	r3, #30
 8002332:	051b      	lsls	r3, r3, #20
 8002334:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002338:	e01e      	b.n	8002378 <HAL_ADC_ConfigChannel+0x69c>
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	fa93 f3a3 	rbit	r3, r3
 8002346:	60fb      	str	r3, [r7, #12]
  return result;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d104      	bne.n	800235c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002352:	2320      	movs	r3, #32
 8002354:	e006      	b.n	8002364 <HAL_ADC_ConfigChannel+0x688>
 8002356:	bf00      	nop
 8002358:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	fab3 f383 	clz	r3, r3
 8002362:	b2db      	uxtb	r3, r3
 8002364:	3301      	adds	r3, #1
 8002366:	f003 021f 	and.w	r2, r3, #31
 800236a:	4613      	mov	r3, r2
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	4413      	add	r3, r2
 8002370:	3b1e      	subs	r3, #30
 8002372:	051b      	lsls	r3, r3, #20
 8002374:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002378:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800237e:	4619      	mov	r1, r3
 8002380:	f7ff fa85 	bl	800188e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	4b44      	ldr	r3, [pc, #272]	@ (800249c <HAL_ADC_ConfigChannel+0x7c0>)
 800238a:	4013      	ands	r3, r2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d07a      	beq.n	8002486 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002390:	4843      	ldr	r0, [pc, #268]	@ (80024a0 <HAL_ADC_ConfigChannel+0x7c4>)
 8002392:	f7ff f9ed 	bl	8001770 <LL_ADC_GetCommonPathInternalCh>
 8002396:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a41      	ldr	r2, [pc, #260]	@ (80024a4 <HAL_ADC_ConfigChannel+0x7c8>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d12c      	bne.n	80023fe <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80023a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80023a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d126      	bne.n	80023fe <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a3c      	ldr	r2, [pc, #240]	@ (80024a8 <HAL_ADC_ConfigChannel+0x7cc>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d004      	beq.n	80023c4 <HAL_ADC_ConfigChannel+0x6e8>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a3b      	ldr	r2, [pc, #236]	@ (80024ac <HAL_ADC_ConfigChannel+0x7d0>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d15d      	bne.n	8002480 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80023c8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80023cc:	4619      	mov	r1, r3
 80023ce:	4834      	ldr	r0, [pc, #208]	@ (80024a0 <HAL_ADC_ConfigChannel+0x7c4>)
 80023d0:	f7ff f9bb 	bl	800174a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023d4:	4b36      	ldr	r3, [pc, #216]	@ (80024b0 <HAL_ADC_ConfigChannel+0x7d4>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	099b      	lsrs	r3, r3, #6
 80023da:	4a36      	ldr	r2, [pc, #216]	@ (80024b4 <HAL_ADC_ConfigChannel+0x7d8>)
 80023dc:	fba2 2303 	umull	r2, r3, r2, r3
 80023e0:	099b      	lsrs	r3, r3, #6
 80023e2:	1c5a      	adds	r2, r3, #1
 80023e4:	4613      	mov	r3, r2
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	4413      	add	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80023ee:	e002      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	3b01      	subs	r3, #1
 80023f4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1f9      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023fc:	e040      	b.n	8002480 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a2d      	ldr	r2, [pc, #180]	@ (80024b8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d118      	bne.n	800243a <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002408:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800240c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d112      	bne.n	800243a <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a23      	ldr	r2, [pc, #140]	@ (80024a8 <HAL_ADC_ConfigChannel+0x7cc>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d004      	beq.n	8002428 <HAL_ADC_ConfigChannel+0x74c>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a22      	ldr	r2, [pc, #136]	@ (80024ac <HAL_ADC_ConfigChannel+0x7d0>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d12d      	bne.n	8002484 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002428:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800242c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002430:	4619      	mov	r1, r3
 8002432:	481b      	ldr	r0, [pc, #108]	@ (80024a0 <HAL_ADC_ConfigChannel+0x7c4>)
 8002434:	f7ff f989 	bl	800174a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002438:	e024      	b.n	8002484 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a1f      	ldr	r2, [pc, #124]	@ (80024bc <HAL_ADC_ConfigChannel+0x7e0>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d120      	bne.n	8002486 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002444:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002448:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d11a      	bne.n	8002486 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a14      	ldr	r2, [pc, #80]	@ (80024a8 <HAL_ADC_ConfigChannel+0x7cc>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d115      	bne.n	8002486 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800245a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800245e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002462:	4619      	mov	r1, r3
 8002464:	480e      	ldr	r0, [pc, #56]	@ (80024a0 <HAL_ADC_ConfigChannel+0x7c4>)
 8002466:	f7ff f970 	bl	800174a <LL_ADC_SetCommonPathInternalCh>
 800246a:	e00c      	b.n	8002486 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002470:	f043 0220 	orr.w	r2, r3, #32
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800247e:	e002      	b.n	8002486 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002480:	bf00      	nop
 8002482:	e000      	b.n	8002486 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002484:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800248e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002492:	4618      	mov	r0, r3
 8002494:	37d8      	adds	r7, #216	@ 0xd8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	80080000 	.word	0x80080000
 80024a0:	50040300 	.word	0x50040300
 80024a4:	c7520000 	.word	0xc7520000
 80024a8:	50040000 	.word	0x50040000
 80024ac:	50040200 	.word	0x50040200
 80024b0:	20000004 	.word	0x20000004
 80024b4:	053e2d63 	.word	0x053e2d63
 80024b8:	cb840000 	.word	0xcb840000
 80024bc:	80000001 	.word	0x80000001

080024c0 <LL_ADC_IsEnabled>:
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d101      	bne.n	80024d8 <LL_ADC_IsEnabled+0x18>
 80024d4:	2301      	movs	r3, #1
 80024d6:	e000      	b.n	80024da <LL_ADC_IsEnabled+0x1a>
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <LL_ADC_REG_IsConversionOngoing>:
{
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 0304 	and.w	r3, r3, #4
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	d101      	bne.n	80024fe <LL_ADC_REG_IsConversionOngoing+0x18>
 80024fa:	2301      	movs	r3, #1
 80024fc:	e000      	b.n	8002500 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800250c:	b590      	push	{r4, r7, lr}
 800250e:	b09f      	sub	sp, #124	@ 0x7c
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002516:	2300      	movs	r3, #0
 8002518:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002522:	2b01      	cmp	r3, #1
 8002524:	d101      	bne.n	800252a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002526:	2302      	movs	r3, #2
 8002528:	e093      	b.n	8002652 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002532:	2300      	movs	r3, #0
 8002534:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002536:	2300      	movs	r3, #0
 8002538:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a47      	ldr	r2, [pc, #284]	@ (800265c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d102      	bne.n	800254a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002544:	4b46      	ldr	r3, [pc, #280]	@ (8002660 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002546:	60bb      	str	r3, [r7, #8]
 8002548:	e001      	b.n	800254e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800254a:	2300      	movs	r3, #0
 800254c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d10b      	bne.n	800256c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002558:	f043 0220 	orr.w	r2, r3, #32
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e072      	b.n	8002652 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff ffb9 	bl	80024e6 <LL_ADC_REG_IsConversionOngoing>
 8002574:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4618      	mov	r0, r3
 800257c:	f7ff ffb3 	bl	80024e6 <LL_ADC_REG_IsConversionOngoing>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d154      	bne.n	8002630 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002586:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002588:	2b00      	cmp	r3, #0
 800258a:	d151      	bne.n	8002630 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800258c:	4b35      	ldr	r3, [pc, #212]	@ (8002664 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800258e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d02c      	beq.n	80025f2 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002598:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	6859      	ldr	r1, [r3, #4]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80025aa:	035b      	lsls	r3, r3, #13
 80025ac:	430b      	orrs	r3, r1
 80025ae:	431a      	orrs	r2, r3
 80025b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025b2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025b4:	4829      	ldr	r0, [pc, #164]	@ (800265c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80025b6:	f7ff ff83 	bl	80024c0 <LL_ADC_IsEnabled>
 80025ba:	4604      	mov	r4, r0
 80025bc:	4828      	ldr	r0, [pc, #160]	@ (8002660 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80025be:	f7ff ff7f 	bl	80024c0 <LL_ADC_IsEnabled>
 80025c2:	4603      	mov	r3, r0
 80025c4:	431c      	orrs	r4, r3
 80025c6:	4828      	ldr	r0, [pc, #160]	@ (8002668 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80025c8:	f7ff ff7a 	bl	80024c0 <LL_ADC_IsEnabled>
 80025cc:	4603      	mov	r3, r0
 80025ce:	4323      	orrs	r3, r4
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d137      	bne.n	8002644 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80025d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80025dc:	f023 030f 	bic.w	r3, r3, #15
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	6811      	ldr	r1, [r2, #0]
 80025e4:	683a      	ldr	r2, [r7, #0]
 80025e6:	6892      	ldr	r2, [r2, #8]
 80025e8:	430a      	orrs	r2, r1
 80025ea:	431a      	orrs	r2, r3
 80025ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025ee:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80025f0:	e028      	b.n	8002644 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80025f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80025fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025fc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025fe:	4817      	ldr	r0, [pc, #92]	@ (800265c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002600:	f7ff ff5e 	bl	80024c0 <LL_ADC_IsEnabled>
 8002604:	4604      	mov	r4, r0
 8002606:	4816      	ldr	r0, [pc, #88]	@ (8002660 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002608:	f7ff ff5a 	bl	80024c0 <LL_ADC_IsEnabled>
 800260c:	4603      	mov	r3, r0
 800260e:	431c      	orrs	r4, r3
 8002610:	4815      	ldr	r0, [pc, #84]	@ (8002668 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002612:	f7ff ff55 	bl	80024c0 <LL_ADC_IsEnabled>
 8002616:	4603      	mov	r3, r0
 8002618:	4323      	orrs	r3, r4
 800261a:	2b00      	cmp	r3, #0
 800261c:	d112      	bne.n	8002644 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800261e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002626:	f023 030f 	bic.w	r3, r3, #15
 800262a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800262c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800262e:	e009      	b.n	8002644 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002634:	f043 0220 	orr.w	r2, r3, #32
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002642:	e000      	b.n	8002646 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002644:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800264e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002652:	4618      	mov	r0, r3
 8002654:	377c      	adds	r7, #124	@ 0x7c
 8002656:	46bd      	mov	sp, r7
 8002658:	bd90      	pop	{r4, r7, pc}
 800265a:	bf00      	nop
 800265c:	50040000 	.word	0x50040000
 8002660:	50040100 	.word	0x50040100
 8002664:	50040300 	.word	0x50040300
 8002668:	50040200 	.word	0x50040200

0800266c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800267c:	4b0c      	ldr	r3, [pc, #48]	@ (80026b0 <__NVIC_SetPriorityGrouping+0x44>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002682:	68ba      	ldr	r2, [r7, #8]
 8002684:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002688:	4013      	ands	r3, r2
 800268a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002694:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002698:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800269c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800269e:	4a04      	ldr	r2, [pc, #16]	@ (80026b0 <__NVIC_SetPriorityGrouping+0x44>)
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	60d3      	str	r3, [r2, #12]
}
 80026a4:	bf00      	nop
 80026a6:	3714      	adds	r7, #20
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr
 80026b0:	e000ed00 	.word	0xe000ed00

080026b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026b8:	4b04      	ldr	r3, [pc, #16]	@ (80026cc <__NVIC_GetPriorityGrouping+0x18>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	0a1b      	lsrs	r3, r3, #8
 80026be:	f003 0307 	and.w	r3, r3, #7
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	e000ed00 	.word	0xe000ed00

080026d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	4603      	mov	r3, r0
 80026d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	db0b      	blt.n	80026fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026e2:	79fb      	ldrb	r3, [r7, #7]
 80026e4:	f003 021f 	and.w	r2, r3, #31
 80026e8:	4907      	ldr	r1, [pc, #28]	@ (8002708 <__NVIC_EnableIRQ+0x38>)
 80026ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ee:	095b      	lsrs	r3, r3, #5
 80026f0:	2001      	movs	r0, #1
 80026f2:	fa00 f202 	lsl.w	r2, r0, r2
 80026f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026fa:	bf00      	nop
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	e000e100 	.word	0xe000e100

0800270c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	6039      	str	r1, [r7, #0]
 8002716:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271c:	2b00      	cmp	r3, #0
 800271e:	db0a      	blt.n	8002736 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	b2da      	uxtb	r2, r3
 8002724:	490c      	ldr	r1, [pc, #48]	@ (8002758 <__NVIC_SetPriority+0x4c>)
 8002726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272a:	0112      	lsls	r2, r2, #4
 800272c:	b2d2      	uxtb	r2, r2
 800272e:	440b      	add	r3, r1
 8002730:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002734:	e00a      	b.n	800274c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	b2da      	uxtb	r2, r3
 800273a:	4908      	ldr	r1, [pc, #32]	@ (800275c <__NVIC_SetPriority+0x50>)
 800273c:	79fb      	ldrb	r3, [r7, #7]
 800273e:	f003 030f 	and.w	r3, r3, #15
 8002742:	3b04      	subs	r3, #4
 8002744:	0112      	lsls	r2, r2, #4
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	440b      	add	r3, r1
 800274a:	761a      	strb	r2, [r3, #24]
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	e000e100 	.word	0xe000e100
 800275c:	e000ed00 	.word	0xe000ed00

08002760 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002760:	b480      	push	{r7}
 8002762:	b089      	sub	sp, #36	@ 0x24
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f003 0307 	and.w	r3, r3, #7
 8002772:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	f1c3 0307 	rsb	r3, r3, #7
 800277a:	2b04      	cmp	r3, #4
 800277c:	bf28      	it	cs
 800277e:	2304      	movcs	r3, #4
 8002780:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	3304      	adds	r3, #4
 8002786:	2b06      	cmp	r3, #6
 8002788:	d902      	bls.n	8002790 <NVIC_EncodePriority+0x30>
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	3b03      	subs	r3, #3
 800278e:	e000      	b.n	8002792 <NVIC_EncodePriority+0x32>
 8002790:	2300      	movs	r3, #0
 8002792:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002794:	f04f 32ff 	mov.w	r2, #4294967295
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	43da      	mvns	r2, r3
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	401a      	ands	r2, r3
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027a8:	f04f 31ff 	mov.w	r1, #4294967295
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	fa01 f303 	lsl.w	r3, r1, r3
 80027b2:	43d9      	mvns	r1, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b8:	4313      	orrs	r3, r2
         );
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3724      	adds	r7, #36	@ 0x24
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
	...

080027c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3b01      	subs	r3, #1
 80027d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027d8:	d301      	bcc.n	80027de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027da:	2301      	movs	r3, #1
 80027dc:	e00f      	b.n	80027fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027de:	4a0a      	ldr	r2, [pc, #40]	@ (8002808 <SysTick_Config+0x40>)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3b01      	subs	r3, #1
 80027e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027e6:	210f      	movs	r1, #15
 80027e8:	f04f 30ff 	mov.w	r0, #4294967295
 80027ec:	f7ff ff8e 	bl	800270c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027f0:	4b05      	ldr	r3, [pc, #20]	@ (8002808 <SysTick_Config+0x40>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027f6:	4b04      	ldr	r3, [pc, #16]	@ (8002808 <SysTick_Config+0x40>)
 80027f8:	2207      	movs	r2, #7
 80027fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	e000e010 	.word	0xe000e010

0800280c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f7ff ff29 	bl	800266c <__NVIC_SetPriorityGrouping>
}
 800281a:	bf00      	nop
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b086      	sub	sp, #24
 8002826:	af00      	add	r7, sp, #0
 8002828:	4603      	mov	r3, r0
 800282a:	60b9      	str	r1, [r7, #8]
 800282c:	607a      	str	r2, [r7, #4]
 800282e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002830:	2300      	movs	r3, #0
 8002832:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002834:	f7ff ff3e 	bl	80026b4 <__NVIC_GetPriorityGrouping>
 8002838:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	68b9      	ldr	r1, [r7, #8]
 800283e:	6978      	ldr	r0, [r7, #20]
 8002840:	f7ff ff8e 	bl	8002760 <NVIC_EncodePriority>
 8002844:	4602      	mov	r2, r0
 8002846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800284a:	4611      	mov	r1, r2
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff ff5d 	bl	800270c <__NVIC_SetPriority>
}
 8002852:	bf00      	nop
 8002854:	3718      	adds	r7, #24
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b082      	sub	sp, #8
 800285e:	af00      	add	r7, sp, #0
 8002860:	4603      	mov	r3, r0
 8002862:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff ff31 	bl	80026d0 <__NVIC_EnableIRQ>
}
 800286e:	bf00      	nop
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b082      	sub	sp, #8
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f7ff ffa2 	bl	80027c8 <SysTick_Config>
 8002884:	4603      	mov	r3, r0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
	...

08002890 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002890:	b480      	push	{r7}
 8002892:	b087      	sub	sp, #28
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800289a:	2300      	movs	r3, #0
 800289c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800289e:	e17f      	b.n	8002ba0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	2101      	movs	r1, #1
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	fa01 f303 	lsl.w	r3, r1, r3
 80028ac:	4013      	ands	r3, r2
 80028ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f000 8171 	beq.w	8002b9a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f003 0303 	and.w	r3, r3, #3
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d005      	beq.n	80028d0 <HAL_GPIO_Init+0x40>
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f003 0303 	and.w	r3, r3, #3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d130      	bne.n	8002932 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	2203      	movs	r2, #3
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	43db      	mvns	r3, r3
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	4013      	ands	r3, r2
 80028e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	68da      	ldr	r2, [r3, #12]
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002906:	2201      	movs	r2, #1
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	43db      	mvns	r3, r3
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	4013      	ands	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	091b      	lsrs	r3, r3, #4
 800291c:	f003 0201 	and.w	r2, r3, #1
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	4313      	orrs	r3, r2
 800292a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f003 0303 	and.w	r3, r3, #3
 800293a:	2b03      	cmp	r3, #3
 800293c:	d118      	bne.n	8002970 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002942:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002944:	2201      	movs	r2, #1
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	43db      	mvns	r3, r3
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	4013      	ands	r3, r2
 8002952:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	08db      	lsrs	r3, r3, #3
 800295a:	f003 0201 	and.w	r2, r3, #1
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	4313      	orrs	r3, r2
 8002968:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f003 0303 	and.w	r3, r3, #3
 8002978:	2b03      	cmp	r3, #3
 800297a:	d017      	beq.n	80029ac <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	2203      	movs	r2, #3
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	43db      	mvns	r3, r3
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	4013      	ands	r3, r2
 8002992:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	693a      	ldr	r2, [r7, #16]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f003 0303 	and.w	r3, r3, #3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d123      	bne.n	8002a00 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	08da      	lsrs	r2, r3, #3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	3208      	adds	r2, #8
 80029c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	f003 0307 	and.w	r3, r3, #7
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	220f      	movs	r2, #15
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	43db      	mvns	r3, r3
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	4013      	ands	r3, r2
 80029da:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	691a      	ldr	r2, [r3, #16]
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	f003 0307 	and.w	r3, r3, #7
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	08da      	lsrs	r2, r3, #3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	3208      	adds	r2, #8
 80029fa:	6939      	ldr	r1, [r7, #16]
 80029fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	2203      	movs	r2, #3
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	43db      	mvns	r3, r3
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	4013      	ands	r3, r2
 8002a16:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f003 0203 	and.w	r2, r3, #3
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f000 80ac 	beq.w	8002b9a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a42:	4b5f      	ldr	r3, [pc, #380]	@ (8002bc0 <HAL_GPIO_Init+0x330>)
 8002a44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a46:	4a5e      	ldr	r2, [pc, #376]	@ (8002bc0 <HAL_GPIO_Init+0x330>)
 8002a48:	f043 0301 	orr.w	r3, r3, #1
 8002a4c:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a4e:	4b5c      	ldr	r3, [pc, #368]	@ (8002bc0 <HAL_GPIO_Init+0x330>)
 8002a50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	60bb      	str	r3, [r7, #8]
 8002a58:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a5a:	4a5a      	ldr	r2, [pc, #360]	@ (8002bc4 <HAL_GPIO_Init+0x334>)
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	089b      	lsrs	r3, r3, #2
 8002a60:	3302      	adds	r3, #2
 8002a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a66:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	f003 0303 	and.w	r3, r3, #3
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	220f      	movs	r2, #15
 8002a72:	fa02 f303 	lsl.w	r3, r2, r3
 8002a76:	43db      	mvns	r3, r3
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002a84:	d025      	beq.n	8002ad2 <HAL_GPIO_Init+0x242>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a4f      	ldr	r2, [pc, #316]	@ (8002bc8 <HAL_GPIO_Init+0x338>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d01f      	beq.n	8002ace <HAL_GPIO_Init+0x23e>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a4e      	ldr	r2, [pc, #312]	@ (8002bcc <HAL_GPIO_Init+0x33c>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d019      	beq.n	8002aca <HAL_GPIO_Init+0x23a>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a4d      	ldr	r2, [pc, #308]	@ (8002bd0 <HAL_GPIO_Init+0x340>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d013      	beq.n	8002ac6 <HAL_GPIO_Init+0x236>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a4c      	ldr	r2, [pc, #304]	@ (8002bd4 <HAL_GPIO_Init+0x344>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d00d      	beq.n	8002ac2 <HAL_GPIO_Init+0x232>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a4b      	ldr	r2, [pc, #300]	@ (8002bd8 <HAL_GPIO_Init+0x348>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d007      	beq.n	8002abe <HAL_GPIO_Init+0x22e>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a4a      	ldr	r2, [pc, #296]	@ (8002bdc <HAL_GPIO_Init+0x34c>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d101      	bne.n	8002aba <HAL_GPIO_Init+0x22a>
 8002ab6:	2306      	movs	r3, #6
 8002ab8:	e00c      	b.n	8002ad4 <HAL_GPIO_Init+0x244>
 8002aba:	2307      	movs	r3, #7
 8002abc:	e00a      	b.n	8002ad4 <HAL_GPIO_Init+0x244>
 8002abe:	2305      	movs	r3, #5
 8002ac0:	e008      	b.n	8002ad4 <HAL_GPIO_Init+0x244>
 8002ac2:	2304      	movs	r3, #4
 8002ac4:	e006      	b.n	8002ad4 <HAL_GPIO_Init+0x244>
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e004      	b.n	8002ad4 <HAL_GPIO_Init+0x244>
 8002aca:	2302      	movs	r3, #2
 8002acc:	e002      	b.n	8002ad4 <HAL_GPIO_Init+0x244>
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e000      	b.n	8002ad4 <HAL_GPIO_Init+0x244>
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	697a      	ldr	r2, [r7, #20]
 8002ad6:	f002 0203 	and.w	r2, r2, #3
 8002ada:	0092      	lsls	r2, r2, #2
 8002adc:	4093      	lsls	r3, r2
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ae4:	4937      	ldr	r1, [pc, #220]	@ (8002bc4 <HAL_GPIO_Init+0x334>)
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	089b      	lsrs	r3, r3, #2
 8002aea:	3302      	adds	r3, #2
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002af2:	4b3b      	ldr	r3, [pc, #236]	@ (8002be0 <HAL_GPIO_Init+0x350>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	43db      	mvns	r3, r3
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	4013      	ands	r3, r2
 8002b00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b16:	4a32      	ldr	r2, [pc, #200]	@ (8002be0 <HAL_GPIO_Init+0x350>)
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b1c:	4b30      	ldr	r3, [pc, #192]	@ (8002be0 <HAL_GPIO_Init+0x350>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	43db      	mvns	r3, r3
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d003      	beq.n	8002b40 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b40:	4a27      	ldr	r2, [pc, #156]	@ (8002be0 <HAL_GPIO_Init+0x350>)
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002b46:	4b26      	ldr	r3, [pc, #152]	@ (8002be0 <HAL_GPIO_Init+0x350>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	43db      	mvns	r3, r3
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	4013      	ands	r3, r2
 8002b54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b6a:	4a1d      	ldr	r2, [pc, #116]	@ (8002be0 <HAL_GPIO_Init+0x350>)
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002b70:	4b1b      	ldr	r3, [pc, #108]	@ (8002be0 <HAL_GPIO_Init+0x350>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d003      	beq.n	8002b94 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b94:	4a12      	ldr	r2, [pc, #72]	@ (8002be0 <HAL_GPIO_Init+0x350>)
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f47f ae78 	bne.w	80028a0 <HAL_GPIO_Init+0x10>
  }
}
 8002bb0:	bf00      	nop
 8002bb2:	bf00      	nop
 8002bb4:	371c      	adds	r7, #28
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	40010000 	.word	0x40010000
 8002bc8:	48000400 	.word	0x48000400
 8002bcc:	48000800 	.word	0x48000800
 8002bd0:	48000c00 	.word	0x48000c00
 8002bd4:	48001000 	.word	0x48001000
 8002bd8:	48001400 	.word	0x48001400
 8002bdc:	48001800 	.word	0x48001800
 8002be0:	40010400 	.word	0x40010400

08002be4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	460b      	mov	r3, r1
 8002bee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	691a      	ldr	r2, [r3, #16]
 8002bf4:	887b      	ldrh	r3, [r7, #2]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d002      	beq.n	8002c02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	73fb      	strb	r3, [r7, #15]
 8002c00:	e001      	b.n	8002c06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c02:	2300      	movs	r3, #0
 8002c04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3714      	adds	r7, #20
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	807b      	strh	r3, [r7, #2]
 8002c20:	4613      	mov	r3, r2
 8002c22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c24:	787b      	ldrb	r3, [r7, #1]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d003      	beq.n	8002c32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c2a:	887a      	ldrh	r2, [r7, #2]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c30:	e002      	b.n	8002c38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c32:	887a      	ldrh	r2, [r7, #2]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002c4e:	4b08      	ldr	r3, [pc, #32]	@ (8002c70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c50:	695a      	ldr	r2, [r3, #20]
 8002c52:	88fb      	ldrh	r3, [r7, #6]
 8002c54:	4013      	ands	r3, r2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d006      	beq.n	8002c68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c5a:	4a05      	ldr	r2, [pc, #20]	@ (8002c70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c5c:	88fb      	ldrh	r3, [r7, #6]
 8002c5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c60:	88fb      	ldrh	r3, [r7, #6]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7fd fc9a 	bl	800059c <HAL_GPIO_EXTI_Callback>
  }
}
 8002c68:	bf00      	nop
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40010400 	.word	0x40010400

08002c74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e08d      	b.n	8002da2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d106      	bne.n	8002ca0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7fe fa04 	bl	80010a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2224      	movs	r2, #36	@ 0x24
 8002ca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f022 0201 	bic.w	r2, r2, #1
 8002cb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002cc4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002cd4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d107      	bne.n	8002cee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	689a      	ldr	r2, [r3, #8]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002cea:	609a      	str	r2, [r3, #8]
 8002cec:	e006      	b.n	8002cfc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	689a      	ldr	r2, [r3, #8]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002cfa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d108      	bne.n	8002d16 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	685a      	ldr	r2, [r3, #4]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d12:	605a      	str	r2, [r3, #4]
 8002d14:	e007      	b.n	8002d26 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d24:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	6812      	ldr	r2, [r2, #0]
 8002d30:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002d34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d38:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68da      	ldr	r2, [r3, #12]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002d48:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	691a      	ldr	r2, [r3, #16]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	430a      	orrs	r2, r1
 8002d62:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	69d9      	ldr	r1, [r3, #28]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a1a      	ldr	r2, [r3, #32]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	430a      	orrs	r2, r1
 8002d72:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f042 0201 	orr.w	r2, r2, #1
 8002d82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2220      	movs	r2, #32
 8002d8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
 8002db2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b20      	cmp	r3, #32
 8002dbe:	d138      	bne.n	8002e32 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d101      	bne.n	8002dce <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002dca:	2302      	movs	r3, #2
 8002dcc:	e032      	b.n	8002e34 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2224      	movs	r2, #36	@ 0x24
 8002dda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 0201 	bic.w	r2, r2, #1
 8002dec:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002dfc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6819      	ldr	r1, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f042 0201 	orr.w	r2, r2, #1
 8002e1c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2220      	movs	r2, #32
 8002e22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	e000      	b.n	8002e34 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e32:	2302      	movs	r3, #2
  }
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b20      	cmp	r3, #32
 8002e54:	d139      	bne.n	8002eca <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d101      	bne.n	8002e64 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002e60:	2302      	movs	r3, #2
 8002e62:	e033      	b.n	8002ecc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2224      	movs	r2, #36	@ 0x24
 8002e70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 0201 	bic.w	r2, r2, #1
 8002e82:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002e92:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	021b      	lsls	r3, r3, #8
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f042 0201 	orr.w	r2, r2, #1
 8002eb4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2220      	movs	r2, #32
 8002eba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	e000      	b.n	8002ecc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002eca:	2302      	movs	r3, #2
  }
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002edc:	4b04      	ldr	r3, [pc, #16]	@ (8002ef0 <HAL_PWREx_GetVoltageRange+0x18>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	40007000 	.word	0x40007000

08002ef4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f02:	d130      	bne.n	8002f66 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f04:	4b23      	ldr	r3, [pc, #140]	@ (8002f94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f10:	d038      	beq.n	8002f84 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f12:	4b20      	ldr	r3, [pc, #128]	@ (8002f94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f1a:	4a1e      	ldr	r2, [pc, #120]	@ (8002f94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f1c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f20:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f22:	4b1d      	ldr	r3, [pc, #116]	@ (8002f98 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2232      	movs	r2, #50	@ 0x32
 8002f28:	fb02 f303 	mul.w	r3, r2, r3
 8002f2c:	4a1b      	ldr	r2, [pc, #108]	@ (8002f9c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f32:	0c9b      	lsrs	r3, r3, #18
 8002f34:	3301      	adds	r3, #1
 8002f36:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f38:	e002      	b.n	8002f40 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f40:	4b14      	ldr	r3, [pc, #80]	@ (8002f94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f42:	695b      	ldr	r3, [r3, #20]
 8002f44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f4c:	d102      	bne.n	8002f54 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1f2      	bne.n	8002f3a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f54:	4b0f      	ldr	r3, [pc, #60]	@ (8002f94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f60:	d110      	bne.n	8002f84 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e00f      	b.n	8002f86 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f66:	4b0b      	ldr	r3, [pc, #44]	@ (8002f94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f72:	d007      	beq.n	8002f84 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f74:	4b07      	ldr	r3, [pc, #28]	@ (8002f94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f7c:	4a05      	ldr	r2, [pc, #20]	@ (8002f94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f82:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3714      	adds	r7, #20
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	40007000 	.word	0x40007000
 8002f98:	20000004 	.word	0x20000004
 8002f9c:	431bde83 	.word	0x431bde83

08002fa0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b088      	sub	sp, #32
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e3ca      	b.n	8003748 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fb2:	4b97      	ldr	r3, [pc, #604]	@ (8003210 <HAL_RCC_OscConfig+0x270>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f003 030c 	and.w	r3, r3, #12
 8002fba:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fbc:	4b94      	ldr	r3, [pc, #592]	@ (8003210 <HAL_RCC_OscConfig+0x270>)
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	f003 0303 	and.w	r3, r3, #3
 8002fc4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0310 	and.w	r3, r3, #16
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	f000 80e4 	beq.w	800319c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d007      	beq.n	8002fea <HAL_RCC_OscConfig+0x4a>
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	2b0c      	cmp	r3, #12
 8002fde:	f040 808b 	bne.w	80030f8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	f040 8087 	bne.w	80030f8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fea:	4b89      	ldr	r3, [pc, #548]	@ (8003210 <HAL_RCC_OscConfig+0x270>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d005      	beq.n	8003002 <HAL_RCC_OscConfig+0x62>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e3a2      	b.n	8003748 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a1a      	ldr	r2, [r3, #32]
 8003006:	4b82      	ldr	r3, [pc, #520]	@ (8003210 <HAL_RCC_OscConfig+0x270>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0308 	and.w	r3, r3, #8
 800300e:	2b00      	cmp	r3, #0
 8003010:	d004      	beq.n	800301c <HAL_RCC_OscConfig+0x7c>
 8003012:	4b7f      	ldr	r3, [pc, #508]	@ (8003210 <HAL_RCC_OscConfig+0x270>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800301a:	e005      	b.n	8003028 <HAL_RCC_OscConfig+0x88>
 800301c:	4b7c      	ldr	r3, [pc, #496]	@ (8003210 <HAL_RCC_OscConfig+0x270>)
 800301e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003022:	091b      	lsrs	r3, r3, #4
 8003024:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003028:	4293      	cmp	r3, r2
 800302a:	d223      	bcs.n	8003074 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a1b      	ldr	r3, [r3, #32]
 8003030:	4618      	mov	r0, r3
 8003032:	f000 fd55 	bl	8003ae0 <RCC_SetFlashLatencyFromMSIRange>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d001      	beq.n	8003040 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e383      	b.n	8003748 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003040:	4b73      	ldr	r3, [pc, #460]	@ (8003210 <HAL_RCC_OscConfig+0x270>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a72      	ldr	r2, [pc, #456]	@ (8003210 <HAL_RCC_OscConfig+0x270>)
 8003046:	f043 0308 	orr.w	r3, r3, #8
 800304a:	6013      	str	r3, [r2, #0]
 800304c:	4b70      	ldr	r3, [pc, #448]	@ (8003210 <HAL_RCC_OscConfig+0x270>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a1b      	ldr	r3, [r3, #32]
 8003058:	496d      	ldr	r1, [pc, #436]	@ (8003210 <HAL_RCC_OscConfig+0x270>)
 800305a:	4313      	orrs	r3, r2
 800305c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800305e:	4b6c      	ldr	r3, [pc, #432]	@ (8003210 <HAL_RCC_OscConfig+0x270>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	021b      	lsls	r3, r3, #8
 800306c:	4968      	ldr	r1, [pc, #416]	@ (8003210 <HAL_RCC_OscConfig+0x270>)
 800306e:	4313      	orrs	r3, r2
 8003070:	604b      	str	r3, [r1, #4]
 8003072:	e025      	b.n	80030c0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003074:	4b66      	ldr	r3, [pc, #408]	@ (8003210 <HAL_RCC_OscConfig+0x270>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a65      	ldr	r2, [pc, #404]	@ (8003210 <HAL_RCC_OscConfig+0x270>)
 800307a:	f043 0308 	orr.w	r3, r3, #8
 800307e:	6013      	str	r3, [r2, #0]
 8003080:	4b63      	ldr	r3, [pc, #396]	@ (8003210 <HAL_RCC_OscConfig+0x270>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	4960      	ldr	r1, [pc, #384]	@ (8003210 <HAL_RCC_OscConfig+0x270>)
 800308e:	4313      	orrs	r3, r2
 8003090:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003092:	4b5f      	ldr	r3, [pc, #380]	@ (8003210 <HAL_RCC_OscConfig+0x270>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	021b      	lsls	r3, r3, #8
 80030a0:	495b      	ldr	r1, [pc, #364]	@ (8003210 <HAL_RCC_OscConfig+0x270>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d109      	bne.n	80030c0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a1b      	ldr	r3, [r3, #32]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f000 fd15 	bl	8003ae0 <RCC_SetFlashLatencyFromMSIRange>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e343      	b.n	8003748 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030c0:	f000 fc4a 	bl	8003958 <HAL_RCC_GetSysClockFreq>
 80030c4:	4602      	mov	r2, r0
 80030c6:	4b52      	ldr	r3, [pc, #328]	@ (8003210 <HAL_RCC_OscConfig+0x270>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	091b      	lsrs	r3, r3, #4
 80030cc:	f003 030f 	and.w	r3, r3, #15
 80030d0:	4950      	ldr	r1, [pc, #320]	@ (8003214 <HAL_RCC_OscConfig+0x274>)
 80030d2:	5ccb      	ldrb	r3, [r1, r3]
 80030d4:	f003 031f 	and.w	r3, r3, #31
 80030d8:	fa22 f303 	lsr.w	r3, r2, r3
 80030dc:	4a4e      	ldr	r2, [pc, #312]	@ (8003218 <HAL_RCC_OscConfig+0x278>)
 80030de:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80030e0:	4b4e      	ldr	r3, [pc, #312]	@ (800321c <HAL_RCC_OscConfig+0x27c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7fe fa9d 	bl	8001624 <HAL_InitTick>
 80030ea:	4603      	mov	r3, r0
 80030ec:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80030ee:	7bfb      	ldrb	r3, [r7, #15]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d052      	beq.n	800319a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80030f4:	7bfb      	ldrb	r3, [r7, #15]
 80030f6:	e327      	b.n	8003748 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d032      	beq.n	8003166 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003100:	4b43      	ldr	r3, [pc, #268]	@ (8003210 <HAL_RCC_OscConfig+0x270>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a42      	ldr	r2, [pc, #264]	@ (8003210 <HAL_RCC_OscConfig+0x270>)
 8003106:	f043 0301 	orr.w	r3, r3, #1
 800310a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800310c:	f7fe fada 	bl	80016c4 <HAL_GetTick>
 8003110:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003112:	e008      	b.n	8003126 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003114:	f7fe fad6 	bl	80016c4 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e310      	b.n	8003748 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003126:	4b3a      	ldr	r3, [pc, #232]	@ (8003210 <HAL_RCC_OscConfig+0x270>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d0f0      	beq.n	8003114 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003132:	4b37      	ldr	r3, [pc, #220]	@ (8003210 <HAL_RCC_OscConfig+0x270>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a36      	ldr	r2, [pc, #216]	@ (8003210 <HAL_RCC_OscConfig+0x270>)
 8003138:	f043 0308 	orr.w	r3, r3, #8
 800313c:	6013      	str	r3, [r2, #0]
 800313e:	4b34      	ldr	r3, [pc, #208]	@ (8003210 <HAL_RCC_OscConfig+0x270>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a1b      	ldr	r3, [r3, #32]
 800314a:	4931      	ldr	r1, [pc, #196]	@ (8003210 <HAL_RCC_OscConfig+0x270>)
 800314c:	4313      	orrs	r3, r2
 800314e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003150:	4b2f      	ldr	r3, [pc, #188]	@ (8003210 <HAL_RCC_OscConfig+0x270>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	69db      	ldr	r3, [r3, #28]
 800315c:	021b      	lsls	r3, r3, #8
 800315e:	492c      	ldr	r1, [pc, #176]	@ (8003210 <HAL_RCC_OscConfig+0x270>)
 8003160:	4313      	orrs	r3, r2
 8003162:	604b      	str	r3, [r1, #4]
 8003164:	e01a      	b.n	800319c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003166:	4b2a      	ldr	r3, [pc, #168]	@ (8003210 <HAL_RCC_OscConfig+0x270>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a29      	ldr	r2, [pc, #164]	@ (8003210 <HAL_RCC_OscConfig+0x270>)
 800316c:	f023 0301 	bic.w	r3, r3, #1
 8003170:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003172:	f7fe faa7 	bl	80016c4 <HAL_GetTick>
 8003176:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003178:	e008      	b.n	800318c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800317a:	f7fe faa3 	bl	80016c4 <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	2b02      	cmp	r3, #2
 8003186:	d901      	bls.n	800318c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e2dd      	b.n	8003748 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800318c:	4b20      	ldr	r3, [pc, #128]	@ (8003210 <HAL_RCC_OscConfig+0x270>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0302 	and.w	r3, r3, #2
 8003194:	2b00      	cmp	r3, #0
 8003196:	d1f0      	bne.n	800317a <HAL_RCC_OscConfig+0x1da>
 8003198:	e000      	b.n	800319c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800319a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0301 	and.w	r3, r3, #1
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d074      	beq.n	8003292 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	2b08      	cmp	r3, #8
 80031ac:	d005      	beq.n	80031ba <HAL_RCC_OscConfig+0x21a>
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	2b0c      	cmp	r3, #12
 80031b2:	d10e      	bne.n	80031d2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	2b03      	cmp	r3, #3
 80031b8:	d10b      	bne.n	80031d2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ba:	4b15      	ldr	r3, [pc, #84]	@ (8003210 <HAL_RCC_OscConfig+0x270>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d064      	beq.n	8003290 <HAL_RCC_OscConfig+0x2f0>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d160      	bne.n	8003290 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e2ba      	b.n	8003748 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031da:	d106      	bne.n	80031ea <HAL_RCC_OscConfig+0x24a>
 80031dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003210 <HAL_RCC_OscConfig+0x270>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a0b      	ldr	r2, [pc, #44]	@ (8003210 <HAL_RCC_OscConfig+0x270>)
 80031e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031e6:	6013      	str	r3, [r2, #0]
 80031e8:	e026      	b.n	8003238 <HAL_RCC_OscConfig+0x298>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031f2:	d115      	bne.n	8003220 <HAL_RCC_OscConfig+0x280>
 80031f4:	4b06      	ldr	r3, [pc, #24]	@ (8003210 <HAL_RCC_OscConfig+0x270>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a05      	ldr	r2, [pc, #20]	@ (8003210 <HAL_RCC_OscConfig+0x270>)
 80031fa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031fe:	6013      	str	r3, [r2, #0]
 8003200:	4b03      	ldr	r3, [pc, #12]	@ (8003210 <HAL_RCC_OscConfig+0x270>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a02      	ldr	r2, [pc, #8]	@ (8003210 <HAL_RCC_OscConfig+0x270>)
 8003206:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800320a:	6013      	str	r3, [r2, #0]
 800320c:	e014      	b.n	8003238 <HAL_RCC_OscConfig+0x298>
 800320e:	bf00      	nop
 8003210:	40021000 	.word	0x40021000
 8003214:	08005f64 	.word	0x08005f64
 8003218:	20000004 	.word	0x20000004
 800321c:	20000008 	.word	0x20000008
 8003220:	4ba0      	ldr	r3, [pc, #640]	@ (80034a4 <HAL_RCC_OscConfig+0x504>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a9f      	ldr	r2, [pc, #636]	@ (80034a4 <HAL_RCC_OscConfig+0x504>)
 8003226:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800322a:	6013      	str	r3, [r2, #0]
 800322c:	4b9d      	ldr	r3, [pc, #628]	@ (80034a4 <HAL_RCC_OscConfig+0x504>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a9c      	ldr	r2, [pc, #624]	@ (80034a4 <HAL_RCC_OscConfig+0x504>)
 8003232:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003236:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d013      	beq.n	8003268 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003240:	f7fe fa40 	bl	80016c4 <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003248:	f7fe fa3c 	bl	80016c4 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b64      	cmp	r3, #100	@ 0x64
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e276      	b.n	8003748 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800325a:	4b92      	ldr	r3, [pc, #584]	@ (80034a4 <HAL_RCC_OscConfig+0x504>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d0f0      	beq.n	8003248 <HAL_RCC_OscConfig+0x2a8>
 8003266:	e014      	b.n	8003292 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003268:	f7fe fa2c 	bl	80016c4 <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003270:	f7fe fa28 	bl	80016c4 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b64      	cmp	r3, #100	@ 0x64
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e262      	b.n	8003748 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003282:	4b88      	ldr	r3, [pc, #544]	@ (80034a4 <HAL_RCC_OscConfig+0x504>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1f0      	bne.n	8003270 <HAL_RCC_OscConfig+0x2d0>
 800328e:	e000      	b.n	8003292 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003290:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d060      	beq.n	8003360 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	2b04      	cmp	r3, #4
 80032a2:	d005      	beq.n	80032b0 <HAL_RCC_OscConfig+0x310>
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	2b0c      	cmp	r3, #12
 80032a8:	d119      	bne.n	80032de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d116      	bne.n	80032de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032b0:	4b7c      	ldr	r3, [pc, #496]	@ (80034a4 <HAL_RCC_OscConfig+0x504>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d005      	beq.n	80032c8 <HAL_RCC_OscConfig+0x328>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d101      	bne.n	80032c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e23f      	b.n	8003748 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032c8:	4b76      	ldr	r3, [pc, #472]	@ (80034a4 <HAL_RCC_OscConfig+0x504>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	061b      	lsls	r3, r3, #24
 80032d6:	4973      	ldr	r1, [pc, #460]	@ (80034a4 <HAL_RCC_OscConfig+0x504>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032dc:	e040      	b.n	8003360 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d023      	beq.n	800332e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032e6:	4b6f      	ldr	r3, [pc, #444]	@ (80034a4 <HAL_RCC_OscConfig+0x504>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a6e      	ldr	r2, [pc, #440]	@ (80034a4 <HAL_RCC_OscConfig+0x504>)
 80032ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f2:	f7fe f9e7 	bl	80016c4 <HAL_GetTick>
 80032f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032f8:	e008      	b.n	800330c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032fa:	f7fe f9e3 	bl	80016c4 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b02      	cmp	r3, #2
 8003306:	d901      	bls.n	800330c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e21d      	b.n	8003748 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800330c:	4b65      	ldr	r3, [pc, #404]	@ (80034a4 <HAL_RCC_OscConfig+0x504>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003314:	2b00      	cmp	r3, #0
 8003316:	d0f0      	beq.n	80032fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003318:	4b62      	ldr	r3, [pc, #392]	@ (80034a4 <HAL_RCC_OscConfig+0x504>)
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	061b      	lsls	r3, r3, #24
 8003326:	495f      	ldr	r1, [pc, #380]	@ (80034a4 <HAL_RCC_OscConfig+0x504>)
 8003328:	4313      	orrs	r3, r2
 800332a:	604b      	str	r3, [r1, #4]
 800332c:	e018      	b.n	8003360 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800332e:	4b5d      	ldr	r3, [pc, #372]	@ (80034a4 <HAL_RCC_OscConfig+0x504>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a5c      	ldr	r2, [pc, #368]	@ (80034a4 <HAL_RCC_OscConfig+0x504>)
 8003334:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003338:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800333a:	f7fe f9c3 	bl	80016c4 <HAL_GetTick>
 800333e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003340:	e008      	b.n	8003354 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003342:	f7fe f9bf 	bl	80016c4 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d901      	bls.n	8003354 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e1f9      	b.n	8003748 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003354:	4b53      	ldr	r3, [pc, #332]	@ (80034a4 <HAL_RCC_OscConfig+0x504>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1f0      	bne.n	8003342 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0308 	and.w	r3, r3, #8
 8003368:	2b00      	cmp	r3, #0
 800336a:	d03c      	beq.n	80033e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	695b      	ldr	r3, [r3, #20]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d01c      	beq.n	80033ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003374:	4b4b      	ldr	r3, [pc, #300]	@ (80034a4 <HAL_RCC_OscConfig+0x504>)
 8003376:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800337a:	4a4a      	ldr	r2, [pc, #296]	@ (80034a4 <HAL_RCC_OscConfig+0x504>)
 800337c:	f043 0301 	orr.w	r3, r3, #1
 8003380:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003384:	f7fe f99e 	bl	80016c4 <HAL_GetTick>
 8003388:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800338a:	e008      	b.n	800339e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800338c:	f7fe f99a 	bl	80016c4 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b02      	cmp	r3, #2
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e1d4      	b.n	8003748 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800339e:	4b41      	ldr	r3, [pc, #260]	@ (80034a4 <HAL_RCC_OscConfig+0x504>)
 80033a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033a4:	f003 0302 	and.w	r3, r3, #2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d0ef      	beq.n	800338c <HAL_RCC_OscConfig+0x3ec>
 80033ac:	e01b      	b.n	80033e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033ae:	4b3d      	ldr	r3, [pc, #244]	@ (80034a4 <HAL_RCC_OscConfig+0x504>)
 80033b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033b4:	4a3b      	ldr	r2, [pc, #236]	@ (80034a4 <HAL_RCC_OscConfig+0x504>)
 80033b6:	f023 0301 	bic.w	r3, r3, #1
 80033ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033be:	f7fe f981 	bl	80016c4 <HAL_GetTick>
 80033c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033c4:	e008      	b.n	80033d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033c6:	f7fe f97d 	bl	80016c4 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e1b7      	b.n	8003748 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033d8:	4b32      	ldr	r3, [pc, #200]	@ (80034a4 <HAL_RCC_OscConfig+0x504>)
 80033da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1ef      	bne.n	80033c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0304 	and.w	r3, r3, #4
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f000 80a6 	beq.w	8003540 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033f4:	2300      	movs	r3, #0
 80033f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80033f8:	4b2a      	ldr	r3, [pc, #168]	@ (80034a4 <HAL_RCC_OscConfig+0x504>)
 80033fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d10d      	bne.n	8003420 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003404:	4b27      	ldr	r3, [pc, #156]	@ (80034a4 <HAL_RCC_OscConfig+0x504>)
 8003406:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003408:	4a26      	ldr	r2, [pc, #152]	@ (80034a4 <HAL_RCC_OscConfig+0x504>)
 800340a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800340e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003410:	4b24      	ldr	r3, [pc, #144]	@ (80034a4 <HAL_RCC_OscConfig+0x504>)
 8003412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003414:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003418:	60bb      	str	r3, [r7, #8]
 800341a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800341c:	2301      	movs	r3, #1
 800341e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003420:	4b21      	ldr	r3, [pc, #132]	@ (80034a8 <HAL_RCC_OscConfig+0x508>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003428:	2b00      	cmp	r3, #0
 800342a:	d118      	bne.n	800345e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800342c:	4b1e      	ldr	r3, [pc, #120]	@ (80034a8 <HAL_RCC_OscConfig+0x508>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a1d      	ldr	r2, [pc, #116]	@ (80034a8 <HAL_RCC_OscConfig+0x508>)
 8003432:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003436:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003438:	f7fe f944 	bl	80016c4 <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003440:	f7fe f940 	bl	80016c4 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e17a      	b.n	8003748 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003452:	4b15      	ldr	r3, [pc, #84]	@ (80034a8 <HAL_RCC_OscConfig+0x508>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800345a:	2b00      	cmp	r3, #0
 800345c:	d0f0      	beq.n	8003440 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d108      	bne.n	8003478 <HAL_RCC_OscConfig+0x4d8>
 8003466:	4b0f      	ldr	r3, [pc, #60]	@ (80034a4 <HAL_RCC_OscConfig+0x504>)
 8003468:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800346c:	4a0d      	ldr	r2, [pc, #52]	@ (80034a4 <HAL_RCC_OscConfig+0x504>)
 800346e:	f043 0301 	orr.w	r3, r3, #1
 8003472:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003476:	e029      	b.n	80034cc <HAL_RCC_OscConfig+0x52c>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	2b05      	cmp	r3, #5
 800347e:	d115      	bne.n	80034ac <HAL_RCC_OscConfig+0x50c>
 8003480:	4b08      	ldr	r3, [pc, #32]	@ (80034a4 <HAL_RCC_OscConfig+0x504>)
 8003482:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003486:	4a07      	ldr	r2, [pc, #28]	@ (80034a4 <HAL_RCC_OscConfig+0x504>)
 8003488:	f043 0304 	orr.w	r3, r3, #4
 800348c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003490:	4b04      	ldr	r3, [pc, #16]	@ (80034a4 <HAL_RCC_OscConfig+0x504>)
 8003492:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003496:	4a03      	ldr	r2, [pc, #12]	@ (80034a4 <HAL_RCC_OscConfig+0x504>)
 8003498:	f043 0301 	orr.w	r3, r3, #1
 800349c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80034a0:	e014      	b.n	80034cc <HAL_RCC_OscConfig+0x52c>
 80034a2:	bf00      	nop
 80034a4:	40021000 	.word	0x40021000
 80034a8:	40007000 	.word	0x40007000
 80034ac:	4b9c      	ldr	r3, [pc, #624]	@ (8003720 <HAL_RCC_OscConfig+0x780>)
 80034ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034b2:	4a9b      	ldr	r2, [pc, #620]	@ (8003720 <HAL_RCC_OscConfig+0x780>)
 80034b4:	f023 0301 	bic.w	r3, r3, #1
 80034b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80034bc:	4b98      	ldr	r3, [pc, #608]	@ (8003720 <HAL_RCC_OscConfig+0x780>)
 80034be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034c2:	4a97      	ldr	r2, [pc, #604]	@ (8003720 <HAL_RCC_OscConfig+0x780>)
 80034c4:	f023 0304 	bic.w	r3, r3, #4
 80034c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d016      	beq.n	8003502 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d4:	f7fe f8f6 	bl	80016c4 <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034da:	e00a      	b.n	80034f2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034dc:	f7fe f8f2 	bl	80016c4 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e12a      	b.n	8003748 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034f2:	4b8b      	ldr	r3, [pc, #556]	@ (8003720 <HAL_RCC_OscConfig+0x780>)
 80034f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d0ed      	beq.n	80034dc <HAL_RCC_OscConfig+0x53c>
 8003500:	e015      	b.n	800352e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003502:	f7fe f8df 	bl	80016c4 <HAL_GetTick>
 8003506:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003508:	e00a      	b.n	8003520 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800350a:	f7fe f8db 	bl	80016c4 <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003518:	4293      	cmp	r3, r2
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e113      	b.n	8003748 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003520:	4b7f      	ldr	r3, [pc, #508]	@ (8003720 <HAL_RCC_OscConfig+0x780>)
 8003522:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1ed      	bne.n	800350a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800352e:	7ffb      	ldrb	r3, [r7, #31]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d105      	bne.n	8003540 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003534:	4b7a      	ldr	r3, [pc, #488]	@ (8003720 <HAL_RCC_OscConfig+0x780>)
 8003536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003538:	4a79      	ldr	r2, [pc, #484]	@ (8003720 <HAL_RCC_OscConfig+0x780>)
 800353a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800353e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003544:	2b00      	cmp	r3, #0
 8003546:	f000 80fe 	beq.w	8003746 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800354e:	2b02      	cmp	r3, #2
 8003550:	f040 80d0 	bne.w	80036f4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003554:	4b72      	ldr	r3, [pc, #456]	@ (8003720 <HAL_RCC_OscConfig+0x780>)
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	f003 0203 	and.w	r2, r3, #3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003564:	429a      	cmp	r2, r3
 8003566:	d130      	bne.n	80035ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003572:	3b01      	subs	r3, #1
 8003574:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003576:	429a      	cmp	r2, r3
 8003578:	d127      	bne.n	80035ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003584:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003586:	429a      	cmp	r2, r3
 8003588:	d11f      	bne.n	80035ca <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003594:	2a07      	cmp	r2, #7
 8003596:	bf14      	ite	ne
 8003598:	2201      	movne	r2, #1
 800359a:	2200      	moveq	r2, #0
 800359c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800359e:	4293      	cmp	r3, r2
 80035a0:	d113      	bne.n	80035ca <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ac:	085b      	lsrs	r3, r3, #1
 80035ae:	3b01      	subs	r3, #1
 80035b0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d109      	bne.n	80035ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c0:	085b      	lsrs	r3, r3, #1
 80035c2:	3b01      	subs	r3, #1
 80035c4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d06e      	beq.n	80036a8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	2b0c      	cmp	r3, #12
 80035ce:	d069      	beq.n	80036a4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80035d0:	4b53      	ldr	r3, [pc, #332]	@ (8003720 <HAL_RCC_OscConfig+0x780>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d105      	bne.n	80035e8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80035dc:	4b50      	ldr	r3, [pc, #320]	@ (8003720 <HAL_RCC_OscConfig+0x780>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d001      	beq.n	80035ec <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e0ad      	b.n	8003748 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80035ec:	4b4c      	ldr	r3, [pc, #304]	@ (8003720 <HAL_RCC_OscConfig+0x780>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a4b      	ldr	r2, [pc, #300]	@ (8003720 <HAL_RCC_OscConfig+0x780>)
 80035f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035f6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035f8:	f7fe f864 	bl	80016c4 <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003600:	f7fe f860 	bl	80016c4 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b02      	cmp	r3, #2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e09a      	b.n	8003748 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003612:	4b43      	ldr	r3, [pc, #268]	@ (8003720 <HAL_RCC_OscConfig+0x780>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1f0      	bne.n	8003600 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800361e:	4b40      	ldr	r3, [pc, #256]	@ (8003720 <HAL_RCC_OscConfig+0x780>)
 8003620:	68da      	ldr	r2, [r3, #12]
 8003622:	4b40      	ldr	r3, [pc, #256]	@ (8003724 <HAL_RCC_OscConfig+0x784>)
 8003624:	4013      	ands	r3, r2
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800362e:	3a01      	subs	r2, #1
 8003630:	0112      	lsls	r2, r2, #4
 8003632:	4311      	orrs	r1, r2
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003638:	0212      	lsls	r2, r2, #8
 800363a:	4311      	orrs	r1, r2
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003640:	0852      	lsrs	r2, r2, #1
 8003642:	3a01      	subs	r2, #1
 8003644:	0552      	lsls	r2, r2, #21
 8003646:	4311      	orrs	r1, r2
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800364c:	0852      	lsrs	r2, r2, #1
 800364e:	3a01      	subs	r2, #1
 8003650:	0652      	lsls	r2, r2, #25
 8003652:	4311      	orrs	r1, r2
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003658:	0912      	lsrs	r2, r2, #4
 800365a:	0452      	lsls	r2, r2, #17
 800365c:	430a      	orrs	r2, r1
 800365e:	4930      	ldr	r1, [pc, #192]	@ (8003720 <HAL_RCC_OscConfig+0x780>)
 8003660:	4313      	orrs	r3, r2
 8003662:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003664:	4b2e      	ldr	r3, [pc, #184]	@ (8003720 <HAL_RCC_OscConfig+0x780>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a2d      	ldr	r2, [pc, #180]	@ (8003720 <HAL_RCC_OscConfig+0x780>)
 800366a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800366e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003670:	4b2b      	ldr	r3, [pc, #172]	@ (8003720 <HAL_RCC_OscConfig+0x780>)
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	4a2a      	ldr	r2, [pc, #168]	@ (8003720 <HAL_RCC_OscConfig+0x780>)
 8003676:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800367a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800367c:	f7fe f822 	bl	80016c4 <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003682:	e008      	b.n	8003696 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003684:	f7fe f81e 	bl	80016c4 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e058      	b.n	8003748 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003696:	4b22      	ldr	r3, [pc, #136]	@ (8003720 <HAL_RCC_OscConfig+0x780>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d0f0      	beq.n	8003684 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036a2:	e050      	b.n	8003746 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e04f      	b.n	8003748 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036a8:	4b1d      	ldr	r3, [pc, #116]	@ (8003720 <HAL_RCC_OscConfig+0x780>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d148      	bne.n	8003746 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80036b4:	4b1a      	ldr	r3, [pc, #104]	@ (8003720 <HAL_RCC_OscConfig+0x780>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a19      	ldr	r2, [pc, #100]	@ (8003720 <HAL_RCC_OscConfig+0x780>)
 80036ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036be:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036c0:	4b17      	ldr	r3, [pc, #92]	@ (8003720 <HAL_RCC_OscConfig+0x780>)
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	4a16      	ldr	r2, [pc, #88]	@ (8003720 <HAL_RCC_OscConfig+0x780>)
 80036c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036ca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80036cc:	f7fd fffa 	bl	80016c4 <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036d4:	f7fd fff6 	bl	80016c4 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e030      	b.n	8003748 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003720 <HAL_RCC_OscConfig+0x780>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d0f0      	beq.n	80036d4 <HAL_RCC_OscConfig+0x734>
 80036f2:	e028      	b.n	8003746 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	2b0c      	cmp	r3, #12
 80036f8:	d023      	beq.n	8003742 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036fa:	4b09      	ldr	r3, [pc, #36]	@ (8003720 <HAL_RCC_OscConfig+0x780>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a08      	ldr	r2, [pc, #32]	@ (8003720 <HAL_RCC_OscConfig+0x780>)
 8003700:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003704:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003706:	f7fd ffdd 	bl	80016c4 <HAL_GetTick>
 800370a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800370c:	e00c      	b.n	8003728 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800370e:	f7fd ffd9 	bl	80016c4 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	2b02      	cmp	r3, #2
 800371a:	d905      	bls.n	8003728 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e013      	b.n	8003748 <HAL_RCC_OscConfig+0x7a8>
 8003720:	40021000 	.word	0x40021000
 8003724:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003728:	4b09      	ldr	r3, [pc, #36]	@ (8003750 <HAL_RCC_OscConfig+0x7b0>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1ec      	bne.n	800370e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003734:	4b06      	ldr	r3, [pc, #24]	@ (8003750 <HAL_RCC_OscConfig+0x7b0>)
 8003736:	68da      	ldr	r2, [r3, #12]
 8003738:	4905      	ldr	r1, [pc, #20]	@ (8003750 <HAL_RCC_OscConfig+0x7b0>)
 800373a:	4b06      	ldr	r3, [pc, #24]	@ (8003754 <HAL_RCC_OscConfig+0x7b4>)
 800373c:	4013      	ands	r3, r2
 800373e:	60cb      	str	r3, [r1, #12]
 8003740:	e001      	b.n	8003746 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e000      	b.n	8003748 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3720      	adds	r7, #32
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	40021000 	.word	0x40021000
 8003754:	feeefffc 	.word	0xfeeefffc

08003758 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d101      	bne.n	800376c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e0e7      	b.n	800393c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800376c:	4b75      	ldr	r3, [pc, #468]	@ (8003944 <HAL_RCC_ClockConfig+0x1ec>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0307 	and.w	r3, r3, #7
 8003774:	683a      	ldr	r2, [r7, #0]
 8003776:	429a      	cmp	r2, r3
 8003778:	d910      	bls.n	800379c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800377a:	4b72      	ldr	r3, [pc, #456]	@ (8003944 <HAL_RCC_ClockConfig+0x1ec>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f023 0207 	bic.w	r2, r3, #7
 8003782:	4970      	ldr	r1, [pc, #448]	@ (8003944 <HAL_RCC_ClockConfig+0x1ec>)
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	4313      	orrs	r3, r2
 8003788:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800378a:	4b6e      	ldr	r3, [pc, #440]	@ (8003944 <HAL_RCC_ClockConfig+0x1ec>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0307 	and.w	r3, r3, #7
 8003792:	683a      	ldr	r2, [r7, #0]
 8003794:	429a      	cmp	r2, r3
 8003796:	d001      	beq.n	800379c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e0cf      	b.n	800393c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0302 	and.w	r3, r3, #2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d010      	beq.n	80037ca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689a      	ldr	r2, [r3, #8]
 80037ac:	4b66      	ldr	r3, [pc, #408]	@ (8003948 <HAL_RCC_ClockConfig+0x1f0>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d908      	bls.n	80037ca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037b8:	4b63      	ldr	r3, [pc, #396]	@ (8003948 <HAL_RCC_ClockConfig+0x1f0>)
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	4960      	ldr	r1, [pc, #384]	@ (8003948 <HAL_RCC_ClockConfig+0x1f0>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d04c      	beq.n	8003870 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	2b03      	cmp	r3, #3
 80037dc:	d107      	bne.n	80037ee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037de:	4b5a      	ldr	r3, [pc, #360]	@ (8003948 <HAL_RCC_ClockConfig+0x1f0>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d121      	bne.n	800382e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e0a6      	b.n	800393c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d107      	bne.n	8003806 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037f6:	4b54      	ldr	r3, [pc, #336]	@ (8003948 <HAL_RCC_ClockConfig+0x1f0>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d115      	bne.n	800382e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e09a      	b.n	800393c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d107      	bne.n	800381e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800380e:	4b4e      	ldr	r3, [pc, #312]	@ (8003948 <HAL_RCC_ClockConfig+0x1f0>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	2b00      	cmp	r3, #0
 8003818:	d109      	bne.n	800382e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e08e      	b.n	800393c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800381e:	4b4a      	ldr	r3, [pc, #296]	@ (8003948 <HAL_RCC_ClockConfig+0x1f0>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e086      	b.n	800393c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800382e:	4b46      	ldr	r3, [pc, #280]	@ (8003948 <HAL_RCC_ClockConfig+0x1f0>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f023 0203 	bic.w	r2, r3, #3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	4943      	ldr	r1, [pc, #268]	@ (8003948 <HAL_RCC_ClockConfig+0x1f0>)
 800383c:	4313      	orrs	r3, r2
 800383e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003840:	f7fd ff40 	bl	80016c4 <HAL_GetTick>
 8003844:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003846:	e00a      	b.n	800385e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003848:	f7fd ff3c 	bl	80016c4 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003856:	4293      	cmp	r3, r2
 8003858:	d901      	bls.n	800385e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e06e      	b.n	800393c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800385e:	4b3a      	ldr	r3, [pc, #232]	@ (8003948 <HAL_RCC_ClockConfig+0x1f0>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 020c 	and.w	r2, r3, #12
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	429a      	cmp	r2, r3
 800386e:	d1eb      	bne.n	8003848 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d010      	beq.n	800389e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689a      	ldr	r2, [r3, #8]
 8003880:	4b31      	ldr	r3, [pc, #196]	@ (8003948 <HAL_RCC_ClockConfig+0x1f0>)
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003888:	429a      	cmp	r2, r3
 800388a:	d208      	bcs.n	800389e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800388c:	4b2e      	ldr	r3, [pc, #184]	@ (8003948 <HAL_RCC_ClockConfig+0x1f0>)
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	492b      	ldr	r1, [pc, #172]	@ (8003948 <HAL_RCC_ClockConfig+0x1f0>)
 800389a:	4313      	orrs	r3, r2
 800389c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800389e:	4b29      	ldr	r3, [pc, #164]	@ (8003944 <HAL_RCC_ClockConfig+0x1ec>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0307 	and.w	r3, r3, #7
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d210      	bcs.n	80038ce <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ac:	4b25      	ldr	r3, [pc, #148]	@ (8003944 <HAL_RCC_ClockConfig+0x1ec>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f023 0207 	bic.w	r2, r3, #7
 80038b4:	4923      	ldr	r1, [pc, #140]	@ (8003944 <HAL_RCC_ClockConfig+0x1ec>)
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038bc:	4b21      	ldr	r3, [pc, #132]	@ (8003944 <HAL_RCC_ClockConfig+0x1ec>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0307 	and.w	r3, r3, #7
 80038c4:	683a      	ldr	r2, [r7, #0]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d001      	beq.n	80038ce <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e036      	b.n	800393c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0304 	and.w	r3, r3, #4
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d008      	beq.n	80038ec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038da:	4b1b      	ldr	r3, [pc, #108]	@ (8003948 <HAL_RCC_ClockConfig+0x1f0>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	4918      	ldr	r1, [pc, #96]	@ (8003948 <HAL_RCC_ClockConfig+0x1f0>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0308 	and.w	r3, r3, #8
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d009      	beq.n	800390c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038f8:	4b13      	ldr	r3, [pc, #76]	@ (8003948 <HAL_RCC_ClockConfig+0x1f0>)
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	691b      	ldr	r3, [r3, #16]
 8003904:	00db      	lsls	r3, r3, #3
 8003906:	4910      	ldr	r1, [pc, #64]	@ (8003948 <HAL_RCC_ClockConfig+0x1f0>)
 8003908:	4313      	orrs	r3, r2
 800390a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800390c:	f000 f824 	bl	8003958 <HAL_RCC_GetSysClockFreq>
 8003910:	4602      	mov	r2, r0
 8003912:	4b0d      	ldr	r3, [pc, #52]	@ (8003948 <HAL_RCC_ClockConfig+0x1f0>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	091b      	lsrs	r3, r3, #4
 8003918:	f003 030f 	and.w	r3, r3, #15
 800391c:	490b      	ldr	r1, [pc, #44]	@ (800394c <HAL_RCC_ClockConfig+0x1f4>)
 800391e:	5ccb      	ldrb	r3, [r1, r3]
 8003920:	f003 031f 	and.w	r3, r3, #31
 8003924:	fa22 f303 	lsr.w	r3, r2, r3
 8003928:	4a09      	ldr	r2, [pc, #36]	@ (8003950 <HAL_RCC_ClockConfig+0x1f8>)
 800392a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800392c:	4b09      	ldr	r3, [pc, #36]	@ (8003954 <HAL_RCC_ClockConfig+0x1fc>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4618      	mov	r0, r3
 8003932:	f7fd fe77 	bl	8001624 <HAL_InitTick>
 8003936:	4603      	mov	r3, r0
 8003938:	72fb      	strb	r3, [r7, #11]

  return status;
 800393a:	7afb      	ldrb	r3, [r7, #11]
}
 800393c:	4618      	mov	r0, r3
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	40022000 	.word	0x40022000
 8003948:	40021000 	.word	0x40021000
 800394c:	08005f64 	.word	0x08005f64
 8003950:	20000004 	.word	0x20000004
 8003954:	20000008 	.word	0x20000008

08003958 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003958:	b480      	push	{r7}
 800395a:	b089      	sub	sp, #36	@ 0x24
 800395c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800395e:	2300      	movs	r3, #0
 8003960:	61fb      	str	r3, [r7, #28]
 8003962:	2300      	movs	r3, #0
 8003964:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003966:	4b3e      	ldr	r3, [pc, #248]	@ (8003a60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f003 030c 	and.w	r3, r3, #12
 800396e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003970:	4b3b      	ldr	r3, [pc, #236]	@ (8003a60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	f003 0303 	and.w	r3, r3, #3
 8003978:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d005      	beq.n	800398c <HAL_RCC_GetSysClockFreq+0x34>
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	2b0c      	cmp	r3, #12
 8003984:	d121      	bne.n	80039ca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d11e      	bne.n	80039ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800398c:	4b34      	ldr	r3, [pc, #208]	@ (8003a60 <HAL_RCC_GetSysClockFreq+0x108>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0308 	and.w	r3, r3, #8
 8003994:	2b00      	cmp	r3, #0
 8003996:	d107      	bne.n	80039a8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003998:	4b31      	ldr	r3, [pc, #196]	@ (8003a60 <HAL_RCC_GetSysClockFreq+0x108>)
 800399a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800399e:	0a1b      	lsrs	r3, r3, #8
 80039a0:	f003 030f 	and.w	r3, r3, #15
 80039a4:	61fb      	str	r3, [r7, #28]
 80039a6:	e005      	b.n	80039b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80039a8:	4b2d      	ldr	r3, [pc, #180]	@ (8003a60 <HAL_RCC_GetSysClockFreq+0x108>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	091b      	lsrs	r3, r3, #4
 80039ae:	f003 030f 	and.w	r3, r3, #15
 80039b2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80039b4:	4a2b      	ldr	r2, [pc, #172]	@ (8003a64 <HAL_RCC_GetSysClockFreq+0x10c>)
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039bc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d10d      	bne.n	80039e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039c8:	e00a      	b.n	80039e0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	2b04      	cmp	r3, #4
 80039ce:	d102      	bne.n	80039d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80039d0:	4b25      	ldr	r3, [pc, #148]	@ (8003a68 <HAL_RCC_GetSysClockFreq+0x110>)
 80039d2:	61bb      	str	r3, [r7, #24]
 80039d4:	e004      	b.n	80039e0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	2b08      	cmp	r3, #8
 80039da:	d101      	bne.n	80039e0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80039dc:	4b23      	ldr	r3, [pc, #140]	@ (8003a6c <HAL_RCC_GetSysClockFreq+0x114>)
 80039de:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	2b0c      	cmp	r3, #12
 80039e4:	d134      	bne.n	8003a50 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80039e6:	4b1e      	ldr	r3, [pc, #120]	@ (8003a60 <HAL_RCC_GetSysClockFreq+0x108>)
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	f003 0303 	and.w	r3, r3, #3
 80039ee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d003      	beq.n	80039fe <HAL_RCC_GetSysClockFreq+0xa6>
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	2b03      	cmp	r3, #3
 80039fa:	d003      	beq.n	8003a04 <HAL_RCC_GetSysClockFreq+0xac>
 80039fc:	e005      	b.n	8003a0a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80039fe:	4b1a      	ldr	r3, [pc, #104]	@ (8003a68 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a00:	617b      	str	r3, [r7, #20]
      break;
 8003a02:	e005      	b.n	8003a10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003a04:	4b19      	ldr	r3, [pc, #100]	@ (8003a6c <HAL_RCC_GetSysClockFreq+0x114>)
 8003a06:	617b      	str	r3, [r7, #20]
      break;
 8003a08:	e002      	b.n	8003a10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	617b      	str	r3, [r7, #20]
      break;
 8003a0e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a10:	4b13      	ldr	r3, [pc, #76]	@ (8003a60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	091b      	lsrs	r3, r3, #4
 8003a16:	f003 0307 	and.w	r3, r3, #7
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003a1e:	4b10      	ldr	r3, [pc, #64]	@ (8003a60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	0a1b      	lsrs	r3, r3, #8
 8003a24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a28:	697a      	ldr	r2, [r7, #20]
 8003a2a:	fb03 f202 	mul.w	r2, r3, r2
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a34:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a36:	4b0a      	ldr	r3, [pc, #40]	@ (8003a60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	0e5b      	lsrs	r3, r3, #25
 8003a3c:	f003 0303 	and.w	r3, r3, #3
 8003a40:	3301      	adds	r3, #1
 8003a42:	005b      	lsls	r3, r3, #1
 8003a44:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003a46:	697a      	ldr	r2, [r7, #20]
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a4e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003a50:	69bb      	ldr	r3, [r7, #24]
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3724      	adds	r7, #36	@ 0x24
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	40021000 	.word	0x40021000
 8003a64:	08005f7c 	.word	0x08005f7c
 8003a68:	00f42400 	.word	0x00f42400
 8003a6c:	007a1200 	.word	0x007a1200

08003a70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a70:	b480      	push	{r7}
 8003a72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a74:	4b03      	ldr	r3, [pc, #12]	@ (8003a84 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a76:	681b      	ldr	r3, [r3, #0]
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	20000004 	.word	0x20000004

08003a88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a8c:	f7ff fff0 	bl	8003a70 <HAL_RCC_GetHCLKFreq>
 8003a90:	4602      	mov	r2, r0
 8003a92:	4b06      	ldr	r3, [pc, #24]	@ (8003aac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	0a1b      	lsrs	r3, r3, #8
 8003a98:	f003 0307 	and.w	r3, r3, #7
 8003a9c:	4904      	ldr	r1, [pc, #16]	@ (8003ab0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a9e:	5ccb      	ldrb	r3, [r1, r3]
 8003aa0:	f003 031f 	and.w	r3, r3, #31
 8003aa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	08005f74 	.word	0x08005f74

08003ab4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003ab8:	f7ff ffda 	bl	8003a70 <HAL_RCC_GetHCLKFreq>
 8003abc:	4602      	mov	r2, r0
 8003abe:	4b06      	ldr	r3, [pc, #24]	@ (8003ad8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	0adb      	lsrs	r3, r3, #11
 8003ac4:	f003 0307 	and.w	r3, r3, #7
 8003ac8:	4904      	ldr	r1, [pc, #16]	@ (8003adc <HAL_RCC_GetPCLK2Freq+0x28>)
 8003aca:	5ccb      	ldrb	r3, [r1, r3]
 8003acc:	f003 031f 	and.w	r3, r3, #31
 8003ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	40021000 	.word	0x40021000
 8003adc:	08005f74 	.word	0x08005f74

08003ae0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ae8:	2300      	movs	r3, #0
 8003aea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003aec:	4b2a      	ldr	r3, [pc, #168]	@ (8003b98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003aee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003af0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d003      	beq.n	8003b00 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003af8:	f7ff f9ee 	bl	8002ed8 <HAL_PWREx_GetVoltageRange>
 8003afc:	6178      	str	r0, [r7, #20]
 8003afe:	e014      	b.n	8003b2a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b00:	4b25      	ldr	r3, [pc, #148]	@ (8003b98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b04:	4a24      	ldr	r2, [pc, #144]	@ (8003b98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b0c:	4b22      	ldr	r3, [pc, #136]	@ (8003b98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b14:	60fb      	str	r3, [r7, #12]
 8003b16:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003b18:	f7ff f9de 	bl	8002ed8 <HAL_PWREx_GetVoltageRange>
 8003b1c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003b1e:	4b1e      	ldr	r3, [pc, #120]	@ (8003b98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b22:	4a1d      	ldr	r2, [pc, #116]	@ (8003b98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b28:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b30:	d10b      	bne.n	8003b4a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2b80      	cmp	r3, #128	@ 0x80
 8003b36:	d919      	bls.n	8003b6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2ba0      	cmp	r3, #160	@ 0xa0
 8003b3c:	d902      	bls.n	8003b44 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b3e:	2302      	movs	r3, #2
 8003b40:	613b      	str	r3, [r7, #16]
 8003b42:	e013      	b.n	8003b6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b44:	2301      	movs	r3, #1
 8003b46:	613b      	str	r3, [r7, #16]
 8003b48:	e010      	b.n	8003b6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2b80      	cmp	r3, #128	@ 0x80
 8003b4e:	d902      	bls.n	8003b56 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003b50:	2303      	movs	r3, #3
 8003b52:	613b      	str	r3, [r7, #16]
 8003b54:	e00a      	b.n	8003b6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2b80      	cmp	r3, #128	@ 0x80
 8003b5a:	d102      	bne.n	8003b62 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	613b      	str	r3, [r7, #16]
 8003b60:	e004      	b.n	8003b6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2b70      	cmp	r3, #112	@ 0x70
 8003b66:	d101      	bne.n	8003b6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b68:	2301      	movs	r3, #1
 8003b6a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f023 0207 	bic.w	r2, r3, #7
 8003b74:	4909      	ldr	r1, [pc, #36]	@ (8003b9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b7c:	4b07      	ldr	r3, [pc, #28]	@ (8003b9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0307 	and.w	r3, r3, #7
 8003b84:	693a      	ldr	r2, [r7, #16]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d001      	beq.n	8003b8e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e000      	b.n	8003b90 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3718      	adds	r7, #24
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	40021000 	.word	0x40021000
 8003b9c:	40022000 	.word	0x40022000

08003ba0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b086      	sub	sp, #24
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ba8:	2300      	movs	r3, #0
 8003baa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003bac:	2300      	movs	r3, #0
 8003bae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d041      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003bc0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003bc4:	d02a      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003bc6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003bca:	d824      	bhi.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003bcc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003bd0:	d008      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003bd2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003bd6:	d81e      	bhi.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00a      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003bdc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003be0:	d010      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003be2:	e018      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003be4:	4b86      	ldr	r3, [pc, #536]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	4a85      	ldr	r2, [pc, #532]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bee:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bf0:	e015      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	3304      	adds	r3, #4
 8003bf6:	2100      	movs	r1, #0
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f000 fabb 	bl	8004174 <RCCEx_PLLSAI1_Config>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c02:	e00c      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	3320      	adds	r3, #32
 8003c08:	2100      	movs	r1, #0
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f000 fba6 	bl	800435c <RCCEx_PLLSAI2_Config>
 8003c10:	4603      	mov	r3, r0
 8003c12:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c14:	e003      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	74fb      	strb	r3, [r7, #19]
      break;
 8003c1a:	e000      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003c1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c1e:	7cfb      	ldrb	r3, [r7, #19]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d10b      	bne.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c24:	4b76      	ldr	r3, [pc, #472]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c2a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c32:	4973      	ldr	r1, [pc, #460]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003c3a:	e001      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c3c:	7cfb      	ldrb	r3, [r7, #19]
 8003c3e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d041      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c50:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003c54:	d02a      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003c56:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003c5a:	d824      	bhi.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c5c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c60:	d008      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003c62:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c66:	d81e      	bhi.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00a      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003c6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c70:	d010      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c72:	e018      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c74:	4b62      	ldr	r3, [pc, #392]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	4a61      	ldr	r2, [pc, #388]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c7e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c80:	e015      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	3304      	adds	r3, #4
 8003c86:	2100      	movs	r1, #0
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f000 fa73 	bl	8004174 <RCCEx_PLLSAI1_Config>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c92:	e00c      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	3320      	adds	r3, #32
 8003c98:	2100      	movs	r1, #0
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 fb5e 	bl	800435c <RCCEx_PLLSAI2_Config>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ca4:	e003      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	74fb      	strb	r3, [r7, #19]
      break;
 8003caa:	e000      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003cac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cae:	7cfb      	ldrb	r3, [r7, #19]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d10b      	bne.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003cb4:	4b52      	ldr	r3, [pc, #328]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cba:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003cc2:	494f      	ldr	r1, [pc, #316]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003cca:	e001      	b.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ccc:	7cfb      	ldrb	r3, [r7, #19]
 8003cce:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f000 80a0 	beq.w	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ce2:	4b47      	ldr	r3, [pc, #284]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ce6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e000      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00d      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cf8:	4b41      	ldr	r3, [pc, #260]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cfc:	4a40      	ldr	r2, [pc, #256]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d02:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d04:	4b3e      	ldr	r3, [pc, #248]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d0c:	60bb      	str	r3, [r7, #8]
 8003d0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d10:	2301      	movs	r3, #1
 8003d12:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d14:	4b3b      	ldr	r3, [pc, #236]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a3a      	ldr	r2, [pc, #232]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d20:	f7fd fcd0 	bl	80016c4 <HAL_GetTick>
 8003d24:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d26:	e009      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d28:	f7fd fccc 	bl	80016c4 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d902      	bls.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	74fb      	strb	r3, [r7, #19]
        break;
 8003d3a:	e005      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d3c:	4b31      	ldr	r3, [pc, #196]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d0ef      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003d48:	7cfb      	ldrb	r3, [r7, #19]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d15c      	bne.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d4e:	4b2c      	ldr	r3, [pc, #176]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d54:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d58:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d01f      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d66:	697a      	ldr	r2, [r7, #20]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d019      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d6c:	4b24      	ldr	r3, [pc, #144]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d76:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d78:	4b21      	ldr	r3, [pc, #132]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d7e:	4a20      	ldr	r2, [pc, #128]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d88:	4b1d      	ldr	r3, [pc, #116]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d8e:	4a1c      	ldr	r2, [pc, #112]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d98:	4a19      	ldr	r2, [pc, #100]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d016      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003daa:	f7fd fc8b 	bl	80016c4 <HAL_GetTick>
 8003dae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003db0:	e00b      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003db2:	f7fd fc87 	bl	80016c4 <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d902      	bls.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	74fb      	strb	r3, [r7, #19]
            break;
 8003dc8:	e006      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dca:	4b0d      	ldr	r3, [pc, #52]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dd0:	f003 0302 	and.w	r3, r3, #2
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d0ec      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003dd8:	7cfb      	ldrb	r3, [r7, #19]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10c      	bne.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dde:	4b08      	ldr	r3, [pc, #32]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003de4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dee:	4904      	ldr	r1, [pc, #16]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003df6:	e009      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003df8:	7cfb      	ldrb	r3, [r7, #19]
 8003dfa:	74bb      	strb	r3, [r7, #18]
 8003dfc:	e006      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003dfe:	bf00      	nop
 8003e00:	40021000 	.word	0x40021000
 8003e04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e08:	7cfb      	ldrb	r3, [r7, #19]
 8003e0a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e0c:	7c7b      	ldrb	r3, [r7, #17]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d105      	bne.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e12:	4b9e      	ldr	r3, [pc, #632]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e16:	4a9d      	ldr	r2, [pc, #628]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e1c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00a      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e2a:	4b98      	ldr	r3, [pc, #608]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e30:	f023 0203 	bic.w	r2, r3, #3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e38:	4994      	ldr	r1, [pc, #592]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00a      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e4c:	4b8f      	ldr	r3, [pc, #572]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e52:	f023 020c 	bic.w	r2, r3, #12
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e5a:	498c      	ldr	r1, [pc, #560]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0304 	and.w	r3, r3, #4
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d00a      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e6e:	4b87      	ldr	r3, [pc, #540]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e74:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e7c:	4983      	ldr	r1, [pc, #524]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0308 	and.w	r3, r3, #8
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d00a      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e90:	4b7e      	ldr	r3, [pc, #504]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e96:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e9e:	497b      	ldr	r1, [pc, #492]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0310 	and.w	r3, r3, #16
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00a      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003eb2:	4b76      	ldr	r3, [pc, #472]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eb8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ec0:	4972      	ldr	r1, [pc, #456]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0320 	and.w	r3, r3, #32
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00a      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ed4:	4b6d      	ldr	r3, [pc, #436]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eda:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ee2:	496a      	ldr	r1, [pc, #424]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00a      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ef6:	4b65      	ldr	r3, [pc, #404]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003efc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f04:	4961      	ldr	r1, [pc, #388]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00a      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f18:	4b5c      	ldr	r3, [pc, #368]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f1e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f26:	4959      	ldr	r1, [pc, #356]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00a      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f3a:	4b54      	ldr	r3, [pc, #336]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f40:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f48:	4950      	ldr	r1, [pc, #320]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00a      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f5c:	4b4b      	ldr	r3, [pc, #300]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f62:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f6a:	4948      	ldr	r1, [pc, #288]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00a      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f7e:	4b43      	ldr	r3, [pc, #268]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f84:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f8c:	493f      	ldr	r1, [pc, #252]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d028      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fa0:	4b3a      	ldr	r3, [pc, #232]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fa6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fae:	4937      	ldr	r1, [pc, #220]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fbe:	d106      	bne.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fc0:	4b32      	ldr	r3, [pc, #200]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	4a31      	ldr	r2, [pc, #196]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003fca:	60d3      	str	r3, [r2, #12]
 8003fcc:	e011      	b.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fd2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003fd6:	d10c      	bne.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	3304      	adds	r3, #4
 8003fdc:	2101      	movs	r1, #1
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f000 f8c8 	bl	8004174 <RCCEx_PLLSAI1_Config>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003fe8:	7cfb      	ldrb	r3, [r7, #19]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003fee:	7cfb      	ldrb	r3, [r7, #19]
 8003ff0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d028      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ffe:	4b23      	ldr	r3, [pc, #140]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004000:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004004:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800400c:	491f      	ldr	r1, [pc, #124]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800400e:	4313      	orrs	r3, r2
 8004010:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004018:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800401c:	d106      	bne.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800401e:	4b1b      	ldr	r3, [pc, #108]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	4a1a      	ldr	r2, [pc, #104]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004024:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004028:	60d3      	str	r3, [r2, #12]
 800402a:	e011      	b.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004030:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004034:	d10c      	bne.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	3304      	adds	r3, #4
 800403a:	2101      	movs	r1, #1
 800403c:	4618      	mov	r0, r3
 800403e:	f000 f899 	bl	8004174 <RCCEx_PLLSAI1_Config>
 8004042:	4603      	mov	r3, r0
 8004044:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004046:	7cfb      	ldrb	r3, [r7, #19]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800404c:	7cfb      	ldrb	r3, [r7, #19]
 800404e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d02b      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800405c:	4b0b      	ldr	r3, [pc, #44]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800405e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004062:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800406a:	4908      	ldr	r1, [pc, #32]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800406c:	4313      	orrs	r3, r2
 800406e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004076:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800407a:	d109      	bne.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800407c:	4b03      	ldr	r3, [pc, #12]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	4a02      	ldr	r2, [pc, #8]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004082:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004086:	60d3      	str	r3, [r2, #12]
 8004088:	e014      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800408a:	bf00      	nop
 800408c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004094:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004098:	d10c      	bne.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	3304      	adds	r3, #4
 800409e:	2101      	movs	r1, #1
 80040a0:	4618      	mov	r0, r3
 80040a2:	f000 f867 	bl	8004174 <RCCEx_PLLSAI1_Config>
 80040a6:	4603      	mov	r3, r0
 80040a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040aa:	7cfb      	ldrb	r3, [r7, #19]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d001      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80040b0:	7cfb      	ldrb	r3, [r7, #19]
 80040b2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d02f      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040c0:	4b2b      	ldr	r3, [pc, #172]	@ (8004170 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040c6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040ce:	4928      	ldr	r1, [pc, #160]	@ (8004170 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80040de:	d10d      	bne.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	3304      	adds	r3, #4
 80040e4:	2102      	movs	r1, #2
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 f844 	bl	8004174 <RCCEx_PLLSAI1_Config>
 80040ec:	4603      	mov	r3, r0
 80040ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040f0:	7cfb      	ldrb	r3, [r7, #19]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d014      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80040f6:	7cfb      	ldrb	r3, [r7, #19]
 80040f8:	74bb      	strb	r3, [r7, #18]
 80040fa:	e011      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004100:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004104:	d10c      	bne.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	3320      	adds	r3, #32
 800410a:	2102      	movs	r1, #2
 800410c:	4618      	mov	r0, r3
 800410e:	f000 f925 	bl	800435c <RCCEx_PLLSAI2_Config>
 8004112:	4603      	mov	r3, r0
 8004114:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004116:	7cfb      	ldrb	r3, [r7, #19]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d001      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800411c:	7cfb      	ldrb	r3, [r7, #19]
 800411e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00a      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800412c:	4b10      	ldr	r3, [pc, #64]	@ (8004170 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800412e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004132:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800413a:	490d      	ldr	r1, [pc, #52]	@ (8004170 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800413c:	4313      	orrs	r3, r2
 800413e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00b      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800414e:	4b08      	ldr	r3, [pc, #32]	@ (8004170 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004150:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004154:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800415e:	4904      	ldr	r1, [pc, #16]	@ (8004170 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004160:	4313      	orrs	r3, r2
 8004162:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004166:	7cbb      	ldrb	r3, [r7, #18]
}
 8004168:	4618      	mov	r0, r3
 800416a:	3718      	adds	r7, #24
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	40021000 	.word	0x40021000

08004174 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800417e:	2300      	movs	r3, #0
 8004180:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004182:	4b75      	ldr	r3, [pc, #468]	@ (8004358 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	f003 0303 	and.w	r3, r3, #3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d018      	beq.n	80041c0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800418e:	4b72      	ldr	r3, [pc, #456]	@ (8004358 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	f003 0203 	and.w	r2, r3, #3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	429a      	cmp	r2, r3
 800419c:	d10d      	bne.n	80041ba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
       ||
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d009      	beq.n	80041ba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80041a6:	4b6c      	ldr	r3, [pc, #432]	@ (8004358 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	091b      	lsrs	r3, r3, #4
 80041ac:	f003 0307 	and.w	r3, r3, #7
 80041b0:	1c5a      	adds	r2, r3, #1
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
       ||
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d047      	beq.n	800424a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	73fb      	strb	r3, [r7, #15]
 80041be:	e044      	b.n	800424a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2b03      	cmp	r3, #3
 80041c6:	d018      	beq.n	80041fa <RCCEx_PLLSAI1_Config+0x86>
 80041c8:	2b03      	cmp	r3, #3
 80041ca:	d825      	bhi.n	8004218 <RCCEx_PLLSAI1_Config+0xa4>
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d002      	beq.n	80041d6 <RCCEx_PLLSAI1_Config+0x62>
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d009      	beq.n	80041e8 <RCCEx_PLLSAI1_Config+0x74>
 80041d4:	e020      	b.n	8004218 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80041d6:	4b60      	ldr	r3, [pc, #384]	@ (8004358 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d11d      	bne.n	800421e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041e6:	e01a      	b.n	800421e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041e8:	4b5b      	ldr	r3, [pc, #364]	@ (8004358 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d116      	bne.n	8004222 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041f8:	e013      	b.n	8004222 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041fa:	4b57      	ldr	r3, [pc, #348]	@ (8004358 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d10f      	bne.n	8004226 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004206:	4b54      	ldr	r3, [pc, #336]	@ (8004358 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d109      	bne.n	8004226 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004216:	e006      	b.n	8004226 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	73fb      	strb	r3, [r7, #15]
      break;
 800421c:	e004      	b.n	8004228 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800421e:	bf00      	nop
 8004220:	e002      	b.n	8004228 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004222:	bf00      	nop
 8004224:	e000      	b.n	8004228 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004226:	bf00      	nop
    }

    if(status == HAL_OK)
 8004228:	7bfb      	ldrb	r3, [r7, #15]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d10d      	bne.n	800424a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800422e:	4b4a      	ldr	r3, [pc, #296]	@ (8004358 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6819      	ldr	r1, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	3b01      	subs	r3, #1
 8004240:	011b      	lsls	r3, r3, #4
 8004242:	430b      	orrs	r3, r1
 8004244:	4944      	ldr	r1, [pc, #272]	@ (8004358 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004246:	4313      	orrs	r3, r2
 8004248:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800424a:	7bfb      	ldrb	r3, [r7, #15]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d17d      	bne.n	800434c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004250:	4b41      	ldr	r3, [pc, #260]	@ (8004358 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a40      	ldr	r2, [pc, #256]	@ (8004358 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004256:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800425a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800425c:	f7fd fa32 	bl	80016c4 <HAL_GetTick>
 8004260:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004262:	e009      	b.n	8004278 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004264:	f7fd fa2e 	bl	80016c4 <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	2b02      	cmp	r3, #2
 8004270:	d902      	bls.n	8004278 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	73fb      	strb	r3, [r7, #15]
        break;
 8004276:	e005      	b.n	8004284 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004278:	4b37      	ldr	r3, [pc, #220]	@ (8004358 <RCCEx_PLLSAI1_Config+0x1e4>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1ef      	bne.n	8004264 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004284:	7bfb      	ldrb	r3, [r7, #15]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d160      	bne.n	800434c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d111      	bne.n	80042b4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004290:	4b31      	ldr	r3, [pc, #196]	@ (8004358 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004298:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	6892      	ldr	r2, [r2, #8]
 80042a0:	0211      	lsls	r1, r2, #8
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	68d2      	ldr	r2, [r2, #12]
 80042a6:	0912      	lsrs	r2, r2, #4
 80042a8:	0452      	lsls	r2, r2, #17
 80042aa:	430a      	orrs	r2, r1
 80042ac:	492a      	ldr	r1, [pc, #168]	@ (8004358 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	610b      	str	r3, [r1, #16]
 80042b2:	e027      	b.n	8004304 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d112      	bne.n	80042e0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042ba:	4b27      	ldr	r3, [pc, #156]	@ (8004358 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80042c2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	6892      	ldr	r2, [r2, #8]
 80042ca:	0211      	lsls	r1, r2, #8
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	6912      	ldr	r2, [r2, #16]
 80042d0:	0852      	lsrs	r2, r2, #1
 80042d2:	3a01      	subs	r2, #1
 80042d4:	0552      	lsls	r2, r2, #21
 80042d6:	430a      	orrs	r2, r1
 80042d8:	491f      	ldr	r1, [pc, #124]	@ (8004358 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	610b      	str	r3, [r1, #16]
 80042de:	e011      	b.n	8004304 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042e0:	4b1d      	ldr	r3, [pc, #116]	@ (8004358 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80042e8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	6892      	ldr	r2, [r2, #8]
 80042f0:	0211      	lsls	r1, r2, #8
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	6952      	ldr	r2, [r2, #20]
 80042f6:	0852      	lsrs	r2, r2, #1
 80042f8:	3a01      	subs	r2, #1
 80042fa:	0652      	lsls	r2, r2, #25
 80042fc:	430a      	orrs	r2, r1
 80042fe:	4916      	ldr	r1, [pc, #88]	@ (8004358 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004300:	4313      	orrs	r3, r2
 8004302:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004304:	4b14      	ldr	r3, [pc, #80]	@ (8004358 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a13      	ldr	r2, [pc, #76]	@ (8004358 <RCCEx_PLLSAI1_Config+0x1e4>)
 800430a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800430e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004310:	f7fd f9d8 	bl	80016c4 <HAL_GetTick>
 8004314:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004316:	e009      	b.n	800432c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004318:	f7fd f9d4 	bl	80016c4 <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b02      	cmp	r3, #2
 8004324:	d902      	bls.n	800432c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	73fb      	strb	r3, [r7, #15]
          break;
 800432a:	e005      	b.n	8004338 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800432c:	4b0a      	ldr	r3, [pc, #40]	@ (8004358 <RCCEx_PLLSAI1_Config+0x1e4>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d0ef      	beq.n	8004318 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004338:	7bfb      	ldrb	r3, [r7, #15]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d106      	bne.n	800434c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800433e:	4b06      	ldr	r3, [pc, #24]	@ (8004358 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004340:	691a      	ldr	r2, [r3, #16]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	4904      	ldr	r1, [pc, #16]	@ (8004358 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004348:	4313      	orrs	r3, r2
 800434a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800434c:	7bfb      	ldrb	r3, [r7, #15]
}
 800434e:	4618      	mov	r0, r3
 8004350:	3710      	adds	r7, #16
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	40021000 	.word	0x40021000

0800435c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004366:	2300      	movs	r3, #0
 8004368:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800436a:	4b6a      	ldr	r3, [pc, #424]	@ (8004514 <RCCEx_PLLSAI2_Config+0x1b8>)
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	f003 0303 	and.w	r3, r3, #3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d018      	beq.n	80043a8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004376:	4b67      	ldr	r3, [pc, #412]	@ (8004514 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	f003 0203 	and.w	r2, r3, #3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	429a      	cmp	r2, r3
 8004384:	d10d      	bne.n	80043a2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
       ||
 800438a:	2b00      	cmp	r3, #0
 800438c:	d009      	beq.n	80043a2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800438e:	4b61      	ldr	r3, [pc, #388]	@ (8004514 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	091b      	lsrs	r3, r3, #4
 8004394:	f003 0307 	and.w	r3, r3, #7
 8004398:	1c5a      	adds	r2, r3, #1
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
       ||
 800439e:	429a      	cmp	r2, r3
 80043a0:	d047      	beq.n	8004432 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	73fb      	strb	r3, [r7, #15]
 80043a6:	e044      	b.n	8004432 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2b03      	cmp	r3, #3
 80043ae:	d018      	beq.n	80043e2 <RCCEx_PLLSAI2_Config+0x86>
 80043b0:	2b03      	cmp	r3, #3
 80043b2:	d825      	bhi.n	8004400 <RCCEx_PLLSAI2_Config+0xa4>
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d002      	beq.n	80043be <RCCEx_PLLSAI2_Config+0x62>
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d009      	beq.n	80043d0 <RCCEx_PLLSAI2_Config+0x74>
 80043bc:	e020      	b.n	8004400 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043be:	4b55      	ldr	r3, [pc, #340]	@ (8004514 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d11d      	bne.n	8004406 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043ce:	e01a      	b.n	8004406 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043d0:	4b50      	ldr	r3, [pc, #320]	@ (8004514 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d116      	bne.n	800440a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043e0:	e013      	b.n	800440a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80043e2:	4b4c      	ldr	r3, [pc, #304]	@ (8004514 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10f      	bne.n	800440e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80043ee:	4b49      	ldr	r3, [pc, #292]	@ (8004514 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d109      	bne.n	800440e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80043fe:	e006      	b.n	800440e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	73fb      	strb	r3, [r7, #15]
      break;
 8004404:	e004      	b.n	8004410 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004406:	bf00      	nop
 8004408:	e002      	b.n	8004410 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800440a:	bf00      	nop
 800440c:	e000      	b.n	8004410 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800440e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004410:	7bfb      	ldrb	r3, [r7, #15]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d10d      	bne.n	8004432 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004416:	4b3f      	ldr	r3, [pc, #252]	@ (8004514 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6819      	ldr	r1, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	3b01      	subs	r3, #1
 8004428:	011b      	lsls	r3, r3, #4
 800442a:	430b      	orrs	r3, r1
 800442c:	4939      	ldr	r1, [pc, #228]	@ (8004514 <RCCEx_PLLSAI2_Config+0x1b8>)
 800442e:	4313      	orrs	r3, r2
 8004430:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004432:	7bfb      	ldrb	r3, [r7, #15]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d167      	bne.n	8004508 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004438:	4b36      	ldr	r3, [pc, #216]	@ (8004514 <RCCEx_PLLSAI2_Config+0x1b8>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a35      	ldr	r2, [pc, #212]	@ (8004514 <RCCEx_PLLSAI2_Config+0x1b8>)
 800443e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004442:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004444:	f7fd f93e 	bl	80016c4 <HAL_GetTick>
 8004448:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800444a:	e009      	b.n	8004460 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800444c:	f7fd f93a 	bl	80016c4 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	2b02      	cmp	r3, #2
 8004458:	d902      	bls.n	8004460 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	73fb      	strb	r3, [r7, #15]
        break;
 800445e:	e005      	b.n	800446c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004460:	4b2c      	ldr	r3, [pc, #176]	@ (8004514 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d1ef      	bne.n	800444c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800446c:	7bfb      	ldrb	r3, [r7, #15]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d14a      	bne.n	8004508 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d111      	bne.n	800449c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004478:	4b26      	ldr	r3, [pc, #152]	@ (8004514 <RCCEx_PLLSAI2_Config+0x1b8>)
 800447a:	695b      	ldr	r3, [r3, #20]
 800447c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004480:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	6892      	ldr	r2, [r2, #8]
 8004488:	0211      	lsls	r1, r2, #8
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	68d2      	ldr	r2, [r2, #12]
 800448e:	0912      	lsrs	r2, r2, #4
 8004490:	0452      	lsls	r2, r2, #17
 8004492:	430a      	orrs	r2, r1
 8004494:	491f      	ldr	r1, [pc, #124]	@ (8004514 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004496:	4313      	orrs	r3, r2
 8004498:	614b      	str	r3, [r1, #20]
 800449a:	e011      	b.n	80044c0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800449c:	4b1d      	ldr	r3, [pc, #116]	@ (8004514 <RCCEx_PLLSAI2_Config+0x1b8>)
 800449e:	695b      	ldr	r3, [r3, #20]
 80044a0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80044a4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	6892      	ldr	r2, [r2, #8]
 80044ac:	0211      	lsls	r1, r2, #8
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	6912      	ldr	r2, [r2, #16]
 80044b2:	0852      	lsrs	r2, r2, #1
 80044b4:	3a01      	subs	r2, #1
 80044b6:	0652      	lsls	r2, r2, #25
 80044b8:	430a      	orrs	r2, r1
 80044ba:	4916      	ldr	r1, [pc, #88]	@ (8004514 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80044c0:	4b14      	ldr	r3, [pc, #80]	@ (8004514 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a13      	ldr	r2, [pc, #76]	@ (8004514 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044cc:	f7fd f8fa 	bl	80016c4 <HAL_GetTick>
 80044d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80044d2:	e009      	b.n	80044e8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80044d4:	f7fd f8f6 	bl	80016c4 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d902      	bls.n	80044e8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	73fb      	strb	r3, [r7, #15]
          break;
 80044e6:	e005      	b.n	80044f4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80044e8:	4b0a      	ldr	r3, [pc, #40]	@ (8004514 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d0ef      	beq.n	80044d4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80044f4:	7bfb      	ldrb	r3, [r7, #15]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d106      	bne.n	8004508 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80044fa:	4b06      	ldr	r3, [pc, #24]	@ (8004514 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044fc:	695a      	ldr	r2, [r3, #20]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	4904      	ldr	r1, [pc, #16]	@ (8004514 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004504:	4313      	orrs	r3, r2
 8004506:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004508:	7bfb      	ldrb	r3, [r7, #15]
}
 800450a:	4618      	mov	r0, r3
 800450c:	3710      	adds	r7, #16
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	40021000 	.word	0x40021000

08004518 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d101      	bne.n	800452a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e040      	b.n	80045ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800452e:	2b00      	cmp	r3, #0
 8004530:	d106      	bne.n	8004540 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f7fc fe12 	bl	8001164 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2224      	movs	r2, #36	@ 0x24
 8004544:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f022 0201 	bic.w	r2, r2, #1
 8004554:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800455a:	2b00      	cmp	r3, #0
 800455c:	d002      	beq.n	8004564 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 fae0 	bl	8004b24 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 f825 	bl	80045b4 <UART_SetConfig>
 800456a:	4603      	mov	r3, r0
 800456c:	2b01      	cmp	r3, #1
 800456e:	d101      	bne.n	8004574 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e01b      	b.n	80045ac <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	685a      	ldr	r2, [r3, #4]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004582:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	689a      	ldr	r2, [r3, #8]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004592:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f042 0201 	orr.w	r2, r2, #1
 80045a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 fb5f 	bl	8004c68 <UART_CheckIdleState>
 80045aa:	4603      	mov	r3, r0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3708      	adds	r7, #8
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045b8:	b08a      	sub	sp, #40	@ 0x28
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045be:	2300      	movs	r3, #0
 80045c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	689a      	ldr	r2, [r3, #8]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	431a      	orrs	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	431a      	orrs	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	69db      	ldr	r3, [r3, #28]
 80045d8:	4313      	orrs	r3, r2
 80045da:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	4ba4      	ldr	r3, [pc, #656]	@ (8004874 <UART_SetConfig+0x2c0>)
 80045e4:	4013      	ands	r3, r2
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	6812      	ldr	r2, [r2, #0]
 80045ea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80045ec:	430b      	orrs	r3, r1
 80045ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	68da      	ldr	r2, [r3, #12]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	430a      	orrs	r2, r1
 8004604:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a99      	ldr	r2, [pc, #612]	@ (8004878 <UART_SetConfig+0x2c4>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d004      	beq.n	8004620 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800461c:	4313      	orrs	r3, r2
 800461e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004630:	430a      	orrs	r2, r1
 8004632:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a90      	ldr	r2, [pc, #576]	@ (800487c <UART_SetConfig+0x2c8>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d126      	bne.n	800468c <UART_SetConfig+0xd8>
 800463e:	4b90      	ldr	r3, [pc, #576]	@ (8004880 <UART_SetConfig+0x2cc>)
 8004640:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004644:	f003 0303 	and.w	r3, r3, #3
 8004648:	2b03      	cmp	r3, #3
 800464a:	d81b      	bhi.n	8004684 <UART_SetConfig+0xd0>
 800464c:	a201      	add	r2, pc, #4	@ (adr r2, 8004654 <UART_SetConfig+0xa0>)
 800464e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004652:	bf00      	nop
 8004654:	08004665 	.word	0x08004665
 8004658:	08004675 	.word	0x08004675
 800465c:	0800466d 	.word	0x0800466d
 8004660:	0800467d 	.word	0x0800467d
 8004664:	2301      	movs	r3, #1
 8004666:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800466a:	e116      	b.n	800489a <UART_SetConfig+0x2e6>
 800466c:	2302      	movs	r3, #2
 800466e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004672:	e112      	b.n	800489a <UART_SetConfig+0x2e6>
 8004674:	2304      	movs	r3, #4
 8004676:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800467a:	e10e      	b.n	800489a <UART_SetConfig+0x2e6>
 800467c:	2308      	movs	r3, #8
 800467e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004682:	e10a      	b.n	800489a <UART_SetConfig+0x2e6>
 8004684:	2310      	movs	r3, #16
 8004686:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800468a:	e106      	b.n	800489a <UART_SetConfig+0x2e6>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a7c      	ldr	r2, [pc, #496]	@ (8004884 <UART_SetConfig+0x2d0>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d138      	bne.n	8004708 <UART_SetConfig+0x154>
 8004696:	4b7a      	ldr	r3, [pc, #488]	@ (8004880 <UART_SetConfig+0x2cc>)
 8004698:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800469c:	f003 030c 	and.w	r3, r3, #12
 80046a0:	2b0c      	cmp	r3, #12
 80046a2:	d82d      	bhi.n	8004700 <UART_SetConfig+0x14c>
 80046a4:	a201      	add	r2, pc, #4	@ (adr r2, 80046ac <UART_SetConfig+0xf8>)
 80046a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046aa:	bf00      	nop
 80046ac:	080046e1 	.word	0x080046e1
 80046b0:	08004701 	.word	0x08004701
 80046b4:	08004701 	.word	0x08004701
 80046b8:	08004701 	.word	0x08004701
 80046bc:	080046f1 	.word	0x080046f1
 80046c0:	08004701 	.word	0x08004701
 80046c4:	08004701 	.word	0x08004701
 80046c8:	08004701 	.word	0x08004701
 80046cc:	080046e9 	.word	0x080046e9
 80046d0:	08004701 	.word	0x08004701
 80046d4:	08004701 	.word	0x08004701
 80046d8:	08004701 	.word	0x08004701
 80046dc:	080046f9 	.word	0x080046f9
 80046e0:	2300      	movs	r3, #0
 80046e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046e6:	e0d8      	b.n	800489a <UART_SetConfig+0x2e6>
 80046e8:	2302      	movs	r3, #2
 80046ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046ee:	e0d4      	b.n	800489a <UART_SetConfig+0x2e6>
 80046f0:	2304      	movs	r3, #4
 80046f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046f6:	e0d0      	b.n	800489a <UART_SetConfig+0x2e6>
 80046f8:	2308      	movs	r3, #8
 80046fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046fe:	e0cc      	b.n	800489a <UART_SetConfig+0x2e6>
 8004700:	2310      	movs	r3, #16
 8004702:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004706:	e0c8      	b.n	800489a <UART_SetConfig+0x2e6>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a5e      	ldr	r2, [pc, #376]	@ (8004888 <UART_SetConfig+0x2d4>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d125      	bne.n	800475e <UART_SetConfig+0x1aa>
 8004712:	4b5b      	ldr	r3, [pc, #364]	@ (8004880 <UART_SetConfig+0x2cc>)
 8004714:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004718:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800471c:	2b30      	cmp	r3, #48	@ 0x30
 800471e:	d016      	beq.n	800474e <UART_SetConfig+0x19a>
 8004720:	2b30      	cmp	r3, #48	@ 0x30
 8004722:	d818      	bhi.n	8004756 <UART_SetConfig+0x1a2>
 8004724:	2b20      	cmp	r3, #32
 8004726:	d00a      	beq.n	800473e <UART_SetConfig+0x18a>
 8004728:	2b20      	cmp	r3, #32
 800472a:	d814      	bhi.n	8004756 <UART_SetConfig+0x1a2>
 800472c:	2b00      	cmp	r3, #0
 800472e:	d002      	beq.n	8004736 <UART_SetConfig+0x182>
 8004730:	2b10      	cmp	r3, #16
 8004732:	d008      	beq.n	8004746 <UART_SetConfig+0x192>
 8004734:	e00f      	b.n	8004756 <UART_SetConfig+0x1a2>
 8004736:	2300      	movs	r3, #0
 8004738:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800473c:	e0ad      	b.n	800489a <UART_SetConfig+0x2e6>
 800473e:	2302      	movs	r3, #2
 8004740:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004744:	e0a9      	b.n	800489a <UART_SetConfig+0x2e6>
 8004746:	2304      	movs	r3, #4
 8004748:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800474c:	e0a5      	b.n	800489a <UART_SetConfig+0x2e6>
 800474e:	2308      	movs	r3, #8
 8004750:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004754:	e0a1      	b.n	800489a <UART_SetConfig+0x2e6>
 8004756:	2310      	movs	r3, #16
 8004758:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800475c:	e09d      	b.n	800489a <UART_SetConfig+0x2e6>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a4a      	ldr	r2, [pc, #296]	@ (800488c <UART_SetConfig+0x2d8>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d125      	bne.n	80047b4 <UART_SetConfig+0x200>
 8004768:	4b45      	ldr	r3, [pc, #276]	@ (8004880 <UART_SetConfig+0x2cc>)
 800476a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800476e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004772:	2bc0      	cmp	r3, #192	@ 0xc0
 8004774:	d016      	beq.n	80047a4 <UART_SetConfig+0x1f0>
 8004776:	2bc0      	cmp	r3, #192	@ 0xc0
 8004778:	d818      	bhi.n	80047ac <UART_SetConfig+0x1f8>
 800477a:	2b80      	cmp	r3, #128	@ 0x80
 800477c:	d00a      	beq.n	8004794 <UART_SetConfig+0x1e0>
 800477e:	2b80      	cmp	r3, #128	@ 0x80
 8004780:	d814      	bhi.n	80047ac <UART_SetConfig+0x1f8>
 8004782:	2b00      	cmp	r3, #0
 8004784:	d002      	beq.n	800478c <UART_SetConfig+0x1d8>
 8004786:	2b40      	cmp	r3, #64	@ 0x40
 8004788:	d008      	beq.n	800479c <UART_SetConfig+0x1e8>
 800478a:	e00f      	b.n	80047ac <UART_SetConfig+0x1f8>
 800478c:	2300      	movs	r3, #0
 800478e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004792:	e082      	b.n	800489a <UART_SetConfig+0x2e6>
 8004794:	2302      	movs	r3, #2
 8004796:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800479a:	e07e      	b.n	800489a <UART_SetConfig+0x2e6>
 800479c:	2304      	movs	r3, #4
 800479e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047a2:	e07a      	b.n	800489a <UART_SetConfig+0x2e6>
 80047a4:	2308      	movs	r3, #8
 80047a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047aa:	e076      	b.n	800489a <UART_SetConfig+0x2e6>
 80047ac:	2310      	movs	r3, #16
 80047ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047b2:	e072      	b.n	800489a <UART_SetConfig+0x2e6>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a35      	ldr	r2, [pc, #212]	@ (8004890 <UART_SetConfig+0x2dc>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d12a      	bne.n	8004814 <UART_SetConfig+0x260>
 80047be:	4b30      	ldr	r3, [pc, #192]	@ (8004880 <UART_SetConfig+0x2cc>)
 80047c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047cc:	d01a      	beq.n	8004804 <UART_SetConfig+0x250>
 80047ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047d2:	d81b      	bhi.n	800480c <UART_SetConfig+0x258>
 80047d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047d8:	d00c      	beq.n	80047f4 <UART_SetConfig+0x240>
 80047da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047de:	d815      	bhi.n	800480c <UART_SetConfig+0x258>
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d003      	beq.n	80047ec <UART_SetConfig+0x238>
 80047e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047e8:	d008      	beq.n	80047fc <UART_SetConfig+0x248>
 80047ea:	e00f      	b.n	800480c <UART_SetConfig+0x258>
 80047ec:	2300      	movs	r3, #0
 80047ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047f2:	e052      	b.n	800489a <UART_SetConfig+0x2e6>
 80047f4:	2302      	movs	r3, #2
 80047f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047fa:	e04e      	b.n	800489a <UART_SetConfig+0x2e6>
 80047fc:	2304      	movs	r3, #4
 80047fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004802:	e04a      	b.n	800489a <UART_SetConfig+0x2e6>
 8004804:	2308      	movs	r3, #8
 8004806:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800480a:	e046      	b.n	800489a <UART_SetConfig+0x2e6>
 800480c:	2310      	movs	r3, #16
 800480e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004812:	e042      	b.n	800489a <UART_SetConfig+0x2e6>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a17      	ldr	r2, [pc, #92]	@ (8004878 <UART_SetConfig+0x2c4>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d13a      	bne.n	8004894 <UART_SetConfig+0x2e0>
 800481e:	4b18      	ldr	r3, [pc, #96]	@ (8004880 <UART_SetConfig+0x2cc>)
 8004820:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004824:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004828:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800482c:	d01a      	beq.n	8004864 <UART_SetConfig+0x2b0>
 800482e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004832:	d81b      	bhi.n	800486c <UART_SetConfig+0x2b8>
 8004834:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004838:	d00c      	beq.n	8004854 <UART_SetConfig+0x2a0>
 800483a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800483e:	d815      	bhi.n	800486c <UART_SetConfig+0x2b8>
 8004840:	2b00      	cmp	r3, #0
 8004842:	d003      	beq.n	800484c <UART_SetConfig+0x298>
 8004844:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004848:	d008      	beq.n	800485c <UART_SetConfig+0x2a8>
 800484a:	e00f      	b.n	800486c <UART_SetConfig+0x2b8>
 800484c:	2300      	movs	r3, #0
 800484e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004852:	e022      	b.n	800489a <UART_SetConfig+0x2e6>
 8004854:	2302      	movs	r3, #2
 8004856:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800485a:	e01e      	b.n	800489a <UART_SetConfig+0x2e6>
 800485c:	2304      	movs	r3, #4
 800485e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004862:	e01a      	b.n	800489a <UART_SetConfig+0x2e6>
 8004864:	2308      	movs	r3, #8
 8004866:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800486a:	e016      	b.n	800489a <UART_SetConfig+0x2e6>
 800486c:	2310      	movs	r3, #16
 800486e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004872:	e012      	b.n	800489a <UART_SetConfig+0x2e6>
 8004874:	efff69f3 	.word	0xefff69f3
 8004878:	40008000 	.word	0x40008000
 800487c:	40013800 	.word	0x40013800
 8004880:	40021000 	.word	0x40021000
 8004884:	40004400 	.word	0x40004400
 8004888:	40004800 	.word	0x40004800
 800488c:	40004c00 	.word	0x40004c00
 8004890:	40005000 	.word	0x40005000
 8004894:	2310      	movs	r3, #16
 8004896:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a9f      	ldr	r2, [pc, #636]	@ (8004b1c <UART_SetConfig+0x568>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d17a      	bne.n	800499a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80048a4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80048a8:	2b08      	cmp	r3, #8
 80048aa:	d824      	bhi.n	80048f6 <UART_SetConfig+0x342>
 80048ac:	a201      	add	r2, pc, #4	@ (adr r2, 80048b4 <UART_SetConfig+0x300>)
 80048ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b2:	bf00      	nop
 80048b4:	080048d9 	.word	0x080048d9
 80048b8:	080048f7 	.word	0x080048f7
 80048bc:	080048e1 	.word	0x080048e1
 80048c0:	080048f7 	.word	0x080048f7
 80048c4:	080048e7 	.word	0x080048e7
 80048c8:	080048f7 	.word	0x080048f7
 80048cc:	080048f7 	.word	0x080048f7
 80048d0:	080048f7 	.word	0x080048f7
 80048d4:	080048ef 	.word	0x080048ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048d8:	f7ff f8d6 	bl	8003a88 <HAL_RCC_GetPCLK1Freq>
 80048dc:	61f8      	str	r0, [r7, #28]
        break;
 80048de:	e010      	b.n	8004902 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048e0:	4b8f      	ldr	r3, [pc, #572]	@ (8004b20 <UART_SetConfig+0x56c>)
 80048e2:	61fb      	str	r3, [r7, #28]
        break;
 80048e4:	e00d      	b.n	8004902 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048e6:	f7ff f837 	bl	8003958 <HAL_RCC_GetSysClockFreq>
 80048ea:	61f8      	str	r0, [r7, #28]
        break;
 80048ec:	e009      	b.n	8004902 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048f2:	61fb      	str	r3, [r7, #28]
        break;
 80048f4:	e005      	b.n	8004902 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80048f6:	2300      	movs	r3, #0
 80048f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004900:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	2b00      	cmp	r3, #0
 8004906:	f000 80fb 	beq.w	8004b00 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	685a      	ldr	r2, [r3, #4]
 800490e:	4613      	mov	r3, r2
 8004910:	005b      	lsls	r3, r3, #1
 8004912:	4413      	add	r3, r2
 8004914:	69fa      	ldr	r2, [r7, #28]
 8004916:	429a      	cmp	r2, r3
 8004918:	d305      	bcc.n	8004926 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004920:	69fa      	ldr	r2, [r7, #28]
 8004922:	429a      	cmp	r2, r3
 8004924:	d903      	bls.n	800492e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800492c:	e0e8      	b.n	8004b00 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	2200      	movs	r2, #0
 8004932:	461c      	mov	r4, r3
 8004934:	4615      	mov	r5, r2
 8004936:	f04f 0200 	mov.w	r2, #0
 800493a:	f04f 0300 	mov.w	r3, #0
 800493e:	022b      	lsls	r3, r5, #8
 8004940:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004944:	0222      	lsls	r2, r4, #8
 8004946:	68f9      	ldr	r1, [r7, #12]
 8004948:	6849      	ldr	r1, [r1, #4]
 800494a:	0849      	lsrs	r1, r1, #1
 800494c:	2000      	movs	r0, #0
 800494e:	4688      	mov	r8, r1
 8004950:	4681      	mov	r9, r0
 8004952:	eb12 0a08 	adds.w	sl, r2, r8
 8004956:	eb43 0b09 	adc.w	fp, r3, r9
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	603b      	str	r3, [r7, #0]
 8004962:	607a      	str	r2, [r7, #4]
 8004964:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004968:	4650      	mov	r0, sl
 800496a:	4659      	mov	r1, fp
 800496c:	f7fb fc80 	bl	8000270 <__aeabi_uldivmod>
 8004970:	4602      	mov	r2, r0
 8004972:	460b      	mov	r3, r1
 8004974:	4613      	mov	r3, r2
 8004976:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800497e:	d308      	bcc.n	8004992 <UART_SetConfig+0x3de>
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004986:	d204      	bcs.n	8004992 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	69ba      	ldr	r2, [r7, #24]
 800498e:	60da      	str	r2, [r3, #12]
 8004990:	e0b6      	b.n	8004b00 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004998:	e0b2      	b.n	8004b00 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	69db      	ldr	r3, [r3, #28]
 800499e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049a2:	d15e      	bne.n	8004a62 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80049a4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80049a8:	2b08      	cmp	r3, #8
 80049aa:	d828      	bhi.n	80049fe <UART_SetConfig+0x44a>
 80049ac:	a201      	add	r2, pc, #4	@ (adr r2, 80049b4 <UART_SetConfig+0x400>)
 80049ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b2:	bf00      	nop
 80049b4:	080049d9 	.word	0x080049d9
 80049b8:	080049e1 	.word	0x080049e1
 80049bc:	080049e9 	.word	0x080049e9
 80049c0:	080049ff 	.word	0x080049ff
 80049c4:	080049ef 	.word	0x080049ef
 80049c8:	080049ff 	.word	0x080049ff
 80049cc:	080049ff 	.word	0x080049ff
 80049d0:	080049ff 	.word	0x080049ff
 80049d4:	080049f7 	.word	0x080049f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049d8:	f7ff f856 	bl	8003a88 <HAL_RCC_GetPCLK1Freq>
 80049dc:	61f8      	str	r0, [r7, #28]
        break;
 80049de:	e014      	b.n	8004a0a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049e0:	f7ff f868 	bl	8003ab4 <HAL_RCC_GetPCLK2Freq>
 80049e4:	61f8      	str	r0, [r7, #28]
        break;
 80049e6:	e010      	b.n	8004a0a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049e8:	4b4d      	ldr	r3, [pc, #308]	@ (8004b20 <UART_SetConfig+0x56c>)
 80049ea:	61fb      	str	r3, [r7, #28]
        break;
 80049ec:	e00d      	b.n	8004a0a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049ee:	f7fe ffb3 	bl	8003958 <HAL_RCC_GetSysClockFreq>
 80049f2:	61f8      	str	r0, [r7, #28]
        break;
 80049f4:	e009      	b.n	8004a0a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049fa:	61fb      	str	r3, [r7, #28]
        break;
 80049fc:	e005      	b.n	8004a0a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80049fe:	2300      	movs	r3, #0
 8004a00:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004a08:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d077      	beq.n	8004b00 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	005a      	lsls	r2, r3, #1
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	085b      	lsrs	r3, r3, #1
 8004a1a:	441a      	add	r2, r3
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a24:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	2b0f      	cmp	r3, #15
 8004a2a:	d916      	bls.n	8004a5a <UART_SetConfig+0x4a6>
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a32:	d212      	bcs.n	8004a5a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	f023 030f 	bic.w	r3, r3, #15
 8004a3c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	085b      	lsrs	r3, r3, #1
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	f003 0307 	and.w	r3, r3, #7
 8004a48:	b29a      	uxth	r2, r3
 8004a4a:	8afb      	ldrh	r3, [r7, #22]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	8afa      	ldrh	r2, [r7, #22]
 8004a56:	60da      	str	r2, [r3, #12]
 8004a58:	e052      	b.n	8004b00 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004a60:	e04e      	b.n	8004b00 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a62:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004a66:	2b08      	cmp	r3, #8
 8004a68:	d827      	bhi.n	8004aba <UART_SetConfig+0x506>
 8004a6a:	a201      	add	r2, pc, #4	@ (adr r2, 8004a70 <UART_SetConfig+0x4bc>)
 8004a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a70:	08004a95 	.word	0x08004a95
 8004a74:	08004a9d 	.word	0x08004a9d
 8004a78:	08004aa5 	.word	0x08004aa5
 8004a7c:	08004abb 	.word	0x08004abb
 8004a80:	08004aab 	.word	0x08004aab
 8004a84:	08004abb 	.word	0x08004abb
 8004a88:	08004abb 	.word	0x08004abb
 8004a8c:	08004abb 	.word	0x08004abb
 8004a90:	08004ab3 	.word	0x08004ab3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a94:	f7fe fff8 	bl	8003a88 <HAL_RCC_GetPCLK1Freq>
 8004a98:	61f8      	str	r0, [r7, #28]
        break;
 8004a9a:	e014      	b.n	8004ac6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a9c:	f7ff f80a 	bl	8003ab4 <HAL_RCC_GetPCLK2Freq>
 8004aa0:	61f8      	str	r0, [r7, #28]
        break;
 8004aa2:	e010      	b.n	8004ac6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004aa4:	4b1e      	ldr	r3, [pc, #120]	@ (8004b20 <UART_SetConfig+0x56c>)
 8004aa6:	61fb      	str	r3, [r7, #28]
        break;
 8004aa8:	e00d      	b.n	8004ac6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004aaa:	f7fe ff55 	bl	8003958 <HAL_RCC_GetSysClockFreq>
 8004aae:	61f8      	str	r0, [r7, #28]
        break;
 8004ab0:	e009      	b.n	8004ac6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ab2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ab6:	61fb      	str	r3, [r7, #28]
        break;
 8004ab8:	e005      	b.n	8004ac6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004aba:	2300      	movs	r3, #0
 8004abc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004ac4:	bf00      	nop
    }

    if (pclk != 0U)
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d019      	beq.n	8004b00 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	085a      	lsrs	r2, r3, #1
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	441a      	add	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ade:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	2b0f      	cmp	r3, #15
 8004ae4:	d909      	bls.n	8004afa <UART_SetConfig+0x546>
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004aec:	d205      	bcs.n	8004afa <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	b29a      	uxth	r2, r3
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	60da      	str	r2, [r3, #12]
 8004af8:	e002      	b.n	8004b00 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004b0c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3728      	adds	r7, #40	@ 0x28
 8004b14:	46bd      	mov	sp, r7
 8004b16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b1a:	bf00      	nop
 8004b1c:	40008000 	.word	0x40008000
 8004b20:	00f42400 	.word	0x00f42400

08004b24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b30:	f003 0308 	and.w	r3, r3, #8
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d00a      	beq.n	8004b4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00a      	beq.n	8004b70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b74:	f003 0302 	and.w	r3, r3, #2
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00a      	beq.n	8004b92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b96:	f003 0304 	and.w	r3, r3, #4
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00a      	beq.n	8004bb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb8:	f003 0310 	and.w	r3, r3, #16
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d00a      	beq.n	8004bd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bda:	f003 0320 	and.w	r3, r3, #32
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00a      	beq.n	8004bf8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	430a      	orrs	r2, r1
 8004bf6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d01a      	beq.n	8004c3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	430a      	orrs	r2, r1
 8004c18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c22:	d10a      	bne.n	8004c3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	430a      	orrs	r2, r1
 8004c38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00a      	beq.n	8004c5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	430a      	orrs	r2, r1
 8004c5a:	605a      	str	r2, [r3, #4]
  }
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b098      	sub	sp, #96	@ 0x60
 8004c6c:	af02      	add	r7, sp, #8
 8004c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c78:	f7fc fd24 	bl	80016c4 <HAL_GetTick>
 8004c7c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0308 	and.w	r3, r3, #8
 8004c88:	2b08      	cmp	r3, #8
 8004c8a:	d12e      	bne.n	8004cea <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c8c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004c90:	9300      	str	r3, [sp, #0]
 8004c92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c94:	2200      	movs	r2, #0
 8004c96:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 f88c 	bl	8004db8 <UART_WaitOnFlagUntilTimeout>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d021      	beq.n	8004cea <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cae:	e853 3f00 	ldrex	r3, [r3]
 8004cb2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004cb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cb6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004cba:	653b      	str	r3, [r7, #80]	@ 0x50
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004cc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cc6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004cca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ccc:	e841 2300 	strex	r3, r2, [r1]
 8004cd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004cd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1e6      	bne.n	8004ca6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2220      	movs	r2, #32
 8004cdc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e062      	b.n	8004db0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0304 	and.w	r3, r3, #4
 8004cf4:	2b04      	cmp	r3, #4
 8004cf6:	d149      	bne.n	8004d8c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cf8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004cfc:	9300      	str	r3, [sp, #0]
 8004cfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d00:	2200      	movs	r2, #0
 8004d02:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 f856 	bl	8004db8 <UART_WaitOnFlagUntilTimeout>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d03c      	beq.n	8004d8c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d1a:	e853 3f00 	ldrex	r3, [r3]
 8004d1e:	623b      	str	r3, [r7, #32]
   return(result);
 8004d20:	6a3b      	ldr	r3, [r7, #32]
 8004d22:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d30:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d32:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d34:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d38:	e841 2300 	strex	r3, r2, [r1]
 8004d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d1e6      	bne.n	8004d12 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	3308      	adds	r3, #8
 8004d4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	e853 3f00 	ldrex	r3, [r3]
 8004d52:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f023 0301 	bic.w	r3, r3, #1
 8004d5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	3308      	adds	r3, #8
 8004d62:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d64:	61fa      	str	r2, [r7, #28]
 8004d66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d68:	69b9      	ldr	r1, [r7, #24]
 8004d6a:	69fa      	ldr	r2, [r7, #28]
 8004d6c:	e841 2300 	strex	r3, r2, [r1]
 8004d70:	617b      	str	r3, [r7, #20]
   return(result);
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d1e5      	bne.n	8004d44 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2220      	movs	r2, #32
 8004d7c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e011      	b.n	8004db0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2220      	movs	r2, #32
 8004d90:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2220      	movs	r2, #32
 8004d96:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3758      	adds	r7, #88	@ 0x58
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	603b      	str	r3, [r7, #0]
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dc8:	e04f      	b.n	8004e6a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd0:	d04b      	beq.n	8004e6a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dd2:	f7fc fc77 	bl	80016c4 <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	69ba      	ldr	r2, [r7, #24]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d302      	bcc.n	8004de8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d101      	bne.n	8004dec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004de8:	2303      	movs	r3, #3
 8004dea:	e04e      	b.n	8004e8a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0304 	and.w	r3, r3, #4
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d037      	beq.n	8004e6a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	2b80      	cmp	r3, #128	@ 0x80
 8004dfe:	d034      	beq.n	8004e6a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	2b40      	cmp	r3, #64	@ 0x40
 8004e04:	d031      	beq.n	8004e6a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	69db      	ldr	r3, [r3, #28]
 8004e0c:	f003 0308 	and.w	r3, r3, #8
 8004e10:	2b08      	cmp	r3, #8
 8004e12:	d110      	bne.n	8004e36 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2208      	movs	r2, #8
 8004e1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e1c:	68f8      	ldr	r0, [r7, #12]
 8004e1e:	f000 f838 	bl	8004e92 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2208      	movs	r2, #8
 8004e26:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e029      	b.n	8004e8a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	69db      	ldr	r3, [r3, #28]
 8004e3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e44:	d111      	bne.n	8004e6a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004e4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	f000 f81e 	bl	8004e92 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2220      	movs	r2, #32
 8004e5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e00f      	b.n	8004e8a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	69da      	ldr	r2, [r3, #28]
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	4013      	ands	r3, r2
 8004e74:	68ba      	ldr	r2, [r7, #8]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	bf0c      	ite	eq
 8004e7a:	2301      	moveq	r3, #1
 8004e7c:	2300      	movne	r3, #0
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	461a      	mov	r2, r3
 8004e82:	79fb      	ldrb	r3, [r7, #7]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d0a0      	beq.n	8004dca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3710      	adds	r7, #16
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e92:	b480      	push	{r7}
 8004e94:	b095      	sub	sp, #84	@ 0x54
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ea2:	e853 3f00 	ldrex	r3, [r3]
 8004ea6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eaa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004eae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004eb8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004eba:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ebc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004ebe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ec0:	e841 2300 	strex	r3, r2, [r1]
 8004ec4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1e6      	bne.n	8004e9a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	3308      	adds	r3, #8
 8004ed2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed4:	6a3b      	ldr	r3, [r7, #32]
 8004ed6:	e853 3f00 	ldrex	r3, [r3]
 8004eda:	61fb      	str	r3, [r7, #28]
   return(result);
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	f023 0301 	bic.w	r3, r3, #1
 8004ee2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	3308      	adds	r3, #8
 8004eea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004eec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004eee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ef2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ef4:	e841 2300 	strex	r3, r2, [r1]
 8004ef8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d1e5      	bne.n	8004ecc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d118      	bne.n	8004f3a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	e853 3f00 	ldrex	r3, [r3]
 8004f14:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	f023 0310 	bic.w	r3, r3, #16
 8004f1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	461a      	mov	r2, r3
 8004f24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f26:	61bb      	str	r3, [r7, #24]
 8004f28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2a:	6979      	ldr	r1, [r7, #20]
 8004f2c:	69ba      	ldr	r2, [r7, #24]
 8004f2e:	e841 2300 	strex	r3, r2, [r1]
 8004f32:	613b      	str	r3, [r7, #16]
   return(result);
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d1e6      	bne.n	8004f08 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2220      	movs	r2, #32
 8004f3e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004f4e:	bf00      	nop
 8004f50:	3754      	adds	r7, #84	@ 0x54
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr
	...

08004f5c <std>:
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	b510      	push	{r4, lr}
 8004f60:	4604      	mov	r4, r0
 8004f62:	e9c0 3300 	strd	r3, r3, [r0]
 8004f66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f6a:	6083      	str	r3, [r0, #8]
 8004f6c:	8181      	strh	r1, [r0, #12]
 8004f6e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004f70:	81c2      	strh	r2, [r0, #14]
 8004f72:	6183      	str	r3, [r0, #24]
 8004f74:	4619      	mov	r1, r3
 8004f76:	2208      	movs	r2, #8
 8004f78:	305c      	adds	r0, #92	@ 0x5c
 8004f7a:	f000 f9f9 	bl	8005370 <memset>
 8004f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8004fb4 <std+0x58>)
 8004f80:	6263      	str	r3, [r4, #36]	@ 0x24
 8004f82:	4b0d      	ldr	r3, [pc, #52]	@ (8004fb8 <std+0x5c>)
 8004f84:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004f86:	4b0d      	ldr	r3, [pc, #52]	@ (8004fbc <std+0x60>)
 8004f88:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004f8a:	4b0d      	ldr	r3, [pc, #52]	@ (8004fc0 <std+0x64>)
 8004f8c:	6323      	str	r3, [r4, #48]	@ 0x30
 8004f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8004fc4 <std+0x68>)
 8004f90:	6224      	str	r4, [r4, #32]
 8004f92:	429c      	cmp	r4, r3
 8004f94:	d006      	beq.n	8004fa4 <std+0x48>
 8004f96:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004f9a:	4294      	cmp	r4, r2
 8004f9c:	d002      	beq.n	8004fa4 <std+0x48>
 8004f9e:	33d0      	adds	r3, #208	@ 0xd0
 8004fa0:	429c      	cmp	r4, r3
 8004fa2:	d105      	bne.n	8004fb0 <std+0x54>
 8004fa4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fac:	f000 ba58 	b.w	8005460 <__retarget_lock_init_recursive>
 8004fb0:	bd10      	pop	{r4, pc}
 8004fb2:	bf00      	nop
 8004fb4:	080051c1 	.word	0x080051c1
 8004fb8:	080051e3 	.word	0x080051e3
 8004fbc:	0800521b 	.word	0x0800521b
 8004fc0:	0800523f 	.word	0x0800523f
 8004fc4:	200003d8 	.word	0x200003d8

08004fc8 <stdio_exit_handler>:
 8004fc8:	4a02      	ldr	r2, [pc, #8]	@ (8004fd4 <stdio_exit_handler+0xc>)
 8004fca:	4903      	ldr	r1, [pc, #12]	@ (8004fd8 <stdio_exit_handler+0x10>)
 8004fcc:	4803      	ldr	r0, [pc, #12]	@ (8004fdc <stdio_exit_handler+0x14>)
 8004fce:	f000 b869 	b.w	80050a4 <_fwalk_sglue>
 8004fd2:	bf00      	nop
 8004fd4:	20000010 	.word	0x20000010
 8004fd8:	08005cfd 	.word	0x08005cfd
 8004fdc:	20000020 	.word	0x20000020

08004fe0 <cleanup_stdio>:
 8004fe0:	6841      	ldr	r1, [r0, #4]
 8004fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8005014 <cleanup_stdio+0x34>)
 8004fe4:	4299      	cmp	r1, r3
 8004fe6:	b510      	push	{r4, lr}
 8004fe8:	4604      	mov	r4, r0
 8004fea:	d001      	beq.n	8004ff0 <cleanup_stdio+0x10>
 8004fec:	f000 fe86 	bl	8005cfc <_fflush_r>
 8004ff0:	68a1      	ldr	r1, [r4, #8]
 8004ff2:	4b09      	ldr	r3, [pc, #36]	@ (8005018 <cleanup_stdio+0x38>)
 8004ff4:	4299      	cmp	r1, r3
 8004ff6:	d002      	beq.n	8004ffe <cleanup_stdio+0x1e>
 8004ff8:	4620      	mov	r0, r4
 8004ffa:	f000 fe7f 	bl	8005cfc <_fflush_r>
 8004ffe:	68e1      	ldr	r1, [r4, #12]
 8005000:	4b06      	ldr	r3, [pc, #24]	@ (800501c <cleanup_stdio+0x3c>)
 8005002:	4299      	cmp	r1, r3
 8005004:	d004      	beq.n	8005010 <cleanup_stdio+0x30>
 8005006:	4620      	mov	r0, r4
 8005008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800500c:	f000 be76 	b.w	8005cfc <_fflush_r>
 8005010:	bd10      	pop	{r4, pc}
 8005012:	bf00      	nop
 8005014:	200003d8 	.word	0x200003d8
 8005018:	20000440 	.word	0x20000440
 800501c:	200004a8 	.word	0x200004a8

08005020 <global_stdio_init.part.0>:
 8005020:	b510      	push	{r4, lr}
 8005022:	4b0b      	ldr	r3, [pc, #44]	@ (8005050 <global_stdio_init.part.0+0x30>)
 8005024:	4c0b      	ldr	r4, [pc, #44]	@ (8005054 <global_stdio_init.part.0+0x34>)
 8005026:	4a0c      	ldr	r2, [pc, #48]	@ (8005058 <global_stdio_init.part.0+0x38>)
 8005028:	601a      	str	r2, [r3, #0]
 800502a:	4620      	mov	r0, r4
 800502c:	2200      	movs	r2, #0
 800502e:	2104      	movs	r1, #4
 8005030:	f7ff ff94 	bl	8004f5c <std>
 8005034:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005038:	2201      	movs	r2, #1
 800503a:	2109      	movs	r1, #9
 800503c:	f7ff ff8e 	bl	8004f5c <std>
 8005040:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005044:	2202      	movs	r2, #2
 8005046:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800504a:	2112      	movs	r1, #18
 800504c:	f7ff bf86 	b.w	8004f5c <std>
 8005050:	20000510 	.word	0x20000510
 8005054:	200003d8 	.word	0x200003d8
 8005058:	08004fc9 	.word	0x08004fc9

0800505c <__sfp_lock_acquire>:
 800505c:	4801      	ldr	r0, [pc, #4]	@ (8005064 <__sfp_lock_acquire+0x8>)
 800505e:	f000 ba00 	b.w	8005462 <__retarget_lock_acquire_recursive>
 8005062:	bf00      	nop
 8005064:	20000519 	.word	0x20000519

08005068 <__sfp_lock_release>:
 8005068:	4801      	ldr	r0, [pc, #4]	@ (8005070 <__sfp_lock_release+0x8>)
 800506a:	f000 b9fb 	b.w	8005464 <__retarget_lock_release_recursive>
 800506e:	bf00      	nop
 8005070:	20000519 	.word	0x20000519

08005074 <__sinit>:
 8005074:	b510      	push	{r4, lr}
 8005076:	4604      	mov	r4, r0
 8005078:	f7ff fff0 	bl	800505c <__sfp_lock_acquire>
 800507c:	6a23      	ldr	r3, [r4, #32]
 800507e:	b11b      	cbz	r3, 8005088 <__sinit+0x14>
 8005080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005084:	f7ff bff0 	b.w	8005068 <__sfp_lock_release>
 8005088:	4b04      	ldr	r3, [pc, #16]	@ (800509c <__sinit+0x28>)
 800508a:	6223      	str	r3, [r4, #32]
 800508c:	4b04      	ldr	r3, [pc, #16]	@ (80050a0 <__sinit+0x2c>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d1f5      	bne.n	8005080 <__sinit+0xc>
 8005094:	f7ff ffc4 	bl	8005020 <global_stdio_init.part.0>
 8005098:	e7f2      	b.n	8005080 <__sinit+0xc>
 800509a:	bf00      	nop
 800509c:	08004fe1 	.word	0x08004fe1
 80050a0:	20000510 	.word	0x20000510

080050a4 <_fwalk_sglue>:
 80050a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050a8:	4607      	mov	r7, r0
 80050aa:	4688      	mov	r8, r1
 80050ac:	4614      	mov	r4, r2
 80050ae:	2600      	movs	r6, #0
 80050b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80050b4:	f1b9 0901 	subs.w	r9, r9, #1
 80050b8:	d505      	bpl.n	80050c6 <_fwalk_sglue+0x22>
 80050ba:	6824      	ldr	r4, [r4, #0]
 80050bc:	2c00      	cmp	r4, #0
 80050be:	d1f7      	bne.n	80050b0 <_fwalk_sglue+0xc>
 80050c0:	4630      	mov	r0, r6
 80050c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050c6:	89ab      	ldrh	r3, [r5, #12]
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d907      	bls.n	80050dc <_fwalk_sglue+0x38>
 80050cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80050d0:	3301      	adds	r3, #1
 80050d2:	d003      	beq.n	80050dc <_fwalk_sglue+0x38>
 80050d4:	4629      	mov	r1, r5
 80050d6:	4638      	mov	r0, r7
 80050d8:	47c0      	blx	r8
 80050da:	4306      	orrs	r6, r0
 80050dc:	3568      	adds	r5, #104	@ 0x68
 80050de:	e7e9      	b.n	80050b4 <_fwalk_sglue+0x10>

080050e0 <iprintf>:
 80050e0:	b40f      	push	{r0, r1, r2, r3}
 80050e2:	b507      	push	{r0, r1, r2, lr}
 80050e4:	4906      	ldr	r1, [pc, #24]	@ (8005100 <iprintf+0x20>)
 80050e6:	ab04      	add	r3, sp, #16
 80050e8:	6808      	ldr	r0, [r1, #0]
 80050ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80050ee:	6881      	ldr	r1, [r0, #8]
 80050f0:	9301      	str	r3, [sp, #4]
 80050f2:	f000 fadb 	bl	80056ac <_vfiprintf_r>
 80050f6:	b003      	add	sp, #12
 80050f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80050fc:	b004      	add	sp, #16
 80050fe:	4770      	bx	lr
 8005100:	2000001c 	.word	0x2000001c

08005104 <_puts_r>:
 8005104:	6a03      	ldr	r3, [r0, #32]
 8005106:	b570      	push	{r4, r5, r6, lr}
 8005108:	6884      	ldr	r4, [r0, #8]
 800510a:	4605      	mov	r5, r0
 800510c:	460e      	mov	r6, r1
 800510e:	b90b      	cbnz	r3, 8005114 <_puts_r+0x10>
 8005110:	f7ff ffb0 	bl	8005074 <__sinit>
 8005114:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005116:	07db      	lsls	r3, r3, #31
 8005118:	d405      	bmi.n	8005126 <_puts_r+0x22>
 800511a:	89a3      	ldrh	r3, [r4, #12]
 800511c:	0598      	lsls	r0, r3, #22
 800511e:	d402      	bmi.n	8005126 <_puts_r+0x22>
 8005120:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005122:	f000 f99e 	bl	8005462 <__retarget_lock_acquire_recursive>
 8005126:	89a3      	ldrh	r3, [r4, #12]
 8005128:	0719      	lsls	r1, r3, #28
 800512a:	d502      	bpl.n	8005132 <_puts_r+0x2e>
 800512c:	6923      	ldr	r3, [r4, #16]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d135      	bne.n	800519e <_puts_r+0x9a>
 8005132:	4621      	mov	r1, r4
 8005134:	4628      	mov	r0, r5
 8005136:	f000 f8c5 	bl	80052c4 <__swsetup_r>
 800513a:	b380      	cbz	r0, 800519e <_puts_r+0x9a>
 800513c:	f04f 35ff 	mov.w	r5, #4294967295
 8005140:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005142:	07da      	lsls	r2, r3, #31
 8005144:	d405      	bmi.n	8005152 <_puts_r+0x4e>
 8005146:	89a3      	ldrh	r3, [r4, #12]
 8005148:	059b      	lsls	r3, r3, #22
 800514a:	d402      	bmi.n	8005152 <_puts_r+0x4e>
 800514c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800514e:	f000 f989 	bl	8005464 <__retarget_lock_release_recursive>
 8005152:	4628      	mov	r0, r5
 8005154:	bd70      	pop	{r4, r5, r6, pc}
 8005156:	2b00      	cmp	r3, #0
 8005158:	da04      	bge.n	8005164 <_puts_r+0x60>
 800515a:	69a2      	ldr	r2, [r4, #24]
 800515c:	429a      	cmp	r2, r3
 800515e:	dc17      	bgt.n	8005190 <_puts_r+0x8c>
 8005160:	290a      	cmp	r1, #10
 8005162:	d015      	beq.n	8005190 <_puts_r+0x8c>
 8005164:	6823      	ldr	r3, [r4, #0]
 8005166:	1c5a      	adds	r2, r3, #1
 8005168:	6022      	str	r2, [r4, #0]
 800516a:	7019      	strb	r1, [r3, #0]
 800516c:	68a3      	ldr	r3, [r4, #8]
 800516e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005172:	3b01      	subs	r3, #1
 8005174:	60a3      	str	r3, [r4, #8]
 8005176:	2900      	cmp	r1, #0
 8005178:	d1ed      	bne.n	8005156 <_puts_r+0x52>
 800517a:	2b00      	cmp	r3, #0
 800517c:	da11      	bge.n	80051a2 <_puts_r+0x9e>
 800517e:	4622      	mov	r2, r4
 8005180:	210a      	movs	r1, #10
 8005182:	4628      	mov	r0, r5
 8005184:	f000 f85f 	bl	8005246 <__swbuf_r>
 8005188:	3001      	adds	r0, #1
 800518a:	d0d7      	beq.n	800513c <_puts_r+0x38>
 800518c:	250a      	movs	r5, #10
 800518e:	e7d7      	b.n	8005140 <_puts_r+0x3c>
 8005190:	4622      	mov	r2, r4
 8005192:	4628      	mov	r0, r5
 8005194:	f000 f857 	bl	8005246 <__swbuf_r>
 8005198:	3001      	adds	r0, #1
 800519a:	d1e7      	bne.n	800516c <_puts_r+0x68>
 800519c:	e7ce      	b.n	800513c <_puts_r+0x38>
 800519e:	3e01      	subs	r6, #1
 80051a0:	e7e4      	b.n	800516c <_puts_r+0x68>
 80051a2:	6823      	ldr	r3, [r4, #0]
 80051a4:	1c5a      	adds	r2, r3, #1
 80051a6:	6022      	str	r2, [r4, #0]
 80051a8:	220a      	movs	r2, #10
 80051aa:	701a      	strb	r2, [r3, #0]
 80051ac:	e7ee      	b.n	800518c <_puts_r+0x88>
	...

080051b0 <puts>:
 80051b0:	4b02      	ldr	r3, [pc, #8]	@ (80051bc <puts+0xc>)
 80051b2:	4601      	mov	r1, r0
 80051b4:	6818      	ldr	r0, [r3, #0]
 80051b6:	f7ff bfa5 	b.w	8005104 <_puts_r>
 80051ba:	bf00      	nop
 80051bc:	2000001c 	.word	0x2000001c

080051c0 <__sread>:
 80051c0:	b510      	push	{r4, lr}
 80051c2:	460c      	mov	r4, r1
 80051c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051c8:	f000 f8fc 	bl	80053c4 <_read_r>
 80051cc:	2800      	cmp	r0, #0
 80051ce:	bfab      	itete	ge
 80051d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80051d2:	89a3      	ldrhlt	r3, [r4, #12]
 80051d4:	181b      	addge	r3, r3, r0
 80051d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80051da:	bfac      	ite	ge
 80051dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80051de:	81a3      	strhlt	r3, [r4, #12]
 80051e0:	bd10      	pop	{r4, pc}

080051e2 <__swrite>:
 80051e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051e6:	461f      	mov	r7, r3
 80051e8:	898b      	ldrh	r3, [r1, #12]
 80051ea:	05db      	lsls	r3, r3, #23
 80051ec:	4605      	mov	r5, r0
 80051ee:	460c      	mov	r4, r1
 80051f0:	4616      	mov	r6, r2
 80051f2:	d505      	bpl.n	8005200 <__swrite+0x1e>
 80051f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051f8:	2302      	movs	r3, #2
 80051fa:	2200      	movs	r2, #0
 80051fc:	f000 f8d0 	bl	80053a0 <_lseek_r>
 8005200:	89a3      	ldrh	r3, [r4, #12]
 8005202:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005206:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800520a:	81a3      	strh	r3, [r4, #12]
 800520c:	4632      	mov	r2, r6
 800520e:	463b      	mov	r3, r7
 8005210:	4628      	mov	r0, r5
 8005212:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005216:	f000 b8e7 	b.w	80053e8 <_write_r>

0800521a <__sseek>:
 800521a:	b510      	push	{r4, lr}
 800521c:	460c      	mov	r4, r1
 800521e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005222:	f000 f8bd 	bl	80053a0 <_lseek_r>
 8005226:	1c43      	adds	r3, r0, #1
 8005228:	89a3      	ldrh	r3, [r4, #12]
 800522a:	bf15      	itete	ne
 800522c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800522e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005232:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005236:	81a3      	strheq	r3, [r4, #12]
 8005238:	bf18      	it	ne
 800523a:	81a3      	strhne	r3, [r4, #12]
 800523c:	bd10      	pop	{r4, pc}

0800523e <__sclose>:
 800523e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005242:	f000 b89d 	b.w	8005380 <_close_r>

08005246 <__swbuf_r>:
 8005246:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005248:	460e      	mov	r6, r1
 800524a:	4614      	mov	r4, r2
 800524c:	4605      	mov	r5, r0
 800524e:	b118      	cbz	r0, 8005258 <__swbuf_r+0x12>
 8005250:	6a03      	ldr	r3, [r0, #32]
 8005252:	b90b      	cbnz	r3, 8005258 <__swbuf_r+0x12>
 8005254:	f7ff ff0e 	bl	8005074 <__sinit>
 8005258:	69a3      	ldr	r3, [r4, #24]
 800525a:	60a3      	str	r3, [r4, #8]
 800525c:	89a3      	ldrh	r3, [r4, #12]
 800525e:	071a      	lsls	r2, r3, #28
 8005260:	d501      	bpl.n	8005266 <__swbuf_r+0x20>
 8005262:	6923      	ldr	r3, [r4, #16]
 8005264:	b943      	cbnz	r3, 8005278 <__swbuf_r+0x32>
 8005266:	4621      	mov	r1, r4
 8005268:	4628      	mov	r0, r5
 800526a:	f000 f82b 	bl	80052c4 <__swsetup_r>
 800526e:	b118      	cbz	r0, 8005278 <__swbuf_r+0x32>
 8005270:	f04f 37ff 	mov.w	r7, #4294967295
 8005274:	4638      	mov	r0, r7
 8005276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005278:	6823      	ldr	r3, [r4, #0]
 800527a:	6922      	ldr	r2, [r4, #16]
 800527c:	1a98      	subs	r0, r3, r2
 800527e:	6963      	ldr	r3, [r4, #20]
 8005280:	b2f6      	uxtb	r6, r6
 8005282:	4283      	cmp	r3, r0
 8005284:	4637      	mov	r7, r6
 8005286:	dc05      	bgt.n	8005294 <__swbuf_r+0x4e>
 8005288:	4621      	mov	r1, r4
 800528a:	4628      	mov	r0, r5
 800528c:	f000 fd36 	bl	8005cfc <_fflush_r>
 8005290:	2800      	cmp	r0, #0
 8005292:	d1ed      	bne.n	8005270 <__swbuf_r+0x2a>
 8005294:	68a3      	ldr	r3, [r4, #8]
 8005296:	3b01      	subs	r3, #1
 8005298:	60a3      	str	r3, [r4, #8]
 800529a:	6823      	ldr	r3, [r4, #0]
 800529c:	1c5a      	adds	r2, r3, #1
 800529e:	6022      	str	r2, [r4, #0]
 80052a0:	701e      	strb	r6, [r3, #0]
 80052a2:	6962      	ldr	r2, [r4, #20]
 80052a4:	1c43      	adds	r3, r0, #1
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d004      	beq.n	80052b4 <__swbuf_r+0x6e>
 80052aa:	89a3      	ldrh	r3, [r4, #12]
 80052ac:	07db      	lsls	r3, r3, #31
 80052ae:	d5e1      	bpl.n	8005274 <__swbuf_r+0x2e>
 80052b0:	2e0a      	cmp	r6, #10
 80052b2:	d1df      	bne.n	8005274 <__swbuf_r+0x2e>
 80052b4:	4621      	mov	r1, r4
 80052b6:	4628      	mov	r0, r5
 80052b8:	f000 fd20 	bl	8005cfc <_fflush_r>
 80052bc:	2800      	cmp	r0, #0
 80052be:	d0d9      	beq.n	8005274 <__swbuf_r+0x2e>
 80052c0:	e7d6      	b.n	8005270 <__swbuf_r+0x2a>
	...

080052c4 <__swsetup_r>:
 80052c4:	b538      	push	{r3, r4, r5, lr}
 80052c6:	4b29      	ldr	r3, [pc, #164]	@ (800536c <__swsetup_r+0xa8>)
 80052c8:	4605      	mov	r5, r0
 80052ca:	6818      	ldr	r0, [r3, #0]
 80052cc:	460c      	mov	r4, r1
 80052ce:	b118      	cbz	r0, 80052d8 <__swsetup_r+0x14>
 80052d0:	6a03      	ldr	r3, [r0, #32]
 80052d2:	b90b      	cbnz	r3, 80052d8 <__swsetup_r+0x14>
 80052d4:	f7ff fece 	bl	8005074 <__sinit>
 80052d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052dc:	0719      	lsls	r1, r3, #28
 80052de:	d422      	bmi.n	8005326 <__swsetup_r+0x62>
 80052e0:	06da      	lsls	r2, r3, #27
 80052e2:	d407      	bmi.n	80052f4 <__swsetup_r+0x30>
 80052e4:	2209      	movs	r2, #9
 80052e6:	602a      	str	r2, [r5, #0]
 80052e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052ec:	81a3      	strh	r3, [r4, #12]
 80052ee:	f04f 30ff 	mov.w	r0, #4294967295
 80052f2:	e033      	b.n	800535c <__swsetup_r+0x98>
 80052f4:	0758      	lsls	r0, r3, #29
 80052f6:	d512      	bpl.n	800531e <__swsetup_r+0x5a>
 80052f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80052fa:	b141      	cbz	r1, 800530e <__swsetup_r+0x4a>
 80052fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005300:	4299      	cmp	r1, r3
 8005302:	d002      	beq.n	800530a <__swsetup_r+0x46>
 8005304:	4628      	mov	r0, r5
 8005306:	f000 f8af 	bl	8005468 <_free_r>
 800530a:	2300      	movs	r3, #0
 800530c:	6363      	str	r3, [r4, #52]	@ 0x34
 800530e:	89a3      	ldrh	r3, [r4, #12]
 8005310:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005314:	81a3      	strh	r3, [r4, #12]
 8005316:	2300      	movs	r3, #0
 8005318:	6063      	str	r3, [r4, #4]
 800531a:	6923      	ldr	r3, [r4, #16]
 800531c:	6023      	str	r3, [r4, #0]
 800531e:	89a3      	ldrh	r3, [r4, #12]
 8005320:	f043 0308 	orr.w	r3, r3, #8
 8005324:	81a3      	strh	r3, [r4, #12]
 8005326:	6923      	ldr	r3, [r4, #16]
 8005328:	b94b      	cbnz	r3, 800533e <__swsetup_r+0x7a>
 800532a:	89a3      	ldrh	r3, [r4, #12]
 800532c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005330:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005334:	d003      	beq.n	800533e <__swsetup_r+0x7a>
 8005336:	4621      	mov	r1, r4
 8005338:	4628      	mov	r0, r5
 800533a:	f000 fd2d 	bl	8005d98 <__smakebuf_r>
 800533e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005342:	f013 0201 	ands.w	r2, r3, #1
 8005346:	d00a      	beq.n	800535e <__swsetup_r+0x9a>
 8005348:	2200      	movs	r2, #0
 800534a:	60a2      	str	r2, [r4, #8]
 800534c:	6962      	ldr	r2, [r4, #20]
 800534e:	4252      	negs	r2, r2
 8005350:	61a2      	str	r2, [r4, #24]
 8005352:	6922      	ldr	r2, [r4, #16]
 8005354:	b942      	cbnz	r2, 8005368 <__swsetup_r+0xa4>
 8005356:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800535a:	d1c5      	bne.n	80052e8 <__swsetup_r+0x24>
 800535c:	bd38      	pop	{r3, r4, r5, pc}
 800535e:	0799      	lsls	r1, r3, #30
 8005360:	bf58      	it	pl
 8005362:	6962      	ldrpl	r2, [r4, #20]
 8005364:	60a2      	str	r2, [r4, #8]
 8005366:	e7f4      	b.n	8005352 <__swsetup_r+0x8e>
 8005368:	2000      	movs	r0, #0
 800536a:	e7f7      	b.n	800535c <__swsetup_r+0x98>
 800536c:	2000001c 	.word	0x2000001c

08005370 <memset>:
 8005370:	4402      	add	r2, r0
 8005372:	4603      	mov	r3, r0
 8005374:	4293      	cmp	r3, r2
 8005376:	d100      	bne.n	800537a <memset+0xa>
 8005378:	4770      	bx	lr
 800537a:	f803 1b01 	strb.w	r1, [r3], #1
 800537e:	e7f9      	b.n	8005374 <memset+0x4>

08005380 <_close_r>:
 8005380:	b538      	push	{r3, r4, r5, lr}
 8005382:	4d06      	ldr	r5, [pc, #24]	@ (800539c <_close_r+0x1c>)
 8005384:	2300      	movs	r3, #0
 8005386:	4604      	mov	r4, r0
 8005388:	4608      	mov	r0, r1
 800538a:	602b      	str	r3, [r5, #0]
 800538c:	f7fc f884 	bl	8001498 <_close>
 8005390:	1c43      	adds	r3, r0, #1
 8005392:	d102      	bne.n	800539a <_close_r+0x1a>
 8005394:	682b      	ldr	r3, [r5, #0]
 8005396:	b103      	cbz	r3, 800539a <_close_r+0x1a>
 8005398:	6023      	str	r3, [r4, #0]
 800539a:	bd38      	pop	{r3, r4, r5, pc}
 800539c:	20000514 	.word	0x20000514

080053a0 <_lseek_r>:
 80053a0:	b538      	push	{r3, r4, r5, lr}
 80053a2:	4d07      	ldr	r5, [pc, #28]	@ (80053c0 <_lseek_r+0x20>)
 80053a4:	4604      	mov	r4, r0
 80053a6:	4608      	mov	r0, r1
 80053a8:	4611      	mov	r1, r2
 80053aa:	2200      	movs	r2, #0
 80053ac:	602a      	str	r2, [r5, #0]
 80053ae:	461a      	mov	r2, r3
 80053b0:	f7fc f899 	bl	80014e6 <_lseek>
 80053b4:	1c43      	adds	r3, r0, #1
 80053b6:	d102      	bne.n	80053be <_lseek_r+0x1e>
 80053b8:	682b      	ldr	r3, [r5, #0]
 80053ba:	b103      	cbz	r3, 80053be <_lseek_r+0x1e>
 80053bc:	6023      	str	r3, [r4, #0]
 80053be:	bd38      	pop	{r3, r4, r5, pc}
 80053c0:	20000514 	.word	0x20000514

080053c4 <_read_r>:
 80053c4:	b538      	push	{r3, r4, r5, lr}
 80053c6:	4d07      	ldr	r5, [pc, #28]	@ (80053e4 <_read_r+0x20>)
 80053c8:	4604      	mov	r4, r0
 80053ca:	4608      	mov	r0, r1
 80053cc:	4611      	mov	r1, r2
 80053ce:	2200      	movs	r2, #0
 80053d0:	602a      	str	r2, [r5, #0]
 80053d2:	461a      	mov	r2, r3
 80053d4:	f7fc f827 	bl	8001426 <_read>
 80053d8:	1c43      	adds	r3, r0, #1
 80053da:	d102      	bne.n	80053e2 <_read_r+0x1e>
 80053dc:	682b      	ldr	r3, [r5, #0]
 80053de:	b103      	cbz	r3, 80053e2 <_read_r+0x1e>
 80053e0:	6023      	str	r3, [r4, #0]
 80053e2:	bd38      	pop	{r3, r4, r5, pc}
 80053e4:	20000514 	.word	0x20000514

080053e8 <_write_r>:
 80053e8:	b538      	push	{r3, r4, r5, lr}
 80053ea:	4d07      	ldr	r5, [pc, #28]	@ (8005408 <_write_r+0x20>)
 80053ec:	4604      	mov	r4, r0
 80053ee:	4608      	mov	r0, r1
 80053f0:	4611      	mov	r1, r2
 80053f2:	2200      	movs	r2, #0
 80053f4:	602a      	str	r2, [r5, #0]
 80053f6:	461a      	mov	r2, r3
 80053f8:	f7fc f832 	bl	8001460 <_write>
 80053fc:	1c43      	adds	r3, r0, #1
 80053fe:	d102      	bne.n	8005406 <_write_r+0x1e>
 8005400:	682b      	ldr	r3, [r5, #0]
 8005402:	b103      	cbz	r3, 8005406 <_write_r+0x1e>
 8005404:	6023      	str	r3, [r4, #0]
 8005406:	bd38      	pop	{r3, r4, r5, pc}
 8005408:	20000514 	.word	0x20000514

0800540c <__errno>:
 800540c:	4b01      	ldr	r3, [pc, #4]	@ (8005414 <__errno+0x8>)
 800540e:	6818      	ldr	r0, [r3, #0]
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	2000001c 	.word	0x2000001c

08005418 <__libc_init_array>:
 8005418:	b570      	push	{r4, r5, r6, lr}
 800541a:	4d0d      	ldr	r5, [pc, #52]	@ (8005450 <__libc_init_array+0x38>)
 800541c:	4c0d      	ldr	r4, [pc, #52]	@ (8005454 <__libc_init_array+0x3c>)
 800541e:	1b64      	subs	r4, r4, r5
 8005420:	10a4      	asrs	r4, r4, #2
 8005422:	2600      	movs	r6, #0
 8005424:	42a6      	cmp	r6, r4
 8005426:	d109      	bne.n	800543c <__libc_init_array+0x24>
 8005428:	4d0b      	ldr	r5, [pc, #44]	@ (8005458 <__libc_init_array+0x40>)
 800542a:	4c0c      	ldr	r4, [pc, #48]	@ (800545c <__libc_init_array+0x44>)
 800542c:	f000 fd22 	bl	8005e74 <_init>
 8005430:	1b64      	subs	r4, r4, r5
 8005432:	10a4      	asrs	r4, r4, #2
 8005434:	2600      	movs	r6, #0
 8005436:	42a6      	cmp	r6, r4
 8005438:	d105      	bne.n	8005446 <__libc_init_array+0x2e>
 800543a:	bd70      	pop	{r4, r5, r6, pc}
 800543c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005440:	4798      	blx	r3
 8005442:	3601      	adds	r6, #1
 8005444:	e7ee      	b.n	8005424 <__libc_init_array+0xc>
 8005446:	f855 3b04 	ldr.w	r3, [r5], #4
 800544a:	4798      	blx	r3
 800544c:	3601      	adds	r6, #1
 800544e:	e7f2      	b.n	8005436 <__libc_init_array+0x1e>
 8005450:	08005fe8 	.word	0x08005fe8
 8005454:	08005fe8 	.word	0x08005fe8
 8005458:	08005fe8 	.word	0x08005fe8
 800545c:	08005fec 	.word	0x08005fec

08005460 <__retarget_lock_init_recursive>:
 8005460:	4770      	bx	lr

08005462 <__retarget_lock_acquire_recursive>:
 8005462:	4770      	bx	lr

08005464 <__retarget_lock_release_recursive>:
 8005464:	4770      	bx	lr
	...

08005468 <_free_r>:
 8005468:	b538      	push	{r3, r4, r5, lr}
 800546a:	4605      	mov	r5, r0
 800546c:	2900      	cmp	r1, #0
 800546e:	d041      	beq.n	80054f4 <_free_r+0x8c>
 8005470:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005474:	1f0c      	subs	r4, r1, #4
 8005476:	2b00      	cmp	r3, #0
 8005478:	bfb8      	it	lt
 800547a:	18e4      	addlt	r4, r4, r3
 800547c:	f000 f8e0 	bl	8005640 <__malloc_lock>
 8005480:	4a1d      	ldr	r2, [pc, #116]	@ (80054f8 <_free_r+0x90>)
 8005482:	6813      	ldr	r3, [r2, #0]
 8005484:	b933      	cbnz	r3, 8005494 <_free_r+0x2c>
 8005486:	6063      	str	r3, [r4, #4]
 8005488:	6014      	str	r4, [r2, #0]
 800548a:	4628      	mov	r0, r5
 800548c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005490:	f000 b8dc 	b.w	800564c <__malloc_unlock>
 8005494:	42a3      	cmp	r3, r4
 8005496:	d908      	bls.n	80054aa <_free_r+0x42>
 8005498:	6820      	ldr	r0, [r4, #0]
 800549a:	1821      	adds	r1, r4, r0
 800549c:	428b      	cmp	r3, r1
 800549e:	bf01      	itttt	eq
 80054a0:	6819      	ldreq	r1, [r3, #0]
 80054a2:	685b      	ldreq	r3, [r3, #4]
 80054a4:	1809      	addeq	r1, r1, r0
 80054a6:	6021      	streq	r1, [r4, #0]
 80054a8:	e7ed      	b.n	8005486 <_free_r+0x1e>
 80054aa:	461a      	mov	r2, r3
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	b10b      	cbz	r3, 80054b4 <_free_r+0x4c>
 80054b0:	42a3      	cmp	r3, r4
 80054b2:	d9fa      	bls.n	80054aa <_free_r+0x42>
 80054b4:	6811      	ldr	r1, [r2, #0]
 80054b6:	1850      	adds	r0, r2, r1
 80054b8:	42a0      	cmp	r0, r4
 80054ba:	d10b      	bne.n	80054d4 <_free_r+0x6c>
 80054bc:	6820      	ldr	r0, [r4, #0]
 80054be:	4401      	add	r1, r0
 80054c0:	1850      	adds	r0, r2, r1
 80054c2:	4283      	cmp	r3, r0
 80054c4:	6011      	str	r1, [r2, #0]
 80054c6:	d1e0      	bne.n	800548a <_free_r+0x22>
 80054c8:	6818      	ldr	r0, [r3, #0]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	6053      	str	r3, [r2, #4]
 80054ce:	4408      	add	r0, r1
 80054d0:	6010      	str	r0, [r2, #0]
 80054d2:	e7da      	b.n	800548a <_free_r+0x22>
 80054d4:	d902      	bls.n	80054dc <_free_r+0x74>
 80054d6:	230c      	movs	r3, #12
 80054d8:	602b      	str	r3, [r5, #0]
 80054da:	e7d6      	b.n	800548a <_free_r+0x22>
 80054dc:	6820      	ldr	r0, [r4, #0]
 80054de:	1821      	adds	r1, r4, r0
 80054e0:	428b      	cmp	r3, r1
 80054e2:	bf04      	itt	eq
 80054e4:	6819      	ldreq	r1, [r3, #0]
 80054e6:	685b      	ldreq	r3, [r3, #4]
 80054e8:	6063      	str	r3, [r4, #4]
 80054ea:	bf04      	itt	eq
 80054ec:	1809      	addeq	r1, r1, r0
 80054ee:	6021      	streq	r1, [r4, #0]
 80054f0:	6054      	str	r4, [r2, #4]
 80054f2:	e7ca      	b.n	800548a <_free_r+0x22>
 80054f4:	bd38      	pop	{r3, r4, r5, pc}
 80054f6:	bf00      	nop
 80054f8:	20000520 	.word	0x20000520

080054fc <sbrk_aligned>:
 80054fc:	b570      	push	{r4, r5, r6, lr}
 80054fe:	4e0f      	ldr	r6, [pc, #60]	@ (800553c <sbrk_aligned+0x40>)
 8005500:	460c      	mov	r4, r1
 8005502:	6831      	ldr	r1, [r6, #0]
 8005504:	4605      	mov	r5, r0
 8005506:	b911      	cbnz	r1, 800550e <sbrk_aligned+0x12>
 8005508:	f000 fca4 	bl	8005e54 <_sbrk_r>
 800550c:	6030      	str	r0, [r6, #0]
 800550e:	4621      	mov	r1, r4
 8005510:	4628      	mov	r0, r5
 8005512:	f000 fc9f 	bl	8005e54 <_sbrk_r>
 8005516:	1c43      	adds	r3, r0, #1
 8005518:	d103      	bne.n	8005522 <sbrk_aligned+0x26>
 800551a:	f04f 34ff 	mov.w	r4, #4294967295
 800551e:	4620      	mov	r0, r4
 8005520:	bd70      	pop	{r4, r5, r6, pc}
 8005522:	1cc4      	adds	r4, r0, #3
 8005524:	f024 0403 	bic.w	r4, r4, #3
 8005528:	42a0      	cmp	r0, r4
 800552a:	d0f8      	beq.n	800551e <sbrk_aligned+0x22>
 800552c:	1a21      	subs	r1, r4, r0
 800552e:	4628      	mov	r0, r5
 8005530:	f000 fc90 	bl	8005e54 <_sbrk_r>
 8005534:	3001      	adds	r0, #1
 8005536:	d1f2      	bne.n	800551e <sbrk_aligned+0x22>
 8005538:	e7ef      	b.n	800551a <sbrk_aligned+0x1e>
 800553a:	bf00      	nop
 800553c:	2000051c 	.word	0x2000051c

08005540 <_malloc_r>:
 8005540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005544:	1ccd      	adds	r5, r1, #3
 8005546:	f025 0503 	bic.w	r5, r5, #3
 800554a:	3508      	adds	r5, #8
 800554c:	2d0c      	cmp	r5, #12
 800554e:	bf38      	it	cc
 8005550:	250c      	movcc	r5, #12
 8005552:	2d00      	cmp	r5, #0
 8005554:	4606      	mov	r6, r0
 8005556:	db01      	blt.n	800555c <_malloc_r+0x1c>
 8005558:	42a9      	cmp	r1, r5
 800555a:	d904      	bls.n	8005566 <_malloc_r+0x26>
 800555c:	230c      	movs	r3, #12
 800555e:	6033      	str	r3, [r6, #0]
 8005560:	2000      	movs	r0, #0
 8005562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005566:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800563c <_malloc_r+0xfc>
 800556a:	f000 f869 	bl	8005640 <__malloc_lock>
 800556e:	f8d8 3000 	ldr.w	r3, [r8]
 8005572:	461c      	mov	r4, r3
 8005574:	bb44      	cbnz	r4, 80055c8 <_malloc_r+0x88>
 8005576:	4629      	mov	r1, r5
 8005578:	4630      	mov	r0, r6
 800557a:	f7ff ffbf 	bl	80054fc <sbrk_aligned>
 800557e:	1c43      	adds	r3, r0, #1
 8005580:	4604      	mov	r4, r0
 8005582:	d158      	bne.n	8005636 <_malloc_r+0xf6>
 8005584:	f8d8 4000 	ldr.w	r4, [r8]
 8005588:	4627      	mov	r7, r4
 800558a:	2f00      	cmp	r7, #0
 800558c:	d143      	bne.n	8005616 <_malloc_r+0xd6>
 800558e:	2c00      	cmp	r4, #0
 8005590:	d04b      	beq.n	800562a <_malloc_r+0xea>
 8005592:	6823      	ldr	r3, [r4, #0]
 8005594:	4639      	mov	r1, r7
 8005596:	4630      	mov	r0, r6
 8005598:	eb04 0903 	add.w	r9, r4, r3
 800559c:	f000 fc5a 	bl	8005e54 <_sbrk_r>
 80055a0:	4581      	cmp	r9, r0
 80055a2:	d142      	bne.n	800562a <_malloc_r+0xea>
 80055a4:	6821      	ldr	r1, [r4, #0]
 80055a6:	1a6d      	subs	r5, r5, r1
 80055a8:	4629      	mov	r1, r5
 80055aa:	4630      	mov	r0, r6
 80055ac:	f7ff ffa6 	bl	80054fc <sbrk_aligned>
 80055b0:	3001      	adds	r0, #1
 80055b2:	d03a      	beq.n	800562a <_malloc_r+0xea>
 80055b4:	6823      	ldr	r3, [r4, #0]
 80055b6:	442b      	add	r3, r5
 80055b8:	6023      	str	r3, [r4, #0]
 80055ba:	f8d8 3000 	ldr.w	r3, [r8]
 80055be:	685a      	ldr	r2, [r3, #4]
 80055c0:	bb62      	cbnz	r2, 800561c <_malloc_r+0xdc>
 80055c2:	f8c8 7000 	str.w	r7, [r8]
 80055c6:	e00f      	b.n	80055e8 <_malloc_r+0xa8>
 80055c8:	6822      	ldr	r2, [r4, #0]
 80055ca:	1b52      	subs	r2, r2, r5
 80055cc:	d420      	bmi.n	8005610 <_malloc_r+0xd0>
 80055ce:	2a0b      	cmp	r2, #11
 80055d0:	d917      	bls.n	8005602 <_malloc_r+0xc2>
 80055d2:	1961      	adds	r1, r4, r5
 80055d4:	42a3      	cmp	r3, r4
 80055d6:	6025      	str	r5, [r4, #0]
 80055d8:	bf18      	it	ne
 80055da:	6059      	strne	r1, [r3, #4]
 80055dc:	6863      	ldr	r3, [r4, #4]
 80055de:	bf08      	it	eq
 80055e0:	f8c8 1000 	streq.w	r1, [r8]
 80055e4:	5162      	str	r2, [r4, r5]
 80055e6:	604b      	str	r3, [r1, #4]
 80055e8:	4630      	mov	r0, r6
 80055ea:	f000 f82f 	bl	800564c <__malloc_unlock>
 80055ee:	f104 000b 	add.w	r0, r4, #11
 80055f2:	1d23      	adds	r3, r4, #4
 80055f4:	f020 0007 	bic.w	r0, r0, #7
 80055f8:	1ac2      	subs	r2, r0, r3
 80055fa:	bf1c      	itt	ne
 80055fc:	1a1b      	subne	r3, r3, r0
 80055fe:	50a3      	strne	r3, [r4, r2]
 8005600:	e7af      	b.n	8005562 <_malloc_r+0x22>
 8005602:	6862      	ldr	r2, [r4, #4]
 8005604:	42a3      	cmp	r3, r4
 8005606:	bf0c      	ite	eq
 8005608:	f8c8 2000 	streq.w	r2, [r8]
 800560c:	605a      	strne	r2, [r3, #4]
 800560e:	e7eb      	b.n	80055e8 <_malloc_r+0xa8>
 8005610:	4623      	mov	r3, r4
 8005612:	6864      	ldr	r4, [r4, #4]
 8005614:	e7ae      	b.n	8005574 <_malloc_r+0x34>
 8005616:	463c      	mov	r4, r7
 8005618:	687f      	ldr	r7, [r7, #4]
 800561a:	e7b6      	b.n	800558a <_malloc_r+0x4a>
 800561c:	461a      	mov	r2, r3
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	42a3      	cmp	r3, r4
 8005622:	d1fb      	bne.n	800561c <_malloc_r+0xdc>
 8005624:	2300      	movs	r3, #0
 8005626:	6053      	str	r3, [r2, #4]
 8005628:	e7de      	b.n	80055e8 <_malloc_r+0xa8>
 800562a:	230c      	movs	r3, #12
 800562c:	6033      	str	r3, [r6, #0]
 800562e:	4630      	mov	r0, r6
 8005630:	f000 f80c 	bl	800564c <__malloc_unlock>
 8005634:	e794      	b.n	8005560 <_malloc_r+0x20>
 8005636:	6005      	str	r5, [r0, #0]
 8005638:	e7d6      	b.n	80055e8 <_malloc_r+0xa8>
 800563a:	bf00      	nop
 800563c:	20000520 	.word	0x20000520

08005640 <__malloc_lock>:
 8005640:	4801      	ldr	r0, [pc, #4]	@ (8005648 <__malloc_lock+0x8>)
 8005642:	f7ff bf0e 	b.w	8005462 <__retarget_lock_acquire_recursive>
 8005646:	bf00      	nop
 8005648:	20000518 	.word	0x20000518

0800564c <__malloc_unlock>:
 800564c:	4801      	ldr	r0, [pc, #4]	@ (8005654 <__malloc_unlock+0x8>)
 800564e:	f7ff bf09 	b.w	8005464 <__retarget_lock_release_recursive>
 8005652:	bf00      	nop
 8005654:	20000518 	.word	0x20000518

08005658 <__sfputc_r>:
 8005658:	6893      	ldr	r3, [r2, #8]
 800565a:	3b01      	subs	r3, #1
 800565c:	2b00      	cmp	r3, #0
 800565e:	b410      	push	{r4}
 8005660:	6093      	str	r3, [r2, #8]
 8005662:	da08      	bge.n	8005676 <__sfputc_r+0x1e>
 8005664:	6994      	ldr	r4, [r2, #24]
 8005666:	42a3      	cmp	r3, r4
 8005668:	db01      	blt.n	800566e <__sfputc_r+0x16>
 800566a:	290a      	cmp	r1, #10
 800566c:	d103      	bne.n	8005676 <__sfputc_r+0x1e>
 800566e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005672:	f7ff bde8 	b.w	8005246 <__swbuf_r>
 8005676:	6813      	ldr	r3, [r2, #0]
 8005678:	1c58      	adds	r0, r3, #1
 800567a:	6010      	str	r0, [r2, #0]
 800567c:	7019      	strb	r1, [r3, #0]
 800567e:	4608      	mov	r0, r1
 8005680:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005684:	4770      	bx	lr

08005686 <__sfputs_r>:
 8005686:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005688:	4606      	mov	r6, r0
 800568a:	460f      	mov	r7, r1
 800568c:	4614      	mov	r4, r2
 800568e:	18d5      	adds	r5, r2, r3
 8005690:	42ac      	cmp	r4, r5
 8005692:	d101      	bne.n	8005698 <__sfputs_r+0x12>
 8005694:	2000      	movs	r0, #0
 8005696:	e007      	b.n	80056a8 <__sfputs_r+0x22>
 8005698:	f814 1b01 	ldrb.w	r1, [r4], #1
 800569c:	463a      	mov	r2, r7
 800569e:	4630      	mov	r0, r6
 80056a0:	f7ff ffda 	bl	8005658 <__sfputc_r>
 80056a4:	1c43      	adds	r3, r0, #1
 80056a6:	d1f3      	bne.n	8005690 <__sfputs_r+0xa>
 80056a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080056ac <_vfiprintf_r>:
 80056ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056b0:	460d      	mov	r5, r1
 80056b2:	b09d      	sub	sp, #116	@ 0x74
 80056b4:	4614      	mov	r4, r2
 80056b6:	4698      	mov	r8, r3
 80056b8:	4606      	mov	r6, r0
 80056ba:	b118      	cbz	r0, 80056c4 <_vfiprintf_r+0x18>
 80056bc:	6a03      	ldr	r3, [r0, #32]
 80056be:	b90b      	cbnz	r3, 80056c4 <_vfiprintf_r+0x18>
 80056c0:	f7ff fcd8 	bl	8005074 <__sinit>
 80056c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80056c6:	07d9      	lsls	r1, r3, #31
 80056c8:	d405      	bmi.n	80056d6 <_vfiprintf_r+0x2a>
 80056ca:	89ab      	ldrh	r3, [r5, #12]
 80056cc:	059a      	lsls	r2, r3, #22
 80056ce:	d402      	bmi.n	80056d6 <_vfiprintf_r+0x2a>
 80056d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80056d2:	f7ff fec6 	bl	8005462 <__retarget_lock_acquire_recursive>
 80056d6:	89ab      	ldrh	r3, [r5, #12]
 80056d8:	071b      	lsls	r3, r3, #28
 80056da:	d501      	bpl.n	80056e0 <_vfiprintf_r+0x34>
 80056dc:	692b      	ldr	r3, [r5, #16]
 80056de:	b99b      	cbnz	r3, 8005708 <_vfiprintf_r+0x5c>
 80056e0:	4629      	mov	r1, r5
 80056e2:	4630      	mov	r0, r6
 80056e4:	f7ff fdee 	bl	80052c4 <__swsetup_r>
 80056e8:	b170      	cbz	r0, 8005708 <_vfiprintf_r+0x5c>
 80056ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80056ec:	07dc      	lsls	r4, r3, #31
 80056ee:	d504      	bpl.n	80056fa <_vfiprintf_r+0x4e>
 80056f0:	f04f 30ff 	mov.w	r0, #4294967295
 80056f4:	b01d      	add	sp, #116	@ 0x74
 80056f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056fa:	89ab      	ldrh	r3, [r5, #12]
 80056fc:	0598      	lsls	r0, r3, #22
 80056fe:	d4f7      	bmi.n	80056f0 <_vfiprintf_r+0x44>
 8005700:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005702:	f7ff feaf 	bl	8005464 <__retarget_lock_release_recursive>
 8005706:	e7f3      	b.n	80056f0 <_vfiprintf_r+0x44>
 8005708:	2300      	movs	r3, #0
 800570a:	9309      	str	r3, [sp, #36]	@ 0x24
 800570c:	2320      	movs	r3, #32
 800570e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005712:	f8cd 800c 	str.w	r8, [sp, #12]
 8005716:	2330      	movs	r3, #48	@ 0x30
 8005718:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80058c8 <_vfiprintf_r+0x21c>
 800571c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005720:	f04f 0901 	mov.w	r9, #1
 8005724:	4623      	mov	r3, r4
 8005726:	469a      	mov	sl, r3
 8005728:	f813 2b01 	ldrb.w	r2, [r3], #1
 800572c:	b10a      	cbz	r2, 8005732 <_vfiprintf_r+0x86>
 800572e:	2a25      	cmp	r2, #37	@ 0x25
 8005730:	d1f9      	bne.n	8005726 <_vfiprintf_r+0x7a>
 8005732:	ebba 0b04 	subs.w	fp, sl, r4
 8005736:	d00b      	beq.n	8005750 <_vfiprintf_r+0xa4>
 8005738:	465b      	mov	r3, fp
 800573a:	4622      	mov	r2, r4
 800573c:	4629      	mov	r1, r5
 800573e:	4630      	mov	r0, r6
 8005740:	f7ff ffa1 	bl	8005686 <__sfputs_r>
 8005744:	3001      	adds	r0, #1
 8005746:	f000 80a7 	beq.w	8005898 <_vfiprintf_r+0x1ec>
 800574a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800574c:	445a      	add	r2, fp
 800574e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005750:	f89a 3000 	ldrb.w	r3, [sl]
 8005754:	2b00      	cmp	r3, #0
 8005756:	f000 809f 	beq.w	8005898 <_vfiprintf_r+0x1ec>
 800575a:	2300      	movs	r3, #0
 800575c:	f04f 32ff 	mov.w	r2, #4294967295
 8005760:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005764:	f10a 0a01 	add.w	sl, sl, #1
 8005768:	9304      	str	r3, [sp, #16]
 800576a:	9307      	str	r3, [sp, #28]
 800576c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005770:	931a      	str	r3, [sp, #104]	@ 0x68
 8005772:	4654      	mov	r4, sl
 8005774:	2205      	movs	r2, #5
 8005776:	f814 1b01 	ldrb.w	r1, [r4], #1
 800577a:	4853      	ldr	r0, [pc, #332]	@ (80058c8 <_vfiprintf_r+0x21c>)
 800577c:	f7fa fd28 	bl	80001d0 <memchr>
 8005780:	9a04      	ldr	r2, [sp, #16]
 8005782:	b9d8      	cbnz	r0, 80057bc <_vfiprintf_r+0x110>
 8005784:	06d1      	lsls	r1, r2, #27
 8005786:	bf44      	itt	mi
 8005788:	2320      	movmi	r3, #32
 800578a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800578e:	0713      	lsls	r3, r2, #28
 8005790:	bf44      	itt	mi
 8005792:	232b      	movmi	r3, #43	@ 0x2b
 8005794:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005798:	f89a 3000 	ldrb.w	r3, [sl]
 800579c:	2b2a      	cmp	r3, #42	@ 0x2a
 800579e:	d015      	beq.n	80057cc <_vfiprintf_r+0x120>
 80057a0:	9a07      	ldr	r2, [sp, #28]
 80057a2:	4654      	mov	r4, sl
 80057a4:	2000      	movs	r0, #0
 80057a6:	f04f 0c0a 	mov.w	ip, #10
 80057aa:	4621      	mov	r1, r4
 80057ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057b0:	3b30      	subs	r3, #48	@ 0x30
 80057b2:	2b09      	cmp	r3, #9
 80057b4:	d94b      	bls.n	800584e <_vfiprintf_r+0x1a2>
 80057b6:	b1b0      	cbz	r0, 80057e6 <_vfiprintf_r+0x13a>
 80057b8:	9207      	str	r2, [sp, #28]
 80057ba:	e014      	b.n	80057e6 <_vfiprintf_r+0x13a>
 80057bc:	eba0 0308 	sub.w	r3, r0, r8
 80057c0:	fa09 f303 	lsl.w	r3, r9, r3
 80057c4:	4313      	orrs	r3, r2
 80057c6:	9304      	str	r3, [sp, #16]
 80057c8:	46a2      	mov	sl, r4
 80057ca:	e7d2      	b.n	8005772 <_vfiprintf_r+0xc6>
 80057cc:	9b03      	ldr	r3, [sp, #12]
 80057ce:	1d19      	adds	r1, r3, #4
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	9103      	str	r1, [sp, #12]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	bfbb      	ittet	lt
 80057d8:	425b      	neglt	r3, r3
 80057da:	f042 0202 	orrlt.w	r2, r2, #2
 80057de:	9307      	strge	r3, [sp, #28]
 80057e0:	9307      	strlt	r3, [sp, #28]
 80057e2:	bfb8      	it	lt
 80057e4:	9204      	strlt	r2, [sp, #16]
 80057e6:	7823      	ldrb	r3, [r4, #0]
 80057e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80057ea:	d10a      	bne.n	8005802 <_vfiprintf_r+0x156>
 80057ec:	7863      	ldrb	r3, [r4, #1]
 80057ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80057f0:	d132      	bne.n	8005858 <_vfiprintf_r+0x1ac>
 80057f2:	9b03      	ldr	r3, [sp, #12]
 80057f4:	1d1a      	adds	r2, r3, #4
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	9203      	str	r2, [sp, #12]
 80057fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80057fe:	3402      	adds	r4, #2
 8005800:	9305      	str	r3, [sp, #20]
 8005802:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80058d8 <_vfiprintf_r+0x22c>
 8005806:	7821      	ldrb	r1, [r4, #0]
 8005808:	2203      	movs	r2, #3
 800580a:	4650      	mov	r0, sl
 800580c:	f7fa fce0 	bl	80001d0 <memchr>
 8005810:	b138      	cbz	r0, 8005822 <_vfiprintf_r+0x176>
 8005812:	9b04      	ldr	r3, [sp, #16]
 8005814:	eba0 000a 	sub.w	r0, r0, sl
 8005818:	2240      	movs	r2, #64	@ 0x40
 800581a:	4082      	lsls	r2, r0
 800581c:	4313      	orrs	r3, r2
 800581e:	3401      	adds	r4, #1
 8005820:	9304      	str	r3, [sp, #16]
 8005822:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005826:	4829      	ldr	r0, [pc, #164]	@ (80058cc <_vfiprintf_r+0x220>)
 8005828:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800582c:	2206      	movs	r2, #6
 800582e:	f7fa fccf 	bl	80001d0 <memchr>
 8005832:	2800      	cmp	r0, #0
 8005834:	d03f      	beq.n	80058b6 <_vfiprintf_r+0x20a>
 8005836:	4b26      	ldr	r3, [pc, #152]	@ (80058d0 <_vfiprintf_r+0x224>)
 8005838:	bb1b      	cbnz	r3, 8005882 <_vfiprintf_r+0x1d6>
 800583a:	9b03      	ldr	r3, [sp, #12]
 800583c:	3307      	adds	r3, #7
 800583e:	f023 0307 	bic.w	r3, r3, #7
 8005842:	3308      	adds	r3, #8
 8005844:	9303      	str	r3, [sp, #12]
 8005846:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005848:	443b      	add	r3, r7
 800584a:	9309      	str	r3, [sp, #36]	@ 0x24
 800584c:	e76a      	b.n	8005724 <_vfiprintf_r+0x78>
 800584e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005852:	460c      	mov	r4, r1
 8005854:	2001      	movs	r0, #1
 8005856:	e7a8      	b.n	80057aa <_vfiprintf_r+0xfe>
 8005858:	2300      	movs	r3, #0
 800585a:	3401      	adds	r4, #1
 800585c:	9305      	str	r3, [sp, #20]
 800585e:	4619      	mov	r1, r3
 8005860:	f04f 0c0a 	mov.w	ip, #10
 8005864:	4620      	mov	r0, r4
 8005866:	f810 2b01 	ldrb.w	r2, [r0], #1
 800586a:	3a30      	subs	r2, #48	@ 0x30
 800586c:	2a09      	cmp	r2, #9
 800586e:	d903      	bls.n	8005878 <_vfiprintf_r+0x1cc>
 8005870:	2b00      	cmp	r3, #0
 8005872:	d0c6      	beq.n	8005802 <_vfiprintf_r+0x156>
 8005874:	9105      	str	r1, [sp, #20]
 8005876:	e7c4      	b.n	8005802 <_vfiprintf_r+0x156>
 8005878:	fb0c 2101 	mla	r1, ip, r1, r2
 800587c:	4604      	mov	r4, r0
 800587e:	2301      	movs	r3, #1
 8005880:	e7f0      	b.n	8005864 <_vfiprintf_r+0x1b8>
 8005882:	ab03      	add	r3, sp, #12
 8005884:	9300      	str	r3, [sp, #0]
 8005886:	462a      	mov	r2, r5
 8005888:	4b12      	ldr	r3, [pc, #72]	@ (80058d4 <_vfiprintf_r+0x228>)
 800588a:	a904      	add	r1, sp, #16
 800588c:	4630      	mov	r0, r6
 800588e:	f3af 8000 	nop.w
 8005892:	4607      	mov	r7, r0
 8005894:	1c78      	adds	r0, r7, #1
 8005896:	d1d6      	bne.n	8005846 <_vfiprintf_r+0x19a>
 8005898:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800589a:	07d9      	lsls	r1, r3, #31
 800589c:	d405      	bmi.n	80058aa <_vfiprintf_r+0x1fe>
 800589e:	89ab      	ldrh	r3, [r5, #12]
 80058a0:	059a      	lsls	r2, r3, #22
 80058a2:	d402      	bmi.n	80058aa <_vfiprintf_r+0x1fe>
 80058a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80058a6:	f7ff fddd 	bl	8005464 <__retarget_lock_release_recursive>
 80058aa:	89ab      	ldrh	r3, [r5, #12]
 80058ac:	065b      	lsls	r3, r3, #25
 80058ae:	f53f af1f 	bmi.w	80056f0 <_vfiprintf_r+0x44>
 80058b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80058b4:	e71e      	b.n	80056f4 <_vfiprintf_r+0x48>
 80058b6:	ab03      	add	r3, sp, #12
 80058b8:	9300      	str	r3, [sp, #0]
 80058ba:	462a      	mov	r2, r5
 80058bc:	4b05      	ldr	r3, [pc, #20]	@ (80058d4 <_vfiprintf_r+0x228>)
 80058be:	a904      	add	r1, sp, #16
 80058c0:	4630      	mov	r0, r6
 80058c2:	f000 f879 	bl	80059b8 <_printf_i>
 80058c6:	e7e4      	b.n	8005892 <_vfiprintf_r+0x1e6>
 80058c8:	08005fac 	.word	0x08005fac
 80058cc:	08005fb6 	.word	0x08005fb6
 80058d0:	00000000 	.word	0x00000000
 80058d4:	08005687 	.word	0x08005687
 80058d8:	08005fb2 	.word	0x08005fb2

080058dc <_printf_common>:
 80058dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058e0:	4616      	mov	r6, r2
 80058e2:	4698      	mov	r8, r3
 80058e4:	688a      	ldr	r2, [r1, #8]
 80058e6:	690b      	ldr	r3, [r1, #16]
 80058e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80058ec:	4293      	cmp	r3, r2
 80058ee:	bfb8      	it	lt
 80058f0:	4613      	movlt	r3, r2
 80058f2:	6033      	str	r3, [r6, #0]
 80058f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80058f8:	4607      	mov	r7, r0
 80058fa:	460c      	mov	r4, r1
 80058fc:	b10a      	cbz	r2, 8005902 <_printf_common+0x26>
 80058fe:	3301      	adds	r3, #1
 8005900:	6033      	str	r3, [r6, #0]
 8005902:	6823      	ldr	r3, [r4, #0]
 8005904:	0699      	lsls	r1, r3, #26
 8005906:	bf42      	ittt	mi
 8005908:	6833      	ldrmi	r3, [r6, #0]
 800590a:	3302      	addmi	r3, #2
 800590c:	6033      	strmi	r3, [r6, #0]
 800590e:	6825      	ldr	r5, [r4, #0]
 8005910:	f015 0506 	ands.w	r5, r5, #6
 8005914:	d106      	bne.n	8005924 <_printf_common+0x48>
 8005916:	f104 0a19 	add.w	sl, r4, #25
 800591a:	68e3      	ldr	r3, [r4, #12]
 800591c:	6832      	ldr	r2, [r6, #0]
 800591e:	1a9b      	subs	r3, r3, r2
 8005920:	42ab      	cmp	r3, r5
 8005922:	dc26      	bgt.n	8005972 <_printf_common+0x96>
 8005924:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005928:	6822      	ldr	r2, [r4, #0]
 800592a:	3b00      	subs	r3, #0
 800592c:	bf18      	it	ne
 800592e:	2301      	movne	r3, #1
 8005930:	0692      	lsls	r2, r2, #26
 8005932:	d42b      	bmi.n	800598c <_printf_common+0xb0>
 8005934:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005938:	4641      	mov	r1, r8
 800593a:	4638      	mov	r0, r7
 800593c:	47c8      	blx	r9
 800593e:	3001      	adds	r0, #1
 8005940:	d01e      	beq.n	8005980 <_printf_common+0xa4>
 8005942:	6823      	ldr	r3, [r4, #0]
 8005944:	6922      	ldr	r2, [r4, #16]
 8005946:	f003 0306 	and.w	r3, r3, #6
 800594a:	2b04      	cmp	r3, #4
 800594c:	bf02      	ittt	eq
 800594e:	68e5      	ldreq	r5, [r4, #12]
 8005950:	6833      	ldreq	r3, [r6, #0]
 8005952:	1aed      	subeq	r5, r5, r3
 8005954:	68a3      	ldr	r3, [r4, #8]
 8005956:	bf0c      	ite	eq
 8005958:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800595c:	2500      	movne	r5, #0
 800595e:	4293      	cmp	r3, r2
 8005960:	bfc4      	itt	gt
 8005962:	1a9b      	subgt	r3, r3, r2
 8005964:	18ed      	addgt	r5, r5, r3
 8005966:	2600      	movs	r6, #0
 8005968:	341a      	adds	r4, #26
 800596a:	42b5      	cmp	r5, r6
 800596c:	d11a      	bne.n	80059a4 <_printf_common+0xc8>
 800596e:	2000      	movs	r0, #0
 8005970:	e008      	b.n	8005984 <_printf_common+0xa8>
 8005972:	2301      	movs	r3, #1
 8005974:	4652      	mov	r2, sl
 8005976:	4641      	mov	r1, r8
 8005978:	4638      	mov	r0, r7
 800597a:	47c8      	blx	r9
 800597c:	3001      	adds	r0, #1
 800597e:	d103      	bne.n	8005988 <_printf_common+0xac>
 8005980:	f04f 30ff 	mov.w	r0, #4294967295
 8005984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005988:	3501      	adds	r5, #1
 800598a:	e7c6      	b.n	800591a <_printf_common+0x3e>
 800598c:	18e1      	adds	r1, r4, r3
 800598e:	1c5a      	adds	r2, r3, #1
 8005990:	2030      	movs	r0, #48	@ 0x30
 8005992:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005996:	4422      	add	r2, r4
 8005998:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800599c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80059a0:	3302      	adds	r3, #2
 80059a2:	e7c7      	b.n	8005934 <_printf_common+0x58>
 80059a4:	2301      	movs	r3, #1
 80059a6:	4622      	mov	r2, r4
 80059a8:	4641      	mov	r1, r8
 80059aa:	4638      	mov	r0, r7
 80059ac:	47c8      	blx	r9
 80059ae:	3001      	adds	r0, #1
 80059b0:	d0e6      	beq.n	8005980 <_printf_common+0xa4>
 80059b2:	3601      	adds	r6, #1
 80059b4:	e7d9      	b.n	800596a <_printf_common+0x8e>
	...

080059b8 <_printf_i>:
 80059b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059bc:	7e0f      	ldrb	r7, [r1, #24]
 80059be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80059c0:	2f78      	cmp	r7, #120	@ 0x78
 80059c2:	4691      	mov	r9, r2
 80059c4:	4680      	mov	r8, r0
 80059c6:	460c      	mov	r4, r1
 80059c8:	469a      	mov	sl, r3
 80059ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80059ce:	d807      	bhi.n	80059e0 <_printf_i+0x28>
 80059d0:	2f62      	cmp	r7, #98	@ 0x62
 80059d2:	d80a      	bhi.n	80059ea <_printf_i+0x32>
 80059d4:	2f00      	cmp	r7, #0
 80059d6:	f000 80d1 	beq.w	8005b7c <_printf_i+0x1c4>
 80059da:	2f58      	cmp	r7, #88	@ 0x58
 80059dc:	f000 80b8 	beq.w	8005b50 <_printf_i+0x198>
 80059e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80059e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80059e8:	e03a      	b.n	8005a60 <_printf_i+0xa8>
 80059ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80059ee:	2b15      	cmp	r3, #21
 80059f0:	d8f6      	bhi.n	80059e0 <_printf_i+0x28>
 80059f2:	a101      	add	r1, pc, #4	@ (adr r1, 80059f8 <_printf_i+0x40>)
 80059f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80059f8:	08005a51 	.word	0x08005a51
 80059fc:	08005a65 	.word	0x08005a65
 8005a00:	080059e1 	.word	0x080059e1
 8005a04:	080059e1 	.word	0x080059e1
 8005a08:	080059e1 	.word	0x080059e1
 8005a0c:	080059e1 	.word	0x080059e1
 8005a10:	08005a65 	.word	0x08005a65
 8005a14:	080059e1 	.word	0x080059e1
 8005a18:	080059e1 	.word	0x080059e1
 8005a1c:	080059e1 	.word	0x080059e1
 8005a20:	080059e1 	.word	0x080059e1
 8005a24:	08005b63 	.word	0x08005b63
 8005a28:	08005a8f 	.word	0x08005a8f
 8005a2c:	08005b1d 	.word	0x08005b1d
 8005a30:	080059e1 	.word	0x080059e1
 8005a34:	080059e1 	.word	0x080059e1
 8005a38:	08005b85 	.word	0x08005b85
 8005a3c:	080059e1 	.word	0x080059e1
 8005a40:	08005a8f 	.word	0x08005a8f
 8005a44:	080059e1 	.word	0x080059e1
 8005a48:	080059e1 	.word	0x080059e1
 8005a4c:	08005b25 	.word	0x08005b25
 8005a50:	6833      	ldr	r3, [r6, #0]
 8005a52:	1d1a      	adds	r2, r3, #4
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	6032      	str	r2, [r6, #0]
 8005a58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005a60:	2301      	movs	r3, #1
 8005a62:	e09c      	b.n	8005b9e <_printf_i+0x1e6>
 8005a64:	6833      	ldr	r3, [r6, #0]
 8005a66:	6820      	ldr	r0, [r4, #0]
 8005a68:	1d19      	adds	r1, r3, #4
 8005a6a:	6031      	str	r1, [r6, #0]
 8005a6c:	0606      	lsls	r6, r0, #24
 8005a6e:	d501      	bpl.n	8005a74 <_printf_i+0xbc>
 8005a70:	681d      	ldr	r5, [r3, #0]
 8005a72:	e003      	b.n	8005a7c <_printf_i+0xc4>
 8005a74:	0645      	lsls	r5, r0, #25
 8005a76:	d5fb      	bpl.n	8005a70 <_printf_i+0xb8>
 8005a78:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005a7c:	2d00      	cmp	r5, #0
 8005a7e:	da03      	bge.n	8005a88 <_printf_i+0xd0>
 8005a80:	232d      	movs	r3, #45	@ 0x2d
 8005a82:	426d      	negs	r5, r5
 8005a84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a88:	4858      	ldr	r0, [pc, #352]	@ (8005bec <_printf_i+0x234>)
 8005a8a:	230a      	movs	r3, #10
 8005a8c:	e011      	b.n	8005ab2 <_printf_i+0xfa>
 8005a8e:	6821      	ldr	r1, [r4, #0]
 8005a90:	6833      	ldr	r3, [r6, #0]
 8005a92:	0608      	lsls	r0, r1, #24
 8005a94:	f853 5b04 	ldr.w	r5, [r3], #4
 8005a98:	d402      	bmi.n	8005aa0 <_printf_i+0xe8>
 8005a9a:	0649      	lsls	r1, r1, #25
 8005a9c:	bf48      	it	mi
 8005a9e:	b2ad      	uxthmi	r5, r5
 8005aa0:	2f6f      	cmp	r7, #111	@ 0x6f
 8005aa2:	4852      	ldr	r0, [pc, #328]	@ (8005bec <_printf_i+0x234>)
 8005aa4:	6033      	str	r3, [r6, #0]
 8005aa6:	bf14      	ite	ne
 8005aa8:	230a      	movne	r3, #10
 8005aaa:	2308      	moveq	r3, #8
 8005aac:	2100      	movs	r1, #0
 8005aae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005ab2:	6866      	ldr	r6, [r4, #4]
 8005ab4:	60a6      	str	r6, [r4, #8]
 8005ab6:	2e00      	cmp	r6, #0
 8005ab8:	db05      	blt.n	8005ac6 <_printf_i+0x10e>
 8005aba:	6821      	ldr	r1, [r4, #0]
 8005abc:	432e      	orrs	r6, r5
 8005abe:	f021 0104 	bic.w	r1, r1, #4
 8005ac2:	6021      	str	r1, [r4, #0]
 8005ac4:	d04b      	beq.n	8005b5e <_printf_i+0x1a6>
 8005ac6:	4616      	mov	r6, r2
 8005ac8:	fbb5 f1f3 	udiv	r1, r5, r3
 8005acc:	fb03 5711 	mls	r7, r3, r1, r5
 8005ad0:	5dc7      	ldrb	r7, [r0, r7]
 8005ad2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005ad6:	462f      	mov	r7, r5
 8005ad8:	42bb      	cmp	r3, r7
 8005ada:	460d      	mov	r5, r1
 8005adc:	d9f4      	bls.n	8005ac8 <_printf_i+0x110>
 8005ade:	2b08      	cmp	r3, #8
 8005ae0:	d10b      	bne.n	8005afa <_printf_i+0x142>
 8005ae2:	6823      	ldr	r3, [r4, #0]
 8005ae4:	07df      	lsls	r7, r3, #31
 8005ae6:	d508      	bpl.n	8005afa <_printf_i+0x142>
 8005ae8:	6923      	ldr	r3, [r4, #16]
 8005aea:	6861      	ldr	r1, [r4, #4]
 8005aec:	4299      	cmp	r1, r3
 8005aee:	bfde      	ittt	le
 8005af0:	2330      	movle	r3, #48	@ 0x30
 8005af2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005af6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005afa:	1b92      	subs	r2, r2, r6
 8005afc:	6122      	str	r2, [r4, #16]
 8005afe:	f8cd a000 	str.w	sl, [sp]
 8005b02:	464b      	mov	r3, r9
 8005b04:	aa03      	add	r2, sp, #12
 8005b06:	4621      	mov	r1, r4
 8005b08:	4640      	mov	r0, r8
 8005b0a:	f7ff fee7 	bl	80058dc <_printf_common>
 8005b0e:	3001      	adds	r0, #1
 8005b10:	d14a      	bne.n	8005ba8 <_printf_i+0x1f0>
 8005b12:	f04f 30ff 	mov.w	r0, #4294967295
 8005b16:	b004      	add	sp, #16
 8005b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b1c:	6823      	ldr	r3, [r4, #0]
 8005b1e:	f043 0320 	orr.w	r3, r3, #32
 8005b22:	6023      	str	r3, [r4, #0]
 8005b24:	4832      	ldr	r0, [pc, #200]	@ (8005bf0 <_printf_i+0x238>)
 8005b26:	2778      	movs	r7, #120	@ 0x78
 8005b28:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005b2c:	6823      	ldr	r3, [r4, #0]
 8005b2e:	6831      	ldr	r1, [r6, #0]
 8005b30:	061f      	lsls	r7, r3, #24
 8005b32:	f851 5b04 	ldr.w	r5, [r1], #4
 8005b36:	d402      	bmi.n	8005b3e <_printf_i+0x186>
 8005b38:	065f      	lsls	r7, r3, #25
 8005b3a:	bf48      	it	mi
 8005b3c:	b2ad      	uxthmi	r5, r5
 8005b3e:	6031      	str	r1, [r6, #0]
 8005b40:	07d9      	lsls	r1, r3, #31
 8005b42:	bf44      	itt	mi
 8005b44:	f043 0320 	orrmi.w	r3, r3, #32
 8005b48:	6023      	strmi	r3, [r4, #0]
 8005b4a:	b11d      	cbz	r5, 8005b54 <_printf_i+0x19c>
 8005b4c:	2310      	movs	r3, #16
 8005b4e:	e7ad      	b.n	8005aac <_printf_i+0xf4>
 8005b50:	4826      	ldr	r0, [pc, #152]	@ (8005bec <_printf_i+0x234>)
 8005b52:	e7e9      	b.n	8005b28 <_printf_i+0x170>
 8005b54:	6823      	ldr	r3, [r4, #0]
 8005b56:	f023 0320 	bic.w	r3, r3, #32
 8005b5a:	6023      	str	r3, [r4, #0]
 8005b5c:	e7f6      	b.n	8005b4c <_printf_i+0x194>
 8005b5e:	4616      	mov	r6, r2
 8005b60:	e7bd      	b.n	8005ade <_printf_i+0x126>
 8005b62:	6833      	ldr	r3, [r6, #0]
 8005b64:	6825      	ldr	r5, [r4, #0]
 8005b66:	6961      	ldr	r1, [r4, #20]
 8005b68:	1d18      	adds	r0, r3, #4
 8005b6a:	6030      	str	r0, [r6, #0]
 8005b6c:	062e      	lsls	r6, r5, #24
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	d501      	bpl.n	8005b76 <_printf_i+0x1be>
 8005b72:	6019      	str	r1, [r3, #0]
 8005b74:	e002      	b.n	8005b7c <_printf_i+0x1c4>
 8005b76:	0668      	lsls	r0, r5, #25
 8005b78:	d5fb      	bpl.n	8005b72 <_printf_i+0x1ba>
 8005b7a:	8019      	strh	r1, [r3, #0]
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	6123      	str	r3, [r4, #16]
 8005b80:	4616      	mov	r6, r2
 8005b82:	e7bc      	b.n	8005afe <_printf_i+0x146>
 8005b84:	6833      	ldr	r3, [r6, #0]
 8005b86:	1d1a      	adds	r2, r3, #4
 8005b88:	6032      	str	r2, [r6, #0]
 8005b8a:	681e      	ldr	r6, [r3, #0]
 8005b8c:	6862      	ldr	r2, [r4, #4]
 8005b8e:	2100      	movs	r1, #0
 8005b90:	4630      	mov	r0, r6
 8005b92:	f7fa fb1d 	bl	80001d0 <memchr>
 8005b96:	b108      	cbz	r0, 8005b9c <_printf_i+0x1e4>
 8005b98:	1b80      	subs	r0, r0, r6
 8005b9a:	6060      	str	r0, [r4, #4]
 8005b9c:	6863      	ldr	r3, [r4, #4]
 8005b9e:	6123      	str	r3, [r4, #16]
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ba6:	e7aa      	b.n	8005afe <_printf_i+0x146>
 8005ba8:	6923      	ldr	r3, [r4, #16]
 8005baa:	4632      	mov	r2, r6
 8005bac:	4649      	mov	r1, r9
 8005bae:	4640      	mov	r0, r8
 8005bb0:	47d0      	blx	sl
 8005bb2:	3001      	adds	r0, #1
 8005bb4:	d0ad      	beq.n	8005b12 <_printf_i+0x15a>
 8005bb6:	6823      	ldr	r3, [r4, #0]
 8005bb8:	079b      	lsls	r3, r3, #30
 8005bba:	d413      	bmi.n	8005be4 <_printf_i+0x22c>
 8005bbc:	68e0      	ldr	r0, [r4, #12]
 8005bbe:	9b03      	ldr	r3, [sp, #12]
 8005bc0:	4298      	cmp	r0, r3
 8005bc2:	bfb8      	it	lt
 8005bc4:	4618      	movlt	r0, r3
 8005bc6:	e7a6      	b.n	8005b16 <_printf_i+0x15e>
 8005bc8:	2301      	movs	r3, #1
 8005bca:	4632      	mov	r2, r6
 8005bcc:	4649      	mov	r1, r9
 8005bce:	4640      	mov	r0, r8
 8005bd0:	47d0      	blx	sl
 8005bd2:	3001      	adds	r0, #1
 8005bd4:	d09d      	beq.n	8005b12 <_printf_i+0x15a>
 8005bd6:	3501      	adds	r5, #1
 8005bd8:	68e3      	ldr	r3, [r4, #12]
 8005bda:	9903      	ldr	r1, [sp, #12]
 8005bdc:	1a5b      	subs	r3, r3, r1
 8005bde:	42ab      	cmp	r3, r5
 8005be0:	dcf2      	bgt.n	8005bc8 <_printf_i+0x210>
 8005be2:	e7eb      	b.n	8005bbc <_printf_i+0x204>
 8005be4:	2500      	movs	r5, #0
 8005be6:	f104 0619 	add.w	r6, r4, #25
 8005bea:	e7f5      	b.n	8005bd8 <_printf_i+0x220>
 8005bec:	08005fbd 	.word	0x08005fbd
 8005bf0:	08005fce 	.word	0x08005fce

08005bf4 <__sflush_r>:
 8005bf4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bfc:	0716      	lsls	r6, r2, #28
 8005bfe:	4605      	mov	r5, r0
 8005c00:	460c      	mov	r4, r1
 8005c02:	d454      	bmi.n	8005cae <__sflush_r+0xba>
 8005c04:	684b      	ldr	r3, [r1, #4]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	dc02      	bgt.n	8005c10 <__sflush_r+0x1c>
 8005c0a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	dd48      	ble.n	8005ca2 <__sflush_r+0xae>
 8005c10:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005c12:	2e00      	cmp	r6, #0
 8005c14:	d045      	beq.n	8005ca2 <__sflush_r+0xae>
 8005c16:	2300      	movs	r3, #0
 8005c18:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005c1c:	682f      	ldr	r7, [r5, #0]
 8005c1e:	6a21      	ldr	r1, [r4, #32]
 8005c20:	602b      	str	r3, [r5, #0]
 8005c22:	d030      	beq.n	8005c86 <__sflush_r+0x92>
 8005c24:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005c26:	89a3      	ldrh	r3, [r4, #12]
 8005c28:	0759      	lsls	r1, r3, #29
 8005c2a:	d505      	bpl.n	8005c38 <__sflush_r+0x44>
 8005c2c:	6863      	ldr	r3, [r4, #4]
 8005c2e:	1ad2      	subs	r2, r2, r3
 8005c30:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005c32:	b10b      	cbz	r3, 8005c38 <__sflush_r+0x44>
 8005c34:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005c36:	1ad2      	subs	r2, r2, r3
 8005c38:	2300      	movs	r3, #0
 8005c3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005c3c:	6a21      	ldr	r1, [r4, #32]
 8005c3e:	4628      	mov	r0, r5
 8005c40:	47b0      	blx	r6
 8005c42:	1c43      	adds	r3, r0, #1
 8005c44:	89a3      	ldrh	r3, [r4, #12]
 8005c46:	d106      	bne.n	8005c56 <__sflush_r+0x62>
 8005c48:	6829      	ldr	r1, [r5, #0]
 8005c4a:	291d      	cmp	r1, #29
 8005c4c:	d82b      	bhi.n	8005ca6 <__sflush_r+0xb2>
 8005c4e:	4a2a      	ldr	r2, [pc, #168]	@ (8005cf8 <__sflush_r+0x104>)
 8005c50:	40ca      	lsrs	r2, r1
 8005c52:	07d6      	lsls	r6, r2, #31
 8005c54:	d527      	bpl.n	8005ca6 <__sflush_r+0xb2>
 8005c56:	2200      	movs	r2, #0
 8005c58:	6062      	str	r2, [r4, #4]
 8005c5a:	04d9      	lsls	r1, r3, #19
 8005c5c:	6922      	ldr	r2, [r4, #16]
 8005c5e:	6022      	str	r2, [r4, #0]
 8005c60:	d504      	bpl.n	8005c6c <__sflush_r+0x78>
 8005c62:	1c42      	adds	r2, r0, #1
 8005c64:	d101      	bne.n	8005c6a <__sflush_r+0x76>
 8005c66:	682b      	ldr	r3, [r5, #0]
 8005c68:	b903      	cbnz	r3, 8005c6c <__sflush_r+0x78>
 8005c6a:	6560      	str	r0, [r4, #84]	@ 0x54
 8005c6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005c6e:	602f      	str	r7, [r5, #0]
 8005c70:	b1b9      	cbz	r1, 8005ca2 <__sflush_r+0xae>
 8005c72:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005c76:	4299      	cmp	r1, r3
 8005c78:	d002      	beq.n	8005c80 <__sflush_r+0x8c>
 8005c7a:	4628      	mov	r0, r5
 8005c7c:	f7ff fbf4 	bl	8005468 <_free_r>
 8005c80:	2300      	movs	r3, #0
 8005c82:	6363      	str	r3, [r4, #52]	@ 0x34
 8005c84:	e00d      	b.n	8005ca2 <__sflush_r+0xae>
 8005c86:	2301      	movs	r3, #1
 8005c88:	4628      	mov	r0, r5
 8005c8a:	47b0      	blx	r6
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	1c50      	adds	r0, r2, #1
 8005c90:	d1c9      	bne.n	8005c26 <__sflush_r+0x32>
 8005c92:	682b      	ldr	r3, [r5, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d0c6      	beq.n	8005c26 <__sflush_r+0x32>
 8005c98:	2b1d      	cmp	r3, #29
 8005c9a:	d001      	beq.n	8005ca0 <__sflush_r+0xac>
 8005c9c:	2b16      	cmp	r3, #22
 8005c9e:	d11e      	bne.n	8005cde <__sflush_r+0xea>
 8005ca0:	602f      	str	r7, [r5, #0]
 8005ca2:	2000      	movs	r0, #0
 8005ca4:	e022      	b.n	8005cec <__sflush_r+0xf8>
 8005ca6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005caa:	b21b      	sxth	r3, r3
 8005cac:	e01b      	b.n	8005ce6 <__sflush_r+0xf2>
 8005cae:	690f      	ldr	r7, [r1, #16]
 8005cb0:	2f00      	cmp	r7, #0
 8005cb2:	d0f6      	beq.n	8005ca2 <__sflush_r+0xae>
 8005cb4:	0793      	lsls	r3, r2, #30
 8005cb6:	680e      	ldr	r6, [r1, #0]
 8005cb8:	bf08      	it	eq
 8005cba:	694b      	ldreq	r3, [r1, #20]
 8005cbc:	600f      	str	r7, [r1, #0]
 8005cbe:	bf18      	it	ne
 8005cc0:	2300      	movne	r3, #0
 8005cc2:	eba6 0807 	sub.w	r8, r6, r7
 8005cc6:	608b      	str	r3, [r1, #8]
 8005cc8:	f1b8 0f00 	cmp.w	r8, #0
 8005ccc:	dde9      	ble.n	8005ca2 <__sflush_r+0xae>
 8005cce:	6a21      	ldr	r1, [r4, #32]
 8005cd0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005cd2:	4643      	mov	r3, r8
 8005cd4:	463a      	mov	r2, r7
 8005cd6:	4628      	mov	r0, r5
 8005cd8:	47b0      	blx	r6
 8005cda:	2800      	cmp	r0, #0
 8005cdc:	dc08      	bgt.n	8005cf0 <__sflush_r+0xfc>
 8005cde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ce2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ce6:	81a3      	strh	r3, [r4, #12]
 8005ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8005cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cf0:	4407      	add	r7, r0
 8005cf2:	eba8 0800 	sub.w	r8, r8, r0
 8005cf6:	e7e7      	b.n	8005cc8 <__sflush_r+0xd4>
 8005cf8:	20400001 	.word	0x20400001

08005cfc <_fflush_r>:
 8005cfc:	b538      	push	{r3, r4, r5, lr}
 8005cfe:	690b      	ldr	r3, [r1, #16]
 8005d00:	4605      	mov	r5, r0
 8005d02:	460c      	mov	r4, r1
 8005d04:	b913      	cbnz	r3, 8005d0c <_fflush_r+0x10>
 8005d06:	2500      	movs	r5, #0
 8005d08:	4628      	mov	r0, r5
 8005d0a:	bd38      	pop	{r3, r4, r5, pc}
 8005d0c:	b118      	cbz	r0, 8005d16 <_fflush_r+0x1a>
 8005d0e:	6a03      	ldr	r3, [r0, #32]
 8005d10:	b90b      	cbnz	r3, 8005d16 <_fflush_r+0x1a>
 8005d12:	f7ff f9af 	bl	8005074 <__sinit>
 8005d16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d0f3      	beq.n	8005d06 <_fflush_r+0xa>
 8005d1e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005d20:	07d0      	lsls	r0, r2, #31
 8005d22:	d404      	bmi.n	8005d2e <_fflush_r+0x32>
 8005d24:	0599      	lsls	r1, r3, #22
 8005d26:	d402      	bmi.n	8005d2e <_fflush_r+0x32>
 8005d28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d2a:	f7ff fb9a 	bl	8005462 <__retarget_lock_acquire_recursive>
 8005d2e:	4628      	mov	r0, r5
 8005d30:	4621      	mov	r1, r4
 8005d32:	f7ff ff5f 	bl	8005bf4 <__sflush_r>
 8005d36:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005d38:	07da      	lsls	r2, r3, #31
 8005d3a:	4605      	mov	r5, r0
 8005d3c:	d4e4      	bmi.n	8005d08 <_fflush_r+0xc>
 8005d3e:	89a3      	ldrh	r3, [r4, #12]
 8005d40:	059b      	lsls	r3, r3, #22
 8005d42:	d4e1      	bmi.n	8005d08 <_fflush_r+0xc>
 8005d44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d46:	f7ff fb8d 	bl	8005464 <__retarget_lock_release_recursive>
 8005d4a:	e7dd      	b.n	8005d08 <_fflush_r+0xc>

08005d4c <__swhatbuf_r>:
 8005d4c:	b570      	push	{r4, r5, r6, lr}
 8005d4e:	460c      	mov	r4, r1
 8005d50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d54:	2900      	cmp	r1, #0
 8005d56:	b096      	sub	sp, #88	@ 0x58
 8005d58:	4615      	mov	r5, r2
 8005d5a:	461e      	mov	r6, r3
 8005d5c:	da0d      	bge.n	8005d7a <__swhatbuf_r+0x2e>
 8005d5e:	89a3      	ldrh	r3, [r4, #12]
 8005d60:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005d64:	f04f 0100 	mov.w	r1, #0
 8005d68:	bf14      	ite	ne
 8005d6a:	2340      	movne	r3, #64	@ 0x40
 8005d6c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005d70:	2000      	movs	r0, #0
 8005d72:	6031      	str	r1, [r6, #0]
 8005d74:	602b      	str	r3, [r5, #0]
 8005d76:	b016      	add	sp, #88	@ 0x58
 8005d78:	bd70      	pop	{r4, r5, r6, pc}
 8005d7a:	466a      	mov	r2, sp
 8005d7c:	f000 f848 	bl	8005e10 <_fstat_r>
 8005d80:	2800      	cmp	r0, #0
 8005d82:	dbec      	blt.n	8005d5e <__swhatbuf_r+0x12>
 8005d84:	9901      	ldr	r1, [sp, #4]
 8005d86:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005d8a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005d8e:	4259      	negs	r1, r3
 8005d90:	4159      	adcs	r1, r3
 8005d92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005d96:	e7eb      	b.n	8005d70 <__swhatbuf_r+0x24>

08005d98 <__smakebuf_r>:
 8005d98:	898b      	ldrh	r3, [r1, #12]
 8005d9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d9c:	079d      	lsls	r5, r3, #30
 8005d9e:	4606      	mov	r6, r0
 8005da0:	460c      	mov	r4, r1
 8005da2:	d507      	bpl.n	8005db4 <__smakebuf_r+0x1c>
 8005da4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005da8:	6023      	str	r3, [r4, #0]
 8005daa:	6123      	str	r3, [r4, #16]
 8005dac:	2301      	movs	r3, #1
 8005dae:	6163      	str	r3, [r4, #20]
 8005db0:	b003      	add	sp, #12
 8005db2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005db4:	ab01      	add	r3, sp, #4
 8005db6:	466a      	mov	r2, sp
 8005db8:	f7ff ffc8 	bl	8005d4c <__swhatbuf_r>
 8005dbc:	9f00      	ldr	r7, [sp, #0]
 8005dbe:	4605      	mov	r5, r0
 8005dc0:	4639      	mov	r1, r7
 8005dc2:	4630      	mov	r0, r6
 8005dc4:	f7ff fbbc 	bl	8005540 <_malloc_r>
 8005dc8:	b948      	cbnz	r0, 8005dde <__smakebuf_r+0x46>
 8005dca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dce:	059a      	lsls	r2, r3, #22
 8005dd0:	d4ee      	bmi.n	8005db0 <__smakebuf_r+0x18>
 8005dd2:	f023 0303 	bic.w	r3, r3, #3
 8005dd6:	f043 0302 	orr.w	r3, r3, #2
 8005dda:	81a3      	strh	r3, [r4, #12]
 8005ddc:	e7e2      	b.n	8005da4 <__smakebuf_r+0xc>
 8005dde:	89a3      	ldrh	r3, [r4, #12]
 8005de0:	6020      	str	r0, [r4, #0]
 8005de2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005de6:	81a3      	strh	r3, [r4, #12]
 8005de8:	9b01      	ldr	r3, [sp, #4]
 8005dea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005dee:	b15b      	cbz	r3, 8005e08 <__smakebuf_r+0x70>
 8005df0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005df4:	4630      	mov	r0, r6
 8005df6:	f000 f81d 	bl	8005e34 <_isatty_r>
 8005dfa:	b128      	cbz	r0, 8005e08 <__smakebuf_r+0x70>
 8005dfc:	89a3      	ldrh	r3, [r4, #12]
 8005dfe:	f023 0303 	bic.w	r3, r3, #3
 8005e02:	f043 0301 	orr.w	r3, r3, #1
 8005e06:	81a3      	strh	r3, [r4, #12]
 8005e08:	89a3      	ldrh	r3, [r4, #12]
 8005e0a:	431d      	orrs	r5, r3
 8005e0c:	81a5      	strh	r5, [r4, #12]
 8005e0e:	e7cf      	b.n	8005db0 <__smakebuf_r+0x18>

08005e10 <_fstat_r>:
 8005e10:	b538      	push	{r3, r4, r5, lr}
 8005e12:	4d07      	ldr	r5, [pc, #28]	@ (8005e30 <_fstat_r+0x20>)
 8005e14:	2300      	movs	r3, #0
 8005e16:	4604      	mov	r4, r0
 8005e18:	4608      	mov	r0, r1
 8005e1a:	4611      	mov	r1, r2
 8005e1c:	602b      	str	r3, [r5, #0]
 8005e1e:	f7fb fb47 	bl	80014b0 <_fstat>
 8005e22:	1c43      	adds	r3, r0, #1
 8005e24:	d102      	bne.n	8005e2c <_fstat_r+0x1c>
 8005e26:	682b      	ldr	r3, [r5, #0]
 8005e28:	b103      	cbz	r3, 8005e2c <_fstat_r+0x1c>
 8005e2a:	6023      	str	r3, [r4, #0]
 8005e2c:	bd38      	pop	{r3, r4, r5, pc}
 8005e2e:	bf00      	nop
 8005e30:	20000514 	.word	0x20000514

08005e34 <_isatty_r>:
 8005e34:	b538      	push	{r3, r4, r5, lr}
 8005e36:	4d06      	ldr	r5, [pc, #24]	@ (8005e50 <_isatty_r+0x1c>)
 8005e38:	2300      	movs	r3, #0
 8005e3a:	4604      	mov	r4, r0
 8005e3c:	4608      	mov	r0, r1
 8005e3e:	602b      	str	r3, [r5, #0]
 8005e40:	f7fb fb46 	bl	80014d0 <_isatty>
 8005e44:	1c43      	adds	r3, r0, #1
 8005e46:	d102      	bne.n	8005e4e <_isatty_r+0x1a>
 8005e48:	682b      	ldr	r3, [r5, #0]
 8005e4a:	b103      	cbz	r3, 8005e4e <_isatty_r+0x1a>
 8005e4c:	6023      	str	r3, [r4, #0]
 8005e4e:	bd38      	pop	{r3, r4, r5, pc}
 8005e50:	20000514 	.word	0x20000514

08005e54 <_sbrk_r>:
 8005e54:	b538      	push	{r3, r4, r5, lr}
 8005e56:	4d06      	ldr	r5, [pc, #24]	@ (8005e70 <_sbrk_r+0x1c>)
 8005e58:	2300      	movs	r3, #0
 8005e5a:	4604      	mov	r4, r0
 8005e5c:	4608      	mov	r0, r1
 8005e5e:	602b      	str	r3, [r5, #0]
 8005e60:	f7fb fb4e 	bl	8001500 <_sbrk>
 8005e64:	1c43      	adds	r3, r0, #1
 8005e66:	d102      	bne.n	8005e6e <_sbrk_r+0x1a>
 8005e68:	682b      	ldr	r3, [r5, #0]
 8005e6a:	b103      	cbz	r3, 8005e6e <_sbrk_r+0x1a>
 8005e6c:	6023      	str	r3, [r4, #0]
 8005e6e:	bd38      	pop	{r3, r4, r5, pc}
 8005e70:	20000514 	.word	0x20000514

08005e74 <_init>:
 8005e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e76:	bf00      	nop
 8005e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e7a:	bc08      	pop	{r3}
 8005e7c:	469e      	mov	lr, r3
 8005e7e:	4770      	bx	lr

08005e80 <_fini>:
 8005e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e82:	bf00      	nop
 8005e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e86:	bc08      	pop	{r3}
 8005e88:	469e      	mov	lr, r3
 8005e8a:	4770      	bx	lr
