
TEST_Jim.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e10  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08004f98  08004f98  00005f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005054  08005054  0000700c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005054  08005054  00006054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800505c  0800505c  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800505c  0800505c  0000605c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005060  08005060  00006060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005064  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  2000000c  08005070  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  08005070  00007308  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011fa4  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002303  00000000  00000000  00018fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001008  00000000  00000000  0001b2e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c83  00000000  00000000  0001c2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000273d3  00000000  00000000  0001cf73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012784  00000000  00000000  00044346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa258  00000000  00000000  00056aca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00150d22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004464  00000000  00000000  00150d68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001551cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004f80 	.word	0x08004f80

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004f80 	.word	0x08004f80

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <readSingleADCValue>:

    return sum / count;
}

uint16_t readSingleADCValue(int sensorIndex)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b086      	sub	sp, #24
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status;
    uint16_t adcValue = 0;
 80004fc:	2300      	movs	r3, #0
 80004fe:	82fb      	strh	r3, [r7, #22]
    ADC_HandleTypeDef* hadc = NULL;
 8000500:	2300      	movs	r3, #0
 8000502:	613b      	str	r3, [r7, #16]

    // 根據 sensorIndex 選擇對應 ADC
    if (sensorIndex == 1) {
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	2b01      	cmp	r3, #1
 8000508:	d102      	bne.n	8000510 <readSingleADCValue+0x1c>
        hadc = &hadc1;
 800050a:	4b12      	ldr	r3, [pc, #72]	@ (8000554 <readSingleADCValue+0x60>)
 800050c:	613b      	str	r3, [r7, #16]
 800050e:	e004      	b.n	800051a <readSingleADCValue+0x26>
    } else if (sensorIndex == 2) {
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	2b02      	cmp	r3, #2
 8000514:	d001      	beq.n	800051a <readSingleADCValue+0x26>
        //hadc = &hadc2;
    } else {
        return 0; // 無效的 index
 8000516:	2300      	movs	r3, #0
 8000518:	e018      	b.n	800054c <readSingleADCValue+0x58>
    }

    // 啟動 ADC
    status = HAL_ADC_Start(hadc);
 800051a:	6938      	ldr	r0, [r7, #16]
 800051c:	f001 f9b6 	bl	800188c <HAL_ADC_Start>
 8000520:	4603      	mov	r3, r0
 8000522:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) {
 8000524:	7bfb      	ldrb	r3, [r7, #15]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <readSingleADCValue+0x3a>
        return 0; // 啟動失敗
 800052a:	2300      	movs	r3, #0
 800052c:	e00e      	b.n	800054c <readSingleADCValue+0x58>
    }

    // 輪詢等待轉換完成
    status = HAL_ADC_PollForConversion(hadc, 10);
 800052e:	210a      	movs	r1, #10
 8000530:	6938      	ldr	r0, [r7, #16]
 8000532:	f001 fa65 	bl	8001a00 <HAL_ADC_PollForConversion>
 8000536:	4603      	mov	r3, r0
 8000538:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 800053a:	7bfb      	ldrb	r3, [r7, #15]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d104      	bne.n	800054a <readSingleADCValue+0x56>
        adcValue = HAL_ADC_GetValue(hadc);
 8000540:	6938      	ldr	r0, [r7, #16]
 8000542:	f001 fb35 	bl	8001bb0 <HAL_ADC_GetValue>
 8000546:	4603      	mov	r3, r0
 8000548:	82fb      	strh	r3, [r7, #22]
    }

    return adcValue;
 800054a:	8afb      	ldrh	r3, [r7, #22]
}
 800054c:	4618      	mov	r0, r3
 800054e:	3718      	adds	r7, #24
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	20000028 	.word	0x20000028

08000558 <readAveragedFSR>:

uint32_t readAveragedFSR(int sensorIndex,uint32_t sensorPressDuration)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b088      	sub	sp, #32
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
 8000560:	6039      	str	r1, [r7, #0]
	//sensorPressDuration=30;
	uint32_t sum = 0;
 8000562:	2300      	movs	r3, #0
 8000564:	61fb      	str	r3, [r7, #28]
	uint32_t average = 0;
 8000566:	2300      	movs	r3, #0
 8000568:	617b      	str	r3, [r7, #20]
	uint32_t count = 0;
 800056a:	2300      	movs	r3, #0
 800056c:	613b      	str	r3, [r7, #16]
	count=sensorPressDuration/10;
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	4a14      	ldr	r2, [pc, #80]	@ (80005c4 <readAveragedFSR+0x6c>)
 8000572:	fba2 2303 	umull	r2, r3, r2, r3
 8000576:	08db      	lsrs	r3, r3, #3
 8000578:	613b      	str	r3, [r7, #16]
    if (sensorPressDuration == 0)
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d101      	bne.n	8000584 <readAveragedFSR+0x2c>
    {
    	return 0;
 8000580:	2300      	movs	r3, #0
 8000582:	e01b      	b.n	80005bc <readAveragedFSR+0x64>
    }
    for (uint32_t i = 0; i < count; i++)
 8000584:	2300      	movs	r3, #0
 8000586:	61bb      	str	r3, [r7, #24]
 8000588:	e00e      	b.n	80005a8 <readAveragedFSR+0x50>
    {
    	//count=3
    	//i=0, 1 2
        uint16_t valueADC = readSingleADCValue(sensorIndex); // 假設ADC為16-bit
 800058a:	6878      	ldr	r0, [r7, #4]
 800058c:	f7ff ffb2 	bl	80004f4 <readSingleADCValue>
 8000590:	4603      	mov	r3, r0
 8000592:	81fb      	strh	r3, [r7, #14]
        sum += valueADC;
 8000594:	89fb      	ldrh	r3, [r7, #14]
 8000596:	69fa      	ldr	r2, [r7, #28]
 8000598:	4413      	add	r3, r2
 800059a:	61fb      	str	r3, [r7, #28]
        HAL_Delay(10);
 800059c:	200a      	movs	r0, #10
 800059e:	f000 fe1d 	bl	80011dc <HAL_Delay>
    for (uint32_t i = 0; i < count; i++)
 80005a2:	69bb      	ldr	r3, [r7, #24]
 80005a4:	3301      	adds	r3, #1
 80005a6:	61bb      	str	r3, [r7, #24]
 80005a8:	69ba      	ldr	r2, [r7, #24]
 80005aa:	693b      	ldr	r3, [r7, #16]
 80005ac:	429a      	cmp	r2, r3
 80005ae:	d3ec      	bcc.n	800058a <readAveragedFSR+0x32>
    }
    average=sum / count;
 80005b0:	69fa      	ldr	r2, [r7, #28]
 80005b2:	693b      	ldr	r3, [r7, #16]
 80005b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80005b8:	617b      	str	r3, [r7, #20]

    return average;
 80005ba:	697b      	ldr	r3, [r7, #20]
}
 80005bc:	4618      	mov	r0, r3
 80005be:	3720      	adds	r7, #32
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	cccccccd 	.word	0xcccccccd

080005c8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
	if(GPIO_Pin == GPIO_PIN_13){
 80005d2:	88fb      	ldrh	r3, [r7, #6]
 80005d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80005d8:	d109      	bne.n	80005ee <HAL_GPIO_EXTI_Callback+0x26>
		x = (x == 0)? 1:0;
 80005da:	4b08      	ldr	r3, [pc, #32]	@ (80005fc <HAL_GPIO_EXTI_Callback+0x34>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	bf0c      	ite	eq
 80005e2:	2301      	moveq	r3, #1
 80005e4:	2300      	movne	r3, #0
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	461a      	mov	r2, r3
 80005ea:	4b04      	ldr	r3, [pc, #16]	@ (80005fc <HAL_GPIO_EXTI_Callback+0x34>)
 80005ec:	601a      	str	r2, [r3, #0]
	}
}
 80005ee:	bf00      	nop
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	20000300 	.word	0x20000300

08000600 <getAllForceSensorState>:
bool getAllForceSensorState(bool isSensor1Enabled ,bool isSensor2Enabled ,uint32_t sensorPressDuration,uint32_t pressureValueThreshold)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b088      	sub	sp, #32
 8000604:	af00      	add	r7, sp, #0
 8000606:	60ba      	str	r2, [r7, #8]
 8000608:	607b      	str	r3, [r7, #4]
 800060a:	4603      	mov	r3, r0
 800060c:	73fb      	strb	r3, [r7, #15]
 800060e:	460b      	mov	r3, r1
 8000610:	73bb      	strb	r3, [r7, #14]
	bool allForceSensorStateResult=false;
 8000612:	2300      	movs	r3, #0
 8000614:	77fb      	strb	r3, [r7, #31]
	uint32_t forceSensor1AveragedaValue=0;
 8000616:	2300      	movs	r3, #0
 8000618:	61bb      	str	r3, [r7, #24]
	uint32_t forceSensor2AveragedaValue=0;
 800061a:	2300      	movs	r3, #0
 800061c:	617b      	str	r3, [r7, #20]


	if (isSensor1Enabled && isSensor2Enabled)
 800061e:	7bfb      	ldrb	r3, [r7, #15]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d016      	beq.n	8000652 <getAllForceSensorState+0x52>
 8000624:	7bbb      	ldrb	r3, [r7, #14]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d013      	beq.n	8000652 <getAllForceSensorState+0x52>
	{
		forceSensor1AveragedaValue=readAveragedFSR(1,sensorPressDuration);
 800062a:	68b9      	ldr	r1, [r7, #8]
 800062c:	2001      	movs	r0, #1
 800062e:	f7ff ff93 	bl	8000558 <readAveragedFSR>
 8000632:	61b8      	str	r0, [r7, #24]
		forceSensor2AveragedaValue=readAveragedFSR(1,sensorPressDuration);//再改成2
 8000634:	68b9      	ldr	r1, [r7, #8]
 8000636:	2001      	movs	r0, #1
 8000638:	f7ff ff8e 	bl	8000558 <readAveragedFSR>
 800063c:	6178      	str	r0, [r7, #20]
		if(forceSensor1AveragedaValue || forceSensor2AveragedaValue> pressureValueThreshold)
 800063e:	69bb      	ldr	r3, [r7, #24]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d103      	bne.n	800064c <getAllForceSensorState+0x4c>
 8000644:	697a      	ldr	r2, [r7, #20]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	429a      	cmp	r2, r3
 800064a:	d911      	bls.n	8000670 <getAllForceSensorState+0x70>
		{
			allForceSensorStateResult=true;
 800064c:	2301      	movs	r3, #1
 800064e:	77fb      	strb	r3, [r7, #31]
		if(forceSensor1AveragedaValue || forceSensor2AveragedaValue> pressureValueThreshold)
 8000650:	e00e      	b.n	8000670 <getAllForceSensorState+0x70>
		}
	     //return true; // 兩個sensor都沒啟用，回傳 false
	}
	else if(isSensor1Enabled)
 8000652:	7bfb      	ldrb	r3, [r7, #15]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d002      	beq.n	800065e <getAllForceSensorState+0x5e>
	{
		allForceSensorStateResult=true;
 8000658:	2301      	movs	r3, #1
 800065a:	77fb      	strb	r3, [r7, #31]
 800065c:	e009      	b.n	8000672 <getAllForceSensorState+0x72>


	}
	else if(isSensor2Enabled)
 800065e:	7bbb      	ldrb	r3, [r7, #14]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d002      	beq.n	800066a <getAllForceSensorState+0x6a>
	{
		allForceSensorStateResult=true;
 8000664:	2301      	movs	r3, #1
 8000666:	77fb      	strb	r3, [r7, #31]
 8000668:	e003      	b.n	8000672 <getAllForceSensorState+0x72>
	}
	else
	{
		allForceSensorStateResult=false;
 800066a:	2300      	movs	r3, #0
 800066c:	77fb      	strb	r3, [r7, #31]
 800066e:	e000      	b.n	8000672 <getAllForceSensorState+0x72>
		if(forceSensor1AveragedaValue || forceSensor2AveragedaValue> pressureValueThreshold)
 8000670:	bf00      	nop
	}
	return allForceSensorStateResult;
 8000672:	7ffb      	ldrb	r3, [r7, #31]
}
 8000674:	4618      	mov	r0, r3
 8000676:	3720      	adds	r7, #32
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}

0800067c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b092      	sub	sp, #72	@ 0x48
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  //char buffer[40]="";
  int arr[10] = {0};  // 全部初始化為 0
 8000682:	f107 0308 	add.w	r3, r7, #8
 8000686:	2228      	movs	r2, #40	@ 0x28
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f004 fc4b 	bl	8004f26 <memset>
  int a=sizeof(arr);  // ✅ 這裡是陣列大小  a=40   10*4
 8000690:	2328      	movs	r3, #40	@ 0x28
 8000692:	647b      	str	r3, [r7, #68]	@ 0x44
  int value=2;
 8000694:	2302      	movs	r3, #2
 8000696:	643b      	str	r3, [r7, #64]	@ 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000698:	f000 fd24 	bl	80010e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069c:	f000 f838 	bl	8000710 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a0:	f000 f9fe 	bl	8000aa0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80006a4:	f000 f886 	bl	80007b4 <MX_ADC1_Init>
  MX_I2C1_Init();
 80006a8:	f000 f8fa 	bl	80008a0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80006ac:	f000 f968 	bl	8000980 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80006b0:	f000 f996 	bl	80009e0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80006b4:	f000 f9c4 	bl	8000a40 <MX_USART3_UART_Init>
  MX_UART4_Init();
 80006b8:	f000 f932 	bl	8000920 <MX_UART4_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //
	  bool touchSwitchFinalState=false;
 80006bc:	2300      	movs	r3, #0
 80006be:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	  bool forceSensorFinalState=false;
 80006c2:	2300      	movs	r3, #0
 80006c4:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	  uint32_t sensorPressDuration = 100;
 80006c8:	2364      	movs	r3, #100	@ 0x64
 80006ca:	63bb      	str	r3, [r7, #56]	@ 0x38
	  uint32_t pressValueThreshold = 3000; //
 80006cc:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80006d0:	637b      	str	r3, [r7, #52]	@ 0x34
	  bool isSensor1Enabled=true;
 80006d2:	2301      	movs	r3, #1
 80006d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	  bool isSensor2Enabled=true;
 80006d8:	2301      	movs	r3, #1
 80006da:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	  //uint32_t sensor1Flag=0;
	  //uint32_t sensor2Flag=0;


	  //getAllTouchSwitchState();
	  forceSensorFinalState=getAllForceSensorState(isSensor1Enabled,isSensor2Enabled,sensorPressDuration,pressValueThreshold);
 80006de:	f897 1032 	ldrb.w	r1, [r7, #50]	@ 0x32
 80006e2:	f897 0033 	ldrb.w	r0, [r7, #51]	@ 0x33
 80006e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80006e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80006ea:	f7ff ff89 	bl	8000600 <getAllForceSensorState>
 80006ee:	4603      	mov	r3, r0
 80006f0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	  ///
	  //snprintf(buffer, sizeof(buffer), "%d", value);
	  //transmitDataUart(buffer);

	  //
	  char txData[] = "12345";
 80006f4:	4a05      	ldr	r2, [pc, #20]	@ (800070c <main+0x90>)
 80006f6:	463b      	mov	r3, r7
 80006f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006fc:	6018      	str	r0, [r3, #0]
 80006fe:	3304      	adds	r3, #4
 8000700:	8019      	strh	r1, [r3, #0]
	      printf("Receive timeout or error\n");
	  }
*/
	  // 啟用力量感測器功能
	  //updateFSRState();   // 呼叫防彈跳判斷
	  HAL_Delay(100);     // 簡短延遲避免過度讀取ADC
 8000702:	2064      	movs	r0, #100	@ 0x64
 8000704:	f000 fd6a 	bl	80011dc <HAL_Delay>
  {
 8000708:	bf00      	nop
 800070a:	e7d7      	b.n	80006bc <main+0x40>
 800070c:	08005004 	.word	0x08005004

08000710 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b096      	sub	sp, #88	@ 0x58
 8000714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000716:	f107 0314 	add.w	r3, r7, #20
 800071a:	2244      	movs	r2, #68	@ 0x44
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f004 fc01 	bl	8004f26 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000724:	463b      	mov	r3, r7
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000732:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000736:	f002 fbc3 	bl	8002ec0 <HAL_PWREx_ControlVoltageScaling>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000740:	f000 fa40 	bl	8000bc4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000744:	2302      	movs	r3, #2
 8000746:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000748:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800074c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800074e:	2310      	movs	r3, #16
 8000750:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000752:	2302      	movs	r3, #2
 8000754:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000756:	2302      	movs	r3, #2
 8000758:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800075a:	2301      	movs	r3, #1
 800075c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800075e:	230a      	movs	r3, #10
 8000760:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000762:	2307      	movs	r3, #7
 8000764:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000766:	2302      	movs	r3, #2
 8000768:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800076a:	2302      	movs	r3, #2
 800076c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076e:	f107 0314 	add.w	r3, r7, #20
 8000772:	4618      	mov	r0, r3
 8000774:	f002 fbfa 	bl	8002f6c <HAL_RCC_OscConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800077e:	f000 fa21 	bl	8000bc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000782:	230f      	movs	r3, #15
 8000784:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000786:	2303      	movs	r3, #3
 8000788:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078a:	2300      	movs	r3, #0
 800078c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000792:	2300      	movs	r3, #0
 8000794:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000796:	463b      	mov	r3, r7
 8000798:	2104      	movs	r1, #4
 800079a:	4618      	mov	r0, r3
 800079c:	f002 ffc2 	bl	8003724 <HAL_RCC_ClockConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007a6:	f000 fa0d 	bl	8000bc4 <Error_Handler>
  }
}
 80007aa:	bf00      	nop
 80007ac:	3758      	adds	r7, #88	@ 0x58
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
	...

080007b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08a      	sub	sp, #40	@ 0x28
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007ba:	f107 031c 	add.w	r3, r7, #28
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
 80007d4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007d6:	4b2f      	ldr	r3, [pc, #188]	@ (8000894 <MX_ADC1_Init+0xe0>)
 80007d8:	4a2f      	ldr	r2, [pc, #188]	@ (8000898 <MX_ADC1_Init+0xe4>)
 80007da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007dc:	4b2d      	ldr	r3, [pc, #180]	@ (8000894 <MX_ADC1_Init+0xe0>)
 80007de:	2200      	movs	r2, #0
 80007e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007e2:	4b2c      	ldr	r3, [pc, #176]	@ (8000894 <MX_ADC1_Init+0xe0>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007e8:	4b2a      	ldr	r3, [pc, #168]	@ (8000894 <MX_ADC1_Init+0xe0>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007ee:	4b29      	ldr	r3, [pc, #164]	@ (8000894 <MX_ADC1_Init+0xe0>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007f4:	4b27      	ldr	r3, [pc, #156]	@ (8000894 <MX_ADC1_Init+0xe0>)
 80007f6:	2204      	movs	r2, #4
 80007f8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007fa:	4b26      	ldr	r3, [pc, #152]	@ (8000894 <MX_ADC1_Init+0xe0>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000800:	4b24      	ldr	r3, [pc, #144]	@ (8000894 <MX_ADC1_Init+0xe0>)
 8000802:	2200      	movs	r2, #0
 8000804:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000806:	4b23      	ldr	r3, [pc, #140]	@ (8000894 <MX_ADC1_Init+0xe0>)
 8000808:	2201      	movs	r2, #1
 800080a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800080c:	4b21      	ldr	r3, [pc, #132]	@ (8000894 <MX_ADC1_Init+0xe0>)
 800080e:	2200      	movs	r2, #0
 8000810:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000814:	4b1f      	ldr	r3, [pc, #124]	@ (8000894 <MX_ADC1_Init+0xe0>)
 8000816:	2200      	movs	r2, #0
 8000818:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800081a:	4b1e      	ldr	r3, [pc, #120]	@ (8000894 <MX_ADC1_Init+0xe0>)
 800081c:	2200      	movs	r2, #0
 800081e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000820:	4b1c      	ldr	r3, [pc, #112]	@ (8000894 <MX_ADC1_Init+0xe0>)
 8000822:	2200      	movs	r2, #0
 8000824:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000828:	4b1a      	ldr	r3, [pc, #104]	@ (8000894 <MX_ADC1_Init+0xe0>)
 800082a:	2200      	movs	r2, #0
 800082c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800082e:	4b19      	ldr	r3, [pc, #100]	@ (8000894 <MX_ADC1_Init+0xe0>)
 8000830:	2200      	movs	r2, #0
 8000832:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000836:	4817      	ldr	r0, [pc, #92]	@ (8000894 <MX_ADC1_Init+0xe0>)
 8000838:	f000 fed8 	bl	80015ec <HAL_ADC_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000842:	f000 f9bf 	bl	8000bc4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	4619      	mov	r1, r3
 8000850:	4810      	ldr	r0, [pc, #64]	@ (8000894 <MX_ADC1_Init+0xe0>)
 8000852:	f001 fe59 	bl	8002508 <HAL_ADCEx_MultiModeConfigChannel>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800085c:	f000 f9b2 	bl	8000bc4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000860:	4b0e      	ldr	r3, [pc, #56]	@ (800089c <MX_ADC1_Init+0xe8>)
 8000862:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000864:	2306      	movs	r3, #6
 8000866:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000868:	2300      	movs	r3, #0
 800086a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800086c:	237f      	movs	r3, #127	@ 0x7f
 800086e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000870:	2304      	movs	r3, #4
 8000872:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000874:	2300      	movs	r3, #0
 8000876:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000878:	1d3b      	adds	r3, r7, #4
 800087a:	4619      	mov	r1, r3
 800087c:	4805      	ldr	r0, [pc, #20]	@ (8000894 <MX_ADC1_Init+0xe0>)
 800087e:	f001 f9a5 	bl	8001bcc <HAL_ADC_ConfigChannel>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000888:	f000 f99c 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800088c:	bf00      	nop
 800088e:	3728      	adds	r7, #40	@ 0x28
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20000028 	.word	0x20000028
 8000898:	50040000 	.word	0x50040000
 800089c:	04300002 	.word	0x04300002

080008a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000914 <MX_I2C1_Init+0x74>)
 80008a6:	4a1c      	ldr	r2, [pc, #112]	@ (8000918 <MX_I2C1_Init+0x78>)
 80008a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 80008aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000914 <MX_I2C1_Init+0x74>)
 80008ac:	4a1b      	ldr	r2, [pc, #108]	@ (800091c <MX_I2C1_Init+0x7c>)
 80008ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008b0:	4b18      	ldr	r3, [pc, #96]	@ (8000914 <MX_I2C1_Init+0x74>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008b6:	4b17      	ldr	r3, [pc, #92]	@ (8000914 <MX_I2C1_Init+0x74>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008bc:	4b15      	ldr	r3, [pc, #84]	@ (8000914 <MX_I2C1_Init+0x74>)
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008c2:	4b14      	ldr	r3, [pc, #80]	@ (8000914 <MX_I2C1_Init+0x74>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008c8:	4b12      	ldr	r3, [pc, #72]	@ (8000914 <MX_I2C1_Init+0x74>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ce:	4b11      	ldr	r3, [pc, #68]	@ (8000914 <MX_I2C1_Init+0x74>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000914 <MX_I2C1_Init+0x74>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008da:	480e      	ldr	r0, [pc, #56]	@ (8000914 <MX_I2C1_Init+0x74>)
 80008dc:	f002 f9b0 	bl	8002c40 <HAL_I2C_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008e6:	f000 f96d 	bl	8000bc4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008ea:	2100      	movs	r1, #0
 80008ec:	4809      	ldr	r0, [pc, #36]	@ (8000914 <MX_I2C1_Init+0x74>)
 80008ee:	f002 fa42 	bl	8002d76 <HAL_I2CEx_ConfigAnalogFilter>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008f8:	f000 f964 	bl	8000bc4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008fc:	2100      	movs	r1, #0
 80008fe:	4805      	ldr	r0, [pc, #20]	@ (8000914 <MX_I2C1_Init+0x74>)
 8000900:	f002 fa84 	bl	8002e0c <HAL_I2CEx_ConfigDigitalFilter>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800090a:	f000 f95b 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	2000008c 	.word	0x2000008c
 8000918:	40005400 	.word	0x40005400
 800091c:	10d19ce4 	.word	0x10d19ce4

08000920 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000924:	4b14      	ldr	r3, [pc, #80]	@ (8000978 <MX_UART4_Init+0x58>)
 8000926:	4a15      	ldr	r2, [pc, #84]	@ (800097c <MX_UART4_Init+0x5c>)
 8000928:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800092a:	4b13      	ldr	r3, [pc, #76]	@ (8000978 <MX_UART4_Init+0x58>)
 800092c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000930:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000932:	4b11      	ldr	r3, [pc, #68]	@ (8000978 <MX_UART4_Init+0x58>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000938:	4b0f      	ldr	r3, [pc, #60]	@ (8000978 <MX_UART4_Init+0x58>)
 800093a:	2200      	movs	r2, #0
 800093c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800093e:	4b0e      	ldr	r3, [pc, #56]	@ (8000978 <MX_UART4_Init+0x58>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000944:	4b0c      	ldr	r3, [pc, #48]	@ (8000978 <MX_UART4_Init+0x58>)
 8000946:	220c      	movs	r2, #12
 8000948:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094a:	4b0b      	ldr	r3, [pc, #44]	@ (8000978 <MX_UART4_Init+0x58>)
 800094c:	2200      	movs	r2, #0
 800094e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000950:	4b09      	ldr	r3, [pc, #36]	@ (8000978 <MX_UART4_Init+0x58>)
 8000952:	2200      	movs	r2, #0
 8000954:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000956:	4b08      	ldr	r3, [pc, #32]	@ (8000978 <MX_UART4_Init+0x58>)
 8000958:	2200      	movs	r2, #0
 800095a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800095c:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <MX_UART4_Init+0x58>)
 800095e:	2200      	movs	r2, #0
 8000960:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000962:	4805      	ldr	r0, [pc, #20]	@ (8000978 <MX_UART4_Init+0x58>)
 8000964:	f003 fdbe 	bl	80044e4 <HAL_UART_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800096e:	f000 f929 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	200000e0 	.word	0x200000e0
 800097c:	40004c00 	.word	0x40004c00

08000980 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000984:	4b14      	ldr	r3, [pc, #80]	@ (80009d8 <MX_USART1_UART_Init+0x58>)
 8000986:	4a15      	ldr	r2, [pc, #84]	@ (80009dc <MX_USART1_UART_Init+0x5c>)
 8000988:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800098a:	4b13      	ldr	r3, [pc, #76]	@ (80009d8 <MX_USART1_UART_Init+0x58>)
 800098c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000990:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000992:	4b11      	ldr	r3, [pc, #68]	@ (80009d8 <MX_USART1_UART_Init+0x58>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000998:	4b0f      	ldr	r3, [pc, #60]	@ (80009d8 <MX_USART1_UART_Init+0x58>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800099e:	4b0e      	ldr	r3, [pc, #56]	@ (80009d8 <MX_USART1_UART_Init+0x58>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009a4:	4b0c      	ldr	r3, [pc, #48]	@ (80009d8 <MX_USART1_UART_Init+0x58>)
 80009a6:	220c      	movs	r2, #12
 80009a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009aa:	4b0b      	ldr	r3, [pc, #44]	@ (80009d8 <MX_USART1_UART_Init+0x58>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b0:	4b09      	ldr	r3, [pc, #36]	@ (80009d8 <MX_USART1_UART_Init+0x58>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009b6:	4b08      	ldr	r3, [pc, #32]	@ (80009d8 <MX_USART1_UART_Init+0x58>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009bc:	4b06      	ldr	r3, [pc, #24]	@ (80009d8 <MX_USART1_UART_Init+0x58>)
 80009be:	2200      	movs	r2, #0
 80009c0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009c2:	4805      	ldr	r0, [pc, #20]	@ (80009d8 <MX_USART1_UART_Init+0x58>)
 80009c4:	f003 fd8e 	bl	80044e4 <HAL_UART_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80009ce:	f000 f8f9 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20000168 	.word	0x20000168
 80009dc:	40013800 	.word	0x40013800

080009e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009e4:	4b14      	ldr	r3, [pc, #80]	@ (8000a38 <MX_USART2_UART_Init+0x58>)
 80009e6:	4a15      	ldr	r2, [pc, #84]	@ (8000a3c <MX_USART2_UART_Init+0x5c>)
 80009e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009ea:	4b13      	ldr	r3, [pc, #76]	@ (8000a38 <MX_USART2_UART_Init+0x58>)
 80009ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009f2:	4b11      	ldr	r3, [pc, #68]	@ (8000a38 <MX_USART2_UART_Init+0x58>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a38 <MX_USART2_UART_Init+0x58>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000a38 <MX_USART2_UART_Init+0x58>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a04:	4b0c      	ldr	r3, [pc, #48]	@ (8000a38 <MX_USART2_UART_Init+0x58>)
 8000a06:	220c      	movs	r2, #12
 8000a08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a38 <MX_USART2_UART_Init+0x58>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a10:	4b09      	ldr	r3, [pc, #36]	@ (8000a38 <MX_USART2_UART_Init+0x58>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a16:	4b08      	ldr	r3, [pc, #32]	@ (8000a38 <MX_USART2_UART_Init+0x58>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a1c:	4b06      	ldr	r3, [pc, #24]	@ (8000a38 <MX_USART2_UART_Init+0x58>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a22:	4805      	ldr	r0, [pc, #20]	@ (8000a38 <MX_USART2_UART_Init+0x58>)
 8000a24:	f003 fd5e 	bl	80044e4 <HAL_UART_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a2e:	f000 f8c9 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	200001f0 	.word	0x200001f0
 8000a3c:	40004400 	.word	0x40004400

08000a40 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a44:	4b14      	ldr	r3, [pc, #80]	@ (8000a98 <MX_USART3_UART_Init+0x58>)
 8000a46:	4a15      	ldr	r2, [pc, #84]	@ (8000a9c <MX_USART3_UART_Init+0x5c>)
 8000a48:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a4a:	4b13      	ldr	r3, [pc, #76]	@ (8000a98 <MX_USART3_UART_Init+0x58>)
 8000a4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a50:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a52:	4b11      	ldr	r3, [pc, #68]	@ (8000a98 <MX_USART3_UART_Init+0x58>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	@ (8000a98 <MX_USART3_UART_Init+0x58>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a98 <MX_USART3_UART_Init+0x58>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	@ (8000a98 <MX_USART3_UART_Init+0x58>)
 8000a66:	220c      	movs	r2, #12
 8000a68:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a98 <MX_USART3_UART_Init+0x58>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a70:	4b09      	ldr	r3, [pc, #36]	@ (8000a98 <MX_USART3_UART_Init+0x58>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a76:	4b08      	ldr	r3, [pc, #32]	@ (8000a98 <MX_USART3_UART_Init+0x58>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	@ (8000a98 <MX_USART3_UART_Init+0x58>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a82:	4805      	ldr	r0, [pc, #20]	@ (8000a98 <MX_USART3_UART_Init+0x58>)
 8000a84:	f003 fd2e 	bl	80044e4 <HAL_UART_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a8e:	f000 f899 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000278 	.word	0x20000278
 8000a9c:	40004800 	.word	0x40004800

08000aa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08a      	sub	sp, #40	@ 0x28
 8000aa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
 8000ab4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab6:	4b40      	ldr	r3, [pc, #256]	@ (8000bb8 <MX_GPIO_Init+0x118>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aba:	4a3f      	ldr	r2, [pc, #252]	@ (8000bb8 <MX_GPIO_Init+0x118>)
 8000abc:	f043 0304 	orr.w	r3, r3, #4
 8000ac0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ac2:	4b3d      	ldr	r3, [pc, #244]	@ (8000bb8 <MX_GPIO_Init+0x118>)
 8000ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac6:	f003 0304 	and.w	r3, r3, #4
 8000aca:	613b      	str	r3, [r7, #16]
 8000acc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ace:	4b3a      	ldr	r3, [pc, #232]	@ (8000bb8 <MX_GPIO_Init+0x118>)
 8000ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ad2:	4a39      	ldr	r2, [pc, #228]	@ (8000bb8 <MX_GPIO_Init+0x118>)
 8000ad4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ad8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ada:	4b37      	ldr	r3, [pc, #220]	@ (8000bb8 <MX_GPIO_Init+0x118>)
 8000adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ade:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae6:	4b34      	ldr	r3, [pc, #208]	@ (8000bb8 <MX_GPIO_Init+0x118>)
 8000ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aea:	4a33      	ldr	r2, [pc, #204]	@ (8000bb8 <MX_GPIO_Init+0x118>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000af2:	4b31      	ldr	r3, [pc, #196]	@ (8000bb8 <MX_GPIO_Init+0x118>)
 8000af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	60bb      	str	r3, [r7, #8]
 8000afc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afe:	4b2e      	ldr	r3, [pc, #184]	@ (8000bb8 <MX_GPIO_Init+0x118>)
 8000b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b02:	4a2d      	ldr	r2, [pc, #180]	@ (8000bb8 <MX_GPIO_Init+0x118>)
 8000b04:	f043 0302 	orr.w	r3, r3, #2
 8000b08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b0a:	4b2b      	ldr	r3, [pc, #172]	@ (8000bb8 <MX_GPIO_Init+0x118>)
 8000b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b0e:	f003 0302 	and.w	r3, r3, #2
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2120      	movs	r1, #32
 8000b1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b1e:	f002 f85f 	bl	8002be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8000b22:	2200      	movs	r2, #0
 8000b24:	f244 1181 	movw	r1, #16769	@ 0x4181
 8000b28:	4824      	ldr	r0, [pc, #144]	@ (8000bbc <MX_GPIO_Init+0x11c>)
 8000b2a:	f002 f859 	bl	8002be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b2e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b34:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4619      	mov	r1, r3
 8000b44:	481e      	ldr	r0, [pc, #120]	@ (8000bc0 <MX_GPIO_Init+0x120>)
 8000b46:	f001 fea1 	bl	800288c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b4a:	2320      	movs	r3, #32
 8000b4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b56:	2300      	movs	r3, #0
 8000b58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b5a:	f107 0314 	add.w	r3, r7, #20
 8000b5e:	4619      	mov	r1, r3
 8000b60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b64:	f001 fe92 	bl	800288c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_8;
 8000b68:	f244 1381 	movw	r3, #16769	@ 0x4181
 8000b6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b76:	2300      	movs	r3, #0
 8000b78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b7a:	f107 0314 	add.w	r3, r7, #20
 8000b7e:	4619      	mov	r1, r3
 8000b80:	480e      	ldr	r0, [pc, #56]	@ (8000bbc <MX_GPIO_Init+0x11c>)
 8000b82:	f001 fe83 	bl	800288c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b86:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4809      	ldr	r0, [pc, #36]	@ (8000bc0 <MX_GPIO_Init+0x120>)
 8000b9c:	f001 fe76 	bl	800288c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	2028      	movs	r0, #40	@ 0x28
 8000ba6:	f001 fe3a 	bl	800281e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000baa:	2028      	movs	r0, #40	@ 0x28
 8000bac:	f001 fe53 	bl	8002856 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000bb0:	bf00      	nop
 8000bb2:	3728      	adds	r7, #40	@ 0x28
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40021000 	.word	0x40021000
 8000bbc:	48000400 	.word	0x48000400
 8000bc0:	48000800 	.word	0x48000800

08000bc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc8:	b672      	cpsid	i
}
 8000bca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bcc:	bf00      	nop
 8000bce:	e7fd      	b.n	8000bcc <Error_Handler+0x8>

08000bd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd6:	4b0f      	ldr	r3, [pc, #60]	@ (8000c14 <HAL_MspInit+0x44>)
 8000bd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bda:	4a0e      	ldr	r2, [pc, #56]	@ (8000c14 <HAL_MspInit+0x44>)
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000be2:	4b0c      	ldr	r3, [pc, #48]	@ (8000c14 <HAL_MspInit+0x44>)
 8000be4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bee:	4b09      	ldr	r3, [pc, #36]	@ (8000c14 <HAL_MspInit+0x44>)
 8000bf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bf2:	4a08      	ldr	r2, [pc, #32]	@ (8000c14 <HAL_MspInit+0x44>)
 8000bf4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bf8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bfa:	4b06      	ldr	r3, [pc, #24]	@ (8000c14 <HAL_MspInit+0x44>)
 8000bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c02:	603b      	str	r3, [r7, #0]
 8000c04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	40021000 	.word	0x40021000

08000c18 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b0ac      	sub	sp, #176	@ 0xb0
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	2288      	movs	r2, #136	@ 0x88
 8000c36:	2100      	movs	r1, #0
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f004 f974 	bl	8004f26 <memset>
  if(hadc->Instance==ADC1)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a27      	ldr	r2, [pc, #156]	@ (8000ce0 <HAL_ADC_MspInit+0xc8>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d146      	bne.n	8000cd6 <HAL_ADC_MspInit+0xbe>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c48:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000c4c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000c4e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000c52:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000c56:	2302      	movs	r3, #2
 8000c58:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000c5e:	2308      	movs	r3, #8
 8000c60:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000c62:	2307      	movs	r3, #7
 8000c64:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000c66:	2302      	movs	r3, #2
 8000c68:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000c6e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000c72:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f002 ff77 	bl	8003b6c <HAL_RCCEx_PeriphCLKConfig>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000c84:	f7ff ff9e 	bl	8000bc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000c88:	4b16      	ldr	r3, [pc, #88]	@ (8000ce4 <HAL_ADC_MspInit+0xcc>)
 8000c8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c8c:	4a15      	ldr	r2, [pc, #84]	@ (8000ce4 <HAL_ADC_MspInit+0xcc>)
 8000c8e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000c92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c94:	4b13      	ldr	r3, [pc, #76]	@ (8000ce4 <HAL_ADC_MspInit+0xcc>)
 8000c96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c9c:	613b      	str	r3, [r7, #16]
 8000c9e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca0:	4b10      	ldr	r3, [pc, #64]	@ (8000ce4 <HAL_ADC_MspInit+0xcc>)
 8000ca2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ca4:	4a0f      	ldr	r2, [pc, #60]	@ (8000ce4 <HAL_ADC_MspInit+0xcc>)
 8000ca6:	f043 0304 	orr.w	r3, r3, #4
 8000caa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cac:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce4 <HAL_ADC_MspInit+0xcc>)
 8000cae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cb0:	f003 0304 	and.w	r3, r3, #4
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000cbe:	230b      	movs	r3, #11
 8000cc0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cca:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4805      	ldr	r0, [pc, #20]	@ (8000ce8 <HAL_ADC_MspInit+0xd0>)
 8000cd2:	f001 fddb 	bl	800288c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000cd6:	bf00      	nop
 8000cd8:	37b0      	adds	r7, #176	@ 0xb0
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	50040000 	.word	0x50040000
 8000ce4:	40021000 	.word	0x40021000
 8000ce8:	48000800 	.word	0x48000800

08000cec <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b0ac      	sub	sp, #176	@ 0xb0
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	2288      	movs	r2, #136	@ 0x88
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f004 f90a 	bl	8004f26 <memset>
  if(hi2c->Instance==I2C1)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a21      	ldr	r2, [pc, #132]	@ (8000d9c <HAL_I2C_MspInit+0xb0>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d13b      	bne.n	8000d94 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d1c:	2340      	movs	r3, #64	@ 0x40
 8000d1e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d20:	2300      	movs	r3, #0
 8000d22:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f002 ff1f 	bl	8003b6c <HAL_RCCEx_PeriphCLKConfig>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000d34:	f7ff ff46 	bl	8000bc4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d38:	4b19      	ldr	r3, [pc, #100]	@ (8000da0 <HAL_I2C_MspInit+0xb4>)
 8000d3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d3c:	4a18      	ldr	r2, [pc, #96]	@ (8000da0 <HAL_I2C_MspInit+0xb4>)
 8000d3e:	f043 0302 	orr.w	r3, r3, #2
 8000d42:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d44:	4b16      	ldr	r3, [pc, #88]	@ (8000da0 <HAL_I2C_MspInit+0xb4>)
 8000d46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d48:	f003 0302 	and.w	r3, r3, #2
 8000d4c:	613b      	str	r3, [r7, #16]
 8000d4e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000d50:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000d54:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d58:	2312      	movs	r3, #18
 8000d5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d64:	2303      	movs	r3, #3
 8000d66:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d6a:	2304      	movs	r3, #4
 8000d6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d70:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d74:	4619      	mov	r1, r3
 8000d76:	480b      	ldr	r0, [pc, #44]	@ (8000da4 <HAL_I2C_MspInit+0xb8>)
 8000d78:	f001 fd88 	bl	800288c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d7c:	4b08      	ldr	r3, [pc, #32]	@ (8000da0 <HAL_I2C_MspInit+0xb4>)
 8000d7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d80:	4a07      	ldr	r2, [pc, #28]	@ (8000da0 <HAL_I2C_MspInit+0xb4>)
 8000d82:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d86:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d88:	4b05      	ldr	r3, [pc, #20]	@ (8000da0 <HAL_I2C_MspInit+0xb4>)
 8000d8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000d94:	bf00      	nop
 8000d96:	37b0      	adds	r7, #176	@ 0xb0
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40005400 	.word	0x40005400
 8000da0:	40021000 	.word	0x40021000
 8000da4:	48000400 	.word	0x48000400

08000da8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b0b2      	sub	sp, #200	@ 0xc8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db0:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dc0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dc4:	2288      	movs	r2, #136	@ 0x88
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f004 f8ac 	bl	8004f26 <memset>
  if(huart->Instance==UART4)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a84      	ldr	r2, [pc, #528]	@ (8000fe4 <HAL_UART_MspInit+0x23c>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d13c      	bne.n	8000e52 <HAL_UART_MspInit+0xaa>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000dd8:	2308      	movs	r3, #8
 8000dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000de0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000de4:	4618      	mov	r0, r3
 8000de6:	f002 fec1 	bl	8003b6c <HAL_RCCEx_PeriphCLKConfig>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000df0:	f7ff fee8 	bl	8000bc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000df4:	4b7c      	ldr	r3, [pc, #496]	@ (8000fe8 <HAL_UART_MspInit+0x240>)
 8000df6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000df8:	4a7b      	ldr	r2, [pc, #492]	@ (8000fe8 <HAL_UART_MspInit+0x240>)
 8000dfa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000dfe:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e00:	4b79      	ldr	r3, [pc, #484]	@ (8000fe8 <HAL_UART_MspInit+0x240>)
 8000e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e04:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000e08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0c:	4b76      	ldr	r3, [pc, #472]	@ (8000fe8 <HAL_UART_MspInit+0x240>)
 8000e0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e10:	4a75      	ldr	r2, [pc, #468]	@ (8000fe8 <HAL_UART_MspInit+0x240>)
 8000e12:	f043 0301 	orr.w	r3, r3, #1
 8000e16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e18:	4b73      	ldr	r3, [pc, #460]	@ (8000fe8 <HAL_UART_MspInit+0x240>)
 8000e1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e1c:	f003 0301 	and.w	r3, r3, #1
 8000e20:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e24:	2303      	movs	r3, #3
 8000e26:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e36:	2303      	movs	r3, #3
 8000e38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000e3c:	2308      	movs	r3, #8
 8000e3e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e42:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000e46:	4619      	mov	r1, r3
 8000e48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e4c:	f001 fd1e 	bl	800288c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e50:	e0c4      	b.n	8000fdc <HAL_UART_MspInit+0x234>
  else if(huart->Instance==USART1)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a65      	ldr	r2, [pc, #404]	@ (8000fec <HAL_UART_MspInit+0x244>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d13d      	bne.n	8000ed8 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e60:	2300      	movs	r3, #0
 8000e62:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e64:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f002 fe7f 	bl	8003b6c <HAL_RCCEx_PeriphCLKConfig>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8000e74:	f7ff fea6 	bl	8000bc4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e78:	4b5b      	ldr	r3, [pc, #364]	@ (8000fe8 <HAL_UART_MspInit+0x240>)
 8000e7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e7c:	4a5a      	ldr	r2, [pc, #360]	@ (8000fe8 <HAL_UART_MspInit+0x240>)
 8000e7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e82:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e84:	4b58      	ldr	r3, [pc, #352]	@ (8000fe8 <HAL_UART_MspInit+0x240>)
 8000e86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e8c:	623b      	str	r3, [r7, #32]
 8000e8e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e90:	4b55      	ldr	r3, [pc, #340]	@ (8000fe8 <HAL_UART_MspInit+0x240>)
 8000e92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e94:	4a54      	ldr	r2, [pc, #336]	@ (8000fe8 <HAL_UART_MspInit+0x240>)
 8000e96:	f043 0301 	orr.w	r3, r3, #1
 8000e9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e9c:	4b52      	ldr	r3, [pc, #328]	@ (8000fe8 <HAL_UART_MspInit+0x240>)
 8000e9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea0:	f003 0301 	and.w	r3, r3, #1
 8000ea4:	61fb      	str	r3, [r7, #28]
 8000ea6:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ea8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000eac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ec2:	2307      	movs	r3, #7
 8000ec4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec8:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000ecc:	4619      	mov	r1, r3
 8000ece:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ed2:	f001 fcdb 	bl	800288c <HAL_GPIO_Init>
}
 8000ed6:	e081      	b.n	8000fdc <HAL_UART_MspInit+0x234>
  else if(huart->Instance==USART2)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a44      	ldr	r2, [pc, #272]	@ (8000ff0 <HAL_UART_MspInit+0x248>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d13c      	bne.n	8000f5c <HAL_UART_MspInit+0x1b4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f002 fe3c 	bl	8003b6c <HAL_RCCEx_PeriphCLKConfig>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <HAL_UART_MspInit+0x156>
      Error_Handler();
 8000efa:	f7ff fe63 	bl	8000bc4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000efe:	4b3a      	ldr	r3, [pc, #232]	@ (8000fe8 <HAL_UART_MspInit+0x240>)
 8000f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f02:	4a39      	ldr	r2, [pc, #228]	@ (8000fe8 <HAL_UART_MspInit+0x240>)
 8000f04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f08:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f0a:	4b37      	ldr	r3, [pc, #220]	@ (8000fe8 <HAL_UART_MspInit+0x240>)
 8000f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f12:	61bb      	str	r3, [r7, #24]
 8000f14:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	4b34      	ldr	r3, [pc, #208]	@ (8000fe8 <HAL_UART_MspInit+0x240>)
 8000f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f1a:	4a33      	ldr	r2, [pc, #204]	@ (8000fe8 <HAL_UART_MspInit+0x240>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f22:	4b31      	ldr	r3, [pc, #196]	@ (8000fe8 <HAL_UART_MspInit+0x240>)
 8000f24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	617b      	str	r3, [r7, #20]
 8000f2c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f2e:	230c      	movs	r3, #12
 8000f30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f34:	2302      	movs	r3, #2
 8000f36:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f40:	2303      	movs	r3, #3
 8000f42:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f46:	2307      	movs	r3, #7
 8000f48:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4c:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000f50:	4619      	mov	r1, r3
 8000f52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f56:	f001 fc99 	bl	800288c <HAL_GPIO_Init>
}
 8000f5a:	e03f      	b.n	8000fdc <HAL_UART_MspInit+0x234>
  else if(huart->Instance==USART3)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a24      	ldr	r2, [pc, #144]	@ (8000ff4 <HAL_UART_MspInit+0x24c>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d13a      	bne.n	8000fdc <HAL_UART_MspInit+0x234>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f66:	2304      	movs	r3, #4
 8000f68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f6e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f72:	4618      	mov	r0, r3
 8000f74:	f002 fdfa 	bl	8003b6c <HAL_RCCEx_PeriphCLKConfig>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <HAL_UART_MspInit+0x1da>
      Error_Handler();
 8000f7e:	f7ff fe21 	bl	8000bc4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f82:	4b19      	ldr	r3, [pc, #100]	@ (8000fe8 <HAL_UART_MspInit+0x240>)
 8000f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f86:	4a18      	ldr	r2, [pc, #96]	@ (8000fe8 <HAL_UART_MspInit+0x240>)
 8000f88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f8e:	4b16      	ldr	r3, [pc, #88]	@ (8000fe8 <HAL_UART_MspInit+0x240>)
 8000f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f92:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f96:	613b      	str	r3, [r7, #16]
 8000f98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9a:	4b13      	ldr	r3, [pc, #76]	@ (8000fe8 <HAL_UART_MspInit+0x240>)
 8000f9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f9e:	4a12      	ldr	r2, [pc, #72]	@ (8000fe8 <HAL_UART_MspInit+0x240>)
 8000fa0:	f043 0304 	orr.w	r3, r3, #4
 8000fa4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fa6:	4b10      	ldr	r3, [pc, #64]	@ (8000fe8 <HAL_UART_MspInit+0x240>)
 8000fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000faa:	f003 0304 	and.w	r3, r3, #4
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000fb2:	2330      	movs	r3, #48	@ 0x30
 8000fb4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fca:	2307      	movs	r3, #7
 8000fcc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd0:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4808      	ldr	r0, [pc, #32]	@ (8000ff8 <HAL_UART_MspInit+0x250>)
 8000fd8:	f001 fc58 	bl	800288c <HAL_GPIO_Init>
}
 8000fdc:	bf00      	nop
 8000fde:	37c8      	adds	r7, #200	@ 0xc8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40004c00 	.word	0x40004c00
 8000fe8:	40021000 	.word	0x40021000
 8000fec:	40013800 	.word	0x40013800
 8000ff0:	40004400 	.word	0x40004400
 8000ff4:	40004800 	.word	0x40004800
 8000ff8:	48000800 	.word	0x48000800

08000ffc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001000:	bf00      	nop
 8001002:	e7fd      	b.n	8001000 <NMI_Handler+0x4>

08001004 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001008:	bf00      	nop
 800100a:	e7fd      	b.n	8001008 <HardFault_Handler+0x4>

0800100c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001010:	bf00      	nop
 8001012:	e7fd      	b.n	8001010 <MemManage_Handler+0x4>

08001014 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001018:	bf00      	nop
 800101a:	e7fd      	b.n	8001018 <BusFault_Handler+0x4>

0800101c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001020:	bf00      	nop
 8001022:	e7fd      	b.n	8001020 <UsageFault_Handler+0x4>

08001024 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001052:	f000 f8a3 	bl	800119c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}

0800105a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800105e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001062:	f001 fdd5 	bl	8002c10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
	...

0800106c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001070:	4b06      	ldr	r3, [pc, #24]	@ (800108c <SystemInit+0x20>)
 8001072:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001076:	4a05      	ldr	r2, [pc, #20]	@ (800108c <SystemInit+0x20>)
 8001078:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800107c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001090:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010c8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001094:	f7ff ffea 	bl	800106c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001098:	480c      	ldr	r0, [pc, #48]	@ (80010cc <LoopForever+0x6>)
  ldr r1, =_edata
 800109a:	490d      	ldr	r1, [pc, #52]	@ (80010d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800109c:	4a0d      	ldr	r2, [pc, #52]	@ (80010d4 <LoopForever+0xe>)
  movs r3, #0
 800109e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a0:	e002      	b.n	80010a8 <LoopCopyDataInit>

080010a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010a6:	3304      	adds	r3, #4

080010a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010ac:	d3f9      	bcc.n	80010a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ae:	4a0a      	ldr	r2, [pc, #40]	@ (80010d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010b0:	4c0a      	ldr	r4, [pc, #40]	@ (80010dc <LoopForever+0x16>)
  movs r3, #0
 80010b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b4:	e001      	b.n	80010ba <LoopFillZerobss>

080010b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010b8:	3204      	adds	r2, #4

080010ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010bc:	d3fb      	bcc.n	80010b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010be:	f003 ff3b 	bl	8004f38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010c2:	f7ff fadb 	bl	800067c <main>

080010c6 <LoopForever>:

LoopForever:
    b LoopForever
 80010c6:	e7fe      	b.n	80010c6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010c8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80010cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010d0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80010d4:	08005064 	.word	0x08005064
  ldr r2, =_sbss
 80010d8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80010dc:	20000308 	.word	0x20000308

080010e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010e0:	e7fe      	b.n	80010e0 <ADC1_2_IRQHandler>
	...

080010e4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010ea:	2300      	movs	r3, #0
 80010ec:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001120 <HAL_Init+0x3c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a0b      	ldr	r2, [pc, #44]	@ (8001120 <HAL_Init+0x3c>)
 80010f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010f8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010fa:	2003      	movs	r0, #3
 80010fc:	f001 fb84 	bl	8002808 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001100:	2000      	movs	r0, #0
 8001102:	f000 f80f 	bl	8001124 <HAL_InitTick>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d002      	beq.n	8001112 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	71fb      	strb	r3, [r7, #7]
 8001110:	e001      	b.n	8001116 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001112:	f7ff fd5d 	bl	8000bd0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001116:	79fb      	ldrb	r3, [r7, #7]
}
 8001118:	4618      	mov	r0, r3
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40022000 	.word	0x40022000

08001124 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800112c:	2300      	movs	r3, #0
 800112e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001130:	4b17      	ldr	r3, [pc, #92]	@ (8001190 <HAL_InitTick+0x6c>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d023      	beq.n	8001180 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001138:	4b16      	ldr	r3, [pc, #88]	@ (8001194 <HAL_InitTick+0x70>)
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	4b14      	ldr	r3, [pc, #80]	@ (8001190 <HAL_InitTick+0x6c>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	4619      	mov	r1, r3
 8001142:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001146:	fbb3 f3f1 	udiv	r3, r3, r1
 800114a:	fbb2 f3f3 	udiv	r3, r2, r3
 800114e:	4618      	mov	r0, r3
 8001150:	f001 fb8f 	bl	8002872 <HAL_SYSTICK_Config>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d10f      	bne.n	800117a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2b0f      	cmp	r3, #15
 800115e:	d809      	bhi.n	8001174 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001160:	2200      	movs	r2, #0
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	f04f 30ff 	mov.w	r0, #4294967295
 8001168:	f001 fb59 	bl	800281e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800116c:	4a0a      	ldr	r2, [pc, #40]	@ (8001198 <HAL_InitTick+0x74>)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6013      	str	r3, [r2, #0]
 8001172:	e007      	b.n	8001184 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001174:	2301      	movs	r3, #1
 8001176:	73fb      	strb	r3, [r7, #15]
 8001178:	e004      	b.n	8001184 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	73fb      	strb	r3, [r7, #15]
 800117e:	e001      	b.n	8001184 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001180:	2301      	movs	r3, #1
 8001182:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001184:	7bfb      	ldrb	r3, [r7, #15]
}
 8001186:	4618      	mov	r0, r3
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000008 	.word	0x20000008
 8001194:	20000000 	.word	0x20000000
 8001198:	20000004 	.word	0x20000004

0800119c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011a0:	4b06      	ldr	r3, [pc, #24]	@ (80011bc <HAL_IncTick+0x20>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	461a      	mov	r2, r3
 80011a6:	4b06      	ldr	r3, [pc, #24]	@ (80011c0 <HAL_IncTick+0x24>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4413      	add	r3, r2
 80011ac:	4a04      	ldr	r2, [pc, #16]	@ (80011c0 <HAL_IncTick+0x24>)
 80011ae:	6013      	str	r3, [r2, #0]
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	20000008 	.word	0x20000008
 80011c0:	20000304 	.word	0x20000304

080011c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  return uwTick;
 80011c8:	4b03      	ldr	r3, [pc, #12]	@ (80011d8 <HAL_GetTick+0x14>)
 80011ca:	681b      	ldr	r3, [r3, #0]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	20000304 	.word	0x20000304

080011dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011e4:	f7ff ffee 	bl	80011c4 <HAL_GetTick>
 80011e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011f4:	d005      	beq.n	8001202 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80011f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001220 <HAL_Delay+0x44>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	461a      	mov	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	4413      	add	r3, r2
 8001200:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001202:	bf00      	nop
 8001204:	f7ff ffde 	bl	80011c4 <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	68fa      	ldr	r2, [r7, #12]
 8001210:	429a      	cmp	r2, r3
 8001212:	d8f7      	bhi.n	8001204 <HAL_Delay+0x28>
  {
  }
}
 8001214:	bf00      	nop
 8001216:	bf00      	nop
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000008 	.word	0x20000008

08001224 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	431a      	orrs	r2, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	609a      	str	r2, [r3, #8]
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800124a:	b480      	push	{r7}
 800124c:	b083      	sub	sp, #12
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
 8001252:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	431a      	orrs	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	609a      	str	r2, [r3, #8]
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001280:	4618      	mov	r0, r3
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800128c:	b480      	push	{r7}
 800128e:	b087      	sub	sp, #28
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
 8001298:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	3360      	adds	r3, #96	@ 0x60
 800129e:	461a      	mov	r2, r3
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	4413      	add	r3, r2
 80012a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	4b08      	ldr	r3, [pc, #32]	@ (80012d0 <LL_ADC_SetOffset+0x44>)
 80012ae:	4013      	ands	r3, r2
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80012b6:	683a      	ldr	r2, [r7, #0]
 80012b8:	430a      	orrs	r2, r1
 80012ba:	4313      	orrs	r3, r2
 80012bc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80012c4:	bf00      	nop
 80012c6:	371c      	adds	r7, #28
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	03fff000 	.word	0x03fff000

080012d4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	3360      	adds	r3, #96	@ 0x60
 80012e2:	461a      	mov	r2, r3
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	4413      	add	r3, r2
 80012ea:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001300:	b480      	push	{r7}
 8001302:	b087      	sub	sp, #28
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	3360      	adds	r3, #96	@ 0x60
 8001310:	461a      	mov	r2, r3
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	4413      	add	r3, r2
 8001318:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	431a      	orrs	r2, r3
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800132a:	bf00      	nop
 800132c:	371c      	adds	r7, #28
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr

08001336 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001336:	b480      	push	{r7}
 8001338:	b083      	sub	sp, #12
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001346:	2b00      	cmp	r3, #0
 8001348:	d101      	bne.n	800134e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800134a:	2301      	movs	r3, #1
 800134c:	e000      	b.n	8001350 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800134e:	2300      	movs	r3, #0
}
 8001350:	4618      	mov	r0, r3
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800135c:	b480      	push	{r7}
 800135e:	b087      	sub	sp, #28
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	3330      	adds	r3, #48	@ 0x30
 800136c:	461a      	mov	r2, r3
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	0a1b      	lsrs	r3, r3, #8
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	f003 030c 	and.w	r3, r3, #12
 8001378:	4413      	add	r3, r2
 800137a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	f003 031f 	and.w	r3, r3, #31
 8001386:	211f      	movs	r1, #31
 8001388:	fa01 f303 	lsl.w	r3, r1, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	401a      	ands	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	0e9b      	lsrs	r3, r3, #26
 8001394:	f003 011f 	and.w	r1, r3, #31
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	f003 031f 	and.w	r3, r3, #31
 800139e:	fa01 f303 	lsl.w	r3, r1, r3
 80013a2:	431a      	orrs	r2, r3
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80013a8:	bf00      	nop
 80013aa:	371c      	adds	r7, #28
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b087      	sub	sp, #28
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	3314      	adds	r3, #20
 80013c4:	461a      	mov	r2, r3
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	0e5b      	lsrs	r3, r3, #25
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	f003 0304 	and.w	r3, r3, #4
 80013d0:	4413      	add	r3, r2
 80013d2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	0d1b      	lsrs	r3, r3, #20
 80013dc:	f003 031f 	and.w	r3, r3, #31
 80013e0:	2107      	movs	r1, #7
 80013e2:	fa01 f303 	lsl.w	r3, r1, r3
 80013e6:	43db      	mvns	r3, r3
 80013e8:	401a      	ands	r2, r3
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	0d1b      	lsrs	r3, r3, #20
 80013ee:	f003 031f 	and.w	r3, r3, #31
 80013f2:	6879      	ldr	r1, [r7, #4]
 80013f4:	fa01 f303 	lsl.w	r3, r1, r3
 80013f8:	431a      	orrs	r2, r3
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80013fe:	bf00      	nop
 8001400:	371c      	adds	r7, #28
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
	...

0800140c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001424:	43db      	mvns	r3, r3
 8001426:	401a      	ands	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f003 0318 	and.w	r3, r3, #24
 800142e:	4908      	ldr	r1, [pc, #32]	@ (8001450 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001430:	40d9      	lsrs	r1, r3
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	400b      	ands	r3, r1
 8001436:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800143a:	431a      	orrs	r2, r3
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001442:	bf00      	nop
 8001444:	3714      	adds	r7, #20
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	0007ffff 	.word	0x0007ffff

08001454 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	f003 031f 	and.w	r3, r3, #31
}
 8001464:	4618      	mov	r0, r3
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001480:	4618      	mov	r0, r3
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800149c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	6093      	str	r3, [r2, #8]
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80014c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80014c4:	d101      	bne.n	80014ca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80014c6:	2301      	movs	r3, #1
 80014c8:	e000      	b.n	80014cc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80014e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80014ec:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001510:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001514:	d101      	bne.n	800151a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001516:	2301      	movs	r3, #1
 8001518:	e000      	b.n	800151c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800151a:	2300      	movs	r3, #0
}
 800151c:	4618      	mov	r0, r3
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001538:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800153c:	f043 0201 	orr.w	r2, r3, #1
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f003 0301 	and.w	r3, r3, #1
 8001560:	2b01      	cmp	r3, #1
 8001562:	d101      	bne.n	8001568 <LL_ADC_IsEnabled+0x18>
 8001564:	2301      	movs	r3, #1
 8001566:	e000      	b.n	800156a <LL_ADC_IsEnabled+0x1a>
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001576:	b480      	push	{r7}
 8001578:	b083      	sub	sp, #12
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001586:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800158a:	f043 0204 	orr.w	r2, r3, #4
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800159e:	b480      	push	{r7}
 80015a0:	b083      	sub	sp, #12
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f003 0304 	and.w	r3, r3, #4
 80015ae:	2b04      	cmp	r3, #4
 80015b0:	d101      	bne.n	80015b6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80015b2:	2301      	movs	r3, #1
 80015b4:	e000      	b.n	80015b8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80015b6:	2300      	movs	r3, #0
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f003 0308 	and.w	r3, r3, #8
 80015d4:	2b08      	cmp	r3, #8
 80015d6:	d101      	bne.n	80015dc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80015d8:	2301      	movs	r3, #1
 80015da:	e000      	b.n	80015de <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
	...

080015ec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80015ec:	b590      	push	{r4, r7, lr}
 80015ee:	b089      	sub	sp, #36	@ 0x24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015f4:	2300      	movs	r3, #0
 80015f6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d101      	bne.n	8001606 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e130      	b.n	8001868 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001610:	2b00      	cmp	r3, #0
 8001612:	d109      	bne.n	8001628 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f7ff faff 	bl	8000c18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff ff3f 	bl	80014b0 <LL_ADC_IsDeepPowerDownEnabled>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d004      	beq.n	8001642 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff ff25 	bl	800148c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff ff5a 	bl	8001500 <LL_ADC_IsInternalRegulatorEnabled>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d115      	bne.n	800167e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff ff3e 	bl	80014d8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800165c:	4b84      	ldr	r3, [pc, #528]	@ (8001870 <HAL_ADC_Init+0x284>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	099b      	lsrs	r3, r3, #6
 8001662:	4a84      	ldr	r2, [pc, #528]	@ (8001874 <HAL_ADC_Init+0x288>)
 8001664:	fba2 2303 	umull	r2, r3, r2, r3
 8001668:	099b      	lsrs	r3, r3, #6
 800166a:	3301      	adds	r3, #1
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001670:	e002      	b.n	8001678 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	3b01      	subs	r3, #1
 8001676:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1f9      	bne.n	8001672 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff ff3c 	bl	8001500 <LL_ADC_IsInternalRegulatorEnabled>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d10d      	bne.n	80016aa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001692:	f043 0210 	orr.w	r2, r3, #16
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800169e:	f043 0201 	orr.w	r2, r3, #1
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff ff75 	bl	800159e <LL_ADC_REG_IsConversionOngoing>
 80016b4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016ba:	f003 0310 	and.w	r3, r3, #16
 80016be:	2b00      	cmp	r3, #0
 80016c0:	f040 80c9 	bne.w	8001856 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f040 80c5 	bne.w	8001856 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016d0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80016d4:	f043 0202 	orr.w	r2, r3, #2
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff ff35 	bl	8001550 <LL_ADC_IsEnabled>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d115      	bne.n	8001718 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80016ec:	4862      	ldr	r0, [pc, #392]	@ (8001878 <HAL_ADC_Init+0x28c>)
 80016ee:	f7ff ff2f 	bl	8001550 <LL_ADC_IsEnabled>
 80016f2:	4604      	mov	r4, r0
 80016f4:	4861      	ldr	r0, [pc, #388]	@ (800187c <HAL_ADC_Init+0x290>)
 80016f6:	f7ff ff2b 	bl	8001550 <LL_ADC_IsEnabled>
 80016fa:	4603      	mov	r3, r0
 80016fc:	431c      	orrs	r4, r3
 80016fe:	4860      	ldr	r0, [pc, #384]	@ (8001880 <HAL_ADC_Init+0x294>)
 8001700:	f7ff ff26 	bl	8001550 <LL_ADC_IsEnabled>
 8001704:	4603      	mov	r3, r0
 8001706:	4323      	orrs	r3, r4
 8001708:	2b00      	cmp	r3, #0
 800170a:	d105      	bne.n	8001718 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	4619      	mov	r1, r3
 8001712:	485c      	ldr	r0, [pc, #368]	@ (8001884 <HAL_ADC_Init+0x298>)
 8001714:	f7ff fd86 	bl	8001224 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	7e5b      	ldrb	r3, [r3, #25]
 800171c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001722:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001728:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800172e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001736:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001738:	4313      	orrs	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d106      	bne.n	8001754 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800174a:	3b01      	subs	r3, #1
 800174c:	045b      	lsls	r3, r3, #17
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	4313      	orrs	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001758:	2b00      	cmp	r3, #0
 800175a:	d009      	beq.n	8001770 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001760:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001768:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	4313      	orrs	r3, r2
 800176e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	68da      	ldr	r2, [r3, #12]
 8001776:	4b44      	ldr	r3, [pc, #272]	@ (8001888 <HAL_ADC_Init+0x29c>)
 8001778:	4013      	ands	r3, r2
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	6812      	ldr	r2, [r2, #0]
 800177e:	69b9      	ldr	r1, [r7, #24]
 8001780:	430b      	orrs	r3, r1
 8001782:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff ff1b 	bl	80015c4 <LL_ADC_INJ_IsConversionOngoing>
 800178e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d13d      	bne.n	8001812 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d13a      	bne.n	8001812 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80017a0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80017a8:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80017aa:	4313      	orrs	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80017b8:	f023 0302 	bic.w	r3, r3, #2
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	6812      	ldr	r2, [r2, #0]
 80017c0:	69b9      	ldr	r1, [r7, #24]
 80017c2:	430b      	orrs	r3, r1
 80017c4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d118      	bne.n	8001802 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	691b      	ldr	r3, [r3, #16]
 80017d6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80017da:	f023 0304 	bic.w	r3, r3, #4
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80017e6:	4311      	orrs	r1, r2
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80017ec:	4311      	orrs	r1, r2
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80017f2:	430a      	orrs	r2, r1
 80017f4:	431a      	orrs	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f042 0201 	orr.w	r2, r2, #1
 80017fe:	611a      	str	r2, [r3, #16]
 8001800:	e007      	b.n	8001812 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	691a      	ldr	r2, [r3, #16]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 0201 	bic.w	r2, r2, #1
 8001810:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	691b      	ldr	r3, [r3, #16]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d10c      	bne.n	8001834 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001820:	f023 010f 	bic.w	r1, r3, #15
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	69db      	ldr	r3, [r3, #28]
 8001828:	1e5a      	subs	r2, r3, #1
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	430a      	orrs	r2, r1
 8001830:	631a      	str	r2, [r3, #48]	@ 0x30
 8001832:	e007      	b.n	8001844 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f022 020f 	bic.w	r2, r2, #15
 8001842:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001848:	f023 0303 	bic.w	r3, r3, #3
 800184c:	f043 0201 	orr.w	r2, r3, #1
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	655a      	str	r2, [r3, #84]	@ 0x54
 8001854:	e007      	b.n	8001866 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800185a:	f043 0210 	orr.w	r2, r3, #16
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001866:	7ffb      	ldrb	r3, [r7, #31]
}
 8001868:	4618      	mov	r0, r3
 800186a:	3724      	adds	r7, #36	@ 0x24
 800186c:	46bd      	mov	sp, r7
 800186e:	bd90      	pop	{r4, r7, pc}
 8001870:	20000000 	.word	0x20000000
 8001874:	053e2d63 	.word	0x053e2d63
 8001878:	50040000 	.word	0x50040000
 800187c:	50040100 	.word	0x50040100
 8001880:	50040200 	.word	0x50040200
 8001884:	50040300 	.word	0x50040300
 8001888:	fff0c007 	.word	0xfff0c007

0800188c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001894:	4857      	ldr	r0, [pc, #348]	@ (80019f4 <HAL_ADC_Start+0x168>)
 8001896:	f7ff fddd 	bl	8001454 <LL_ADC_GetMultimode>
 800189a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff fe7c 	bl	800159e <LL_ADC_REG_IsConversionOngoing>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f040 809c 	bne.w	80019e6 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d101      	bne.n	80018bc <HAL_ADC_Start+0x30>
 80018b8:	2302      	movs	r3, #2
 80018ba:	e097      	b.n	80019ec <HAL_ADC_Start+0x160>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2201      	movs	r2, #1
 80018c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f000 fd73 	bl	80023b0 <ADC_Enable>
 80018ca:	4603      	mov	r3, r0
 80018cc:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80018ce:	7dfb      	ldrb	r3, [r7, #23]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f040 8083 	bne.w	80019dc <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018da:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80018de:	f023 0301 	bic.w	r3, r3, #1
 80018e2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a42      	ldr	r2, [pc, #264]	@ (80019f8 <HAL_ADC_Start+0x16c>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d002      	beq.n	80018fa <HAL_ADC_Start+0x6e>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	e000      	b.n	80018fc <HAL_ADC_Start+0x70>
 80018fa:	4b40      	ldr	r3, [pc, #256]	@ (80019fc <HAL_ADC_Start+0x170>)
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	6812      	ldr	r2, [r2, #0]
 8001900:	4293      	cmp	r3, r2
 8001902:	d002      	beq.n	800190a <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d105      	bne.n	8001916 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800190e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800191a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800191e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001922:	d106      	bne.n	8001932 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001928:	f023 0206 	bic.w	r2, r3, #6
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	659a      	str	r2, [r3, #88]	@ 0x58
 8001930:	e002      	b.n	8001938 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	221c      	movs	r2, #28
 800193e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a2a      	ldr	r2, [pc, #168]	@ (80019f8 <HAL_ADC_Start+0x16c>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d002      	beq.n	8001958 <HAL_ADC_Start+0xcc>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	e000      	b.n	800195a <HAL_ADC_Start+0xce>
 8001958:	4b28      	ldr	r3, [pc, #160]	@ (80019fc <HAL_ADC_Start+0x170>)
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	6812      	ldr	r2, [r2, #0]
 800195e:	4293      	cmp	r3, r2
 8001960:	d008      	beq.n	8001974 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d005      	beq.n	8001974 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	2b05      	cmp	r3, #5
 800196c:	d002      	beq.n	8001974 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	2b09      	cmp	r3, #9
 8001972:	d114      	bne.n	800199e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d007      	beq.n	8001992 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001986:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800198a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff fded 	bl	8001576 <LL_ADC_REG_StartConversion>
 800199c:	e025      	b.n	80019ea <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019a2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a12      	ldr	r2, [pc, #72]	@ (80019f8 <HAL_ADC_Start+0x16c>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d002      	beq.n	80019ba <HAL_ADC_Start+0x12e>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	e000      	b.n	80019bc <HAL_ADC_Start+0x130>
 80019ba:	4b10      	ldr	r3, [pc, #64]	@ (80019fc <HAL_ADC_Start+0x170>)
 80019bc:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d00f      	beq.n	80019ea <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019ce:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80019d2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	655a      	str	r2, [r3, #84]	@ 0x54
 80019da:	e006      	b.n	80019ea <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80019e4:	e001      	b.n	80019ea <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80019e6:	2302      	movs	r3, #2
 80019e8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80019ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3718      	adds	r7, #24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	50040300 	.word	0x50040300
 80019f8:	50040100 	.word	0x50040100
 80019fc:	50040000 	.word	0x50040000

08001a00 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b088      	sub	sp, #32
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a0a:	4866      	ldr	r0, [pc, #408]	@ (8001ba4 <HAL_ADC_PollForConversion+0x1a4>)
 8001a0c:	f7ff fd22 	bl	8001454 <LL_ADC_GetMultimode>
 8001a10:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	695b      	ldr	r3, [r3, #20]
 8001a16:	2b08      	cmp	r3, #8
 8001a18:	d102      	bne.n	8001a20 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001a1a:	2308      	movs	r3, #8
 8001a1c:	61fb      	str	r3, [r7, #28]
 8001a1e:	e02a      	b.n	8001a76 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d005      	beq.n	8001a32 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	2b05      	cmp	r3, #5
 8001a2a:	d002      	beq.n	8001a32 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	2b09      	cmp	r3, #9
 8001a30:	d111      	bne.n	8001a56 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d007      	beq.n	8001a50 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a44:	f043 0220 	orr.w	r2, r3, #32
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e0a4      	b.n	8001b9a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001a50:	2304      	movs	r3, #4
 8001a52:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001a54:	e00f      	b.n	8001a76 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001a56:	4853      	ldr	r0, [pc, #332]	@ (8001ba4 <HAL_ADC_PollForConversion+0x1a4>)
 8001a58:	f7ff fd0a 	bl	8001470 <LL_ADC_GetMultiDMATransfer>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d007      	beq.n	8001a72 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a66:	f043 0220 	orr.w	r2, r3, #32
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e093      	b.n	8001b9a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001a72:	2304      	movs	r3, #4
 8001a74:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001a76:	f7ff fba5 	bl	80011c4 <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001a7c:	e021      	b.n	8001ac2 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a84:	d01d      	beq.n	8001ac2 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001a86:	f7ff fb9d 	bl	80011c4 <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d302      	bcc.n	8001a9c <HAL_ADC_PollForConversion+0x9c>
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d112      	bne.n	8001ac2 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d10b      	bne.n	8001ac2 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001aae:	f043 0204 	orr.w	r2, r3, #4
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e06b      	b.n	8001b9a <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	4013      	ands	r3, r2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d0d6      	beq.n	8001a7e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ad4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff fc28 	bl	8001336 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d01c      	beq.n	8001b26 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	7e5b      	ldrb	r3, [r3, #25]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d118      	bne.n	8001b26 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0308 	and.w	r3, r3, #8
 8001afe:	2b08      	cmp	r3, #8
 8001b00:	d111      	bne.n	8001b26 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b06:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b12:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d105      	bne.n	8001b26 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b1e:	f043 0201 	orr.w	r2, r3, #1
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a1f      	ldr	r2, [pc, #124]	@ (8001ba8 <HAL_ADC_PollForConversion+0x1a8>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d002      	beq.n	8001b36 <HAL_ADC_PollForConversion+0x136>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	e000      	b.n	8001b38 <HAL_ADC_PollForConversion+0x138>
 8001b36:	4b1d      	ldr	r3, [pc, #116]	@ (8001bac <HAL_ADC_PollForConversion+0x1ac>)
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	6812      	ldr	r2, [r2, #0]
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d008      	beq.n	8001b52 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d005      	beq.n	8001b52 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	2b05      	cmp	r3, #5
 8001b4a:	d002      	beq.n	8001b52 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	2b09      	cmp	r3, #9
 8001b50:	d104      	bne.n	8001b5c <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	61bb      	str	r3, [r7, #24]
 8001b5a:	e00c      	b.n	8001b76 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a11      	ldr	r2, [pc, #68]	@ (8001ba8 <HAL_ADC_PollForConversion+0x1a8>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d002      	beq.n	8001b6c <HAL_ADC_PollForConversion+0x16c>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	e000      	b.n	8001b6e <HAL_ADC_PollForConversion+0x16e>
 8001b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001bac <HAL_ADC_PollForConversion+0x1ac>)
 8001b6e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	2b08      	cmp	r3, #8
 8001b7a:	d104      	bne.n	8001b86 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2208      	movs	r2, #8
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	e008      	b.n	8001b98 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d103      	bne.n	8001b98 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	220c      	movs	r2, #12
 8001b96:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3720      	adds	r7, #32
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	50040300 	.word	0x50040300
 8001ba8:	50040100 	.word	0x50040100
 8001bac:	50040000 	.word	0x50040000

08001bb0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
	...

08001bcc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b0b6      	sub	sp, #216	@ 0xd8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d101      	bne.n	8001bee <HAL_ADC_ConfigChannel+0x22>
 8001bea:	2302      	movs	r3, #2
 8001bec:	e3c9      	b.n	8002382 <HAL_ADC_ConfigChannel+0x7b6>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff fccf 	bl	800159e <LL_ADC_REG_IsConversionOngoing>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f040 83aa 	bne.w	800235c <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	2b05      	cmp	r3, #5
 8001c16:	d824      	bhi.n	8001c62 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	3b02      	subs	r3, #2
 8001c1e:	2b03      	cmp	r3, #3
 8001c20:	d81b      	bhi.n	8001c5a <HAL_ADC_ConfigChannel+0x8e>
 8001c22:	a201      	add	r2, pc, #4	@ (adr r2, 8001c28 <HAL_ADC_ConfigChannel+0x5c>)
 8001c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c28:	08001c39 	.word	0x08001c39
 8001c2c:	08001c41 	.word	0x08001c41
 8001c30:	08001c49 	.word	0x08001c49
 8001c34:	08001c51 	.word	0x08001c51
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001c38:	230c      	movs	r3, #12
 8001c3a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001c3e:	e010      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001c40:	2312      	movs	r3, #18
 8001c42:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001c46:	e00c      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001c48:	2318      	movs	r3, #24
 8001c4a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001c4e:	e008      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001c50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001c58:	e003      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001c5a:	2306      	movs	r3, #6
 8001c5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001c60:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6818      	ldr	r0, [r3, #0]
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001c70:	f7ff fb74 	bl	800135c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff fc90 	bl	800159e <LL_ADC_REG_IsConversionOngoing>
 8001c7e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff fc9c 	bl	80015c4 <LL_ADC_INJ_IsConversionOngoing>
 8001c8c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f040 81a4 	bne.w	8001fe2 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f040 819f 	bne.w	8001fe2 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6818      	ldr	r0, [r3, #0]
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	6819      	ldr	r1, [r3, #0]
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	f7ff fb7f 	bl	80013b4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	695a      	ldr	r2, [r3, #20]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	08db      	lsrs	r3, r3, #3
 8001cc2:	f003 0303 	and.w	r3, r3, #3
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	2b04      	cmp	r3, #4
 8001cd6:	d00a      	beq.n	8001cee <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6818      	ldr	r0, [r3, #0]
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	6919      	ldr	r1, [r3, #16]
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001ce8:	f7ff fad0 	bl	800128c <LL_ADC_SetOffset>
 8001cec:	e179      	b.n	8001fe2 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff faed 	bl	80012d4 <LL_ADC_GetOffsetChannel>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d10a      	bne.n	8001d1a <HAL_ADC_ConfigChannel+0x14e>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2100      	movs	r1, #0
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff fae2 	bl	80012d4 <LL_ADC_GetOffsetChannel>
 8001d10:	4603      	mov	r3, r0
 8001d12:	0e9b      	lsrs	r3, r3, #26
 8001d14:	f003 021f 	and.w	r2, r3, #31
 8001d18:	e01e      	b.n	8001d58 <HAL_ADC_ConfigChannel+0x18c>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2100      	movs	r1, #0
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff fad7 	bl	80012d4 <LL_ADC_GetOffsetChannel>
 8001d26:	4603      	mov	r3, r0
 8001d28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001d30:	fa93 f3a3 	rbit	r3, r3
 8001d34:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d38:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001d3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001d40:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d101      	bne.n	8001d4c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001d48:	2320      	movs	r3, #32
 8001d4a:	e004      	b.n	8001d56 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001d4c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001d50:	fab3 f383 	clz	r3, r3
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d105      	bne.n	8001d70 <HAL_ADC_ConfigChannel+0x1a4>
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	0e9b      	lsrs	r3, r3, #26
 8001d6a:	f003 031f 	and.w	r3, r3, #31
 8001d6e:	e018      	b.n	8001da2 <HAL_ADC_ConfigChannel+0x1d6>
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001d7c:	fa93 f3a3 	rbit	r3, r3
 8001d80:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001d84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001d88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001d8c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d101      	bne.n	8001d98 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001d94:	2320      	movs	r3, #32
 8001d96:	e004      	b.n	8001da2 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001d98:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d9c:	fab3 f383 	clz	r3, r3
 8001da0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d106      	bne.n	8001db4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2200      	movs	r2, #0
 8001dac:	2100      	movs	r1, #0
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff faa6 	bl	8001300 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2101      	movs	r1, #1
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff fa8a 	bl	80012d4 <LL_ADC_GetOffsetChannel>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d10a      	bne.n	8001de0 <HAL_ADC_ConfigChannel+0x214>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2101      	movs	r1, #1
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff fa7f 	bl	80012d4 <LL_ADC_GetOffsetChannel>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	0e9b      	lsrs	r3, r3, #26
 8001dda:	f003 021f 	and.w	r2, r3, #31
 8001dde:	e01e      	b.n	8001e1e <HAL_ADC_ConfigChannel+0x252>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2101      	movs	r1, #1
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff fa74 	bl	80012d4 <LL_ADC_GetOffsetChannel>
 8001dec:	4603      	mov	r3, r0
 8001dee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001df6:	fa93 f3a3 	rbit	r3, r3
 8001dfa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001dfe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001e02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001e06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001e0e:	2320      	movs	r3, #32
 8001e10:	e004      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001e12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001e16:	fab3 f383 	clz	r3, r3
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d105      	bne.n	8001e36 <HAL_ADC_ConfigChannel+0x26a>
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	0e9b      	lsrs	r3, r3, #26
 8001e30:	f003 031f 	and.w	r3, r3, #31
 8001e34:	e018      	b.n	8001e68 <HAL_ADC_ConfigChannel+0x29c>
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001e42:	fa93 f3a3 	rbit	r3, r3
 8001e46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001e4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001e4e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001e52:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001e5a:	2320      	movs	r3, #32
 8001e5c:	e004      	b.n	8001e68 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001e5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001e62:	fab3 f383 	clz	r3, r3
 8001e66:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d106      	bne.n	8001e7a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2200      	movs	r2, #0
 8001e72:	2101      	movs	r1, #1
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff fa43 	bl	8001300 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2102      	movs	r1, #2
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff fa27 	bl	80012d4 <LL_ADC_GetOffsetChannel>
 8001e86:	4603      	mov	r3, r0
 8001e88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d10a      	bne.n	8001ea6 <HAL_ADC_ConfigChannel+0x2da>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2102      	movs	r1, #2
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff fa1c 	bl	80012d4 <LL_ADC_GetOffsetChannel>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	0e9b      	lsrs	r3, r3, #26
 8001ea0:	f003 021f 	and.w	r2, r3, #31
 8001ea4:	e01e      	b.n	8001ee4 <HAL_ADC_ConfigChannel+0x318>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2102      	movs	r1, #2
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff fa11 	bl	80012d4 <LL_ADC_GetOffsetChannel>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001ebc:	fa93 f3a3 	rbit	r3, r3
 8001ec0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001ec4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001ec8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001ecc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d101      	bne.n	8001ed8 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001ed4:	2320      	movs	r3, #32
 8001ed6:	e004      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001ed8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001edc:	fab3 f383 	clz	r3, r3
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d105      	bne.n	8001efc <HAL_ADC_ConfigChannel+0x330>
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	0e9b      	lsrs	r3, r3, #26
 8001ef6:	f003 031f 	and.w	r3, r3, #31
 8001efa:	e014      	b.n	8001f26 <HAL_ADC_ConfigChannel+0x35a>
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f02:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001f04:	fa93 f3a3 	rbit	r3, r3
 8001f08:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001f0a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001f0c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001f10:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d101      	bne.n	8001f1c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001f18:	2320      	movs	r3, #32
 8001f1a:	e004      	b.n	8001f26 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001f1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001f20:	fab3 f383 	clz	r3, r3
 8001f24:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d106      	bne.n	8001f38 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	2102      	movs	r1, #2
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff f9e4 	bl	8001300 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2103      	movs	r1, #3
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff f9c8 	bl	80012d4 <LL_ADC_GetOffsetChannel>
 8001f44:	4603      	mov	r3, r0
 8001f46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d10a      	bne.n	8001f64 <HAL_ADC_ConfigChannel+0x398>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2103      	movs	r1, #3
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff f9bd 	bl	80012d4 <LL_ADC_GetOffsetChannel>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	0e9b      	lsrs	r3, r3, #26
 8001f5e:	f003 021f 	and.w	r2, r3, #31
 8001f62:	e017      	b.n	8001f94 <HAL_ADC_ConfigChannel+0x3c8>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2103      	movs	r1, #3
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff f9b2 	bl	80012d4 <LL_ADC_GetOffsetChannel>
 8001f70:	4603      	mov	r3, r0
 8001f72:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f74:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001f76:	fa93 f3a3 	rbit	r3, r3
 8001f7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001f7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f7e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001f80:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001f86:	2320      	movs	r3, #32
 8001f88:	e003      	b.n	8001f92 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001f8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f8c:	fab3 f383 	clz	r3, r3
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d105      	bne.n	8001fac <HAL_ADC_ConfigChannel+0x3e0>
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	0e9b      	lsrs	r3, r3, #26
 8001fa6:	f003 031f 	and.w	r3, r3, #31
 8001faa:	e011      	b.n	8001fd0 <HAL_ADC_ConfigChannel+0x404>
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001fb4:	fa93 f3a3 	rbit	r3, r3
 8001fb8:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001fba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001fbc:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001fbe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d101      	bne.n	8001fc8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001fc4:	2320      	movs	r3, #32
 8001fc6:	e003      	b.n	8001fd0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001fc8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001fca:	fab3 f383 	clz	r3, r3
 8001fce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d106      	bne.n	8001fe2 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	2103      	movs	r1, #3
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff f98f 	bl	8001300 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff fab2 	bl	8001550 <LL_ADC_IsEnabled>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f040 8140 	bne.w	8002274 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6818      	ldr	r0, [r3, #0]
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	6819      	ldr	r1, [r3, #0]
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	461a      	mov	r2, r3
 8002002:	f7ff fa03 	bl	800140c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	4a8f      	ldr	r2, [pc, #572]	@ (8002248 <HAL_ADC_ConfigChannel+0x67c>)
 800200c:	4293      	cmp	r3, r2
 800200e:	f040 8131 	bne.w	8002274 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800201e:	2b00      	cmp	r3, #0
 8002020:	d10b      	bne.n	800203a <HAL_ADC_ConfigChannel+0x46e>
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	0e9b      	lsrs	r3, r3, #26
 8002028:	3301      	adds	r3, #1
 800202a:	f003 031f 	and.w	r3, r3, #31
 800202e:	2b09      	cmp	r3, #9
 8002030:	bf94      	ite	ls
 8002032:	2301      	movls	r3, #1
 8002034:	2300      	movhi	r3, #0
 8002036:	b2db      	uxtb	r3, r3
 8002038:	e019      	b.n	800206e <HAL_ADC_ConfigChannel+0x4a2>
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002040:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002042:	fa93 f3a3 	rbit	r3, r3
 8002046:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002048:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800204a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800204c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002052:	2320      	movs	r3, #32
 8002054:	e003      	b.n	800205e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002056:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002058:	fab3 f383 	clz	r3, r3
 800205c:	b2db      	uxtb	r3, r3
 800205e:	3301      	adds	r3, #1
 8002060:	f003 031f 	and.w	r3, r3, #31
 8002064:	2b09      	cmp	r3, #9
 8002066:	bf94      	ite	ls
 8002068:	2301      	movls	r3, #1
 800206a:	2300      	movhi	r3, #0
 800206c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800206e:	2b00      	cmp	r3, #0
 8002070:	d079      	beq.n	8002166 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800207a:	2b00      	cmp	r3, #0
 800207c:	d107      	bne.n	800208e <HAL_ADC_ConfigChannel+0x4c2>
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	0e9b      	lsrs	r3, r3, #26
 8002084:	3301      	adds	r3, #1
 8002086:	069b      	lsls	r3, r3, #26
 8002088:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800208c:	e015      	b.n	80020ba <HAL_ADC_ConfigChannel+0x4ee>
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002094:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002096:	fa93 f3a3 	rbit	r3, r3
 800209a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800209c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800209e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80020a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80020a6:	2320      	movs	r3, #32
 80020a8:	e003      	b.n	80020b2 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80020aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80020ac:	fab3 f383 	clz	r3, r3
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	3301      	adds	r3, #1
 80020b4:	069b      	lsls	r3, r3, #26
 80020b6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d109      	bne.n	80020da <HAL_ADC_ConfigChannel+0x50e>
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	0e9b      	lsrs	r3, r3, #26
 80020cc:	3301      	adds	r3, #1
 80020ce:	f003 031f 	and.w	r3, r3, #31
 80020d2:	2101      	movs	r1, #1
 80020d4:	fa01 f303 	lsl.w	r3, r1, r3
 80020d8:	e017      	b.n	800210a <HAL_ADC_ConfigChannel+0x53e>
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020e2:	fa93 f3a3 	rbit	r3, r3
 80020e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80020e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020ea:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80020ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80020f2:	2320      	movs	r3, #32
 80020f4:	e003      	b.n	80020fe <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80020f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020f8:	fab3 f383 	clz	r3, r3
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	3301      	adds	r3, #1
 8002100:	f003 031f 	and.w	r3, r3, #31
 8002104:	2101      	movs	r1, #1
 8002106:	fa01 f303 	lsl.w	r3, r1, r3
 800210a:	ea42 0103 	orr.w	r1, r2, r3
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002116:	2b00      	cmp	r3, #0
 8002118:	d10a      	bne.n	8002130 <HAL_ADC_ConfigChannel+0x564>
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	0e9b      	lsrs	r3, r3, #26
 8002120:	3301      	adds	r3, #1
 8002122:	f003 021f 	and.w	r2, r3, #31
 8002126:	4613      	mov	r3, r2
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	4413      	add	r3, r2
 800212c:	051b      	lsls	r3, r3, #20
 800212e:	e018      	b.n	8002162 <HAL_ADC_ConfigChannel+0x596>
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002136:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002138:	fa93 f3a3 	rbit	r3, r3
 800213c:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800213e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002140:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002144:	2b00      	cmp	r3, #0
 8002146:	d101      	bne.n	800214c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002148:	2320      	movs	r3, #32
 800214a:	e003      	b.n	8002154 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800214c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800214e:	fab3 f383 	clz	r3, r3
 8002152:	b2db      	uxtb	r3, r3
 8002154:	3301      	adds	r3, #1
 8002156:	f003 021f 	and.w	r2, r3, #31
 800215a:	4613      	mov	r3, r2
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	4413      	add	r3, r2
 8002160:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002162:	430b      	orrs	r3, r1
 8002164:	e081      	b.n	800226a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800216e:	2b00      	cmp	r3, #0
 8002170:	d107      	bne.n	8002182 <HAL_ADC_ConfigChannel+0x5b6>
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	0e9b      	lsrs	r3, r3, #26
 8002178:	3301      	adds	r3, #1
 800217a:	069b      	lsls	r3, r3, #26
 800217c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002180:	e015      	b.n	80021ae <HAL_ADC_ConfigChannel+0x5e2>
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800218a:	fa93 f3a3 	rbit	r3, r3
 800218e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002192:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800219a:	2320      	movs	r3, #32
 800219c:	e003      	b.n	80021a6 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800219e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021a0:	fab3 f383 	clz	r3, r3
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	3301      	adds	r3, #1
 80021a8:	069b      	lsls	r3, r3, #26
 80021aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d109      	bne.n	80021ce <HAL_ADC_ConfigChannel+0x602>
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	0e9b      	lsrs	r3, r3, #26
 80021c0:	3301      	adds	r3, #1
 80021c2:	f003 031f 	and.w	r3, r3, #31
 80021c6:	2101      	movs	r1, #1
 80021c8:	fa01 f303 	lsl.w	r3, r1, r3
 80021cc:	e017      	b.n	80021fe <HAL_ADC_ConfigChannel+0x632>
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	fa93 f3a3 	rbit	r3, r3
 80021da:	61bb      	str	r3, [r7, #24]
  return result;
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80021e0:	6a3b      	ldr	r3, [r7, #32]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80021e6:	2320      	movs	r3, #32
 80021e8:	e003      	b.n	80021f2 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80021ea:	6a3b      	ldr	r3, [r7, #32]
 80021ec:	fab3 f383 	clz	r3, r3
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	3301      	adds	r3, #1
 80021f4:	f003 031f 	and.w	r3, r3, #31
 80021f8:	2101      	movs	r1, #1
 80021fa:	fa01 f303 	lsl.w	r3, r1, r3
 80021fe:	ea42 0103 	orr.w	r1, r2, r3
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10d      	bne.n	800222a <HAL_ADC_ConfigChannel+0x65e>
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	0e9b      	lsrs	r3, r3, #26
 8002214:	3301      	adds	r3, #1
 8002216:	f003 021f 	and.w	r2, r3, #31
 800221a:	4613      	mov	r3, r2
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	4413      	add	r3, r2
 8002220:	3b1e      	subs	r3, #30
 8002222:	051b      	lsls	r3, r3, #20
 8002224:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002228:	e01e      	b.n	8002268 <HAL_ADC_ConfigChannel+0x69c>
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	fa93 f3a3 	rbit	r3, r3
 8002236:	60fb      	str	r3, [r7, #12]
  return result;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d104      	bne.n	800224c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002242:	2320      	movs	r3, #32
 8002244:	e006      	b.n	8002254 <HAL_ADC_ConfigChannel+0x688>
 8002246:	bf00      	nop
 8002248:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	fab3 f383 	clz	r3, r3
 8002252:	b2db      	uxtb	r3, r3
 8002254:	3301      	adds	r3, #1
 8002256:	f003 021f 	and.w	r2, r3, #31
 800225a:	4613      	mov	r3, r2
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	4413      	add	r3, r2
 8002260:	3b1e      	subs	r3, #30
 8002262:	051b      	lsls	r3, r3, #20
 8002264:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002268:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800226e:	4619      	mov	r1, r3
 8002270:	f7ff f8a0 	bl	80013b4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	4b44      	ldr	r3, [pc, #272]	@ (800238c <HAL_ADC_ConfigChannel+0x7c0>)
 800227a:	4013      	ands	r3, r2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d07a      	beq.n	8002376 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002280:	4843      	ldr	r0, [pc, #268]	@ (8002390 <HAL_ADC_ConfigChannel+0x7c4>)
 8002282:	f7fe fff5 	bl	8001270 <LL_ADC_GetCommonPathInternalCh>
 8002286:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a41      	ldr	r2, [pc, #260]	@ (8002394 <HAL_ADC_ConfigChannel+0x7c8>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d12c      	bne.n	80022ee <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002294:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002298:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d126      	bne.n	80022ee <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a3c      	ldr	r2, [pc, #240]	@ (8002398 <HAL_ADC_ConfigChannel+0x7cc>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d004      	beq.n	80022b4 <HAL_ADC_ConfigChannel+0x6e8>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a3b      	ldr	r2, [pc, #236]	@ (800239c <HAL_ADC_ConfigChannel+0x7d0>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d15d      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80022b8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80022bc:	4619      	mov	r1, r3
 80022be:	4834      	ldr	r0, [pc, #208]	@ (8002390 <HAL_ADC_ConfigChannel+0x7c4>)
 80022c0:	f7fe ffc3 	bl	800124a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022c4:	4b36      	ldr	r3, [pc, #216]	@ (80023a0 <HAL_ADC_ConfigChannel+0x7d4>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	099b      	lsrs	r3, r3, #6
 80022ca:	4a36      	ldr	r2, [pc, #216]	@ (80023a4 <HAL_ADC_ConfigChannel+0x7d8>)
 80022cc:	fba2 2303 	umull	r2, r3, r2, r3
 80022d0:	099b      	lsrs	r3, r3, #6
 80022d2:	1c5a      	adds	r2, r3, #1
 80022d4:	4613      	mov	r3, r2
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	4413      	add	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80022de:	e002      	b.n	80022e6 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	3b01      	subs	r3, #1
 80022e4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d1f9      	bne.n	80022e0 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022ec:	e040      	b.n	8002370 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a2d      	ldr	r2, [pc, #180]	@ (80023a8 <HAL_ADC_ConfigChannel+0x7dc>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d118      	bne.n	800232a <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80022f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80022fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d112      	bne.n	800232a <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a23      	ldr	r2, [pc, #140]	@ (8002398 <HAL_ADC_ConfigChannel+0x7cc>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d004      	beq.n	8002318 <HAL_ADC_ConfigChannel+0x74c>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a22      	ldr	r2, [pc, #136]	@ (800239c <HAL_ADC_ConfigChannel+0x7d0>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d12d      	bne.n	8002374 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002318:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800231c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002320:	4619      	mov	r1, r3
 8002322:	481b      	ldr	r0, [pc, #108]	@ (8002390 <HAL_ADC_ConfigChannel+0x7c4>)
 8002324:	f7fe ff91 	bl	800124a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002328:	e024      	b.n	8002374 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a1f      	ldr	r2, [pc, #124]	@ (80023ac <HAL_ADC_ConfigChannel+0x7e0>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d120      	bne.n	8002376 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002334:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002338:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d11a      	bne.n	8002376 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a14      	ldr	r2, [pc, #80]	@ (8002398 <HAL_ADC_ConfigChannel+0x7cc>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d115      	bne.n	8002376 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800234a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800234e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002352:	4619      	mov	r1, r3
 8002354:	480e      	ldr	r0, [pc, #56]	@ (8002390 <HAL_ADC_ConfigChannel+0x7c4>)
 8002356:	f7fe ff78 	bl	800124a <LL_ADC_SetCommonPathInternalCh>
 800235a:	e00c      	b.n	8002376 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002360:	f043 0220 	orr.w	r2, r3, #32
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800236e:	e002      	b.n	8002376 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002370:	bf00      	nop
 8002372:	e000      	b.n	8002376 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002374:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800237e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002382:	4618      	mov	r0, r3
 8002384:	37d8      	adds	r7, #216	@ 0xd8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	80080000 	.word	0x80080000
 8002390:	50040300 	.word	0x50040300
 8002394:	c7520000 	.word	0xc7520000
 8002398:	50040000 	.word	0x50040000
 800239c:	50040200 	.word	0x50040200
 80023a0:	20000000 	.word	0x20000000
 80023a4:	053e2d63 	.word	0x053e2d63
 80023a8:	cb840000 	.word	0xcb840000
 80023ac:	80000001 	.word	0x80000001

080023b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80023b8:	2300      	movs	r3, #0
 80023ba:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff f8c5 	bl	8001550 <LL_ADC_IsEnabled>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d169      	bne.n	80024a0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689a      	ldr	r2, [r3, #8]
 80023d2:	4b36      	ldr	r3, [pc, #216]	@ (80024ac <ADC_Enable+0xfc>)
 80023d4:	4013      	ands	r3, r2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00d      	beq.n	80023f6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023de:	f043 0210 	orr.w	r2, r3, #16
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ea:	f043 0201 	orr.w	r2, r3, #1
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e055      	b.n	80024a2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff f894 	bl	8001528 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002400:	482b      	ldr	r0, [pc, #172]	@ (80024b0 <ADC_Enable+0x100>)
 8002402:	f7fe ff35 	bl	8001270 <LL_ADC_GetCommonPathInternalCh>
 8002406:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002408:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800240c:	2b00      	cmp	r3, #0
 800240e:	d013      	beq.n	8002438 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002410:	4b28      	ldr	r3, [pc, #160]	@ (80024b4 <ADC_Enable+0x104>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	099b      	lsrs	r3, r3, #6
 8002416:	4a28      	ldr	r2, [pc, #160]	@ (80024b8 <ADC_Enable+0x108>)
 8002418:	fba2 2303 	umull	r2, r3, r2, r3
 800241c:	099b      	lsrs	r3, r3, #6
 800241e:	1c5a      	adds	r2, r3, #1
 8002420:	4613      	mov	r3, r2
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	4413      	add	r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800242a:	e002      	b.n	8002432 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	3b01      	subs	r3, #1
 8002430:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1f9      	bne.n	800242c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002438:	f7fe fec4 	bl	80011c4 <HAL_GetTick>
 800243c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800243e:	e028      	b.n	8002492 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff f883 	bl	8001550 <LL_ADC_IsEnabled>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d104      	bne.n	800245a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff f867 	bl	8001528 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800245a:	f7fe feb3 	bl	80011c4 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d914      	bls.n	8002492 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	2b01      	cmp	r3, #1
 8002474:	d00d      	beq.n	8002492 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800247a:	f043 0210 	orr.w	r2, r3, #16
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002486:	f043 0201 	orr.w	r2, r3, #1
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e007      	b.n	80024a2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	2b01      	cmp	r3, #1
 800249e:	d1cf      	bne.n	8002440 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	8000003f 	.word	0x8000003f
 80024b0:	50040300 	.word	0x50040300
 80024b4:	20000000 	.word	0x20000000
 80024b8:	053e2d63 	.word	0x053e2d63

080024bc <LL_ADC_IsEnabled>:
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d101      	bne.n	80024d4 <LL_ADC_IsEnabled+0x18>
 80024d0:	2301      	movs	r3, #1
 80024d2:	e000      	b.n	80024d6 <LL_ADC_IsEnabled+0x1a>
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr

080024e2 <LL_ADC_REG_IsConversionOngoing>:
{
 80024e2:	b480      	push	{r7}
 80024e4:	b083      	sub	sp, #12
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f003 0304 	and.w	r3, r3, #4
 80024f2:	2b04      	cmp	r3, #4
 80024f4:	d101      	bne.n	80024fa <LL_ADC_REG_IsConversionOngoing+0x18>
 80024f6:	2301      	movs	r3, #1
 80024f8:	e000      	b.n	80024fc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002508:	b590      	push	{r4, r7, lr}
 800250a:	b09f      	sub	sp, #124	@ 0x7c
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002512:	2300      	movs	r3, #0
 8002514:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800251e:	2b01      	cmp	r3, #1
 8002520:	d101      	bne.n	8002526 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002522:	2302      	movs	r3, #2
 8002524:	e093      	b.n	800264e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2201      	movs	r2, #1
 800252a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800252e:	2300      	movs	r3, #0
 8002530:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002532:	2300      	movs	r3, #0
 8002534:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a47      	ldr	r2, [pc, #284]	@ (8002658 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d102      	bne.n	8002546 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002540:	4b46      	ldr	r3, [pc, #280]	@ (800265c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002542:	60bb      	str	r3, [r7, #8]
 8002544:	e001      	b.n	800254a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002546:	2300      	movs	r3, #0
 8002548:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10b      	bne.n	8002568 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002554:	f043 0220 	orr.w	r2, r3, #32
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e072      	b.n	800264e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff ffb9 	bl	80024e2 <LL_ADC_REG_IsConversionOngoing>
 8002570:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff ffb3 	bl	80024e2 <LL_ADC_REG_IsConversionOngoing>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d154      	bne.n	800262c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002582:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002584:	2b00      	cmp	r3, #0
 8002586:	d151      	bne.n	800262c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002588:	4b35      	ldr	r3, [pc, #212]	@ (8002660 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800258a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d02c      	beq.n	80025ee <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002594:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	6859      	ldr	r1, [r3, #4]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80025a6:	035b      	lsls	r3, r3, #13
 80025a8:	430b      	orrs	r3, r1
 80025aa:	431a      	orrs	r2, r3
 80025ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025ae:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025b0:	4829      	ldr	r0, [pc, #164]	@ (8002658 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80025b2:	f7ff ff83 	bl	80024bc <LL_ADC_IsEnabled>
 80025b6:	4604      	mov	r4, r0
 80025b8:	4828      	ldr	r0, [pc, #160]	@ (800265c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80025ba:	f7ff ff7f 	bl	80024bc <LL_ADC_IsEnabled>
 80025be:	4603      	mov	r3, r0
 80025c0:	431c      	orrs	r4, r3
 80025c2:	4828      	ldr	r0, [pc, #160]	@ (8002664 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80025c4:	f7ff ff7a 	bl	80024bc <LL_ADC_IsEnabled>
 80025c8:	4603      	mov	r3, r0
 80025ca:	4323      	orrs	r3, r4
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d137      	bne.n	8002640 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80025d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80025d8:	f023 030f 	bic.w	r3, r3, #15
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	6811      	ldr	r1, [r2, #0]
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	6892      	ldr	r2, [r2, #8]
 80025e4:	430a      	orrs	r2, r1
 80025e6:	431a      	orrs	r2, r3
 80025e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025ea:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80025ec:	e028      	b.n	8002640 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80025ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80025f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025f8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025fa:	4817      	ldr	r0, [pc, #92]	@ (8002658 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80025fc:	f7ff ff5e 	bl	80024bc <LL_ADC_IsEnabled>
 8002600:	4604      	mov	r4, r0
 8002602:	4816      	ldr	r0, [pc, #88]	@ (800265c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002604:	f7ff ff5a 	bl	80024bc <LL_ADC_IsEnabled>
 8002608:	4603      	mov	r3, r0
 800260a:	431c      	orrs	r4, r3
 800260c:	4815      	ldr	r0, [pc, #84]	@ (8002664 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800260e:	f7ff ff55 	bl	80024bc <LL_ADC_IsEnabled>
 8002612:	4603      	mov	r3, r0
 8002614:	4323      	orrs	r3, r4
 8002616:	2b00      	cmp	r3, #0
 8002618:	d112      	bne.n	8002640 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800261a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002622:	f023 030f 	bic.w	r3, r3, #15
 8002626:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002628:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800262a:	e009      	b.n	8002640 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002630:	f043 0220 	orr.w	r2, r3, #32
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800263e:	e000      	b.n	8002642 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002640:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800264a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800264e:	4618      	mov	r0, r3
 8002650:	377c      	adds	r7, #124	@ 0x7c
 8002652:	46bd      	mov	sp, r7
 8002654:	bd90      	pop	{r4, r7, pc}
 8002656:	bf00      	nop
 8002658:	50040000 	.word	0x50040000
 800265c:	50040100 	.word	0x50040100
 8002660:	50040300 	.word	0x50040300
 8002664:	50040200 	.word	0x50040200

08002668 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002678:	4b0c      	ldr	r3, [pc, #48]	@ (80026ac <__NVIC_SetPriorityGrouping+0x44>)
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800267e:	68ba      	ldr	r2, [r7, #8]
 8002680:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002684:	4013      	ands	r3, r2
 8002686:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002690:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002694:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002698:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800269a:	4a04      	ldr	r2, [pc, #16]	@ (80026ac <__NVIC_SetPriorityGrouping+0x44>)
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	60d3      	str	r3, [r2, #12]
}
 80026a0:	bf00      	nop
 80026a2:	3714      	adds	r7, #20
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	e000ed00 	.word	0xe000ed00

080026b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026b4:	4b04      	ldr	r3, [pc, #16]	@ (80026c8 <__NVIC_GetPriorityGrouping+0x18>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	0a1b      	lsrs	r3, r3, #8
 80026ba:	f003 0307 	and.w	r3, r3, #7
}
 80026be:	4618      	mov	r0, r3
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	e000ed00 	.word	0xe000ed00

080026cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	4603      	mov	r3, r0
 80026d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	db0b      	blt.n	80026f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026de:	79fb      	ldrb	r3, [r7, #7]
 80026e0:	f003 021f 	and.w	r2, r3, #31
 80026e4:	4907      	ldr	r1, [pc, #28]	@ (8002704 <__NVIC_EnableIRQ+0x38>)
 80026e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ea:	095b      	lsrs	r3, r3, #5
 80026ec:	2001      	movs	r0, #1
 80026ee:	fa00 f202 	lsl.w	r2, r0, r2
 80026f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026f6:	bf00      	nop
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	e000e100 	.word	0xe000e100

08002708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	6039      	str	r1, [r7, #0]
 8002712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002718:	2b00      	cmp	r3, #0
 800271a:	db0a      	blt.n	8002732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	b2da      	uxtb	r2, r3
 8002720:	490c      	ldr	r1, [pc, #48]	@ (8002754 <__NVIC_SetPriority+0x4c>)
 8002722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002726:	0112      	lsls	r2, r2, #4
 8002728:	b2d2      	uxtb	r2, r2
 800272a:	440b      	add	r3, r1
 800272c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002730:	e00a      	b.n	8002748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	b2da      	uxtb	r2, r3
 8002736:	4908      	ldr	r1, [pc, #32]	@ (8002758 <__NVIC_SetPriority+0x50>)
 8002738:	79fb      	ldrb	r3, [r7, #7]
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	3b04      	subs	r3, #4
 8002740:	0112      	lsls	r2, r2, #4
 8002742:	b2d2      	uxtb	r2, r2
 8002744:	440b      	add	r3, r1
 8002746:	761a      	strb	r2, [r3, #24]
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr
 8002754:	e000e100 	.word	0xe000e100
 8002758:	e000ed00 	.word	0xe000ed00

0800275c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800275c:	b480      	push	{r7}
 800275e:	b089      	sub	sp, #36	@ 0x24
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	f1c3 0307 	rsb	r3, r3, #7
 8002776:	2b04      	cmp	r3, #4
 8002778:	bf28      	it	cs
 800277a:	2304      	movcs	r3, #4
 800277c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	3304      	adds	r3, #4
 8002782:	2b06      	cmp	r3, #6
 8002784:	d902      	bls.n	800278c <NVIC_EncodePriority+0x30>
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	3b03      	subs	r3, #3
 800278a:	e000      	b.n	800278e <NVIC_EncodePriority+0x32>
 800278c:	2300      	movs	r3, #0
 800278e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002790:	f04f 32ff 	mov.w	r2, #4294967295
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	43da      	mvns	r2, r3
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	401a      	ands	r2, r3
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027a4:	f04f 31ff 	mov.w	r1, #4294967295
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	fa01 f303 	lsl.w	r3, r1, r3
 80027ae:	43d9      	mvns	r1, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b4:	4313      	orrs	r3, r2
         );
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3724      	adds	r7, #36	@ 0x24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
	...

080027c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	3b01      	subs	r3, #1
 80027d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027d4:	d301      	bcc.n	80027da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027d6:	2301      	movs	r3, #1
 80027d8:	e00f      	b.n	80027fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027da:	4a0a      	ldr	r2, [pc, #40]	@ (8002804 <SysTick_Config+0x40>)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	3b01      	subs	r3, #1
 80027e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027e2:	210f      	movs	r1, #15
 80027e4:	f04f 30ff 	mov.w	r0, #4294967295
 80027e8:	f7ff ff8e 	bl	8002708 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027ec:	4b05      	ldr	r3, [pc, #20]	@ (8002804 <SysTick_Config+0x40>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027f2:	4b04      	ldr	r3, [pc, #16]	@ (8002804 <SysTick_Config+0x40>)
 80027f4:	2207      	movs	r2, #7
 80027f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	e000e010 	.word	0xe000e010

08002808 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f7ff ff29 	bl	8002668 <__NVIC_SetPriorityGrouping>
}
 8002816:	bf00      	nop
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b086      	sub	sp, #24
 8002822:	af00      	add	r7, sp, #0
 8002824:	4603      	mov	r3, r0
 8002826:	60b9      	str	r1, [r7, #8]
 8002828:	607a      	str	r2, [r7, #4]
 800282a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800282c:	2300      	movs	r3, #0
 800282e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002830:	f7ff ff3e 	bl	80026b0 <__NVIC_GetPriorityGrouping>
 8002834:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	68b9      	ldr	r1, [r7, #8]
 800283a:	6978      	ldr	r0, [r7, #20]
 800283c:	f7ff ff8e 	bl	800275c <NVIC_EncodePriority>
 8002840:	4602      	mov	r2, r0
 8002842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002846:	4611      	mov	r1, r2
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff ff5d 	bl	8002708 <__NVIC_SetPriority>
}
 800284e:	bf00      	nop
 8002850:	3718      	adds	r7, #24
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b082      	sub	sp, #8
 800285a:	af00      	add	r7, sp, #0
 800285c:	4603      	mov	r3, r0
 800285e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff ff31 	bl	80026cc <__NVIC_EnableIRQ>
}
 800286a:	bf00      	nop
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b082      	sub	sp, #8
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f7ff ffa2 	bl	80027c4 <SysTick_Config>
 8002880:	4603      	mov	r3, r0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
	...

0800288c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800288c:	b480      	push	{r7}
 800288e:	b087      	sub	sp, #28
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002896:	2300      	movs	r3, #0
 8002898:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800289a:	e17f      	b.n	8002b9c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	2101      	movs	r1, #1
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	fa01 f303 	lsl.w	r3, r1, r3
 80028a8:	4013      	ands	r3, r2
 80028aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f000 8171 	beq.w	8002b96 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f003 0303 	and.w	r3, r3, #3
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d005      	beq.n	80028cc <HAL_GPIO_Init+0x40>
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f003 0303 	and.w	r3, r3, #3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d130      	bne.n	800292e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	2203      	movs	r2, #3
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	43db      	mvns	r3, r3
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	4013      	ands	r3, r2
 80028e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	68da      	ldr	r2, [r3, #12]
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002902:	2201      	movs	r2, #1
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	43db      	mvns	r3, r3
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	4013      	ands	r3, r2
 8002910:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	091b      	lsrs	r3, r3, #4
 8002918:	f003 0201 	and.w	r2, r3, #1
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	fa02 f303 	lsl.w	r3, r2, r3
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	4313      	orrs	r3, r2
 8002926:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f003 0303 	and.w	r3, r3, #3
 8002936:	2b03      	cmp	r3, #3
 8002938:	d118      	bne.n	800296c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800293e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002940:	2201      	movs	r2, #1
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	43db      	mvns	r3, r3
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	4013      	ands	r3, r2
 800294e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	08db      	lsrs	r3, r3, #3
 8002956:	f003 0201 	and.w	r2, r3, #1
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	4313      	orrs	r3, r2
 8002964:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f003 0303 	and.w	r3, r3, #3
 8002974:	2b03      	cmp	r3, #3
 8002976:	d017      	beq.n	80029a8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	2203      	movs	r2, #3
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	43db      	mvns	r3, r3
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	4013      	ands	r3, r2
 800298e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	689a      	ldr	r2, [r3, #8]
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	4313      	orrs	r3, r2
 80029a0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f003 0303 	and.w	r3, r3, #3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d123      	bne.n	80029fc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	08da      	lsrs	r2, r3, #3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	3208      	adds	r2, #8
 80029bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	f003 0307 	and.w	r3, r3, #7
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	220f      	movs	r2, #15
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	43db      	mvns	r3, r3
 80029d2:	693a      	ldr	r2, [r7, #16]
 80029d4:	4013      	ands	r3, r2
 80029d6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	691a      	ldr	r2, [r3, #16]
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	f003 0307 	and.w	r3, r3, #7
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	693a      	ldr	r2, [r7, #16]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	08da      	lsrs	r2, r3, #3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	3208      	adds	r2, #8
 80029f6:	6939      	ldr	r1, [r7, #16]
 80029f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	2203      	movs	r2, #3
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	4013      	ands	r3, r2
 8002a12:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f003 0203 	and.w	r2, r3, #3
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f000 80ac 	beq.w	8002b96 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a3e:	4b5f      	ldr	r3, [pc, #380]	@ (8002bbc <HAL_GPIO_Init+0x330>)
 8002a40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a42:	4a5e      	ldr	r2, [pc, #376]	@ (8002bbc <HAL_GPIO_Init+0x330>)
 8002a44:	f043 0301 	orr.w	r3, r3, #1
 8002a48:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a4a:	4b5c      	ldr	r3, [pc, #368]	@ (8002bbc <HAL_GPIO_Init+0x330>)
 8002a4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	60bb      	str	r3, [r7, #8]
 8002a54:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a56:	4a5a      	ldr	r2, [pc, #360]	@ (8002bc0 <HAL_GPIO_Init+0x334>)
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	089b      	lsrs	r3, r3, #2
 8002a5c:	3302      	adds	r3, #2
 8002a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a62:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	f003 0303 	and.w	r3, r3, #3
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	220f      	movs	r2, #15
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	43db      	mvns	r3, r3
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	4013      	ands	r3, r2
 8002a78:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002a80:	d025      	beq.n	8002ace <HAL_GPIO_Init+0x242>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a4f      	ldr	r2, [pc, #316]	@ (8002bc4 <HAL_GPIO_Init+0x338>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d01f      	beq.n	8002aca <HAL_GPIO_Init+0x23e>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a4e      	ldr	r2, [pc, #312]	@ (8002bc8 <HAL_GPIO_Init+0x33c>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d019      	beq.n	8002ac6 <HAL_GPIO_Init+0x23a>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a4d      	ldr	r2, [pc, #308]	@ (8002bcc <HAL_GPIO_Init+0x340>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d013      	beq.n	8002ac2 <HAL_GPIO_Init+0x236>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a4c      	ldr	r2, [pc, #304]	@ (8002bd0 <HAL_GPIO_Init+0x344>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d00d      	beq.n	8002abe <HAL_GPIO_Init+0x232>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a4b      	ldr	r2, [pc, #300]	@ (8002bd4 <HAL_GPIO_Init+0x348>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d007      	beq.n	8002aba <HAL_GPIO_Init+0x22e>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a4a      	ldr	r2, [pc, #296]	@ (8002bd8 <HAL_GPIO_Init+0x34c>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d101      	bne.n	8002ab6 <HAL_GPIO_Init+0x22a>
 8002ab2:	2306      	movs	r3, #6
 8002ab4:	e00c      	b.n	8002ad0 <HAL_GPIO_Init+0x244>
 8002ab6:	2307      	movs	r3, #7
 8002ab8:	e00a      	b.n	8002ad0 <HAL_GPIO_Init+0x244>
 8002aba:	2305      	movs	r3, #5
 8002abc:	e008      	b.n	8002ad0 <HAL_GPIO_Init+0x244>
 8002abe:	2304      	movs	r3, #4
 8002ac0:	e006      	b.n	8002ad0 <HAL_GPIO_Init+0x244>
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e004      	b.n	8002ad0 <HAL_GPIO_Init+0x244>
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	e002      	b.n	8002ad0 <HAL_GPIO_Init+0x244>
 8002aca:	2301      	movs	r3, #1
 8002acc:	e000      	b.n	8002ad0 <HAL_GPIO_Init+0x244>
 8002ace:	2300      	movs	r3, #0
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	f002 0203 	and.w	r2, r2, #3
 8002ad6:	0092      	lsls	r2, r2, #2
 8002ad8:	4093      	lsls	r3, r2
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ae0:	4937      	ldr	r1, [pc, #220]	@ (8002bc0 <HAL_GPIO_Init+0x334>)
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	089b      	lsrs	r3, r3, #2
 8002ae6:	3302      	adds	r3, #2
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002aee:	4b3b      	ldr	r3, [pc, #236]	@ (8002bdc <HAL_GPIO_Init+0x350>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	43db      	mvns	r3, r3
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	4013      	ands	r3, r2
 8002afc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d003      	beq.n	8002b12 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b12:	4a32      	ldr	r2, [pc, #200]	@ (8002bdc <HAL_GPIO_Init+0x350>)
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b18:	4b30      	ldr	r3, [pc, #192]	@ (8002bdc <HAL_GPIO_Init+0x350>)
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	43db      	mvns	r3, r3
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	4013      	ands	r3, r2
 8002b26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d003      	beq.n	8002b3c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b3c:	4a27      	ldr	r2, [pc, #156]	@ (8002bdc <HAL_GPIO_Init+0x350>)
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002b42:	4b26      	ldr	r3, [pc, #152]	@ (8002bdc <HAL_GPIO_Init+0x350>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	43db      	mvns	r3, r3
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b66:	4a1d      	ldr	r2, [pc, #116]	@ (8002bdc <HAL_GPIO_Init+0x350>)
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002b6c:	4b1b      	ldr	r3, [pc, #108]	@ (8002bdc <HAL_GPIO_Init+0x350>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	43db      	mvns	r3, r3
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d003      	beq.n	8002b90 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b90:	4a12      	ldr	r2, [pc, #72]	@ (8002bdc <HAL_GPIO_Init+0x350>)
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	3301      	adds	r3, #1
 8002b9a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f47f ae78 	bne.w	800289c <HAL_GPIO_Init+0x10>
  }
}
 8002bac:	bf00      	nop
 8002bae:	bf00      	nop
 8002bb0:	371c      	adds	r7, #28
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	40010000 	.word	0x40010000
 8002bc4:	48000400 	.word	0x48000400
 8002bc8:	48000800 	.word	0x48000800
 8002bcc:	48000c00 	.word	0x48000c00
 8002bd0:	48001000 	.word	0x48001000
 8002bd4:	48001400 	.word	0x48001400
 8002bd8:	48001800 	.word	0x48001800
 8002bdc:	40010400 	.word	0x40010400

08002be0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	460b      	mov	r3, r1
 8002bea:	807b      	strh	r3, [r7, #2]
 8002bec:	4613      	mov	r3, r2
 8002bee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bf0:	787b      	ldrb	r3, [r7, #1]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bf6:	887a      	ldrh	r2, [r7, #2]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002bfc:	e002      	b.n	8002c04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002bfe:	887a      	ldrh	r2, [r7, #2]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	4603      	mov	r3, r0
 8002c18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002c1a:	4b08      	ldr	r3, [pc, #32]	@ (8002c3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c1c:	695a      	ldr	r2, [r3, #20]
 8002c1e:	88fb      	ldrh	r3, [r7, #6]
 8002c20:	4013      	ands	r3, r2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d006      	beq.n	8002c34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c26:	4a05      	ldr	r2, [pc, #20]	@ (8002c3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c28:	88fb      	ldrh	r3, [r7, #6]
 8002c2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c2c:	88fb      	ldrh	r3, [r7, #6]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7fd fcca 	bl	80005c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c34:	bf00      	nop
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	40010400 	.word	0x40010400

08002c40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e08d      	b.n	8002d6e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d106      	bne.n	8002c6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f7fe f840 	bl	8000cec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2224      	movs	r2, #36	@ 0x24
 8002c70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f022 0201 	bic.w	r2, r2, #1
 8002c82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002c90:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	689a      	ldr	r2, [r3, #8]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ca0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d107      	bne.n	8002cba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	689a      	ldr	r2, [r3, #8]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002cb6:	609a      	str	r2, [r3, #8]
 8002cb8:	e006      	b.n	8002cc8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	689a      	ldr	r2, [r3, #8]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002cc6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d108      	bne.n	8002ce2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	685a      	ldr	r2, [r3, #4]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002cde:	605a      	str	r2, [r3, #4]
 8002ce0:	e007      	b.n	8002cf2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	685a      	ldr	r2, [r3, #4]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cf0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	6812      	ldr	r2, [r2, #0]
 8002cfc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002d00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d04:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68da      	ldr	r2, [r3, #12]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002d14:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	691a      	ldr	r2, [r3, #16]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	69d9      	ldr	r1, [r3, #28]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a1a      	ldr	r2, [r3, #32]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f042 0201 	orr.w	r2, r2, #1
 8002d4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2220      	movs	r2, #32
 8002d5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
 8002d7e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	2b20      	cmp	r3, #32
 8002d8a:	d138      	bne.n	8002dfe <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d101      	bne.n	8002d9a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002d96:	2302      	movs	r3, #2
 8002d98:	e032      	b.n	8002e00 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2224      	movs	r2, #36	@ 0x24
 8002da6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 0201 	bic.w	r2, r2, #1
 8002db8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002dc8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	6819      	ldr	r1, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f042 0201 	orr.w	r2, r2, #1
 8002de8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2220      	movs	r2, #32
 8002dee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	e000      	b.n	8002e00 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002dfe:	2302      	movs	r3, #2
  }
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b20      	cmp	r3, #32
 8002e20:	d139      	bne.n	8002e96 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d101      	bne.n	8002e30 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	e033      	b.n	8002e98 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2224      	movs	r2, #36	@ 0x24
 8002e3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f022 0201 	bic.w	r2, r2, #1
 8002e4e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002e5e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	021b      	lsls	r3, r3, #8
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f042 0201 	orr.w	r2, r2, #1
 8002e80:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2220      	movs	r2, #32
 8002e86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e92:	2300      	movs	r3, #0
 8002e94:	e000      	b.n	8002e98 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002e96:	2302      	movs	r3, #2
  }
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3714      	adds	r7, #20
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ea8:	4b04      	ldr	r3, [pc, #16]	@ (8002ebc <HAL_PWREx_GetVoltageRange+0x18>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	40007000 	.word	0x40007000

08002ec0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ece:	d130      	bne.n	8002f32 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ed0:	4b23      	ldr	r3, [pc, #140]	@ (8002f60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ed8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002edc:	d038      	beq.n	8002f50 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ede:	4b20      	ldr	r3, [pc, #128]	@ (8002f60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ee6:	4a1e      	ldr	r2, [pc, #120]	@ (8002f60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ee8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002eec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002eee:	4b1d      	ldr	r3, [pc, #116]	@ (8002f64 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2232      	movs	r2, #50	@ 0x32
 8002ef4:	fb02 f303 	mul.w	r3, r2, r3
 8002ef8:	4a1b      	ldr	r2, [pc, #108]	@ (8002f68 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002efa:	fba2 2303 	umull	r2, r3, r2, r3
 8002efe:	0c9b      	lsrs	r3, r3, #18
 8002f00:	3301      	adds	r3, #1
 8002f02:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f04:	e002      	b.n	8002f0c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f0c:	4b14      	ldr	r3, [pc, #80]	@ (8002f60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f18:	d102      	bne.n	8002f20 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1f2      	bne.n	8002f06 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f20:	4b0f      	ldr	r3, [pc, #60]	@ (8002f60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f22:	695b      	ldr	r3, [r3, #20]
 8002f24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f2c:	d110      	bne.n	8002f50 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e00f      	b.n	8002f52 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f32:	4b0b      	ldr	r3, [pc, #44]	@ (8002f60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f3e:	d007      	beq.n	8002f50 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f40:	4b07      	ldr	r3, [pc, #28]	@ (8002f60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f48:	4a05      	ldr	r2, [pc, #20]	@ (8002f60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f4a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f4e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3714      	adds	r7, #20
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	40007000 	.word	0x40007000
 8002f64:	20000000 	.word	0x20000000
 8002f68:	431bde83 	.word	0x431bde83

08002f6c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b088      	sub	sp, #32
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e3ca      	b.n	8003714 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f7e:	4b97      	ldr	r3, [pc, #604]	@ (80031dc <HAL_RCC_OscConfig+0x270>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 030c 	and.w	r3, r3, #12
 8002f86:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f88:	4b94      	ldr	r3, [pc, #592]	@ (80031dc <HAL_RCC_OscConfig+0x270>)
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f003 0303 	and.w	r3, r3, #3
 8002f90:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0310 	and.w	r3, r3, #16
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f000 80e4 	beq.w	8003168 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d007      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x4a>
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	2b0c      	cmp	r3, #12
 8002faa:	f040 808b 	bne.w	80030c4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	f040 8087 	bne.w	80030c4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fb6:	4b89      	ldr	r3, [pc, #548]	@ (80031dc <HAL_RCC_OscConfig+0x270>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d005      	beq.n	8002fce <HAL_RCC_OscConfig+0x62>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e3a2      	b.n	8003714 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a1a      	ldr	r2, [r3, #32]
 8002fd2:	4b82      	ldr	r3, [pc, #520]	@ (80031dc <HAL_RCC_OscConfig+0x270>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0308 	and.w	r3, r3, #8
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d004      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x7c>
 8002fde:	4b7f      	ldr	r3, [pc, #508]	@ (80031dc <HAL_RCC_OscConfig+0x270>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fe6:	e005      	b.n	8002ff4 <HAL_RCC_OscConfig+0x88>
 8002fe8:	4b7c      	ldr	r3, [pc, #496]	@ (80031dc <HAL_RCC_OscConfig+0x270>)
 8002fea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fee:	091b      	lsrs	r3, r3, #4
 8002ff0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d223      	bcs.n	8003040 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f000 fd55 	bl	8003aac <RCC_SetFlashLatencyFromMSIRange>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e383      	b.n	8003714 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800300c:	4b73      	ldr	r3, [pc, #460]	@ (80031dc <HAL_RCC_OscConfig+0x270>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a72      	ldr	r2, [pc, #456]	@ (80031dc <HAL_RCC_OscConfig+0x270>)
 8003012:	f043 0308 	orr.w	r3, r3, #8
 8003016:	6013      	str	r3, [r2, #0]
 8003018:	4b70      	ldr	r3, [pc, #448]	@ (80031dc <HAL_RCC_OscConfig+0x270>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a1b      	ldr	r3, [r3, #32]
 8003024:	496d      	ldr	r1, [pc, #436]	@ (80031dc <HAL_RCC_OscConfig+0x270>)
 8003026:	4313      	orrs	r3, r2
 8003028:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800302a:	4b6c      	ldr	r3, [pc, #432]	@ (80031dc <HAL_RCC_OscConfig+0x270>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	69db      	ldr	r3, [r3, #28]
 8003036:	021b      	lsls	r3, r3, #8
 8003038:	4968      	ldr	r1, [pc, #416]	@ (80031dc <HAL_RCC_OscConfig+0x270>)
 800303a:	4313      	orrs	r3, r2
 800303c:	604b      	str	r3, [r1, #4]
 800303e:	e025      	b.n	800308c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003040:	4b66      	ldr	r3, [pc, #408]	@ (80031dc <HAL_RCC_OscConfig+0x270>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a65      	ldr	r2, [pc, #404]	@ (80031dc <HAL_RCC_OscConfig+0x270>)
 8003046:	f043 0308 	orr.w	r3, r3, #8
 800304a:	6013      	str	r3, [r2, #0]
 800304c:	4b63      	ldr	r3, [pc, #396]	@ (80031dc <HAL_RCC_OscConfig+0x270>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a1b      	ldr	r3, [r3, #32]
 8003058:	4960      	ldr	r1, [pc, #384]	@ (80031dc <HAL_RCC_OscConfig+0x270>)
 800305a:	4313      	orrs	r3, r2
 800305c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800305e:	4b5f      	ldr	r3, [pc, #380]	@ (80031dc <HAL_RCC_OscConfig+0x270>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	021b      	lsls	r3, r3, #8
 800306c:	495b      	ldr	r1, [pc, #364]	@ (80031dc <HAL_RCC_OscConfig+0x270>)
 800306e:	4313      	orrs	r3, r2
 8003070:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d109      	bne.n	800308c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a1b      	ldr	r3, [r3, #32]
 800307c:	4618      	mov	r0, r3
 800307e:	f000 fd15 	bl	8003aac <RCC_SetFlashLatencyFromMSIRange>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d001      	beq.n	800308c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e343      	b.n	8003714 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800308c:	f000 fc4a 	bl	8003924 <HAL_RCC_GetSysClockFreq>
 8003090:	4602      	mov	r2, r0
 8003092:	4b52      	ldr	r3, [pc, #328]	@ (80031dc <HAL_RCC_OscConfig+0x270>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	091b      	lsrs	r3, r3, #4
 8003098:	f003 030f 	and.w	r3, r3, #15
 800309c:	4950      	ldr	r1, [pc, #320]	@ (80031e0 <HAL_RCC_OscConfig+0x274>)
 800309e:	5ccb      	ldrb	r3, [r1, r3]
 80030a0:	f003 031f 	and.w	r3, r3, #31
 80030a4:	fa22 f303 	lsr.w	r3, r2, r3
 80030a8:	4a4e      	ldr	r2, [pc, #312]	@ (80031e4 <HAL_RCC_OscConfig+0x278>)
 80030aa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80030ac:	4b4e      	ldr	r3, [pc, #312]	@ (80031e8 <HAL_RCC_OscConfig+0x27c>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7fe f837 	bl	8001124 <HAL_InitTick>
 80030b6:	4603      	mov	r3, r0
 80030b8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80030ba:	7bfb      	ldrb	r3, [r7, #15]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d052      	beq.n	8003166 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80030c0:	7bfb      	ldrb	r3, [r7, #15]
 80030c2:	e327      	b.n	8003714 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d032      	beq.n	8003132 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80030cc:	4b43      	ldr	r3, [pc, #268]	@ (80031dc <HAL_RCC_OscConfig+0x270>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a42      	ldr	r2, [pc, #264]	@ (80031dc <HAL_RCC_OscConfig+0x270>)
 80030d2:	f043 0301 	orr.w	r3, r3, #1
 80030d6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030d8:	f7fe f874 	bl	80011c4 <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030de:	e008      	b.n	80030f2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030e0:	f7fe f870 	bl	80011c4 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e310      	b.n	8003714 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030f2:	4b3a      	ldr	r3, [pc, #232]	@ (80031dc <HAL_RCC_OscConfig+0x270>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d0f0      	beq.n	80030e0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030fe:	4b37      	ldr	r3, [pc, #220]	@ (80031dc <HAL_RCC_OscConfig+0x270>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a36      	ldr	r2, [pc, #216]	@ (80031dc <HAL_RCC_OscConfig+0x270>)
 8003104:	f043 0308 	orr.w	r3, r3, #8
 8003108:	6013      	str	r3, [r2, #0]
 800310a:	4b34      	ldr	r3, [pc, #208]	@ (80031dc <HAL_RCC_OscConfig+0x270>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	4931      	ldr	r1, [pc, #196]	@ (80031dc <HAL_RCC_OscConfig+0x270>)
 8003118:	4313      	orrs	r3, r2
 800311a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800311c:	4b2f      	ldr	r3, [pc, #188]	@ (80031dc <HAL_RCC_OscConfig+0x270>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	69db      	ldr	r3, [r3, #28]
 8003128:	021b      	lsls	r3, r3, #8
 800312a:	492c      	ldr	r1, [pc, #176]	@ (80031dc <HAL_RCC_OscConfig+0x270>)
 800312c:	4313      	orrs	r3, r2
 800312e:	604b      	str	r3, [r1, #4]
 8003130:	e01a      	b.n	8003168 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003132:	4b2a      	ldr	r3, [pc, #168]	@ (80031dc <HAL_RCC_OscConfig+0x270>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a29      	ldr	r2, [pc, #164]	@ (80031dc <HAL_RCC_OscConfig+0x270>)
 8003138:	f023 0301 	bic.w	r3, r3, #1
 800313c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800313e:	f7fe f841 	bl	80011c4 <HAL_GetTick>
 8003142:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003144:	e008      	b.n	8003158 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003146:	f7fe f83d 	bl	80011c4 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d901      	bls.n	8003158 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e2dd      	b.n	8003714 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003158:	4b20      	ldr	r3, [pc, #128]	@ (80031dc <HAL_RCC_OscConfig+0x270>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1f0      	bne.n	8003146 <HAL_RCC_OscConfig+0x1da>
 8003164:	e000      	b.n	8003168 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003166:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	2b00      	cmp	r3, #0
 8003172:	d074      	beq.n	800325e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	2b08      	cmp	r3, #8
 8003178:	d005      	beq.n	8003186 <HAL_RCC_OscConfig+0x21a>
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	2b0c      	cmp	r3, #12
 800317e:	d10e      	bne.n	800319e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	2b03      	cmp	r3, #3
 8003184:	d10b      	bne.n	800319e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003186:	4b15      	ldr	r3, [pc, #84]	@ (80031dc <HAL_RCC_OscConfig+0x270>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d064      	beq.n	800325c <HAL_RCC_OscConfig+0x2f0>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d160      	bne.n	800325c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e2ba      	b.n	8003714 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031a6:	d106      	bne.n	80031b6 <HAL_RCC_OscConfig+0x24a>
 80031a8:	4b0c      	ldr	r3, [pc, #48]	@ (80031dc <HAL_RCC_OscConfig+0x270>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a0b      	ldr	r2, [pc, #44]	@ (80031dc <HAL_RCC_OscConfig+0x270>)
 80031ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031b2:	6013      	str	r3, [r2, #0]
 80031b4:	e026      	b.n	8003204 <HAL_RCC_OscConfig+0x298>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031be:	d115      	bne.n	80031ec <HAL_RCC_OscConfig+0x280>
 80031c0:	4b06      	ldr	r3, [pc, #24]	@ (80031dc <HAL_RCC_OscConfig+0x270>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a05      	ldr	r2, [pc, #20]	@ (80031dc <HAL_RCC_OscConfig+0x270>)
 80031c6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031ca:	6013      	str	r3, [r2, #0]
 80031cc:	4b03      	ldr	r3, [pc, #12]	@ (80031dc <HAL_RCC_OscConfig+0x270>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a02      	ldr	r2, [pc, #8]	@ (80031dc <HAL_RCC_OscConfig+0x270>)
 80031d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031d6:	6013      	str	r3, [r2, #0]
 80031d8:	e014      	b.n	8003204 <HAL_RCC_OscConfig+0x298>
 80031da:	bf00      	nop
 80031dc:	40021000 	.word	0x40021000
 80031e0:	0800500c 	.word	0x0800500c
 80031e4:	20000000 	.word	0x20000000
 80031e8:	20000004 	.word	0x20000004
 80031ec:	4ba0      	ldr	r3, [pc, #640]	@ (8003470 <HAL_RCC_OscConfig+0x504>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a9f      	ldr	r2, [pc, #636]	@ (8003470 <HAL_RCC_OscConfig+0x504>)
 80031f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031f6:	6013      	str	r3, [r2, #0]
 80031f8:	4b9d      	ldr	r3, [pc, #628]	@ (8003470 <HAL_RCC_OscConfig+0x504>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a9c      	ldr	r2, [pc, #624]	@ (8003470 <HAL_RCC_OscConfig+0x504>)
 80031fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003202:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d013      	beq.n	8003234 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800320c:	f7fd ffda 	bl	80011c4 <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003214:	f7fd ffd6 	bl	80011c4 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b64      	cmp	r3, #100	@ 0x64
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e276      	b.n	8003714 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003226:	4b92      	ldr	r3, [pc, #584]	@ (8003470 <HAL_RCC_OscConfig+0x504>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d0f0      	beq.n	8003214 <HAL_RCC_OscConfig+0x2a8>
 8003232:	e014      	b.n	800325e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003234:	f7fd ffc6 	bl	80011c4 <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800323a:	e008      	b.n	800324e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800323c:	f7fd ffc2 	bl	80011c4 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b64      	cmp	r3, #100	@ 0x64
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e262      	b.n	8003714 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800324e:	4b88      	ldr	r3, [pc, #544]	@ (8003470 <HAL_RCC_OscConfig+0x504>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1f0      	bne.n	800323c <HAL_RCC_OscConfig+0x2d0>
 800325a:	e000      	b.n	800325e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800325c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d060      	beq.n	800332c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	2b04      	cmp	r3, #4
 800326e:	d005      	beq.n	800327c <HAL_RCC_OscConfig+0x310>
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	2b0c      	cmp	r3, #12
 8003274:	d119      	bne.n	80032aa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	2b02      	cmp	r3, #2
 800327a:	d116      	bne.n	80032aa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800327c:	4b7c      	ldr	r3, [pc, #496]	@ (8003470 <HAL_RCC_OscConfig+0x504>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003284:	2b00      	cmp	r3, #0
 8003286:	d005      	beq.n	8003294 <HAL_RCC_OscConfig+0x328>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d101      	bne.n	8003294 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e23f      	b.n	8003714 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003294:	4b76      	ldr	r3, [pc, #472]	@ (8003470 <HAL_RCC_OscConfig+0x504>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	061b      	lsls	r3, r3, #24
 80032a2:	4973      	ldr	r1, [pc, #460]	@ (8003470 <HAL_RCC_OscConfig+0x504>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032a8:	e040      	b.n	800332c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d023      	beq.n	80032fa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032b2:	4b6f      	ldr	r3, [pc, #444]	@ (8003470 <HAL_RCC_OscConfig+0x504>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a6e      	ldr	r2, [pc, #440]	@ (8003470 <HAL_RCC_OscConfig+0x504>)
 80032b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032be:	f7fd ff81 	bl	80011c4 <HAL_GetTick>
 80032c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032c4:	e008      	b.n	80032d8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032c6:	f7fd ff7d 	bl	80011c4 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e21d      	b.n	8003714 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032d8:	4b65      	ldr	r3, [pc, #404]	@ (8003470 <HAL_RCC_OscConfig+0x504>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d0f0      	beq.n	80032c6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032e4:	4b62      	ldr	r3, [pc, #392]	@ (8003470 <HAL_RCC_OscConfig+0x504>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	061b      	lsls	r3, r3, #24
 80032f2:	495f      	ldr	r1, [pc, #380]	@ (8003470 <HAL_RCC_OscConfig+0x504>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	604b      	str	r3, [r1, #4]
 80032f8:	e018      	b.n	800332c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032fa:	4b5d      	ldr	r3, [pc, #372]	@ (8003470 <HAL_RCC_OscConfig+0x504>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a5c      	ldr	r2, [pc, #368]	@ (8003470 <HAL_RCC_OscConfig+0x504>)
 8003300:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003304:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003306:	f7fd ff5d 	bl	80011c4 <HAL_GetTick>
 800330a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800330c:	e008      	b.n	8003320 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800330e:	f7fd ff59 	bl	80011c4 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d901      	bls.n	8003320 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e1f9      	b.n	8003714 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003320:	4b53      	ldr	r3, [pc, #332]	@ (8003470 <HAL_RCC_OscConfig+0x504>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1f0      	bne.n	800330e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0308 	and.w	r3, r3, #8
 8003334:	2b00      	cmp	r3, #0
 8003336:	d03c      	beq.n	80033b2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d01c      	beq.n	800337a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003340:	4b4b      	ldr	r3, [pc, #300]	@ (8003470 <HAL_RCC_OscConfig+0x504>)
 8003342:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003346:	4a4a      	ldr	r2, [pc, #296]	@ (8003470 <HAL_RCC_OscConfig+0x504>)
 8003348:	f043 0301 	orr.w	r3, r3, #1
 800334c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003350:	f7fd ff38 	bl	80011c4 <HAL_GetTick>
 8003354:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003356:	e008      	b.n	800336a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003358:	f7fd ff34 	bl	80011c4 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e1d4      	b.n	8003714 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800336a:	4b41      	ldr	r3, [pc, #260]	@ (8003470 <HAL_RCC_OscConfig+0x504>)
 800336c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003370:	f003 0302 	and.w	r3, r3, #2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d0ef      	beq.n	8003358 <HAL_RCC_OscConfig+0x3ec>
 8003378:	e01b      	b.n	80033b2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800337a:	4b3d      	ldr	r3, [pc, #244]	@ (8003470 <HAL_RCC_OscConfig+0x504>)
 800337c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003380:	4a3b      	ldr	r2, [pc, #236]	@ (8003470 <HAL_RCC_OscConfig+0x504>)
 8003382:	f023 0301 	bic.w	r3, r3, #1
 8003386:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800338a:	f7fd ff1b 	bl	80011c4 <HAL_GetTick>
 800338e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003390:	e008      	b.n	80033a4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003392:	f7fd ff17 	bl	80011c4 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	2b02      	cmp	r3, #2
 800339e:	d901      	bls.n	80033a4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e1b7      	b.n	8003714 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033a4:	4b32      	ldr	r3, [pc, #200]	@ (8003470 <HAL_RCC_OscConfig+0x504>)
 80033a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1ef      	bne.n	8003392 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0304 	and.w	r3, r3, #4
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	f000 80a6 	beq.w	800350c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033c0:	2300      	movs	r3, #0
 80033c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80033c4:	4b2a      	ldr	r3, [pc, #168]	@ (8003470 <HAL_RCC_OscConfig+0x504>)
 80033c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d10d      	bne.n	80033ec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033d0:	4b27      	ldr	r3, [pc, #156]	@ (8003470 <HAL_RCC_OscConfig+0x504>)
 80033d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033d4:	4a26      	ldr	r2, [pc, #152]	@ (8003470 <HAL_RCC_OscConfig+0x504>)
 80033d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033da:	6593      	str	r3, [r2, #88]	@ 0x58
 80033dc:	4b24      	ldr	r3, [pc, #144]	@ (8003470 <HAL_RCC_OscConfig+0x504>)
 80033de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033e4:	60bb      	str	r3, [r7, #8]
 80033e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033e8:	2301      	movs	r3, #1
 80033ea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033ec:	4b21      	ldr	r3, [pc, #132]	@ (8003474 <HAL_RCC_OscConfig+0x508>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d118      	bne.n	800342a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033f8:	4b1e      	ldr	r3, [pc, #120]	@ (8003474 <HAL_RCC_OscConfig+0x508>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a1d      	ldr	r2, [pc, #116]	@ (8003474 <HAL_RCC_OscConfig+0x508>)
 80033fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003402:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003404:	f7fd fede 	bl	80011c4 <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800340c:	f7fd feda 	bl	80011c4 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e17a      	b.n	8003714 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800341e:	4b15      	ldr	r3, [pc, #84]	@ (8003474 <HAL_RCC_OscConfig+0x508>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003426:	2b00      	cmp	r3, #0
 8003428:	d0f0      	beq.n	800340c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d108      	bne.n	8003444 <HAL_RCC_OscConfig+0x4d8>
 8003432:	4b0f      	ldr	r3, [pc, #60]	@ (8003470 <HAL_RCC_OscConfig+0x504>)
 8003434:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003438:	4a0d      	ldr	r2, [pc, #52]	@ (8003470 <HAL_RCC_OscConfig+0x504>)
 800343a:	f043 0301 	orr.w	r3, r3, #1
 800343e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003442:	e029      	b.n	8003498 <HAL_RCC_OscConfig+0x52c>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	2b05      	cmp	r3, #5
 800344a:	d115      	bne.n	8003478 <HAL_RCC_OscConfig+0x50c>
 800344c:	4b08      	ldr	r3, [pc, #32]	@ (8003470 <HAL_RCC_OscConfig+0x504>)
 800344e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003452:	4a07      	ldr	r2, [pc, #28]	@ (8003470 <HAL_RCC_OscConfig+0x504>)
 8003454:	f043 0304 	orr.w	r3, r3, #4
 8003458:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800345c:	4b04      	ldr	r3, [pc, #16]	@ (8003470 <HAL_RCC_OscConfig+0x504>)
 800345e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003462:	4a03      	ldr	r2, [pc, #12]	@ (8003470 <HAL_RCC_OscConfig+0x504>)
 8003464:	f043 0301 	orr.w	r3, r3, #1
 8003468:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800346c:	e014      	b.n	8003498 <HAL_RCC_OscConfig+0x52c>
 800346e:	bf00      	nop
 8003470:	40021000 	.word	0x40021000
 8003474:	40007000 	.word	0x40007000
 8003478:	4b9c      	ldr	r3, [pc, #624]	@ (80036ec <HAL_RCC_OscConfig+0x780>)
 800347a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800347e:	4a9b      	ldr	r2, [pc, #620]	@ (80036ec <HAL_RCC_OscConfig+0x780>)
 8003480:	f023 0301 	bic.w	r3, r3, #1
 8003484:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003488:	4b98      	ldr	r3, [pc, #608]	@ (80036ec <HAL_RCC_OscConfig+0x780>)
 800348a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800348e:	4a97      	ldr	r2, [pc, #604]	@ (80036ec <HAL_RCC_OscConfig+0x780>)
 8003490:	f023 0304 	bic.w	r3, r3, #4
 8003494:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d016      	beq.n	80034ce <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a0:	f7fd fe90 	bl	80011c4 <HAL_GetTick>
 80034a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034a6:	e00a      	b.n	80034be <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034a8:	f7fd fe8c 	bl	80011c4 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e12a      	b.n	8003714 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034be:	4b8b      	ldr	r3, [pc, #556]	@ (80036ec <HAL_RCC_OscConfig+0x780>)
 80034c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d0ed      	beq.n	80034a8 <HAL_RCC_OscConfig+0x53c>
 80034cc:	e015      	b.n	80034fa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ce:	f7fd fe79 	bl	80011c4 <HAL_GetTick>
 80034d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034d4:	e00a      	b.n	80034ec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034d6:	f7fd fe75 	bl	80011c4 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d901      	bls.n	80034ec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e113      	b.n	8003714 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034ec:	4b7f      	ldr	r3, [pc, #508]	@ (80036ec <HAL_RCC_OscConfig+0x780>)
 80034ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1ed      	bne.n	80034d6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034fa:	7ffb      	ldrb	r3, [r7, #31]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d105      	bne.n	800350c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003500:	4b7a      	ldr	r3, [pc, #488]	@ (80036ec <HAL_RCC_OscConfig+0x780>)
 8003502:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003504:	4a79      	ldr	r2, [pc, #484]	@ (80036ec <HAL_RCC_OscConfig+0x780>)
 8003506:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800350a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 80fe 	beq.w	8003712 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800351a:	2b02      	cmp	r3, #2
 800351c:	f040 80d0 	bne.w	80036c0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003520:	4b72      	ldr	r3, [pc, #456]	@ (80036ec <HAL_RCC_OscConfig+0x780>)
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	f003 0203 	and.w	r2, r3, #3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003530:	429a      	cmp	r2, r3
 8003532:	d130      	bne.n	8003596 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800353e:	3b01      	subs	r3, #1
 8003540:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003542:	429a      	cmp	r2, r3
 8003544:	d127      	bne.n	8003596 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003550:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003552:	429a      	cmp	r2, r3
 8003554:	d11f      	bne.n	8003596 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003560:	2a07      	cmp	r2, #7
 8003562:	bf14      	ite	ne
 8003564:	2201      	movne	r2, #1
 8003566:	2200      	moveq	r2, #0
 8003568:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800356a:	4293      	cmp	r3, r2
 800356c:	d113      	bne.n	8003596 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003578:	085b      	lsrs	r3, r3, #1
 800357a:	3b01      	subs	r3, #1
 800357c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800357e:	429a      	cmp	r2, r3
 8003580:	d109      	bne.n	8003596 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800358c:	085b      	lsrs	r3, r3, #1
 800358e:	3b01      	subs	r3, #1
 8003590:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003592:	429a      	cmp	r2, r3
 8003594:	d06e      	beq.n	8003674 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	2b0c      	cmp	r3, #12
 800359a:	d069      	beq.n	8003670 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800359c:	4b53      	ldr	r3, [pc, #332]	@ (80036ec <HAL_RCC_OscConfig+0x780>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d105      	bne.n	80035b4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80035a8:	4b50      	ldr	r3, [pc, #320]	@ (80036ec <HAL_RCC_OscConfig+0x780>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d001      	beq.n	80035b8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e0ad      	b.n	8003714 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80035b8:	4b4c      	ldr	r3, [pc, #304]	@ (80036ec <HAL_RCC_OscConfig+0x780>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a4b      	ldr	r2, [pc, #300]	@ (80036ec <HAL_RCC_OscConfig+0x780>)
 80035be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035c2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035c4:	f7fd fdfe 	bl	80011c4 <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035cc:	f7fd fdfa 	bl	80011c4 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e09a      	b.n	8003714 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035de:	4b43      	ldr	r3, [pc, #268]	@ (80036ec <HAL_RCC_OscConfig+0x780>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1f0      	bne.n	80035cc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035ea:	4b40      	ldr	r3, [pc, #256]	@ (80036ec <HAL_RCC_OscConfig+0x780>)
 80035ec:	68da      	ldr	r2, [r3, #12]
 80035ee:	4b40      	ldr	r3, [pc, #256]	@ (80036f0 <HAL_RCC_OscConfig+0x784>)
 80035f0:	4013      	ands	r3, r2
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80035fa:	3a01      	subs	r2, #1
 80035fc:	0112      	lsls	r2, r2, #4
 80035fe:	4311      	orrs	r1, r2
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003604:	0212      	lsls	r2, r2, #8
 8003606:	4311      	orrs	r1, r2
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800360c:	0852      	lsrs	r2, r2, #1
 800360e:	3a01      	subs	r2, #1
 8003610:	0552      	lsls	r2, r2, #21
 8003612:	4311      	orrs	r1, r2
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003618:	0852      	lsrs	r2, r2, #1
 800361a:	3a01      	subs	r2, #1
 800361c:	0652      	lsls	r2, r2, #25
 800361e:	4311      	orrs	r1, r2
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003624:	0912      	lsrs	r2, r2, #4
 8003626:	0452      	lsls	r2, r2, #17
 8003628:	430a      	orrs	r2, r1
 800362a:	4930      	ldr	r1, [pc, #192]	@ (80036ec <HAL_RCC_OscConfig+0x780>)
 800362c:	4313      	orrs	r3, r2
 800362e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003630:	4b2e      	ldr	r3, [pc, #184]	@ (80036ec <HAL_RCC_OscConfig+0x780>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a2d      	ldr	r2, [pc, #180]	@ (80036ec <HAL_RCC_OscConfig+0x780>)
 8003636:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800363a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800363c:	4b2b      	ldr	r3, [pc, #172]	@ (80036ec <HAL_RCC_OscConfig+0x780>)
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	4a2a      	ldr	r2, [pc, #168]	@ (80036ec <HAL_RCC_OscConfig+0x780>)
 8003642:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003646:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003648:	f7fd fdbc 	bl	80011c4 <HAL_GetTick>
 800364c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003650:	f7fd fdb8 	bl	80011c4 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e058      	b.n	8003714 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003662:	4b22      	ldr	r3, [pc, #136]	@ (80036ec <HAL_RCC_OscConfig+0x780>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d0f0      	beq.n	8003650 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800366e:	e050      	b.n	8003712 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e04f      	b.n	8003714 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003674:	4b1d      	ldr	r3, [pc, #116]	@ (80036ec <HAL_RCC_OscConfig+0x780>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d148      	bne.n	8003712 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003680:	4b1a      	ldr	r3, [pc, #104]	@ (80036ec <HAL_RCC_OscConfig+0x780>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a19      	ldr	r2, [pc, #100]	@ (80036ec <HAL_RCC_OscConfig+0x780>)
 8003686:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800368a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800368c:	4b17      	ldr	r3, [pc, #92]	@ (80036ec <HAL_RCC_OscConfig+0x780>)
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	4a16      	ldr	r2, [pc, #88]	@ (80036ec <HAL_RCC_OscConfig+0x780>)
 8003692:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003696:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003698:	f7fd fd94 	bl	80011c4 <HAL_GetTick>
 800369c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800369e:	e008      	b.n	80036b2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036a0:	f7fd fd90 	bl	80011c4 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e030      	b.n	8003714 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036b2:	4b0e      	ldr	r3, [pc, #56]	@ (80036ec <HAL_RCC_OscConfig+0x780>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d0f0      	beq.n	80036a0 <HAL_RCC_OscConfig+0x734>
 80036be:	e028      	b.n	8003712 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	2b0c      	cmp	r3, #12
 80036c4:	d023      	beq.n	800370e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036c6:	4b09      	ldr	r3, [pc, #36]	@ (80036ec <HAL_RCC_OscConfig+0x780>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a08      	ldr	r2, [pc, #32]	@ (80036ec <HAL_RCC_OscConfig+0x780>)
 80036cc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d2:	f7fd fd77 	bl	80011c4 <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036d8:	e00c      	b.n	80036f4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036da:	f7fd fd73 	bl	80011c4 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d905      	bls.n	80036f4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e013      	b.n	8003714 <HAL_RCC_OscConfig+0x7a8>
 80036ec:	40021000 	.word	0x40021000
 80036f0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036f4:	4b09      	ldr	r3, [pc, #36]	@ (800371c <HAL_RCC_OscConfig+0x7b0>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d1ec      	bne.n	80036da <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003700:	4b06      	ldr	r3, [pc, #24]	@ (800371c <HAL_RCC_OscConfig+0x7b0>)
 8003702:	68da      	ldr	r2, [r3, #12]
 8003704:	4905      	ldr	r1, [pc, #20]	@ (800371c <HAL_RCC_OscConfig+0x7b0>)
 8003706:	4b06      	ldr	r3, [pc, #24]	@ (8003720 <HAL_RCC_OscConfig+0x7b4>)
 8003708:	4013      	ands	r3, r2
 800370a:	60cb      	str	r3, [r1, #12]
 800370c:	e001      	b.n	8003712 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e000      	b.n	8003714 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	3720      	adds	r7, #32
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	40021000 	.word	0x40021000
 8003720:	feeefffc 	.word	0xfeeefffc

08003724 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e0e7      	b.n	8003908 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003738:	4b75      	ldr	r3, [pc, #468]	@ (8003910 <HAL_RCC_ClockConfig+0x1ec>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0307 	and.w	r3, r3, #7
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	429a      	cmp	r2, r3
 8003744:	d910      	bls.n	8003768 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003746:	4b72      	ldr	r3, [pc, #456]	@ (8003910 <HAL_RCC_ClockConfig+0x1ec>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f023 0207 	bic.w	r2, r3, #7
 800374e:	4970      	ldr	r1, [pc, #448]	@ (8003910 <HAL_RCC_ClockConfig+0x1ec>)
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	4313      	orrs	r3, r2
 8003754:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003756:	4b6e      	ldr	r3, [pc, #440]	@ (8003910 <HAL_RCC_ClockConfig+0x1ec>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0307 	and.w	r3, r3, #7
 800375e:	683a      	ldr	r2, [r7, #0]
 8003760:	429a      	cmp	r2, r3
 8003762:	d001      	beq.n	8003768 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e0cf      	b.n	8003908 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d010      	beq.n	8003796 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	4b66      	ldr	r3, [pc, #408]	@ (8003914 <HAL_RCC_ClockConfig+0x1f0>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003780:	429a      	cmp	r2, r3
 8003782:	d908      	bls.n	8003796 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003784:	4b63      	ldr	r3, [pc, #396]	@ (8003914 <HAL_RCC_ClockConfig+0x1f0>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	4960      	ldr	r1, [pc, #384]	@ (8003914 <HAL_RCC_ClockConfig+0x1f0>)
 8003792:	4313      	orrs	r3, r2
 8003794:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d04c      	beq.n	800383c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	2b03      	cmp	r3, #3
 80037a8:	d107      	bne.n	80037ba <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037aa:	4b5a      	ldr	r3, [pc, #360]	@ (8003914 <HAL_RCC_ClockConfig+0x1f0>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d121      	bne.n	80037fa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e0a6      	b.n	8003908 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d107      	bne.n	80037d2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037c2:	4b54      	ldr	r3, [pc, #336]	@ (8003914 <HAL_RCC_ClockConfig+0x1f0>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d115      	bne.n	80037fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e09a      	b.n	8003908 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d107      	bne.n	80037ea <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037da:	4b4e      	ldr	r3, [pc, #312]	@ (8003914 <HAL_RCC_ClockConfig+0x1f0>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d109      	bne.n	80037fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e08e      	b.n	8003908 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037ea:	4b4a      	ldr	r3, [pc, #296]	@ (8003914 <HAL_RCC_ClockConfig+0x1f0>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d101      	bne.n	80037fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e086      	b.n	8003908 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037fa:	4b46      	ldr	r3, [pc, #280]	@ (8003914 <HAL_RCC_ClockConfig+0x1f0>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f023 0203 	bic.w	r2, r3, #3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	4943      	ldr	r1, [pc, #268]	@ (8003914 <HAL_RCC_ClockConfig+0x1f0>)
 8003808:	4313      	orrs	r3, r2
 800380a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800380c:	f7fd fcda 	bl	80011c4 <HAL_GetTick>
 8003810:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003812:	e00a      	b.n	800382a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003814:	f7fd fcd6 	bl	80011c4 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003822:	4293      	cmp	r3, r2
 8003824:	d901      	bls.n	800382a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e06e      	b.n	8003908 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800382a:	4b3a      	ldr	r3, [pc, #232]	@ (8003914 <HAL_RCC_ClockConfig+0x1f0>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f003 020c 	and.w	r2, r3, #12
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	429a      	cmp	r2, r3
 800383a:	d1eb      	bne.n	8003814 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d010      	beq.n	800386a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689a      	ldr	r2, [r3, #8]
 800384c:	4b31      	ldr	r3, [pc, #196]	@ (8003914 <HAL_RCC_ClockConfig+0x1f0>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003854:	429a      	cmp	r2, r3
 8003856:	d208      	bcs.n	800386a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003858:	4b2e      	ldr	r3, [pc, #184]	@ (8003914 <HAL_RCC_ClockConfig+0x1f0>)
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	492b      	ldr	r1, [pc, #172]	@ (8003914 <HAL_RCC_ClockConfig+0x1f0>)
 8003866:	4313      	orrs	r3, r2
 8003868:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800386a:	4b29      	ldr	r3, [pc, #164]	@ (8003910 <HAL_RCC_ClockConfig+0x1ec>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0307 	and.w	r3, r3, #7
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	429a      	cmp	r2, r3
 8003876:	d210      	bcs.n	800389a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003878:	4b25      	ldr	r3, [pc, #148]	@ (8003910 <HAL_RCC_ClockConfig+0x1ec>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f023 0207 	bic.w	r2, r3, #7
 8003880:	4923      	ldr	r1, [pc, #140]	@ (8003910 <HAL_RCC_ClockConfig+0x1ec>)
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	4313      	orrs	r3, r2
 8003886:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003888:	4b21      	ldr	r3, [pc, #132]	@ (8003910 <HAL_RCC_ClockConfig+0x1ec>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0307 	and.w	r3, r3, #7
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	429a      	cmp	r2, r3
 8003894:	d001      	beq.n	800389a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e036      	b.n	8003908 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0304 	and.w	r3, r3, #4
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d008      	beq.n	80038b8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038a6:	4b1b      	ldr	r3, [pc, #108]	@ (8003914 <HAL_RCC_ClockConfig+0x1f0>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	4918      	ldr	r1, [pc, #96]	@ (8003914 <HAL_RCC_ClockConfig+0x1f0>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0308 	and.w	r3, r3, #8
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d009      	beq.n	80038d8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038c4:	4b13      	ldr	r3, [pc, #76]	@ (8003914 <HAL_RCC_ClockConfig+0x1f0>)
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	00db      	lsls	r3, r3, #3
 80038d2:	4910      	ldr	r1, [pc, #64]	@ (8003914 <HAL_RCC_ClockConfig+0x1f0>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038d8:	f000 f824 	bl	8003924 <HAL_RCC_GetSysClockFreq>
 80038dc:	4602      	mov	r2, r0
 80038de:	4b0d      	ldr	r3, [pc, #52]	@ (8003914 <HAL_RCC_ClockConfig+0x1f0>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	091b      	lsrs	r3, r3, #4
 80038e4:	f003 030f 	and.w	r3, r3, #15
 80038e8:	490b      	ldr	r1, [pc, #44]	@ (8003918 <HAL_RCC_ClockConfig+0x1f4>)
 80038ea:	5ccb      	ldrb	r3, [r1, r3]
 80038ec:	f003 031f 	and.w	r3, r3, #31
 80038f0:	fa22 f303 	lsr.w	r3, r2, r3
 80038f4:	4a09      	ldr	r2, [pc, #36]	@ (800391c <HAL_RCC_ClockConfig+0x1f8>)
 80038f6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80038f8:	4b09      	ldr	r3, [pc, #36]	@ (8003920 <HAL_RCC_ClockConfig+0x1fc>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7fd fc11 	bl	8001124 <HAL_InitTick>
 8003902:	4603      	mov	r3, r0
 8003904:	72fb      	strb	r3, [r7, #11]

  return status;
 8003906:	7afb      	ldrb	r3, [r7, #11]
}
 8003908:	4618      	mov	r0, r3
 800390a:	3710      	adds	r7, #16
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	40022000 	.word	0x40022000
 8003914:	40021000 	.word	0x40021000
 8003918:	0800500c 	.word	0x0800500c
 800391c:	20000000 	.word	0x20000000
 8003920:	20000004 	.word	0x20000004

08003924 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003924:	b480      	push	{r7}
 8003926:	b089      	sub	sp, #36	@ 0x24
 8003928:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800392a:	2300      	movs	r3, #0
 800392c:	61fb      	str	r3, [r7, #28]
 800392e:	2300      	movs	r3, #0
 8003930:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003932:	4b3e      	ldr	r3, [pc, #248]	@ (8003a2c <HAL_RCC_GetSysClockFreq+0x108>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f003 030c 	and.w	r3, r3, #12
 800393a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800393c:	4b3b      	ldr	r3, [pc, #236]	@ (8003a2c <HAL_RCC_GetSysClockFreq+0x108>)
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	f003 0303 	and.w	r3, r3, #3
 8003944:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d005      	beq.n	8003958 <HAL_RCC_GetSysClockFreq+0x34>
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	2b0c      	cmp	r3, #12
 8003950:	d121      	bne.n	8003996 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d11e      	bne.n	8003996 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003958:	4b34      	ldr	r3, [pc, #208]	@ (8003a2c <HAL_RCC_GetSysClockFreq+0x108>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0308 	and.w	r3, r3, #8
 8003960:	2b00      	cmp	r3, #0
 8003962:	d107      	bne.n	8003974 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003964:	4b31      	ldr	r3, [pc, #196]	@ (8003a2c <HAL_RCC_GetSysClockFreq+0x108>)
 8003966:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800396a:	0a1b      	lsrs	r3, r3, #8
 800396c:	f003 030f 	and.w	r3, r3, #15
 8003970:	61fb      	str	r3, [r7, #28]
 8003972:	e005      	b.n	8003980 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003974:	4b2d      	ldr	r3, [pc, #180]	@ (8003a2c <HAL_RCC_GetSysClockFreq+0x108>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	091b      	lsrs	r3, r3, #4
 800397a:	f003 030f 	and.w	r3, r3, #15
 800397e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003980:	4a2b      	ldr	r2, [pc, #172]	@ (8003a30 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003988:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d10d      	bne.n	80039ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003994:	e00a      	b.n	80039ac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	2b04      	cmp	r3, #4
 800399a:	d102      	bne.n	80039a2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800399c:	4b25      	ldr	r3, [pc, #148]	@ (8003a34 <HAL_RCC_GetSysClockFreq+0x110>)
 800399e:	61bb      	str	r3, [r7, #24]
 80039a0:	e004      	b.n	80039ac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	2b08      	cmp	r3, #8
 80039a6:	d101      	bne.n	80039ac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80039a8:	4b23      	ldr	r3, [pc, #140]	@ (8003a38 <HAL_RCC_GetSysClockFreq+0x114>)
 80039aa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	2b0c      	cmp	r3, #12
 80039b0:	d134      	bne.n	8003a1c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80039b2:	4b1e      	ldr	r3, [pc, #120]	@ (8003a2c <HAL_RCC_GetSysClockFreq+0x108>)
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	f003 0303 	and.w	r3, r3, #3
 80039ba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d003      	beq.n	80039ca <HAL_RCC_GetSysClockFreq+0xa6>
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	2b03      	cmp	r3, #3
 80039c6:	d003      	beq.n	80039d0 <HAL_RCC_GetSysClockFreq+0xac>
 80039c8:	e005      	b.n	80039d6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80039ca:	4b1a      	ldr	r3, [pc, #104]	@ (8003a34 <HAL_RCC_GetSysClockFreq+0x110>)
 80039cc:	617b      	str	r3, [r7, #20]
      break;
 80039ce:	e005      	b.n	80039dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80039d0:	4b19      	ldr	r3, [pc, #100]	@ (8003a38 <HAL_RCC_GetSysClockFreq+0x114>)
 80039d2:	617b      	str	r3, [r7, #20]
      break;
 80039d4:	e002      	b.n	80039dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	617b      	str	r3, [r7, #20]
      break;
 80039da:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039dc:	4b13      	ldr	r3, [pc, #76]	@ (8003a2c <HAL_RCC_GetSysClockFreq+0x108>)
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	091b      	lsrs	r3, r3, #4
 80039e2:	f003 0307 	and.w	r3, r3, #7
 80039e6:	3301      	adds	r3, #1
 80039e8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80039ea:	4b10      	ldr	r3, [pc, #64]	@ (8003a2c <HAL_RCC_GetSysClockFreq+0x108>)
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	0a1b      	lsrs	r3, r3, #8
 80039f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80039f4:	697a      	ldr	r2, [r7, #20]
 80039f6:	fb03 f202 	mul.w	r2, r3, r2
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a00:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a02:	4b0a      	ldr	r3, [pc, #40]	@ (8003a2c <HAL_RCC_GetSysClockFreq+0x108>)
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	0e5b      	lsrs	r3, r3, #25
 8003a08:	f003 0303 	and.w	r3, r3, #3
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	005b      	lsls	r3, r3, #1
 8003a10:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a1a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003a1c:	69bb      	ldr	r3, [r7, #24]
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3724      	adds	r7, #36	@ 0x24
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	40021000 	.word	0x40021000
 8003a30:	08005024 	.word	0x08005024
 8003a34:	00f42400 	.word	0x00f42400
 8003a38:	007a1200 	.word	0x007a1200

08003a3c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a40:	4b03      	ldr	r3, [pc, #12]	@ (8003a50 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a42:	681b      	ldr	r3, [r3, #0]
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	20000000 	.word	0x20000000

08003a54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a58:	f7ff fff0 	bl	8003a3c <HAL_RCC_GetHCLKFreq>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	4b06      	ldr	r3, [pc, #24]	@ (8003a78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	0a1b      	lsrs	r3, r3, #8
 8003a64:	f003 0307 	and.w	r3, r3, #7
 8003a68:	4904      	ldr	r1, [pc, #16]	@ (8003a7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a6a:	5ccb      	ldrb	r3, [r1, r3]
 8003a6c:	f003 031f 	and.w	r3, r3, #31
 8003a70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	40021000 	.word	0x40021000
 8003a7c:	0800501c 	.word	0x0800501c

08003a80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a84:	f7ff ffda 	bl	8003a3c <HAL_RCC_GetHCLKFreq>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	4b06      	ldr	r3, [pc, #24]	@ (8003aa4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	0adb      	lsrs	r3, r3, #11
 8003a90:	f003 0307 	and.w	r3, r3, #7
 8003a94:	4904      	ldr	r1, [pc, #16]	@ (8003aa8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a96:	5ccb      	ldrb	r3, [r1, r3]
 8003a98:	f003 031f 	and.w	r3, r3, #31
 8003a9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	0800501c 	.word	0x0800501c

08003aac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ab8:	4b2a      	ldr	r3, [pc, #168]	@ (8003b64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003aba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003abc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d003      	beq.n	8003acc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003ac4:	f7ff f9ee 	bl	8002ea4 <HAL_PWREx_GetVoltageRange>
 8003ac8:	6178      	str	r0, [r7, #20]
 8003aca:	e014      	b.n	8003af6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003acc:	4b25      	ldr	r3, [pc, #148]	@ (8003b64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ace:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ad0:	4a24      	ldr	r2, [pc, #144]	@ (8003b64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ad2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ad6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ad8:	4b22      	ldr	r3, [pc, #136]	@ (8003b64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ada:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003adc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ae0:	60fb      	str	r3, [r7, #12]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ae4:	f7ff f9de 	bl	8002ea4 <HAL_PWREx_GetVoltageRange>
 8003ae8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003aea:	4b1e      	ldr	r3, [pc, #120]	@ (8003b64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aee:	4a1d      	ldr	r2, [pc, #116]	@ (8003b64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003af0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003af4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003afc:	d10b      	bne.n	8003b16 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2b80      	cmp	r3, #128	@ 0x80
 8003b02:	d919      	bls.n	8003b38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2ba0      	cmp	r3, #160	@ 0xa0
 8003b08:	d902      	bls.n	8003b10 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	613b      	str	r3, [r7, #16]
 8003b0e:	e013      	b.n	8003b38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b10:	2301      	movs	r3, #1
 8003b12:	613b      	str	r3, [r7, #16]
 8003b14:	e010      	b.n	8003b38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2b80      	cmp	r3, #128	@ 0x80
 8003b1a:	d902      	bls.n	8003b22 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	613b      	str	r3, [r7, #16]
 8003b20:	e00a      	b.n	8003b38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2b80      	cmp	r3, #128	@ 0x80
 8003b26:	d102      	bne.n	8003b2e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b28:	2302      	movs	r3, #2
 8003b2a:	613b      	str	r3, [r7, #16]
 8003b2c:	e004      	b.n	8003b38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2b70      	cmp	r3, #112	@ 0x70
 8003b32:	d101      	bne.n	8003b38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b34:	2301      	movs	r3, #1
 8003b36:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b38:	4b0b      	ldr	r3, [pc, #44]	@ (8003b68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f023 0207 	bic.w	r2, r3, #7
 8003b40:	4909      	ldr	r1, [pc, #36]	@ (8003b68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b48:	4b07      	ldr	r3, [pc, #28]	@ (8003b68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0307 	and.w	r3, r3, #7
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d001      	beq.n	8003b5a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e000      	b.n	8003b5c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3718      	adds	r7, #24
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	40021000 	.word	0x40021000
 8003b68:	40022000 	.word	0x40022000

08003b6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b74:	2300      	movs	r3, #0
 8003b76:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b78:	2300      	movs	r3, #0
 8003b7a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d041      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b8c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003b90:	d02a      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003b92:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003b96:	d824      	bhi.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b98:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b9c:	d008      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003b9e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003ba2:	d81e      	bhi.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00a      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003ba8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bac:	d010      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003bae:	e018      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003bb0:	4b86      	ldr	r3, [pc, #536]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	4a85      	ldr	r2, [pc, #532]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bba:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bbc:	e015      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	3304      	adds	r3, #4
 8003bc2:	2100      	movs	r1, #0
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f000 fabb 	bl	8004140 <RCCEx_PLLSAI1_Config>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bce:	e00c      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	3320      	adds	r3, #32
 8003bd4:	2100      	movs	r1, #0
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f000 fba6 	bl	8004328 <RCCEx_PLLSAI2_Config>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003be0:	e003      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	74fb      	strb	r3, [r7, #19]
      break;
 8003be6:	e000      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003be8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bea:	7cfb      	ldrb	r3, [r7, #19]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d10b      	bne.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bf0:	4b76      	ldr	r3, [pc, #472]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bf6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003bfe:	4973      	ldr	r1, [pc, #460]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003c06:	e001      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c08:	7cfb      	ldrb	r3, [r7, #19]
 8003c0a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d041      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c1c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003c20:	d02a      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003c22:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003c26:	d824      	bhi.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c28:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c2c:	d008      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003c2e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c32:	d81e      	bhi.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00a      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003c38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c3c:	d010      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c3e:	e018      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c40:	4b62      	ldr	r3, [pc, #392]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	4a61      	ldr	r2, [pc, #388]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c4a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c4c:	e015      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	3304      	adds	r3, #4
 8003c52:	2100      	movs	r1, #0
 8003c54:	4618      	mov	r0, r3
 8003c56:	f000 fa73 	bl	8004140 <RCCEx_PLLSAI1_Config>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c5e:	e00c      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	3320      	adds	r3, #32
 8003c64:	2100      	movs	r1, #0
 8003c66:	4618      	mov	r0, r3
 8003c68:	f000 fb5e 	bl	8004328 <RCCEx_PLLSAI2_Config>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c70:	e003      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	74fb      	strb	r3, [r7, #19]
      break;
 8003c76:	e000      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003c78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c7a:	7cfb      	ldrb	r3, [r7, #19]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d10b      	bne.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c80:	4b52      	ldr	r3, [pc, #328]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c86:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c8e:	494f      	ldr	r1, [pc, #316]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003c96:	e001      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c98:	7cfb      	ldrb	r3, [r7, #19]
 8003c9a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f000 80a0 	beq.w	8003dea <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003caa:	2300      	movs	r3, #0
 8003cac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003cae:	4b47      	ldr	r3, [pc, #284]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e000      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00d      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cc4:	4b41      	ldr	r3, [pc, #260]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cc8:	4a40      	ldr	r2, [pc, #256]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cce:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cd0:	4b3e      	ldr	r3, [pc, #248]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cd8:	60bb      	str	r3, [r7, #8]
 8003cda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ce0:	4b3b      	ldr	r3, [pc, #236]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a3a      	ldr	r2, [pc, #232]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ce6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cec:	f7fd fa6a 	bl	80011c4 <HAL_GetTick>
 8003cf0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cf2:	e009      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cf4:	f7fd fa66 	bl	80011c4 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d902      	bls.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	74fb      	strb	r3, [r7, #19]
        break;
 8003d06:	e005      	b.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d08:	4b31      	ldr	r3, [pc, #196]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d0ef      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003d14:	7cfb      	ldrb	r3, [r7, #19]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d15c      	bne.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d1a:	4b2c      	ldr	r3, [pc, #176]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d20:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d24:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d01f      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d019      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d38:	4b24      	ldr	r3, [pc, #144]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d42:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d44:	4b21      	ldr	r3, [pc, #132]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d4a:	4a20      	ldr	r2, [pc, #128]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d54:	4b1d      	ldr	r3, [pc, #116]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d5a:	4a1c      	ldr	r2, [pc, #112]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d64:	4a19      	ldr	r2, [pc, #100]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d016      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d76:	f7fd fa25 	bl	80011c4 <HAL_GetTick>
 8003d7a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d7c:	e00b      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d7e:	f7fd fa21 	bl	80011c4 <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d902      	bls.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	74fb      	strb	r3, [r7, #19]
            break;
 8003d94:	e006      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d96:	4b0d      	ldr	r3, [pc, #52]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d9c:	f003 0302 	and.w	r3, r3, #2
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d0ec      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003da4:	7cfb      	ldrb	r3, [r7, #19]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10c      	bne.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003daa:	4b08      	ldr	r3, [pc, #32]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003db0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dba:	4904      	ldr	r1, [pc, #16]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003dc2:	e009      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003dc4:	7cfb      	ldrb	r3, [r7, #19]
 8003dc6:	74bb      	strb	r3, [r7, #18]
 8003dc8:	e006      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003dca:	bf00      	nop
 8003dcc:	40021000 	.word	0x40021000
 8003dd0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd4:	7cfb      	ldrb	r3, [r7, #19]
 8003dd6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dd8:	7c7b      	ldrb	r3, [r7, #17]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d105      	bne.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dde:	4b9e      	ldr	r3, [pc, #632]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003de2:	4a9d      	ldr	r2, [pc, #628]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003de4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003de8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00a      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003df6:	4b98      	ldr	r3, [pc, #608]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dfc:	f023 0203 	bic.w	r2, r3, #3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e04:	4994      	ldr	r1, [pc, #592]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0302 	and.w	r3, r3, #2
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d00a      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e18:	4b8f      	ldr	r3, [pc, #572]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e1e:	f023 020c 	bic.w	r2, r3, #12
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e26:	498c      	ldr	r1, [pc, #560]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0304 	and.w	r3, r3, #4
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00a      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e3a:	4b87      	ldr	r3, [pc, #540]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e40:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e48:	4983      	ldr	r1, [pc, #524]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0308 	and.w	r3, r3, #8
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00a      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e5c:	4b7e      	ldr	r3, [pc, #504]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e62:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e6a:	497b      	ldr	r1, [pc, #492]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0310 	and.w	r3, r3, #16
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00a      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e7e:	4b76      	ldr	r3, [pc, #472]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e84:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e8c:	4972      	ldr	r1, [pc, #456]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0320 	and.w	r3, r3, #32
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00a      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ea0:	4b6d      	ldr	r3, [pc, #436]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ea6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003eae:	496a      	ldr	r1, [pc, #424]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00a      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ec2:	4b65      	ldr	r3, [pc, #404]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ec8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ed0:	4961      	ldr	r1, [pc, #388]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00a      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ee4:	4b5c      	ldr	r3, [pc, #368]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ef2:	4959      	ldr	r1, [pc, #356]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00a      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f06:	4b54      	ldr	r3, [pc, #336]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f0c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f14:	4950      	ldr	r1, [pc, #320]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00a      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f28:	4b4b      	ldr	r3, [pc, #300]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f2e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f36:	4948      	ldr	r1, [pc, #288]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00a      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f4a:	4b43      	ldr	r3, [pc, #268]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f50:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f58:	493f      	ldr	r1, [pc, #252]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d028      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f6c:	4b3a      	ldr	r3, [pc, #232]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f72:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f7a:	4937      	ldr	r1, [pc, #220]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f86:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f8a:	d106      	bne.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f8c:	4b32      	ldr	r3, [pc, #200]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	4a31      	ldr	r2, [pc, #196]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f96:	60d3      	str	r3, [r2, #12]
 8003f98:	e011      	b.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f9e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003fa2:	d10c      	bne.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	3304      	adds	r3, #4
 8003fa8:	2101      	movs	r1, #1
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 f8c8 	bl	8004140 <RCCEx_PLLSAI1_Config>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003fb4:	7cfb      	ldrb	r3, [r7, #19]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003fba:	7cfb      	ldrb	r3, [r7, #19]
 8003fbc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d028      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003fca:	4b23      	ldr	r3, [pc, #140]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fd0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fd8:	491f      	ldr	r1, [pc, #124]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fe4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fe8:	d106      	bne.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fea:	4b1b      	ldr	r3, [pc, #108]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	4a1a      	ldr	r2, [pc, #104]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ff4:	60d3      	str	r3, [r2, #12]
 8003ff6:	e011      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ffc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004000:	d10c      	bne.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	3304      	adds	r3, #4
 8004006:	2101      	movs	r1, #1
 8004008:	4618      	mov	r0, r3
 800400a:	f000 f899 	bl	8004140 <RCCEx_PLLSAI1_Config>
 800400e:	4603      	mov	r3, r0
 8004010:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004012:	7cfb      	ldrb	r3, [r7, #19]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d001      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004018:	7cfb      	ldrb	r3, [r7, #19]
 800401a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d02b      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004028:	4b0b      	ldr	r3, [pc, #44]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800402a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800402e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004036:	4908      	ldr	r1, [pc, #32]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004038:	4313      	orrs	r3, r2
 800403a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004042:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004046:	d109      	bne.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004048:	4b03      	ldr	r3, [pc, #12]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	4a02      	ldr	r2, [pc, #8]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800404e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004052:	60d3      	str	r3, [r2, #12]
 8004054:	e014      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004056:	bf00      	nop
 8004058:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004060:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004064:	d10c      	bne.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	3304      	adds	r3, #4
 800406a:	2101      	movs	r1, #1
 800406c:	4618      	mov	r0, r3
 800406e:	f000 f867 	bl	8004140 <RCCEx_PLLSAI1_Config>
 8004072:	4603      	mov	r3, r0
 8004074:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004076:	7cfb      	ldrb	r3, [r7, #19]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d001      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800407c:	7cfb      	ldrb	r3, [r7, #19]
 800407e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d02f      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800408c:	4b2b      	ldr	r3, [pc, #172]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800408e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004092:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800409a:	4928      	ldr	r1, [pc, #160]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800409c:	4313      	orrs	r3, r2
 800409e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80040aa:	d10d      	bne.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	3304      	adds	r3, #4
 80040b0:	2102      	movs	r1, #2
 80040b2:	4618      	mov	r0, r3
 80040b4:	f000 f844 	bl	8004140 <RCCEx_PLLSAI1_Config>
 80040b8:	4603      	mov	r3, r0
 80040ba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040bc:	7cfb      	ldrb	r3, [r7, #19]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d014      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80040c2:	7cfb      	ldrb	r3, [r7, #19]
 80040c4:	74bb      	strb	r3, [r7, #18]
 80040c6:	e011      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040d0:	d10c      	bne.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	3320      	adds	r3, #32
 80040d6:	2102      	movs	r1, #2
 80040d8:	4618      	mov	r0, r3
 80040da:	f000 f925 	bl	8004328 <RCCEx_PLLSAI2_Config>
 80040de:	4603      	mov	r3, r0
 80040e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040e2:	7cfb      	ldrb	r3, [r7, #19]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d001      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80040e8:	7cfb      	ldrb	r3, [r7, #19]
 80040ea:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d00a      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80040f8:	4b10      	ldr	r3, [pc, #64]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040fe:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004106:	490d      	ldr	r1, [pc, #52]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004108:	4313      	orrs	r3, r2
 800410a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00b      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800411a:	4b08      	ldr	r3, [pc, #32]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800411c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004120:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800412a:	4904      	ldr	r1, [pc, #16]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800412c:	4313      	orrs	r3, r2
 800412e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004132:	7cbb      	ldrb	r3, [r7, #18]
}
 8004134:	4618      	mov	r0, r3
 8004136:	3718      	adds	r7, #24
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	40021000 	.word	0x40021000

08004140 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800414a:	2300      	movs	r3, #0
 800414c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800414e:	4b75      	ldr	r3, [pc, #468]	@ (8004324 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	f003 0303 	and.w	r3, r3, #3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d018      	beq.n	800418c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800415a:	4b72      	ldr	r3, [pc, #456]	@ (8004324 <RCCEx_PLLSAI1_Config+0x1e4>)
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	f003 0203 	and.w	r2, r3, #3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	429a      	cmp	r2, r3
 8004168:	d10d      	bne.n	8004186 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
       ||
 800416e:	2b00      	cmp	r3, #0
 8004170:	d009      	beq.n	8004186 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004172:	4b6c      	ldr	r3, [pc, #432]	@ (8004324 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	091b      	lsrs	r3, r3, #4
 8004178:	f003 0307 	and.w	r3, r3, #7
 800417c:	1c5a      	adds	r2, r3, #1
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
       ||
 8004182:	429a      	cmp	r2, r3
 8004184:	d047      	beq.n	8004216 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	73fb      	strb	r3, [r7, #15]
 800418a:	e044      	b.n	8004216 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2b03      	cmp	r3, #3
 8004192:	d018      	beq.n	80041c6 <RCCEx_PLLSAI1_Config+0x86>
 8004194:	2b03      	cmp	r3, #3
 8004196:	d825      	bhi.n	80041e4 <RCCEx_PLLSAI1_Config+0xa4>
 8004198:	2b01      	cmp	r3, #1
 800419a:	d002      	beq.n	80041a2 <RCCEx_PLLSAI1_Config+0x62>
 800419c:	2b02      	cmp	r3, #2
 800419e:	d009      	beq.n	80041b4 <RCCEx_PLLSAI1_Config+0x74>
 80041a0:	e020      	b.n	80041e4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80041a2:	4b60      	ldr	r3, [pc, #384]	@ (8004324 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d11d      	bne.n	80041ea <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041b2:	e01a      	b.n	80041ea <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041b4:	4b5b      	ldr	r3, [pc, #364]	@ (8004324 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d116      	bne.n	80041ee <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041c4:	e013      	b.n	80041ee <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041c6:	4b57      	ldr	r3, [pc, #348]	@ (8004324 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10f      	bne.n	80041f2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041d2:	4b54      	ldr	r3, [pc, #336]	@ (8004324 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d109      	bne.n	80041f2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041e2:	e006      	b.n	80041f2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	73fb      	strb	r3, [r7, #15]
      break;
 80041e8:	e004      	b.n	80041f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041ea:	bf00      	nop
 80041ec:	e002      	b.n	80041f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041ee:	bf00      	nop
 80041f0:	e000      	b.n	80041f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80041f4:	7bfb      	ldrb	r3, [r7, #15]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d10d      	bne.n	8004216 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80041fa:	4b4a      	ldr	r3, [pc, #296]	@ (8004324 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6819      	ldr	r1, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	3b01      	subs	r3, #1
 800420c:	011b      	lsls	r3, r3, #4
 800420e:	430b      	orrs	r3, r1
 8004210:	4944      	ldr	r1, [pc, #272]	@ (8004324 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004212:	4313      	orrs	r3, r2
 8004214:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004216:	7bfb      	ldrb	r3, [r7, #15]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d17d      	bne.n	8004318 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800421c:	4b41      	ldr	r3, [pc, #260]	@ (8004324 <RCCEx_PLLSAI1_Config+0x1e4>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a40      	ldr	r2, [pc, #256]	@ (8004324 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004222:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004226:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004228:	f7fc ffcc 	bl	80011c4 <HAL_GetTick>
 800422c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800422e:	e009      	b.n	8004244 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004230:	f7fc ffc8 	bl	80011c4 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b02      	cmp	r3, #2
 800423c:	d902      	bls.n	8004244 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	73fb      	strb	r3, [r7, #15]
        break;
 8004242:	e005      	b.n	8004250 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004244:	4b37      	ldr	r3, [pc, #220]	@ (8004324 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d1ef      	bne.n	8004230 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004250:	7bfb      	ldrb	r3, [r7, #15]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d160      	bne.n	8004318 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d111      	bne.n	8004280 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800425c:	4b31      	ldr	r3, [pc, #196]	@ (8004324 <RCCEx_PLLSAI1_Config+0x1e4>)
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004264:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	6892      	ldr	r2, [r2, #8]
 800426c:	0211      	lsls	r1, r2, #8
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	68d2      	ldr	r2, [r2, #12]
 8004272:	0912      	lsrs	r2, r2, #4
 8004274:	0452      	lsls	r2, r2, #17
 8004276:	430a      	orrs	r2, r1
 8004278:	492a      	ldr	r1, [pc, #168]	@ (8004324 <RCCEx_PLLSAI1_Config+0x1e4>)
 800427a:	4313      	orrs	r3, r2
 800427c:	610b      	str	r3, [r1, #16]
 800427e:	e027      	b.n	80042d0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	2b01      	cmp	r3, #1
 8004284:	d112      	bne.n	80042ac <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004286:	4b27      	ldr	r3, [pc, #156]	@ (8004324 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800428e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	6892      	ldr	r2, [r2, #8]
 8004296:	0211      	lsls	r1, r2, #8
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	6912      	ldr	r2, [r2, #16]
 800429c:	0852      	lsrs	r2, r2, #1
 800429e:	3a01      	subs	r2, #1
 80042a0:	0552      	lsls	r2, r2, #21
 80042a2:	430a      	orrs	r2, r1
 80042a4:	491f      	ldr	r1, [pc, #124]	@ (8004324 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	610b      	str	r3, [r1, #16]
 80042aa:	e011      	b.n	80042d0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042ac:	4b1d      	ldr	r3, [pc, #116]	@ (8004324 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80042b4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	6892      	ldr	r2, [r2, #8]
 80042bc:	0211      	lsls	r1, r2, #8
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	6952      	ldr	r2, [r2, #20]
 80042c2:	0852      	lsrs	r2, r2, #1
 80042c4:	3a01      	subs	r2, #1
 80042c6:	0652      	lsls	r2, r2, #25
 80042c8:	430a      	orrs	r2, r1
 80042ca:	4916      	ldr	r1, [pc, #88]	@ (8004324 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80042d0:	4b14      	ldr	r3, [pc, #80]	@ (8004324 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a13      	ldr	r2, [pc, #76]	@ (8004324 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042d6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80042da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042dc:	f7fc ff72 	bl	80011c4 <HAL_GetTick>
 80042e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042e2:	e009      	b.n	80042f8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042e4:	f7fc ff6e 	bl	80011c4 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d902      	bls.n	80042f8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	73fb      	strb	r3, [r7, #15]
          break;
 80042f6:	e005      	b.n	8004304 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042f8:	4b0a      	ldr	r3, [pc, #40]	@ (8004324 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d0ef      	beq.n	80042e4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004304:	7bfb      	ldrb	r3, [r7, #15]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d106      	bne.n	8004318 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800430a:	4b06      	ldr	r3, [pc, #24]	@ (8004324 <RCCEx_PLLSAI1_Config+0x1e4>)
 800430c:	691a      	ldr	r2, [r3, #16]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	4904      	ldr	r1, [pc, #16]	@ (8004324 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004314:	4313      	orrs	r3, r2
 8004316:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004318:	7bfb      	ldrb	r3, [r7, #15]
}
 800431a:	4618      	mov	r0, r3
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	40021000 	.word	0x40021000

08004328 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004332:	2300      	movs	r3, #0
 8004334:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004336:	4b6a      	ldr	r3, [pc, #424]	@ (80044e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	f003 0303 	and.w	r3, r3, #3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d018      	beq.n	8004374 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004342:	4b67      	ldr	r3, [pc, #412]	@ (80044e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	f003 0203 	and.w	r2, r3, #3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	429a      	cmp	r2, r3
 8004350:	d10d      	bne.n	800436e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
       ||
 8004356:	2b00      	cmp	r3, #0
 8004358:	d009      	beq.n	800436e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800435a:	4b61      	ldr	r3, [pc, #388]	@ (80044e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	091b      	lsrs	r3, r3, #4
 8004360:	f003 0307 	and.w	r3, r3, #7
 8004364:	1c5a      	adds	r2, r3, #1
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
       ||
 800436a:	429a      	cmp	r2, r3
 800436c:	d047      	beq.n	80043fe <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	73fb      	strb	r3, [r7, #15]
 8004372:	e044      	b.n	80043fe <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2b03      	cmp	r3, #3
 800437a:	d018      	beq.n	80043ae <RCCEx_PLLSAI2_Config+0x86>
 800437c:	2b03      	cmp	r3, #3
 800437e:	d825      	bhi.n	80043cc <RCCEx_PLLSAI2_Config+0xa4>
 8004380:	2b01      	cmp	r3, #1
 8004382:	d002      	beq.n	800438a <RCCEx_PLLSAI2_Config+0x62>
 8004384:	2b02      	cmp	r3, #2
 8004386:	d009      	beq.n	800439c <RCCEx_PLLSAI2_Config+0x74>
 8004388:	e020      	b.n	80043cc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800438a:	4b55      	ldr	r3, [pc, #340]	@ (80044e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d11d      	bne.n	80043d2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800439a:	e01a      	b.n	80043d2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800439c:	4b50      	ldr	r3, [pc, #320]	@ (80044e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d116      	bne.n	80043d6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043ac:	e013      	b.n	80043d6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80043ae:	4b4c      	ldr	r3, [pc, #304]	@ (80044e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10f      	bne.n	80043da <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80043ba:	4b49      	ldr	r3, [pc, #292]	@ (80044e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d109      	bne.n	80043da <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80043ca:	e006      	b.n	80043da <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	73fb      	strb	r3, [r7, #15]
      break;
 80043d0:	e004      	b.n	80043dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043d2:	bf00      	nop
 80043d4:	e002      	b.n	80043dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043d6:	bf00      	nop
 80043d8:	e000      	b.n	80043dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043da:	bf00      	nop
    }

    if(status == HAL_OK)
 80043dc:	7bfb      	ldrb	r3, [r7, #15]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10d      	bne.n	80043fe <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80043e2:	4b3f      	ldr	r3, [pc, #252]	@ (80044e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6819      	ldr	r1, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	3b01      	subs	r3, #1
 80043f4:	011b      	lsls	r3, r3, #4
 80043f6:	430b      	orrs	r3, r1
 80043f8:	4939      	ldr	r1, [pc, #228]	@ (80044e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80043fe:	7bfb      	ldrb	r3, [r7, #15]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d167      	bne.n	80044d4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004404:	4b36      	ldr	r3, [pc, #216]	@ (80044e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a35      	ldr	r2, [pc, #212]	@ (80044e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800440a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800440e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004410:	f7fc fed8 	bl	80011c4 <HAL_GetTick>
 8004414:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004416:	e009      	b.n	800442c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004418:	f7fc fed4 	bl	80011c4 <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b02      	cmp	r3, #2
 8004424:	d902      	bls.n	800442c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	73fb      	strb	r3, [r7, #15]
        break;
 800442a:	e005      	b.n	8004438 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800442c:	4b2c      	ldr	r3, [pc, #176]	@ (80044e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1ef      	bne.n	8004418 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004438:	7bfb      	ldrb	r3, [r7, #15]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d14a      	bne.n	80044d4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d111      	bne.n	8004468 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004444:	4b26      	ldr	r3, [pc, #152]	@ (80044e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004446:	695b      	ldr	r3, [r3, #20]
 8004448:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800444c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	6892      	ldr	r2, [r2, #8]
 8004454:	0211      	lsls	r1, r2, #8
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	68d2      	ldr	r2, [r2, #12]
 800445a:	0912      	lsrs	r2, r2, #4
 800445c:	0452      	lsls	r2, r2, #17
 800445e:	430a      	orrs	r2, r1
 8004460:	491f      	ldr	r1, [pc, #124]	@ (80044e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004462:	4313      	orrs	r3, r2
 8004464:	614b      	str	r3, [r1, #20]
 8004466:	e011      	b.n	800448c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004468:	4b1d      	ldr	r3, [pc, #116]	@ (80044e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004470:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	6892      	ldr	r2, [r2, #8]
 8004478:	0211      	lsls	r1, r2, #8
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	6912      	ldr	r2, [r2, #16]
 800447e:	0852      	lsrs	r2, r2, #1
 8004480:	3a01      	subs	r2, #1
 8004482:	0652      	lsls	r2, r2, #25
 8004484:	430a      	orrs	r2, r1
 8004486:	4916      	ldr	r1, [pc, #88]	@ (80044e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004488:	4313      	orrs	r3, r2
 800448a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800448c:	4b14      	ldr	r3, [pc, #80]	@ (80044e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a13      	ldr	r2, [pc, #76]	@ (80044e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004492:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004496:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004498:	f7fc fe94 	bl	80011c4 <HAL_GetTick>
 800449c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800449e:	e009      	b.n	80044b4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80044a0:	f7fc fe90 	bl	80011c4 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d902      	bls.n	80044b4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	73fb      	strb	r3, [r7, #15]
          break;
 80044b2:	e005      	b.n	80044c0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80044b4:	4b0a      	ldr	r3, [pc, #40]	@ (80044e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d0ef      	beq.n	80044a0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80044c0:	7bfb      	ldrb	r3, [r7, #15]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d106      	bne.n	80044d4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80044c6:	4b06      	ldr	r3, [pc, #24]	@ (80044e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044c8:	695a      	ldr	r2, [r3, #20]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	4904      	ldr	r1, [pc, #16]	@ (80044e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80044d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	40021000 	.word	0x40021000

080044e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e040      	b.n	8004578 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d106      	bne.n	800450c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f7fc fc4e 	bl	8000da8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2224      	movs	r2, #36	@ 0x24
 8004510:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f022 0201 	bic.w	r2, r2, #1
 8004520:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004526:	2b00      	cmp	r3, #0
 8004528:	d002      	beq.n	8004530 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 fae0 	bl	8004af0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 f825 	bl	8004580 <UART_SetConfig>
 8004536:	4603      	mov	r3, r0
 8004538:	2b01      	cmp	r3, #1
 800453a:	d101      	bne.n	8004540 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e01b      	b.n	8004578 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	685a      	ldr	r2, [r3, #4]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800454e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	689a      	ldr	r2, [r3, #8]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800455e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f042 0201 	orr.w	r2, r2, #1
 800456e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 fb5f 	bl	8004c34 <UART_CheckIdleState>
 8004576:	4603      	mov	r3, r0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3708      	adds	r7, #8
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004580:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004584:	b08a      	sub	sp, #40	@ 0x28
 8004586:	af00      	add	r7, sp, #0
 8004588:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800458a:	2300      	movs	r3, #0
 800458c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	689a      	ldr	r2, [r3, #8]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	431a      	orrs	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	431a      	orrs	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	69db      	ldr	r3, [r3, #28]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	4ba4      	ldr	r3, [pc, #656]	@ (8004840 <UART_SetConfig+0x2c0>)
 80045b0:	4013      	ands	r3, r2
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	6812      	ldr	r2, [r2, #0]
 80045b6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80045b8:	430b      	orrs	r3, r1
 80045ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	68da      	ldr	r2, [r3, #12]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a99      	ldr	r2, [pc, #612]	@ (8004844 <UART_SetConfig+0x2c4>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d004      	beq.n	80045ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045e8:	4313      	orrs	r3, r2
 80045ea:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045fc:	430a      	orrs	r2, r1
 80045fe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a90      	ldr	r2, [pc, #576]	@ (8004848 <UART_SetConfig+0x2c8>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d126      	bne.n	8004658 <UART_SetConfig+0xd8>
 800460a:	4b90      	ldr	r3, [pc, #576]	@ (800484c <UART_SetConfig+0x2cc>)
 800460c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004610:	f003 0303 	and.w	r3, r3, #3
 8004614:	2b03      	cmp	r3, #3
 8004616:	d81b      	bhi.n	8004650 <UART_SetConfig+0xd0>
 8004618:	a201      	add	r2, pc, #4	@ (adr r2, 8004620 <UART_SetConfig+0xa0>)
 800461a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800461e:	bf00      	nop
 8004620:	08004631 	.word	0x08004631
 8004624:	08004641 	.word	0x08004641
 8004628:	08004639 	.word	0x08004639
 800462c:	08004649 	.word	0x08004649
 8004630:	2301      	movs	r3, #1
 8004632:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004636:	e116      	b.n	8004866 <UART_SetConfig+0x2e6>
 8004638:	2302      	movs	r3, #2
 800463a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800463e:	e112      	b.n	8004866 <UART_SetConfig+0x2e6>
 8004640:	2304      	movs	r3, #4
 8004642:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004646:	e10e      	b.n	8004866 <UART_SetConfig+0x2e6>
 8004648:	2308      	movs	r3, #8
 800464a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800464e:	e10a      	b.n	8004866 <UART_SetConfig+0x2e6>
 8004650:	2310      	movs	r3, #16
 8004652:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004656:	e106      	b.n	8004866 <UART_SetConfig+0x2e6>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a7c      	ldr	r2, [pc, #496]	@ (8004850 <UART_SetConfig+0x2d0>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d138      	bne.n	80046d4 <UART_SetConfig+0x154>
 8004662:	4b7a      	ldr	r3, [pc, #488]	@ (800484c <UART_SetConfig+0x2cc>)
 8004664:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004668:	f003 030c 	and.w	r3, r3, #12
 800466c:	2b0c      	cmp	r3, #12
 800466e:	d82d      	bhi.n	80046cc <UART_SetConfig+0x14c>
 8004670:	a201      	add	r2, pc, #4	@ (adr r2, 8004678 <UART_SetConfig+0xf8>)
 8004672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004676:	bf00      	nop
 8004678:	080046ad 	.word	0x080046ad
 800467c:	080046cd 	.word	0x080046cd
 8004680:	080046cd 	.word	0x080046cd
 8004684:	080046cd 	.word	0x080046cd
 8004688:	080046bd 	.word	0x080046bd
 800468c:	080046cd 	.word	0x080046cd
 8004690:	080046cd 	.word	0x080046cd
 8004694:	080046cd 	.word	0x080046cd
 8004698:	080046b5 	.word	0x080046b5
 800469c:	080046cd 	.word	0x080046cd
 80046a0:	080046cd 	.word	0x080046cd
 80046a4:	080046cd 	.word	0x080046cd
 80046a8:	080046c5 	.word	0x080046c5
 80046ac:	2300      	movs	r3, #0
 80046ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046b2:	e0d8      	b.n	8004866 <UART_SetConfig+0x2e6>
 80046b4:	2302      	movs	r3, #2
 80046b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046ba:	e0d4      	b.n	8004866 <UART_SetConfig+0x2e6>
 80046bc:	2304      	movs	r3, #4
 80046be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046c2:	e0d0      	b.n	8004866 <UART_SetConfig+0x2e6>
 80046c4:	2308      	movs	r3, #8
 80046c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046ca:	e0cc      	b.n	8004866 <UART_SetConfig+0x2e6>
 80046cc:	2310      	movs	r3, #16
 80046ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046d2:	e0c8      	b.n	8004866 <UART_SetConfig+0x2e6>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a5e      	ldr	r2, [pc, #376]	@ (8004854 <UART_SetConfig+0x2d4>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d125      	bne.n	800472a <UART_SetConfig+0x1aa>
 80046de:	4b5b      	ldr	r3, [pc, #364]	@ (800484c <UART_SetConfig+0x2cc>)
 80046e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046e4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80046e8:	2b30      	cmp	r3, #48	@ 0x30
 80046ea:	d016      	beq.n	800471a <UART_SetConfig+0x19a>
 80046ec:	2b30      	cmp	r3, #48	@ 0x30
 80046ee:	d818      	bhi.n	8004722 <UART_SetConfig+0x1a2>
 80046f0:	2b20      	cmp	r3, #32
 80046f2:	d00a      	beq.n	800470a <UART_SetConfig+0x18a>
 80046f4:	2b20      	cmp	r3, #32
 80046f6:	d814      	bhi.n	8004722 <UART_SetConfig+0x1a2>
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d002      	beq.n	8004702 <UART_SetConfig+0x182>
 80046fc:	2b10      	cmp	r3, #16
 80046fe:	d008      	beq.n	8004712 <UART_SetConfig+0x192>
 8004700:	e00f      	b.n	8004722 <UART_SetConfig+0x1a2>
 8004702:	2300      	movs	r3, #0
 8004704:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004708:	e0ad      	b.n	8004866 <UART_SetConfig+0x2e6>
 800470a:	2302      	movs	r3, #2
 800470c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004710:	e0a9      	b.n	8004866 <UART_SetConfig+0x2e6>
 8004712:	2304      	movs	r3, #4
 8004714:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004718:	e0a5      	b.n	8004866 <UART_SetConfig+0x2e6>
 800471a:	2308      	movs	r3, #8
 800471c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004720:	e0a1      	b.n	8004866 <UART_SetConfig+0x2e6>
 8004722:	2310      	movs	r3, #16
 8004724:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004728:	e09d      	b.n	8004866 <UART_SetConfig+0x2e6>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a4a      	ldr	r2, [pc, #296]	@ (8004858 <UART_SetConfig+0x2d8>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d125      	bne.n	8004780 <UART_SetConfig+0x200>
 8004734:	4b45      	ldr	r3, [pc, #276]	@ (800484c <UART_SetConfig+0x2cc>)
 8004736:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800473a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800473e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004740:	d016      	beq.n	8004770 <UART_SetConfig+0x1f0>
 8004742:	2bc0      	cmp	r3, #192	@ 0xc0
 8004744:	d818      	bhi.n	8004778 <UART_SetConfig+0x1f8>
 8004746:	2b80      	cmp	r3, #128	@ 0x80
 8004748:	d00a      	beq.n	8004760 <UART_SetConfig+0x1e0>
 800474a:	2b80      	cmp	r3, #128	@ 0x80
 800474c:	d814      	bhi.n	8004778 <UART_SetConfig+0x1f8>
 800474e:	2b00      	cmp	r3, #0
 8004750:	d002      	beq.n	8004758 <UART_SetConfig+0x1d8>
 8004752:	2b40      	cmp	r3, #64	@ 0x40
 8004754:	d008      	beq.n	8004768 <UART_SetConfig+0x1e8>
 8004756:	e00f      	b.n	8004778 <UART_SetConfig+0x1f8>
 8004758:	2300      	movs	r3, #0
 800475a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800475e:	e082      	b.n	8004866 <UART_SetConfig+0x2e6>
 8004760:	2302      	movs	r3, #2
 8004762:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004766:	e07e      	b.n	8004866 <UART_SetConfig+0x2e6>
 8004768:	2304      	movs	r3, #4
 800476a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800476e:	e07a      	b.n	8004866 <UART_SetConfig+0x2e6>
 8004770:	2308      	movs	r3, #8
 8004772:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004776:	e076      	b.n	8004866 <UART_SetConfig+0x2e6>
 8004778:	2310      	movs	r3, #16
 800477a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800477e:	e072      	b.n	8004866 <UART_SetConfig+0x2e6>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a35      	ldr	r2, [pc, #212]	@ (800485c <UART_SetConfig+0x2dc>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d12a      	bne.n	80047e0 <UART_SetConfig+0x260>
 800478a:	4b30      	ldr	r3, [pc, #192]	@ (800484c <UART_SetConfig+0x2cc>)
 800478c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004790:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004794:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004798:	d01a      	beq.n	80047d0 <UART_SetConfig+0x250>
 800479a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800479e:	d81b      	bhi.n	80047d8 <UART_SetConfig+0x258>
 80047a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047a4:	d00c      	beq.n	80047c0 <UART_SetConfig+0x240>
 80047a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047aa:	d815      	bhi.n	80047d8 <UART_SetConfig+0x258>
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d003      	beq.n	80047b8 <UART_SetConfig+0x238>
 80047b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047b4:	d008      	beq.n	80047c8 <UART_SetConfig+0x248>
 80047b6:	e00f      	b.n	80047d8 <UART_SetConfig+0x258>
 80047b8:	2300      	movs	r3, #0
 80047ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047be:	e052      	b.n	8004866 <UART_SetConfig+0x2e6>
 80047c0:	2302      	movs	r3, #2
 80047c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047c6:	e04e      	b.n	8004866 <UART_SetConfig+0x2e6>
 80047c8:	2304      	movs	r3, #4
 80047ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047ce:	e04a      	b.n	8004866 <UART_SetConfig+0x2e6>
 80047d0:	2308      	movs	r3, #8
 80047d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047d6:	e046      	b.n	8004866 <UART_SetConfig+0x2e6>
 80047d8:	2310      	movs	r3, #16
 80047da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047de:	e042      	b.n	8004866 <UART_SetConfig+0x2e6>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a17      	ldr	r2, [pc, #92]	@ (8004844 <UART_SetConfig+0x2c4>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d13a      	bne.n	8004860 <UART_SetConfig+0x2e0>
 80047ea:	4b18      	ldr	r3, [pc, #96]	@ (800484c <UART_SetConfig+0x2cc>)
 80047ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047f0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80047f4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80047f8:	d01a      	beq.n	8004830 <UART_SetConfig+0x2b0>
 80047fa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80047fe:	d81b      	bhi.n	8004838 <UART_SetConfig+0x2b8>
 8004800:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004804:	d00c      	beq.n	8004820 <UART_SetConfig+0x2a0>
 8004806:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800480a:	d815      	bhi.n	8004838 <UART_SetConfig+0x2b8>
 800480c:	2b00      	cmp	r3, #0
 800480e:	d003      	beq.n	8004818 <UART_SetConfig+0x298>
 8004810:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004814:	d008      	beq.n	8004828 <UART_SetConfig+0x2a8>
 8004816:	e00f      	b.n	8004838 <UART_SetConfig+0x2b8>
 8004818:	2300      	movs	r3, #0
 800481a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800481e:	e022      	b.n	8004866 <UART_SetConfig+0x2e6>
 8004820:	2302      	movs	r3, #2
 8004822:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004826:	e01e      	b.n	8004866 <UART_SetConfig+0x2e6>
 8004828:	2304      	movs	r3, #4
 800482a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800482e:	e01a      	b.n	8004866 <UART_SetConfig+0x2e6>
 8004830:	2308      	movs	r3, #8
 8004832:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004836:	e016      	b.n	8004866 <UART_SetConfig+0x2e6>
 8004838:	2310      	movs	r3, #16
 800483a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800483e:	e012      	b.n	8004866 <UART_SetConfig+0x2e6>
 8004840:	efff69f3 	.word	0xefff69f3
 8004844:	40008000 	.word	0x40008000
 8004848:	40013800 	.word	0x40013800
 800484c:	40021000 	.word	0x40021000
 8004850:	40004400 	.word	0x40004400
 8004854:	40004800 	.word	0x40004800
 8004858:	40004c00 	.word	0x40004c00
 800485c:	40005000 	.word	0x40005000
 8004860:	2310      	movs	r3, #16
 8004862:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a9f      	ldr	r2, [pc, #636]	@ (8004ae8 <UART_SetConfig+0x568>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d17a      	bne.n	8004966 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004870:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004874:	2b08      	cmp	r3, #8
 8004876:	d824      	bhi.n	80048c2 <UART_SetConfig+0x342>
 8004878:	a201      	add	r2, pc, #4	@ (adr r2, 8004880 <UART_SetConfig+0x300>)
 800487a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800487e:	bf00      	nop
 8004880:	080048a5 	.word	0x080048a5
 8004884:	080048c3 	.word	0x080048c3
 8004888:	080048ad 	.word	0x080048ad
 800488c:	080048c3 	.word	0x080048c3
 8004890:	080048b3 	.word	0x080048b3
 8004894:	080048c3 	.word	0x080048c3
 8004898:	080048c3 	.word	0x080048c3
 800489c:	080048c3 	.word	0x080048c3
 80048a0:	080048bb 	.word	0x080048bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048a4:	f7ff f8d6 	bl	8003a54 <HAL_RCC_GetPCLK1Freq>
 80048a8:	61f8      	str	r0, [r7, #28]
        break;
 80048aa:	e010      	b.n	80048ce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048ac:	4b8f      	ldr	r3, [pc, #572]	@ (8004aec <UART_SetConfig+0x56c>)
 80048ae:	61fb      	str	r3, [r7, #28]
        break;
 80048b0:	e00d      	b.n	80048ce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048b2:	f7ff f837 	bl	8003924 <HAL_RCC_GetSysClockFreq>
 80048b6:	61f8      	str	r0, [r7, #28]
        break;
 80048b8:	e009      	b.n	80048ce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048be:	61fb      	str	r3, [r7, #28]
        break;
 80048c0:	e005      	b.n	80048ce <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80048c2:	2300      	movs	r3, #0
 80048c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80048cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	f000 80fb 	beq.w	8004acc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	685a      	ldr	r2, [r3, #4]
 80048da:	4613      	mov	r3, r2
 80048dc:	005b      	lsls	r3, r3, #1
 80048de:	4413      	add	r3, r2
 80048e0:	69fa      	ldr	r2, [r7, #28]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d305      	bcc.n	80048f2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80048ec:	69fa      	ldr	r2, [r7, #28]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d903      	bls.n	80048fa <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80048f8:	e0e8      	b.n	8004acc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	2200      	movs	r2, #0
 80048fe:	461c      	mov	r4, r3
 8004900:	4615      	mov	r5, r2
 8004902:	f04f 0200 	mov.w	r2, #0
 8004906:	f04f 0300 	mov.w	r3, #0
 800490a:	022b      	lsls	r3, r5, #8
 800490c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004910:	0222      	lsls	r2, r4, #8
 8004912:	68f9      	ldr	r1, [r7, #12]
 8004914:	6849      	ldr	r1, [r1, #4]
 8004916:	0849      	lsrs	r1, r1, #1
 8004918:	2000      	movs	r0, #0
 800491a:	4688      	mov	r8, r1
 800491c:	4681      	mov	r9, r0
 800491e:	eb12 0a08 	adds.w	sl, r2, r8
 8004922:	eb43 0b09 	adc.w	fp, r3, r9
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	603b      	str	r3, [r7, #0]
 800492e:	607a      	str	r2, [r7, #4]
 8004930:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004934:	4650      	mov	r0, sl
 8004936:	4659      	mov	r1, fp
 8004938:	f7fb fc46 	bl	80001c8 <__aeabi_uldivmod>
 800493c:	4602      	mov	r2, r0
 800493e:	460b      	mov	r3, r1
 8004940:	4613      	mov	r3, r2
 8004942:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800494a:	d308      	bcc.n	800495e <UART_SetConfig+0x3de>
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004952:	d204      	bcs.n	800495e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	60da      	str	r2, [r3, #12]
 800495c:	e0b6      	b.n	8004acc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004964:	e0b2      	b.n	8004acc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	69db      	ldr	r3, [r3, #28]
 800496a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800496e:	d15e      	bne.n	8004a2e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004970:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004974:	2b08      	cmp	r3, #8
 8004976:	d828      	bhi.n	80049ca <UART_SetConfig+0x44a>
 8004978:	a201      	add	r2, pc, #4	@ (adr r2, 8004980 <UART_SetConfig+0x400>)
 800497a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800497e:	bf00      	nop
 8004980:	080049a5 	.word	0x080049a5
 8004984:	080049ad 	.word	0x080049ad
 8004988:	080049b5 	.word	0x080049b5
 800498c:	080049cb 	.word	0x080049cb
 8004990:	080049bb 	.word	0x080049bb
 8004994:	080049cb 	.word	0x080049cb
 8004998:	080049cb 	.word	0x080049cb
 800499c:	080049cb 	.word	0x080049cb
 80049a0:	080049c3 	.word	0x080049c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049a4:	f7ff f856 	bl	8003a54 <HAL_RCC_GetPCLK1Freq>
 80049a8:	61f8      	str	r0, [r7, #28]
        break;
 80049aa:	e014      	b.n	80049d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049ac:	f7ff f868 	bl	8003a80 <HAL_RCC_GetPCLK2Freq>
 80049b0:	61f8      	str	r0, [r7, #28]
        break;
 80049b2:	e010      	b.n	80049d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049b4:	4b4d      	ldr	r3, [pc, #308]	@ (8004aec <UART_SetConfig+0x56c>)
 80049b6:	61fb      	str	r3, [r7, #28]
        break;
 80049b8:	e00d      	b.n	80049d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049ba:	f7fe ffb3 	bl	8003924 <HAL_RCC_GetSysClockFreq>
 80049be:	61f8      	str	r0, [r7, #28]
        break;
 80049c0:	e009      	b.n	80049d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049c6:	61fb      	str	r3, [r7, #28]
        break;
 80049c8:	e005      	b.n	80049d6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80049ca:	2300      	movs	r3, #0
 80049cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80049d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d077      	beq.n	8004acc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	005a      	lsls	r2, r3, #1
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	085b      	lsrs	r3, r3, #1
 80049e6:	441a      	add	r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80049f0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	2b0f      	cmp	r3, #15
 80049f6:	d916      	bls.n	8004a26 <UART_SetConfig+0x4a6>
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049fe:	d212      	bcs.n	8004a26 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	f023 030f 	bic.w	r3, r3, #15
 8004a08:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	085b      	lsrs	r3, r3, #1
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	f003 0307 	and.w	r3, r3, #7
 8004a14:	b29a      	uxth	r2, r3
 8004a16:	8afb      	ldrh	r3, [r7, #22]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	8afa      	ldrh	r2, [r7, #22]
 8004a22:	60da      	str	r2, [r3, #12]
 8004a24:	e052      	b.n	8004acc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004a2c:	e04e      	b.n	8004acc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a2e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004a32:	2b08      	cmp	r3, #8
 8004a34:	d827      	bhi.n	8004a86 <UART_SetConfig+0x506>
 8004a36:	a201      	add	r2, pc, #4	@ (adr r2, 8004a3c <UART_SetConfig+0x4bc>)
 8004a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a3c:	08004a61 	.word	0x08004a61
 8004a40:	08004a69 	.word	0x08004a69
 8004a44:	08004a71 	.word	0x08004a71
 8004a48:	08004a87 	.word	0x08004a87
 8004a4c:	08004a77 	.word	0x08004a77
 8004a50:	08004a87 	.word	0x08004a87
 8004a54:	08004a87 	.word	0x08004a87
 8004a58:	08004a87 	.word	0x08004a87
 8004a5c:	08004a7f 	.word	0x08004a7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a60:	f7fe fff8 	bl	8003a54 <HAL_RCC_GetPCLK1Freq>
 8004a64:	61f8      	str	r0, [r7, #28]
        break;
 8004a66:	e014      	b.n	8004a92 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a68:	f7ff f80a 	bl	8003a80 <HAL_RCC_GetPCLK2Freq>
 8004a6c:	61f8      	str	r0, [r7, #28]
        break;
 8004a6e:	e010      	b.n	8004a92 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a70:	4b1e      	ldr	r3, [pc, #120]	@ (8004aec <UART_SetConfig+0x56c>)
 8004a72:	61fb      	str	r3, [r7, #28]
        break;
 8004a74:	e00d      	b.n	8004a92 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a76:	f7fe ff55 	bl	8003924 <HAL_RCC_GetSysClockFreq>
 8004a7a:	61f8      	str	r0, [r7, #28]
        break;
 8004a7c:	e009      	b.n	8004a92 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a82:	61fb      	str	r3, [r7, #28]
        break;
 8004a84:	e005      	b.n	8004a92 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004a86:	2300      	movs	r3, #0
 8004a88:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004a90:	bf00      	nop
    }

    if (pclk != 0U)
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d019      	beq.n	8004acc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	085a      	lsrs	r2, r3, #1
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	441a      	add	r2, r3
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aaa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	2b0f      	cmp	r3, #15
 8004ab0:	d909      	bls.n	8004ac6 <UART_SetConfig+0x546>
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ab8:	d205      	bcs.n	8004ac6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	b29a      	uxth	r2, r3
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	60da      	str	r2, [r3, #12]
 8004ac4:	e002      	b.n	8004acc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004ad8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3728      	adds	r7, #40	@ 0x28
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ae6:	bf00      	nop
 8004ae8:	40008000 	.word	0x40008000
 8004aec:	00f42400 	.word	0x00f42400

08004af0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004afc:	f003 0308 	and.w	r3, r3, #8
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00a      	beq.n	8004b1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	430a      	orrs	r2, r1
 8004b18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00a      	beq.n	8004b3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	430a      	orrs	r2, r1
 8004b3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b40:	f003 0302 	and.w	r3, r3, #2
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d00a      	beq.n	8004b5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b62:	f003 0304 	and.w	r3, r3, #4
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00a      	beq.n	8004b80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	430a      	orrs	r2, r1
 8004b7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b84:	f003 0310 	and.w	r3, r3, #16
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00a      	beq.n	8004ba2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba6:	f003 0320 	and.w	r3, r3, #32
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00a      	beq.n	8004bc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	430a      	orrs	r2, r1
 8004bc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d01a      	beq.n	8004c06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	430a      	orrs	r2, r1
 8004be4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004bee:	d10a      	bne.n	8004c06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	430a      	orrs	r2, r1
 8004c04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00a      	beq.n	8004c28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	430a      	orrs	r2, r1
 8004c26:	605a      	str	r2, [r3, #4]
  }
}
 8004c28:	bf00      	nop
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b098      	sub	sp, #96	@ 0x60
 8004c38:	af02      	add	r7, sp, #8
 8004c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c44:	f7fc fabe 	bl	80011c4 <HAL_GetTick>
 8004c48:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0308 	and.w	r3, r3, #8
 8004c54:	2b08      	cmp	r3, #8
 8004c56:	d12e      	bne.n	8004cb6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c58:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004c5c:	9300      	str	r3, [sp, #0]
 8004c5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c60:	2200      	movs	r2, #0
 8004c62:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 f88c 	bl	8004d84 <UART_WaitOnFlagUntilTimeout>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d021      	beq.n	8004cb6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c7a:	e853 3f00 	ldrex	r3, [r3]
 8004c7e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c86:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c90:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c92:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c94:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c98:	e841 2300 	strex	r3, r2, [r1]
 8004c9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1e6      	bne.n	8004c72 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2220      	movs	r2, #32
 8004ca8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e062      	b.n	8004d7c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0304 	and.w	r3, r3, #4
 8004cc0:	2b04      	cmp	r3, #4
 8004cc2:	d149      	bne.n	8004d58 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cc4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004cc8:	9300      	str	r3, [sp, #0]
 8004cca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 f856 	bl	8004d84 <UART_WaitOnFlagUntilTimeout>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d03c      	beq.n	8004d58 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce6:	e853 3f00 	ldrex	r3, [r3]
 8004cea:	623b      	str	r3, [r7, #32]
   return(result);
 8004cec:	6a3b      	ldr	r3, [r7, #32]
 8004cee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004cf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cfc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004cfe:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d00:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d04:	e841 2300 	strex	r3, r2, [r1]
 8004d08:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d1e6      	bne.n	8004cde <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	3308      	adds	r3, #8
 8004d16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	e853 3f00 	ldrex	r3, [r3]
 8004d1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f023 0301 	bic.w	r3, r3, #1
 8004d26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	3308      	adds	r3, #8
 8004d2e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d30:	61fa      	str	r2, [r7, #28]
 8004d32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d34:	69b9      	ldr	r1, [r7, #24]
 8004d36:	69fa      	ldr	r2, [r7, #28]
 8004d38:	e841 2300 	strex	r3, r2, [r1]
 8004d3c:	617b      	str	r3, [r7, #20]
   return(result);
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d1e5      	bne.n	8004d10 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2220      	movs	r2, #32
 8004d48:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	e011      	b.n	8004d7c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2220      	movs	r2, #32
 8004d5c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2220      	movs	r2, #32
 8004d62:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3758      	adds	r7, #88	@ 0x58
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	60b9      	str	r1, [r7, #8]
 8004d8e:	603b      	str	r3, [r7, #0]
 8004d90:	4613      	mov	r3, r2
 8004d92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d94:	e04f      	b.n	8004e36 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d9c:	d04b      	beq.n	8004e36 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d9e:	f7fc fa11 	bl	80011c4 <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	69ba      	ldr	r2, [r7, #24]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d302      	bcc.n	8004db4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d101      	bne.n	8004db8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e04e      	b.n	8004e56 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0304 	and.w	r3, r3, #4
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d037      	beq.n	8004e36 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	2b80      	cmp	r3, #128	@ 0x80
 8004dca:	d034      	beq.n	8004e36 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	2b40      	cmp	r3, #64	@ 0x40
 8004dd0:	d031      	beq.n	8004e36 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	69db      	ldr	r3, [r3, #28]
 8004dd8:	f003 0308 	and.w	r3, r3, #8
 8004ddc:	2b08      	cmp	r3, #8
 8004dde:	d110      	bne.n	8004e02 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2208      	movs	r2, #8
 8004de6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	f000 f838 	bl	8004e5e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2208      	movs	r2, #8
 8004df2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e029      	b.n	8004e56 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	69db      	ldr	r3, [r3, #28]
 8004e08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e10:	d111      	bne.n	8004e36 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004e1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e1c:	68f8      	ldr	r0, [r7, #12]
 8004e1e:	f000 f81e 	bl	8004e5e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2220      	movs	r2, #32
 8004e26:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e00f      	b.n	8004e56 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	69da      	ldr	r2, [r3, #28]
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	4013      	ands	r3, r2
 8004e40:	68ba      	ldr	r2, [r7, #8]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	bf0c      	ite	eq
 8004e46:	2301      	moveq	r3, #1
 8004e48:	2300      	movne	r3, #0
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	79fb      	ldrb	r3, [r7, #7]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d0a0      	beq.n	8004d96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3710      	adds	r7, #16
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}

08004e5e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e5e:	b480      	push	{r7}
 8004e60:	b095      	sub	sp, #84	@ 0x54
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e6e:	e853 3f00 	ldrex	r3, [r3]
 8004e72:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	461a      	mov	r2, r3
 8004e82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e84:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e86:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e88:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004e8a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004e8c:	e841 2300 	strex	r3, r2, [r1]
 8004e90:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d1e6      	bne.n	8004e66 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	3308      	adds	r3, #8
 8004e9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea0:	6a3b      	ldr	r3, [r7, #32]
 8004ea2:	e853 3f00 	ldrex	r3, [r3]
 8004ea6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	f023 0301 	bic.w	r3, r3, #1
 8004eae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	3308      	adds	r3, #8
 8004eb6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004eb8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004eba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ebc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ebe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ec0:	e841 2300 	strex	r3, r2, [r1]
 8004ec4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1e5      	bne.n	8004e98 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d118      	bne.n	8004f06 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	e853 3f00 	ldrex	r3, [r3]
 8004ee0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	f023 0310 	bic.w	r3, r3, #16
 8004ee8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	461a      	mov	r2, r3
 8004ef0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ef2:	61bb      	str	r3, [r7, #24]
 8004ef4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef6:	6979      	ldr	r1, [r7, #20]
 8004ef8:	69ba      	ldr	r2, [r7, #24]
 8004efa:	e841 2300 	strex	r3, r2, [r1]
 8004efe:	613b      	str	r3, [r7, #16]
   return(result);
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1e6      	bne.n	8004ed4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2220      	movs	r2, #32
 8004f0a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004f1a:	bf00      	nop
 8004f1c:	3754      	adds	r7, #84	@ 0x54
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr

08004f26 <memset>:
 8004f26:	4402      	add	r2, r0
 8004f28:	4603      	mov	r3, r0
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d100      	bne.n	8004f30 <memset+0xa>
 8004f2e:	4770      	bx	lr
 8004f30:	f803 1b01 	strb.w	r1, [r3], #1
 8004f34:	e7f9      	b.n	8004f2a <memset+0x4>
	...

08004f38 <__libc_init_array>:
 8004f38:	b570      	push	{r4, r5, r6, lr}
 8004f3a:	4d0d      	ldr	r5, [pc, #52]	@ (8004f70 <__libc_init_array+0x38>)
 8004f3c:	4c0d      	ldr	r4, [pc, #52]	@ (8004f74 <__libc_init_array+0x3c>)
 8004f3e:	1b64      	subs	r4, r4, r5
 8004f40:	10a4      	asrs	r4, r4, #2
 8004f42:	2600      	movs	r6, #0
 8004f44:	42a6      	cmp	r6, r4
 8004f46:	d109      	bne.n	8004f5c <__libc_init_array+0x24>
 8004f48:	4d0b      	ldr	r5, [pc, #44]	@ (8004f78 <__libc_init_array+0x40>)
 8004f4a:	4c0c      	ldr	r4, [pc, #48]	@ (8004f7c <__libc_init_array+0x44>)
 8004f4c:	f000 f818 	bl	8004f80 <_init>
 8004f50:	1b64      	subs	r4, r4, r5
 8004f52:	10a4      	asrs	r4, r4, #2
 8004f54:	2600      	movs	r6, #0
 8004f56:	42a6      	cmp	r6, r4
 8004f58:	d105      	bne.n	8004f66 <__libc_init_array+0x2e>
 8004f5a:	bd70      	pop	{r4, r5, r6, pc}
 8004f5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f60:	4798      	blx	r3
 8004f62:	3601      	adds	r6, #1
 8004f64:	e7ee      	b.n	8004f44 <__libc_init_array+0xc>
 8004f66:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f6a:	4798      	blx	r3
 8004f6c:	3601      	adds	r6, #1
 8004f6e:	e7f2      	b.n	8004f56 <__libc_init_array+0x1e>
 8004f70:	0800505c 	.word	0x0800505c
 8004f74:	0800505c 	.word	0x0800505c
 8004f78:	0800505c 	.word	0x0800505c
 8004f7c:	08005060 	.word	0x08005060

08004f80 <_init>:
 8004f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f82:	bf00      	nop
 8004f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f86:	bc08      	pop	{r3}
 8004f88:	469e      	mov	lr, r3
 8004f8a:	4770      	bx	lr

08004f8c <_fini>:
 8004f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f8e:	bf00      	nop
 8004f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f92:	bc08      	pop	{r3}
 8004f94:	469e      	mov	lr, r3
 8004f96:	4770      	bx	lr
