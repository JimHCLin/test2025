
TEST_Jim.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000576c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080058f4  080058f4  000068f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800598c  0800598c  000070a0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800598c  0800598c  0000698c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005994  08005994  000070a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005994  08005994  00006994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005998  08005998  00006998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a0  20000000  0800599c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b8  200000a0  08005a3c  000070a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000558  08005a3c  00007558  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000070a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013a1c  00000000  00000000  000070d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002822  00000000  00000000  0001aaec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001128  00000000  00000000  0001d310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d5f  00000000  00000000  0001e438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029396  00000000  00000000  0001f197  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014453  00000000  00000000  0004852d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100185  00000000  00000000  0005c980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015cb05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ed4  00000000  00000000  0015cb48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00161a1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000a0 	.word	0x200000a0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080058dc 	.word	0x080058dc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000a4 	.word	0x200000a4
 80001c4:	080058dc 	.word	0x080058dc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <lightOnLED>:
//欄位依序是：GPIO port (GPIOA, GPIOB...),GPIO pin (GPIO_PIN_0, GPIO_PIN_1...),初始狀態（TOUCH_IDLE）,lastChangeTime（0）,pressStartTime（0）,lastTapTime（0）,tapCount（0）
//longPressDetected（false）

//////////////////////////////////
void lightOnLED(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	//int count=0;
	//int statusLED=0;
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80004f8:	2201      	movs	r2, #1
 80004fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80004fe:	4802      	ldr	r0, [pc, #8]	@ (8000508 <lightOnLED+0x14>)
 8000500:	f002 fb9c 	bl	8002c3c <HAL_GPIO_WritePin>
    //state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8);
    //HAL_Delay(100);
}
 8000504:	bf00      	nop
 8000506:	bd80      	pop	{r7, pc}
 8000508:	48000400 	.word	0x48000400

0800050c <lightOffLED>:
void lightOffLED(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
	//int count=0;
	//int statusLED=0;

    //將 PB8 Off
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000510:	2200      	movs	r2, #0
 8000512:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000516:	4802      	ldr	r0, [pc, #8]	@ (8000520 <lightOffLED+0x14>)
 8000518:	f002 fb90 	bl	8002c3c <HAL_GPIO_WritePin>
    //state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8);
    //receive_data_uart();
    //HAL_Delay(100);
    //i++;
}
 800051c:	bf00      	nop
 800051e:	bd80      	pop	{r7, pc}
 8000520:	48000400 	.word	0x48000400

08000524 <updateTouchSwitchState>:

    return isTouchSwitchPressed;
}

void updateTouchSwitchState(TouchSwitchContext* sw, uint32_t debounceTime)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b086      	sub	sp, #24
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
 800052c:	6039      	str	r1, [r7, #0]
    GPIO_PinState pinState = HAL_GPIO_ReadPin((*sw).port, (*sw).pin);
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681a      	ldr	r2, [r3, #0]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	889b      	ldrh	r3, [r3, #4]
 8000536:	4619      	mov	r1, r3
 8000538:	4610      	mov	r0, r2
 800053a:	f002 fb67 	bl	8002c0c <HAL_GPIO_ReadPin>
 800053e:	4603      	mov	r3, r0
 8000540:	75fb      	strb	r3, [r7, #23]
    uint32_t now = HAL_GetTick();
 8000542:	f001 f8d3 	bl	80016ec <HAL_GetTick>
 8000546:	6138      	str	r0, [r7, #16]

    switch ((*sw).state)
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	799b      	ldrb	r3, [r3, #6]
 800054c:	2b04      	cmp	r3, #4
 800054e:	f200 8088 	bhi.w	8000662 <updateTouchSwitchState+0x13e>
 8000552:	a201      	add	r2, pc, #4	@ (adr r2, 8000558 <updateTouchSwitchState+0x34>)
 8000554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000558:	0800056d 	.word	0x0800056d
 800055c:	08000581 	.word	0x08000581
 8000560:	080005b1 	.word	0x080005b1
 8000564:	0800063f 	.word	0x0800063f
 8000568:	0800064d 	.word	0x0800064d
    {
        case TOUCH_IDLE:
            if (pinState == GPIO_PIN_RESET) {
 800056c:	7dfb      	ldrb	r3, [r7, #23]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d170      	bne.n	8000654 <updateTouchSwitchState+0x130>
                (*sw).state = TOUCH_DEBOUNCE;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	2201      	movs	r2, #1
 8000576:	719a      	strb	r2, [r3, #6]
                (*sw).lastChangeTime = now;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	693a      	ldr	r2, [r7, #16]
 800057c:	609a      	str	r2, [r3, #8]
            }
            break;
 800057e:	e069      	b.n	8000654 <updateTouchSwitchState+0x130>

        case TOUCH_DEBOUNCE:
            if ((now - (*sw).lastChangeTime) >= debounceTime) {
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	689b      	ldr	r3, [r3, #8]
 8000584:	693a      	ldr	r2, [r7, #16]
 8000586:	1ad3      	subs	r3, r2, r3
 8000588:	683a      	ldr	r2, [r7, #0]
 800058a:	429a      	cmp	r2, r3
 800058c:	d864      	bhi.n	8000658 <updateTouchSwitchState+0x134>
                if (pinState == GPIO_PIN_RESET) {
 800058e:	7dfb      	ldrb	r3, [r7, #23]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d109      	bne.n	80005a8 <updateTouchSwitchState+0x84>
                    (*sw).state = TOUCH_PRESSED;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2202      	movs	r2, #2
 8000598:	719a      	strb	r2, [r3, #6]
                    (*sw).pressStartTime = now;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	693a      	ldr	r2, [r7, #16]
 800059e:	60da      	str	r2, [r3, #12]
                    (*sw).longPressDetected = false;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	2200      	movs	r2, #0
 80005a4:	761a      	strb	r2, [r3, #24]
                } else {
                    (*sw).state = TOUCH_IDLE;
                }
            }
            break;
 80005a6:	e057      	b.n	8000658 <updateTouchSwitchState+0x134>
                    (*sw).state = TOUCH_IDLE;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2200      	movs	r2, #0
 80005ac:	719a      	strb	r2, [r3, #6]
            break;
 80005ae:	e053      	b.n	8000658 <updateTouchSwitchState+0x134>

        case TOUCH_PRESSED:
            if (pinState == GPIO_PIN_SET)
 80005b0:	7dfb      	ldrb	r3, [r7, #23]
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d12b      	bne.n	800060e <updateTouchSwitchState+0xea>
            {
            	//SET代表按鈕已經放開
                (*sw).state = TOUCH_RELEASED;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	2204      	movs	r2, #4
 80005ba:	719a      	strb	r2, [r3, #6]
                uint32_t pressDuration = now - (*sw).pressStartTime;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	68db      	ldr	r3, [r3, #12]
 80005c0:	693a      	ldr	r2, [r7, #16]
 80005c2:	1ad3      	subs	r3, r2, r3
 80005c4:	60fb      	str	r3, [r7, #12]

                if ((now - (*sw).lastTapTime) < MULTI_TAP_WINDOW)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	695b      	ldr	r3, [r3, #20]
 80005ca:	693a      	ldr	r2, [r7, #16]
 80005cc:	1ad3      	subs	r3, r2, r3
 80005ce:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80005d2:	d206      	bcs.n	80005e2 <updateTouchSwitchState+0xbe>
                {
                	///處理快速連按
                    (*sw).tapCount++;//快速連按計數加1
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	7c1b      	ldrb	r3, [r3, #16]
 80005d8:	3301      	adds	r3, #1
 80005da:	b2da      	uxtb	r2, r3
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	741a      	strb	r2, [r3, #16]
 80005e0:	e002      	b.n	80005e8 <updateTouchSwitchState+0xc4>
                }
                else
                {
                    (*sw).tapCount = 1;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2201      	movs	r2, #1
 80005e6:	741a      	strb	r2, [r3, #16]
                }
                (*sw).lastTapTime = now;//把當下的時間記錄在lastTapTime
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	693a      	ldr	r2, [r7, #16]
 80005ec:	615a      	str	r2, [r3, #20]

                if (pressDuration < SHORT_PRESS_THRESHOLD)
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80005f4:	d203      	bcs.n	80005fe <updateTouchSwitchState+0xda>
                {
                	//處理短按情況
                    printf("短按\n");
 80005f6:	481d      	ldr	r0, [pc, #116]	@ (800066c <updateTouchSwitchState+0x148>)
 80005f8:	f004 fddc 	bl	80051b4 <puts>
                (*sw).longPressDetected = true;
                printf("長按觸發\n");
                //按鈕還按著
                (*sw).state = TOUCH_LONG_PRESSED;
            }
            break;
 80005fc:	e02e      	b.n	800065c <updateTouchSwitchState+0x138>
                else if (pressDuration >= LONG_PRESS_THRESHOLD)
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000604:	d32a      	bcc.n	800065c <updateTouchSwitchState+0x138>
                    printf("長按（釋放時判斷）\n");
 8000606:	481a      	ldr	r0, [pc, #104]	@ (8000670 <updateTouchSwitchState+0x14c>)
 8000608:	f004 fdd4 	bl	80051b4 <puts>
            break;
 800060c:	e026      	b.n	800065c <updateTouchSwitchState+0x138>
            else if ((now - (*sw).pressStartTime) >= LONG_PRESS_THRESHOLD && !(*sw).longPressDetected)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	68db      	ldr	r3, [r3, #12]
 8000612:	693a      	ldr	r2, [r7, #16]
 8000614:	1ad3      	subs	r3, r2, r3
 8000616:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800061a:	d31f      	bcc.n	800065c <updateTouchSwitchState+0x138>
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	7e1b      	ldrb	r3, [r3, #24]
 8000620:	f083 0301 	eor.w	r3, r3, #1
 8000624:	b2db      	uxtb	r3, r3
 8000626:	2b00      	cmp	r3, #0
 8000628:	d018      	beq.n	800065c <updateTouchSwitchState+0x138>
                (*sw).longPressDetected = true;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	2201      	movs	r2, #1
 800062e:	761a      	strb	r2, [r3, #24]
                printf("長按觸發\n");
 8000630:	4810      	ldr	r0, [pc, #64]	@ (8000674 <updateTouchSwitchState+0x150>)
 8000632:	f004 fdbf 	bl	80051b4 <puts>
                (*sw).state = TOUCH_LONG_PRESSED;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	2203      	movs	r2, #3
 800063a:	719a      	strb	r2, [r3, #6]
            break;
 800063c:	e00e      	b.n	800065c <updateTouchSwitchState+0x138>

        case TOUCH_LONG_PRESSED:
            if (pinState == GPIO_PIN_SET)
 800063e:	7dfb      	ldrb	r3, [r7, #23]
 8000640:	2b01      	cmp	r3, #1
 8000642:	d10d      	bne.n	8000660 <updateTouchSwitchState+0x13c>
            {
            	//SET代表按鈕已經放開
                (*sw).state = TOUCH_RELEASED;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2204      	movs	r2, #4
 8000648:	719a      	strb	r2, [r3, #6]
            }
            break;
 800064a:	e009      	b.n	8000660 <updateTouchSwitchState+0x13c>

        case TOUCH_RELEASED:
            (*sw).state = TOUCH_IDLE;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	2200      	movs	r2, #0
 8000650:	719a      	strb	r2, [r3, #6]
            break;
 8000652:	e006      	b.n	8000662 <updateTouchSwitchState+0x13e>
            break;
 8000654:	bf00      	nop
 8000656:	e004      	b.n	8000662 <updateTouchSwitchState+0x13e>
            break;
 8000658:	bf00      	nop
 800065a:	e002      	b.n	8000662 <updateTouchSwitchState+0x13e>
            break;
 800065c:	bf00      	nop
 800065e:	e000      	b.n	8000662 <updateTouchSwitchState+0x13e>
            break;
 8000660:	bf00      	nop
    }
}
 8000662:	bf00      	nop
 8000664:	3718      	adds	r7, #24
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	080058f4 	.word	0x080058f4
 8000670:	080058fc 	.word	0x080058fc
 8000674:	08005918 	.word	0x08005918

08000678 <checkSwitchStateFSM>:

bool checkSwitchStateFSM(int sensorIndex, uint32_t switchDebounceDuration)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	6039      	str	r1, [r7, #0]
	static bool wasPressed[MAX_TOUCH_SWITCHES] = { false };  // 每個按鈕一個 flag
	//bool triggered = false;
	HAL_Delay(60);
 8000682:	203c      	movs	r0, #60	@ 0x3c
 8000684:	f001 f83e 	bl	8001704 <HAL_Delay>
	uint32_t now = HAL_GetTick();
 8000688:	f001 f830 	bl	80016ec <HAL_GetTick>
 800068c:	6138      	str	r0, [r7, #16]
	bool isTouchSwitchPressed = false;
 800068e:	2300      	movs	r3, #0
 8000690:	75fb      	strb	r3, [r7, #23]
	updateTouchSwitchState(&touchSwitches[sensorIndex-1], switchDebounceDuration);//&touchSwitches[i]==>取締一個SWITCH的地址  第二個..
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	1e5a      	subs	r2, r3, #1
 8000696:	4613      	mov	r3, r2
 8000698:	00db      	lsls	r3, r3, #3
 800069a:	1a9b      	subs	r3, r3, r2
 800069c:	009b      	lsls	r3, r3, #2
 800069e:	4a1a      	ldr	r2, [pc, #104]	@ (8000708 <checkSwitchStateFSM+0x90>)
 80006a0:	4413      	add	r3, r2
 80006a2:	6839      	ldr	r1, [r7, #0]
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff ff3d 	bl	8000524 <updateTouchSwitchState>
	TouchState touchSwitchCurrentState =touchSwitches[sensorIndex-1].state;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	1e5a      	subs	r2, r3, #1
 80006ae:	4916      	ldr	r1, [pc, #88]	@ (8000708 <checkSwitchStateFSM+0x90>)
 80006b0:	4613      	mov	r3, r2
 80006b2:	00db      	lsls	r3, r3, #3
 80006b4:	1a9b      	subs	r3, r3, r2
 80006b6:	009b      	lsls	r3, r3, #2
 80006b8:	440b      	add	r3, r1
 80006ba:	3306      	adds	r3, #6
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	73fb      	strb	r3, [r7, #15]
	if(touchSwitchCurrentState==TOUCH_PRESSED ||touchSwitchCurrentState==TOUCH_LONG_PRESSED)
 80006c0:	7bfb      	ldrb	r3, [r7, #15]
 80006c2:	2b02      	cmp	r3, #2
 80006c4:	d002      	beq.n	80006cc <checkSwitchStateFSM+0x54>
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
 80006c8:	2b03      	cmp	r3, #3
 80006ca:	d110      	bne.n	80006ee <checkSwitchStateFSM+0x76>
	{
		if (!wasPressed[sensorIndex])
 80006cc:	4a0f      	ldr	r2, [pc, #60]	@ (800070c <checkSwitchStateFSM+0x94>)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	4413      	add	r3, r2
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	f083 0301 	eor.w	r3, r3, #1
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d00e      	beq.n	80006fc <checkSwitchStateFSM+0x84>
		//if (!isTouchSwitchPressed)
		{
			// ✅ 第一次按下：觸發一次
			//triggered = true;
			wasPressed[sensorIndex] = true;  // 記得這次已經觸發
 80006de:	4a0b      	ldr	r2, [pc, #44]	@ (800070c <checkSwitchStateFSM+0x94>)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4413      	add	r3, r2
 80006e4:	2201      	movs	r2, #1
 80006e6:	701a      	strb	r2, [r3, #0]
			isTouchSwitchPressed=true;//有按下
 80006e8:	2301      	movs	r3, #1
 80006ea:	75fb      	strb	r3, [r7, #23]
		if (!wasPressed[sensorIndex])
 80006ec:	e006      	b.n	80006fc <checkSwitchStateFSM+0x84>

	}
	else
	{
		// ✅ 鬆開：重置 flag，準備下次觸發
		wasPressed[sensorIndex] = false;
 80006ee:	4a07      	ldr	r2, [pc, #28]	@ (800070c <checkSwitchStateFSM+0x94>)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	4413      	add	r3, r2
 80006f4:	2200      	movs	r2, #0
 80006f6:	701a      	strb	r2, [r3, #0]
		isTouchSwitchPressed=false;//沒按下
 80006f8:	2300      	movs	r3, #0
 80006fa:	75fb      	strb	r3, [r7, #23]
	}

	return isTouchSwitchPressed;
 80006fc:	7dfb      	ldrb	r3, [r7, #23]


}
 80006fe:	4618      	mov	r0, r3
 8000700:	3718      	adds	r7, #24
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000000 	.word	0x20000000
 800070c:	200000bc 	.word	0x200000bc

08000710 <getAllTouchSwitchState>:
            //multiTouchTriggered = false;
        }
}

bool getAllTouchSwitchState(bool isSwitch1Enabled,bool isSwitch2Enabled,bool isSwitch3Enabled,bool isSwitch4Enabled,uint32_t touchSwitchDebounceDuration)
{
 8000710:	b590      	push	{r4, r7, lr}
 8000712:	b08b      	sub	sp, #44	@ 0x2c
 8000714:	af00      	add	r7, sp, #0
 8000716:	4604      	mov	r4, r0
 8000718:	4608      	mov	r0, r1
 800071a:	4611      	mov	r1, r2
 800071c:	461a      	mov	r2, r3
 800071e:	4623      	mov	r3, r4
 8000720:	71fb      	strb	r3, [r7, #7]
 8000722:	4603      	mov	r3, r0
 8000724:	71bb      	strb	r3, [r7, #6]
 8000726:	460b      	mov	r3, r1
 8000728:	717b      	strb	r3, [r7, #5]
 800072a:	4613      	mov	r3, r2
 800072c:	713b      	strb	r3, [r7, #4]
	bool switchEnabled[NUM_SWITCHES] = { isSwitch1Enabled, isSwitch2Enabled, isSwitch3Enabled, isSwitch4Enabled };
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	743b      	strb	r3, [r7, #16]
 8000732:	79bb      	ldrb	r3, [r7, #6]
 8000734:	747b      	strb	r3, [r7, #17]
	bool allTouchSwitchStateResult=false;
 8000736:	2300      	movs	r3, #0
 8000738:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	//bool isTouchSwitch1Pressed = true;  // 開關1被按下
	bool isTouchSwitch1Pressed = false; // 開關1沒被按下
 800073c:	2300      	movs	r3, #0
 800073e:	75fb      	strb	r3, [r7, #23]
	bool isTouchSwitch2Pressed = false;
 8000740:	2300      	movs	r3, #0
 8000742:	75bb      	strb	r3, [r7, #22]
	bool isTouchSwitch3Pressed = false;
 8000744:	2300      	movs	r3, #0
 8000746:	757b      	strb	r3, [r7, #21]
	bool isTouchSwitch4Pressed = false;
 8000748:	2300      	movs	r3, #0
 800074a:	753b      	strb	r3, [r7, #20]
	uint8_t forceSensor2AveragedaValue=0;
 800074c:	2300      	movs	r3, #0
 800074e:	74fb      	strb	r3, [r7, #19]
	uint8_t disabledCount = 0;
 8000750:	2300      	movs	r3, #0
 8000752:	74bb      	strb	r3, [r7, #18]
	bool switchPressed[NUM_SWITCHES] = { isTouchSwitch1Pressed,isTouchSwitch2Pressed ,isTouchSwitch3Pressed ,isTouchSwitch4Pressed }; // 儲存各按鈕是否被按下
 8000754:	7dfb      	ldrb	r3, [r7, #23]
 8000756:	733b      	strb	r3, [r7, #12]
 8000758:	7dbb      	ldrb	r3, [r7, #22]
 800075a:	737b      	strb	r3, [r7, #13]
	uint8_t enabledSwitchIndices[NUM_SWITCHES]={0};
 800075c:	2300      	movs	r3, #0
 800075e:	813b      	strh	r3, [r7, #8]
	uint8_t enabledSwitchCount=0;
 8000760:	2300      	movs	r3, #0
 8000762:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	uint8_t pressedCount=0;
 8000766:	2300      	movs	r3, #0
 8000768:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	//記錄哪些SENSOR有啟動
	for(int i=0;i<NUM_SWITCHES;i++)
 800076c:	2300      	movs	r3, #0
 800076e:	623b      	str	r3, [r7, #32]
 8000770:	e016      	b.n	80007a0 <getAllTouchSwitchState+0x90>
	{
		if(switchEnabled[i])
 8000772:	f107 0210 	add.w	r2, r7, #16
 8000776:	6a3b      	ldr	r3, [r7, #32]
 8000778:	4413      	add	r3, r2
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d00c      	beq.n	800079a <getAllTouchSwitchState+0x8a>
		{
			enabledSwitchIndices[enabledSwitchCount++]=i+1;// // 儲存 switch 編號（從 1 開始）
 8000780:	6a3b      	ldr	r3, [r7, #32]
 8000782:	b2da      	uxtb	r2, r3
 8000784:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000788:	1c59      	adds	r1, r3, #1
 800078a:	f887 1026 	strb.w	r1, [r7, #38]	@ 0x26
 800078e:	3201      	adds	r2, #1
 8000790:	b2d2      	uxtb	r2, r2
 8000792:	3328      	adds	r3, #40	@ 0x28
 8000794:	443b      	add	r3, r7
 8000796:	f803 2c20 	strb.w	r2, [r3, #-32]
	for(int i=0;i<NUM_SWITCHES;i++)
 800079a:	6a3b      	ldr	r3, [r7, #32]
 800079c:	3301      	adds	r3, #1
 800079e:	623b      	str	r3, [r7, #32]
 80007a0:	6a3b      	ldr	r3, [r7, #32]
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	dde5      	ble.n	8000772 <getAllTouchSwitchState+0x62>
	//enabledSwitchIndices = {2, 3, 4} 第2 ,第3和第4個 sensor有啟動
	///

	//FSM 非堵塞

	for(int k=0;k<enabledSwitchCount;k++)
 80007a6:	2300      	movs	r3, #0
 80007a8:	61fb      	str	r3, [r7, #28]
 80007aa:	e032      	b.n	8000812 <getAllTouchSwitchState+0x102>
	{
		for(int i=0;i<2;i++)
 80007ac:	2300      	movs	r3, #0
 80007ae:	61bb      	str	r3, [r7, #24]
 80007b0:	e029      	b.n	8000806 <getAllTouchSwitchState+0xf6>
		{
			switchPressed[enabledSwitchIndices[k]-1]=checkSwitchStateFSM(enabledSwitchIndices[k],touchSwitchDebounceDuration);
 80007b2:	f107 0208 	add.w	r2, r7, #8
 80007b6:	69fb      	ldr	r3, [r7, #28]
 80007b8:	4413      	add	r3, r2
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	4618      	mov	r0, r3
 80007be:	f107 0208 	add.w	r2, r7, #8
 80007c2:	69fb      	ldr	r3, [r7, #28]
 80007c4:	4413      	add	r3, r2
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	1e5c      	subs	r4, r3, #1
 80007ca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80007cc:	f7ff ff54 	bl	8000678 <checkSwitchStateFSM>
 80007d0:	4603      	mov	r3, r0
 80007d2:	461a      	mov	r2, r3
 80007d4:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 80007d8:	443b      	add	r3, r7
 80007da:	f803 2c1c 	strb.w	r2, [r3, #-28]
			if(switchPressed[enabledSwitchIndices[k] - 1])
 80007de:	f107 0208 	add.w	r2, r7, #8
 80007e2:	69fb      	ldr	r3, [r7, #28]
 80007e4:	4413      	add	r3, r2
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	3b01      	subs	r3, #1
 80007ea:	3328      	adds	r3, #40	@ 0x28
 80007ec:	443b      	add	r3, r7
 80007ee:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d004      	beq.n	8000800 <getAllTouchSwitchState+0xf0>
			{
				pressedCount++;
 80007f6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80007fa:	3301      	adds	r3, #1
 80007fc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		for(int i=0;i<2;i++)
 8000800:	69bb      	ldr	r3, [r7, #24]
 8000802:	3301      	adds	r3, #1
 8000804:	61bb      	str	r3, [r7, #24]
 8000806:	69bb      	ldr	r3, [r7, #24]
 8000808:	2b01      	cmp	r3, #1
 800080a:	ddd2      	ble.n	80007b2 <getAllTouchSwitchState+0xa2>
	for(int k=0;k<enabledSwitchCount;k++)
 800080c:	69fb      	ldr	r3, [r7, #28]
 800080e:	3301      	adds	r3, #1
 8000810:	61fb      	str	r3, [r7, #28]
 8000812:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000816:	69fa      	ldr	r2, [r7, #28]
 8000818:	429a      	cmp	r2, r3
 800081a:	dbc7      	blt.n	80007ac <getAllTouchSwitchState+0x9c>
	}
	*/
	////////////////////////////////////////////////////////////

	//int pressedCount = isTouchSwitch1Pressed + isTouchSwitch2Pressed + isTouchSwitch3Pressed + isTouchSwitch4Pressed;
	if (pressedCount >= 1) {
 800081c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000820:	2b00      	cmp	r3, #0
 8000822:	d005      	beq.n	8000830 <getAllTouchSwitchState+0x120>
	    // 上面再改成2
		allTouchSwitchStateResult=true;
 8000824:	2301      	movs	r3, #1
 8000826:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		lightOnLED();//1個以上開關按下 就亮燈
 800082a:	f7ff fe63 	bl	80004f4 <lightOnLED>
 800082e:	e001      	b.n	8000834 <getAllTouchSwitchState+0x124>
	}
	else
	{
	    // 開關1沒被按下要做的事
		lightOffLED();//沒開關按下
 8000830:	f7ff fe6c 	bl	800050c <lightOffLED>
	}
	return allTouchSwitchStateResult;
 8000834:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000838:	4618      	mov	r0, r3
 800083a:	372c      	adds	r7, #44	@ 0x2c
 800083c:	46bd      	mov	sp, r7
 800083e:	bd90      	pop	{r4, r7, pc}

08000840 <HAL_GPIO_EXTI_Callback>:

}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
	if(GPIO_Pin == GPIO_PIN_13){
 800084a:	88fb      	ldrh	r3, [r7, #6]
 800084c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000850:	d10e      	bne.n	8000870 <HAL_GPIO_EXTI_Callback+0x30>
		ledTrigger = 1;
 8000852:	4b09      	ldr	r3, [pc, #36]	@ (8000878 <HAL_GPIO_EXTI_Callback+0x38>)
 8000854:	2201      	movs	r2, #1
 8000856:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8000858:	2201      	movs	r2, #1
 800085a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800085e:	4807      	ldr	r0, [pc, #28]	@ (800087c <HAL_GPIO_EXTI_Callback+0x3c>)
 8000860:	f002 f9ec 	bl	8002c3c <HAL_GPIO_WritePin>
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);  // 切換燈狀態
	    //HAL_Delay(200);
	    //將 PB8 Off
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000864:	2200      	movs	r2, #0
 8000866:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800086a:	4804      	ldr	r0, [pc, #16]	@ (800087c <HAL_GPIO_EXTI_Callback+0x3c>)
 800086c:	f002 f9e6 	bl	8002c3c <HAL_GPIO_WritePin>
		//x = (x == 0)? 1:0;
	}
}
 8000870:	bf00      	nop
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	200003fc 	.word	0x200003fc
 800087c:	48000400 	.word	0x48000400

08000880 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000880:	b5b0      	push	{r4, r5, r7, lr}
 8000882:	b0a4      	sub	sp, #144	@ 0x90
 8000884:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
  //char buffer[40]="";
  int arr[10] = {0};  // 全部初始化為 0
 8000886:	f107 0320 	add.w	r3, r7, #32
 800088a:	2228      	movs	r2, #40	@ 0x28
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f004 fd70 	bl	8005374 <memset>
  int a=sizeof(arr);  // ✅ 這裡是陣列大小  a=40   10*4
 8000894:	2328      	movs	r3, #40	@ 0x28
 8000896:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  int value=2;
 800089a:	2302      	movs	r3, #2
 800089c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008a0:	f000 feb4 	bl	800160c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008a4:	f000 f874 	bl	8000990 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80008a8:	f000 f8c3 	bl	8000a32 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ac:	f000 fac6 	bl	8000e3c <MX_GPIO_Init>
  MX_ADC1_Init();
 80008b0:	f000 f8ea 	bl	8000a88 <MX_ADC1_Init>
  MX_I2C1_Init();
 80008b4:	f000 f9c2 	bl	8000c3c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80008b8:	f000 fa30 	bl	8000d1c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80008bc:	f000 fa5e 	bl	8000d7c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80008c0:	f000 fa8c 	bl	8000ddc <MX_USART3_UART_Init>
  MX_UART4_Init();
 80008c4:	f000 f9fa 	bl	8000cbc <MX_UART4_Init>
  MX_ADC2_Init();
 80008c8:	f000 f954 	bl	8000b74 <MX_ADC2_Init>
	 	}
		*/
	   /////////

	  //下方為同時讀取兩種感測器函式
	  ForceSwitchSensorConfig sensorInputConfig =
 80008cc:	4b2e      	ldr	r3, [pc, #184]	@ (8000988 <main+0x108>)
 80008ce:	f107 040c 	add.w	r4, r7, #12
 80008d2:	461d      	mov	r5, r3
 80008d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008d8:	682b      	ldr	r3, [r5, #0]
 80008da:	6023      	str	r3, [r4, #0]
	  //if(finalState.sensor2) { /* ... */ }
	  /////////////////////////////////////////////////////

	  //下方為讀取力量感測器函式//
	  // 全部力量感測器回傳值//
	  bool forceSensorFinalState=false;
 80008dc:	2300      	movs	r3, #0
 80008de:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	  //從flash讀取力量感測器初始參數
	  uint32_t forceSensorPressDuration = 100;
 80008e2:	2364      	movs	r3, #100	@ 0x64
 80008e4:	67bb      	str	r3, [r7, #120]	@ 0x78
	  uint32_t forcePressValueThreshold = 3000; //
 80008e6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80008ea:	677b      	str	r3, [r7, #116]	@ 0x74
	  bool isForceSensor1Enabled=true;
 80008ec:	2301      	movs	r3, #1
 80008ee:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
	  bool isForceSensor2Enabled=true;
 80008f2:	2301      	movs	r3, #1
 80008f4:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72

	  //呼叫讀取所有力量感測器數值
	  uint32_t forceSensorStartTime = HAL_GetTick();
 80008f8:	f000 fef8 	bl	80016ec <HAL_GetTick>
 80008fc:	66f8      	str	r0, [r7, #108]	@ 0x6c

	  //forceSensorFinalState=getAllForceSensorState(isForceSensor1Enabled,isForceSensor2Enabled,forceSensorPressDuration,forcePressValueThreshold);
	  uint32_t forceSensorEndTime = HAL_GetTick();
 80008fe:	f000 fef5 	bl	80016ec <HAL_GetTick>
 8000902:	66b8      	str	r0, [r7, #104]	@ 0x68
	  uint32_t forceSensorDuration = forceSensorEndTime - forceSensorStartTime;
 8000904:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000906:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000908:	1ad3      	subs	r3, r2, r3
 800090a:	667b      	str	r3, [r7, #100]	@ 0x64
	  ///////////////////////////////////////////////////////

	  //下方為讀取接觸開關感測器函式//
	  // 從flash讀取Touch switch enabled flags 初始參數
	  bool isTouchSwitch1Enabled = true;
 800090c:	2301      	movs	r3, #1
 800090e:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
	  bool isTouchSwitch2Enabled = true;
 8000912:	2301      	movs	r3, #1
 8000914:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
	  //bool isTouchSwitch2Enabled = false;
	  //
	  //bool isTouchSwitch3Enabled = false;
	  bool isTouchSwitch3Enabled = true;
 8000918:	2301      	movs	r3, #1
 800091a:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
	  bool isTouchSwitch4Enabled = true;
 800091e:	2301      	movs	r3, #1
 8000920:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
	  // Touch switch behavior parameters
	  uint32_t touchSwitchDebounceDuration = 100;
 8000924:	2364      	movs	r3, #100	@ 0x64
 8000926:	65fb      	str	r3, [r7, #92]	@ 0x5c
	  uint32_t touchSwitchPressThreshold = 3000;
 8000928:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800092c:	65bb      	str	r3, [r7, #88]	@ 0x58
	  // 全部接袃開關回傳值
	  bool touchSwitchFinalState = false;
 800092e:	2300      	movs	r3, #0
 8000930:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	  //呼叫讀取所有力量感測器數值
	  uint32_t touchSwitchStartTime = HAL_GetTick();
 8000934:	f000 feda 	bl	80016ec <HAL_GetTick>
 8000938:	6538      	str	r0, [r7, #80]	@ 0x50

	  touchSwitchFinalState = getAllTouchSwitchState(isTouchSwitch1Enabled,isTouchSwitch2Enabled,isTouchSwitch3Enabled,isTouchSwitch4Enabled,touchSwitchDebounceDuration);
 800093a:	f897 0063 	ldrb.w	r0, [r7, #99]	@ 0x63
 800093e:	f897 1062 	ldrb.w	r1, [r7, #98]	@ 0x62
 8000942:	f897 2061 	ldrb.w	r2, [r7, #97]	@ 0x61
 8000946:	f897 4060 	ldrb.w	r4, [r7, #96]	@ 0x60
 800094a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800094c:	9300      	str	r3, [sp, #0]
 800094e:	4623      	mov	r3, r4
 8000950:	f7ff fede 	bl	8000710 <getAllTouchSwitchState>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	bf14      	ite	ne
 800095a:	2301      	movne	r3, #1
 800095c:	2300      	moveq	r3, #0
 800095e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	  //

	  uint32_t touchSwitchEndTime = HAL_GetTick();
 8000962:	f000 fec3 	bl	80016ec <HAL_GetTick>
 8000966:	64f8      	str	r0, [r7, #76]	@ 0x4c
	  uint32_t touchSwitchDuration = touchSwitchEndTime - touchSwitchStartTime;
 8000968:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800096a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800096c:	1ad3      	subs	r3, r2, r3
 800096e:	64bb      	str	r3, [r7, #72]	@ 0x48
	  //getAllTouchSwitchState();

	  //transmitDataUart(buffer);

	  //
	  char txData[] = "12345";
 8000970:	4a06      	ldr	r2, [pc, #24]	@ (800098c <main+0x10c>)
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000978:	6018      	str	r0, [r3, #0]
 800097a:	3304      	adds	r3, #4
 800097c:	8019      	strh	r1, [r3, #0]
	      printf("Receive timeout or error\n");
	  }
*/
	  // 啟用力量感測器功能
	  //updateFSRState();   // 呼叫防彈跳判斷
	  HAL_Delay(100);     // 簡短延遲避免過度讀取ADC
 800097e:	2064      	movs	r0, #100	@ 0x64
 8000980:	f000 fec0 	bl	8001704 <HAL_Delay>
  {
 8000984:	bf00      	nop
 8000986:	e7a1      	b.n	80008cc <main+0x4c>
 8000988:	08005928 	.word	0x08005928
 800098c:	0800593c 	.word	0x0800593c

08000990 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b096      	sub	sp, #88	@ 0x58
 8000994:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	2244      	movs	r2, #68	@ 0x44
 800099c:	2100      	movs	r1, #0
 800099e:	4618      	mov	r0, r3
 80009a0:	f004 fce8 	bl	8005374 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a4:	463b      	mov	r3, r7
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]
 80009ae:	60da      	str	r2, [r3, #12]
 80009b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009b2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80009b6:	f002 fab1 	bl	8002f1c <HAL_PWREx_ControlVoltageScaling>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009c0:	f000 fadc 	bl	8000f7c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009c4:	2302      	movs	r3, #2
 80009c6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009cc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009ce:	2310      	movs	r3, #16
 80009d0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d2:	2302      	movs	r3, #2
 80009d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009d6:	2302      	movs	r3, #2
 80009d8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009da:	2301      	movs	r3, #1
 80009dc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80009de:	230a      	movs	r3, #10
 80009e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80009e2:	2307      	movs	r3, #7
 80009e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009e6:	2302      	movs	r3, #2
 80009e8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009ea:	2302      	movs	r3, #2
 80009ec:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ee:	f107 0314 	add.w	r3, r7, #20
 80009f2:	4618      	mov	r0, r3
 80009f4:	f002 fae8 	bl	8002fc8 <HAL_RCC_OscConfig>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80009fe:	f000 fabd 	bl	8000f7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a02:	230f      	movs	r3, #15
 8000a04:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a06:	2303      	movs	r3, #3
 8000a08:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a12:	2300      	movs	r3, #0
 8000a14:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a16:	463b      	mov	r3, r7
 8000a18:	2104      	movs	r1, #4
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f002 feb0 	bl	8003780 <HAL_RCC_ClockConfig>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a26:	f000 faa9 	bl	8000f7c <Error_Handler>
  }
}
 8000a2a:	bf00      	nop
 8000a2c:	3758      	adds	r7, #88	@ 0x58
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b0a2      	sub	sp, #136	@ 0x88
 8000a36:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a38:	463b      	mov	r3, r7
 8000a3a:	2288      	movs	r2, #136	@ 0x88
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f004 fc98 	bl	8005374 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a44:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000a48:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000a4a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000a4e:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000a50:	2302      	movs	r3, #2
 8000a52:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000a54:	2301      	movs	r3, #1
 8000a56:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000a58:	2308      	movs	r3, #8
 8000a5a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000a5c:	2307      	movs	r3, #7
 8000a5e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000a60:	2302      	movs	r3, #2
 8000a62:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000a64:	2302      	movs	r3, #2
 8000a66:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000a68:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000a6c:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a6e:	463b      	mov	r3, r7
 8000a70:	4618      	mov	r0, r3
 8000a72:	f003 f8a9 	bl	8003bc8 <HAL_RCCEx_PeriphCLKConfig>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8000a7c:	f000 fa7e 	bl	8000f7c <Error_Handler>
  }
}
 8000a80:	bf00      	nop
 8000a82:	3788      	adds	r7, #136	@ 0x88
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08a      	sub	sp, #40	@ 0x28
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a8e:	f107 031c 	add.w	r3, r7, #28
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]
 8000aa8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000aaa:	4b2f      	ldr	r3, [pc, #188]	@ (8000b68 <MX_ADC1_Init+0xe0>)
 8000aac:	4a2f      	ldr	r2, [pc, #188]	@ (8000b6c <MX_ADC1_Init+0xe4>)
 8000aae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ab0:	4b2d      	ldr	r3, [pc, #180]	@ (8000b68 <MX_ADC1_Init+0xe0>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ab6:	4b2c      	ldr	r3, [pc, #176]	@ (8000b68 <MX_ADC1_Init+0xe0>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000abc:	4b2a      	ldr	r3, [pc, #168]	@ (8000b68 <MX_ADC1_Init+0xe0>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ac2:	4b29      	ldr	r3, [pc, #164]	@ (8000b68 <MX_ADC1_Init+0xe0>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ac8:	4b27      	ldr	r3, [pc, #156]	@ (8000b68 <MX_ADC1_Init+0xe0>)
 8000aca:	2204      	movs	r2, #4
 8000acc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ace:	4b26      	ldr	r3, [pc, #152]	@ (8000b68 <MX_ADC1_Init+0xe0>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ad4:	4b24      	ldr	r3, [pc, #144]	@ (8000b68 <MX_ADC1_Init+0xe0>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000ada:	4b23      	ldr	r3, [pc, #140]	@ (8000b68 <MX_ADC1_Init+0xe0>)
 8000adc:	2201      	movs	r2, #1
 8000ade:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ae0:	4b21      	ldr	r3, [pc, #132]	@ (8000b68 <MX_ADC1_Init+0xe0>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ae8:	4b1f      	ldr	r3, [pc, #124]	@ (8000b68 <MX_ADC1_Init+0xe0>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000aee:	4b1e      	ldr	r3, [pc, #120]	@ (8000b68 <MX_ADC1_Init+0xe0>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000af4:	4b1c      	ldr	r3, [pc, #112]	@ (8000b68 <MX_ADC1_Init+0xe0>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000afc:	4b1a      	ldr	r3, [pc, #104]	@ (8000b68 <MX_ADC1_Init+0xe0>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000b02:	4b19      	ldr	r3, [pc, #100]	@ (8000b68 <MX_ADC1_Init+0xe0>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b0a:	4817      	ldr	r0, [pc, #92]	@ (8000b68 <MX_ADC1_Init+0xe0>)
 8000b0c:	f000 ffaa 	bl	8001a64 <HAL_ADC_Init>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000b16:	f000 fa31 	bl	8000f7c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b1e:	f107 031c 	add.w	r3, r7, #28
 8000b22:	4619      	mov	r1, r3
 8000b24:	4810      	ldr	r0, [pc, #64]	@ (8000b68 <MX_ADC1_Init+0xe0>)
 8000b26:	f001 fd05 	bl	8002534 <HAL_ADCEx_MultiModeConfigChannel>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000b30:	f000 fa24 	bl	8000f7c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b34:	4b0e      	ldr	r3, [pc, #56]	@ (8000b70 <MX_ADC1_Init+0xe8>)
 8000b36:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b38:	2306      	movs	r3, #6
 8000b3a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b40:	237f      	movs	r3, #127	@ 0x7f
 8000b42:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b44:	2304      	movs	r3, #4
 8000b46:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4805      	ldr	r0, [pc, #20]	@ (8000b68 <MX_ADC1_Init+0xe0>)
 8000b52:	f001 f8d7 	bl	8001d04 <HAL_ADC_ConfigChannel>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000b5c:	f000 fa0e 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b60:	bf00      	nop
 8000b62:	3728      	adds	r7, #40	@ 0x28
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	200000c0 	.word	0x200000c0
 8000b6c:	50040000 	.word	0x50040000
 8000b70:	04300002 	.word	0x04300002

08000b74 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b7a:	463b      	mov	r3, r7
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
 8000b86:	611a      	str	r2, [r3, #16]
 8000b88:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000b8a:	4b29      	ldr	r3, [pc, #164]	@ (8000c30 <MX_ADC2_Init+0xbc>)
 8000b8c:	4a29      	ldr	r2, [pc, #164]	@ (8000c34 <MX_ADC2_Init+0xc0>)
 8000b8e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b90:	4b27      	ldr	r3, [pc, #156]	@ (8000c30 <MX_ADC2_Init+0xbc>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000b96:	4b26      	ldr	r3, [pc, #152]	@ (8000c30 <MX_ADC2_Init+0xbc>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b9c:	4b24      	ldr	r3, [pc, #144]	@ (8000c30 <MX_ADC2_Init+0xbc>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ba2:	4b23      	ldr	r3, [pc, #140]	@ (8000c30 <MX_ADC2_Init+0xbc>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ba8:	4b21      	ldr	r3, [pc, #132]	@ (8000c30 <MX_ADC2_Init+0xbc>)
 8000baa:	2204      	movs	r2, #4
 8000bac:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000bae:	4b20      	ldr	r3, [pc, #128]	@ (8000c30 <MX_ADC2_Init+0xbc>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000bb4:	4b1e      	ldr	r3, [pc, #120]	@ (8000c30 <MX_ADC2_Init+0xbc>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000bba:	4b1d      	ldr	r3, [pc, #116]	@ (8000c30 <MX_ADC2_Init+0xbc>)
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000bc0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c30 <MX_ADC2_Init+0xbc>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bc8:	4b19      	ldr	r3, [pc, #100]	@ (8000c30 <MX_ADC2_Init+0xbc>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bce:	4b18      	ldr	r3, [pc, #96]	@ (8000c30 <MX_ADC2_Init+0xbc>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000bd4:	4b16      	ldr	r3, [pc, #88]	@ (8000c30 <MX_ADC2_Init+0xbc>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bdc:	4b14      	ldr	r3, [pc, #80]	@ (8000c30 <MX_ADC2_Init+0xbc>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000be2:	4b13      	ldr	r3, [pc, #76]	@ (8000c30 <MX_ADC2_Init+0xbc>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000bea:	4811      	ldr	r0, [pc, #68]	@ (8000c30 <MX_ADC2_Init+0xbc>)
 8000bec:	f000 ff3a 	bl	8001a64 <HAL_ADC_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000bf6:	f000 f9c1 	bl	8000f7c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000bfa:	4b0f      	ldr	r3, [pc, #60]	@ (8000c38 <MX_ADC2_Init+0xc4>)
 8000bfc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bfe:	2306      	movs	r3, #6
 8000c00:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000c02:	2300      	movs	r3, #0
 8000c04:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c06:	237f      	movs	r3, #127	@ 0x7f
 8000c08:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c0a:	2304      	movs	r3, #4
 8000c0c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c12:	463b      	mov	r3, r7
 8000c14:	4619      	mov	r1, r3
 8000c16:	4806      	ldr	r0, [pc, #24]	@ (8000c30 <MX_ADC2_Init+0xbc>)
 8000c18:	f001 f874 	bl	8001d04 <HAL_ADC_ConfigChannel>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8000c22:	f000 f9ab 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000c26:	bf00      	nop
 8000c28:	3718      	adds	r7, #24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000124 	.word	0x20000124
 8000c34:	50040100 	.word	0x50040100
 8000c38:	08600004 	.word	0x08600004

08000c3c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c40:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb0 <MX_I2C1_Init+0x74>)
 8000c42:	4a1c      	ldr	r2, [pc, #112]	@ (8000cb4 <MX_I2C1_Init+0x78>)
 8000c44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8000c46:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb0 <MX_I2C1_Init+0x74>)
 8000c48:	4a1b      	ldr	r2, [pc, #108]	@ (8000cb8 <MX_I2C1_Init+0x7c>)
 8000c4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c4c:	4b18      	ldr	r3, [pc, #96]	@ (8000cb0 <MX_I2C1_Init+0x74>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c52:	4b17      	ldr	r3, [pc, #92]	@ (8000cb0 <MX_I2C1_Init+0x74>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c58:	4b15      	ldr	r3, [pc, #84]	@ (8000cb0 <MX_I2C1_Init+0x74>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c5e:	4b14      	ldr	r3, [pc, #80]	@ (8000cb0 <MX_I2C1_Init+0x74>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c64:	4b12      	ldr	r3, [pc, #72]	@ (8000cb0 <MX_I2C1_Init+0x74>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c6a:	4b11      	ldr	r3, [pc, #68]	@ (8000cb0 <MX_I2C1_Init+0x74>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c70:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb0 <MX_I2C1_Init+0x74>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c76:	480e      	ldr	r0, [pc, #56]	@ (8000cb0 <MX_I2C1_Init+0x74>)
 8000c78:	f002 f810 	bl	8002c9c <HAL_I2C_Init>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c82:	f000 f97b 	bl	8000f7c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c86:	2100      	movs	r1, #0
 8000c88:	4809      	ldr	r0, [pc, #36]	@ (8000cb0 <MX_I2C1_Init+0x74>)
 8000c8a:	f002 f8a2 	bl	8002dd2 <HAL_I2CEx_ConfigAnalogFilter>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c94:	f000 f972 	bl	8000f7c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4805      	ldr	r0, [pc, #20]	@ (8000cb0 <MX_I2C1_Init+0x74>)
 8000c9c:	f002 f8e4 	bl	8002e68 <HAL_I2CEx_ConfigDigitalFilter>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ca6:	f000 f969 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000188 	.word	0x20000188
 8000cb4:	40005400 	.word	0x40005400
 8000cb8:	10d19ce4 	.word	0x10d19ce4

08000cbc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000cc0:	4b14      	ldr	r3, [pc, #80]	@ (8000d14 <MX_UART4_Init+0x58>)
 8000cc2:	4a15      	ldr	r2, [pc, #84]	@ (8000d18 <MX_UART4_Init+0x5c>)
 8000cc4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000cc6:	4b13      	ldr	r3, [pc, #76]	@ (8000d14 <MX_UART4_Init+0x58>)
 8000cc8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ccc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000cce:	4b11      	ldr	r3, [pc, #68]	@ (8000d14 <MX_UART4_Init+0x58>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000cd4:	4b0f      	ldr	r3, [pc, #60]	@ (8000d14 <MX_UART4_Init+0x58>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000cda:	4b0e      	ldr	r3, [pc, #56]	@ (8000d14 <MX_UART4_Init+0x58>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8000d14 <MX_UART4_Init+0x58>)
 8000ce2:	220c      	movs	r2, #12
 8000ce4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8000d14 <MX_UART4_Init+0x58>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cec:	4b09      	ldr	r3, [pc, #36]	@ (8000d14 <MX_UART4_Init+0x58>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cf2:	4b08      	ldr	r3, [pc, #32]	@ (8000d14 <MX_UART4_Init+0x58>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cf8:	4b06      	ldr	r3, [pc, #24]	@ (8000d14 <MX_UART4_Init+0x58>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000cfe:	4805      	ldr	r0, [pc, #20]	@ (8000d14 <MX_UART4_Init+0x58>)
 8000d00:	f003 fc1e 	bl	8004540 <HAL_UART_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000d0a:	f000 f937 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	200001dc 	.word	0x200001dc
 8000d18:	40004c00 	.word	0x40004c00

08000d1c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d20:	4b14      	ldr	r3, [pc, #80]	@ (8000d74 <MX_USART1_UART_Init+0x58>)
 8000d22:	4a15      	ldr	r2, [pc, #84]	@ (8000d78 <MX_USART1_UART_Init+0x5c>)
 8000d24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000d26:	4b13      	ldr	r3, [pc, #76]	@ (8000d74 <MX_USART1_UART_Init+0x58>)
 8000d28:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000d2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d2e:	4b11      	ldr	r3, [pc, #68]	@ (8000d74 <MX_USART1_UART_Init+0x58>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d34:	4b0f      	ldr	r3, [pc, #60]	@ (8000d74 <MX_USART1_UART_Init+0x58>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d74 <MX_USART1_UART_Init+0x58>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d40:	4b0c      	ldr	r3, [pc, #48]	@ (8000d74 <MX_USART1_UART_Init+0x58>)
 8000d42:	220c      	movs	r2, #12
 8000d44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d46:	4b0b      	ldr	r3, [pc, #44]	@ (8000d74 <MX_USART1_UART_Init+0x58>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d4c:	4b09      	ldr	r3, [pc, #36]	@ (8000d74 <MX_USART1_UART_Init+0x58>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d52:	4b08      	ldr	r3, [pc, #32]	@ (8000d74 <MX_USART1_UART_Init+0x58>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d58:	4b06      	ldr	r3, [pc, #24]	@ (8000d74 <MX_USART1_UART_Init+0x58>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d5e:	4805      	ldr	r0, [pc, #20]	@ (8000d74 <MX_USART1_UART_Init+0x58>)
 8000d60:	f003 fbee 	bl	8004540 <HAL_UART_Init>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000d6a:	f000 f907 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20000264 	.word	0x20000264
 8000d78:	40013800 	.word	0x40013800

08000d7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d80:	4b14      	ldr	r3, [pc, #80]	@ (8000dd4 <MX_USART2_UART_Init+0x58>)
 8000d82:	4a15      	ldr	r2, [pc, #84]	@ (8000dd8 <MX_USART2_UART_Init+0x5c>)
 8000d84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d86:	4b13      	ldr	r3, [pc, #76]	@ (8000dd4 <MX_USART2_UART_Init+0x58>)
 8000d88:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d8e:	4b11      	ldr	r3, [pc, #68]	@ (8000dd4 <MX_USART2_UART_Init+0x58>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d94:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd4 <MX_USART2_UART_Init+0x58>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd4 <MX_USART2_UART_Init+0x58>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000da0:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd4 <MX_USART2_UART_Init+0x58>)
 8000da2:	220c      	movs	r2, #12
 8000da4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000da6:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd4 <MX_USART2_UART_Init+0x58>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dac:	4b09      	ldr	r3, [pc, #36]	@ (8000dd4 <MX_USART2_UART_Init+0x58>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000db2:	4b08      	ldr	r3, [pc, #32]	@ (8000dd4 <MX_USART2_UART_Init+0x58>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000db8:	4b06      	ldr	r3, [pc, #24]	@ (8000dd4 <MX_USART2_UART_Init+0x58>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dbe:	4805      	ldr	r0, [pc, #20]	@ (8000dd4 <MX_USART2_UART_Init+0x58>)
 8000dc0:	f003 fbbe 	bl	8004540 <HAL_UART_Init>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000dca:	f000 f8d7 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	200002ec 	.word	0x200002ec
 8000dd8:	40004400 	.word	0x40004400

08000ddc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000de0:	4b14      	ldr	r3, [pc, #80]	@ (8000e34 <MX_USART3_UART_Init+0x58>)
 8000de2:	4a15      	ldr	r2, [pc, #84]	@ (8000e38 <MX_USART3_UART_Init+0x5c>)
 8000de4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000de6:	4b13      	ldr	r3, [pc, #76]	@ (8000e34 <MX_USART3_UART_Init+0x58>)
 8000de8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000dec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dee:	4b11      	ldr	r3, [pc, #68]	@ (8000e34 <MX_USART3_UART_Init+0x58>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000df4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e34 <MX_USART3_UART_Init+0x58>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8000e34 <MX_USART3_UART_Init+0x58>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e00:	4b0c      	ldr	r3, [pc, #48]	@ (8000e34 <MX_USART3_UART_Init+0x58>)
 8000e02:	220c      	movs	r2, #12
 8000e04:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e06:	4b0b      	ldr	r3, [pc, #44]	@ (8000e34 <MX_USART3_UART_Init+0x58>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e0c:	4b09      	ldr	r3, [pc, #36]	@ (8000e34 <MX_USART3_UART_Init+0x58>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e12:	4b08      	ldr	r3, [pc, #32]	@ (8000e34 <MX_USART3_UART_Init+0x58>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e18:	4b06      	ldr	r3, [pc, #24]	@ (8000e34 <MX_USART3_UART_Init+0x58>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e1e:	4805      	ldr	r0, [pc, #20]	@ (8000e34 <MX_USART3_UART_Init+0x58>)
 8000e20:	f003 fb8e 	bl	8004540 <HAL_UART_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000e2a:	f000 f8a7 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000374 	.word	0x20000374
 8000e38:	40004800 	.word	0x40004800

08000e3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08a      	sub	sp, #40	@ 0x28
 8000e40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e42:	f107 0314 	add.w	r3, r7, #20
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
 8000e4e:	60da      	str	r2, [r3, #12]
 8000e50:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e52:	4b47      	ldr	r3, [pc, #284]	@ (8000f70 <MX_GPIO_Init+0x134>)
 8000e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e56:	4a46      	ldr	r2, [pc, #280]	@ (8000f70 <MX_GPIO_Init+0x134>)
 8000e58:	f043 0304 	orr.w	r3, r3, #4
 8000e5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e5e:	4b44      	ldr	r3, [pc, #272]	@ (8000f70 <MX_GPIO_Init+0x134>)
 8000e60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e62:	f003 0304 	and.w	r3, r3, #4
 8000e66:	613b      	str	r3, [r7, #16]
 8000e68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e6a:	4b41      	ldr	r3, [pc, #260]	@ (8000f70 <MX_GPIO_Init+0x134>)
 8000e6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e6e:	4a40      	ldr	r2, [pc, #256]	@ (8000f70 <MX_GPIO_Init+0x134>)
 8000e70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e76:	4b3e      	ldr	r3, [pc, #248]	@ (8000f70 <MX_GPIO_Init+0x134>)
 8000e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e82:	4b3b      	ldr	r3, [pc, #236]	@ (8000f70 <MX_GPIO_Init+0x134>)
 8000e84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e86:	4a3a      	ldr	r2, [pc, #232]	@ (8000f70 <MX_GPIO_Init+0x134>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e8e:	4b38      	ldr	r3, [pc, #224]	@ (8000f70 <MX_GPIO_Init+0x134>)
 8000e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	60bb      	str	r3, [r7, #8]
 8000e98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9a:	4b35      	ldr	r3, [pc, #212]	@ (8000f70 <MX_GPIO_Init+0x134>)
 8000e9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e9e:	4a34      	ldr	r2, [pc, #208]	@ (8000f70 <MX_GPIO_Init+0x134>)
 8000ea0:	f043 0302 	orr.w	r3, r3, #2
 8000ea4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ea6:	4b32      	ldr	r3, [pc, #200]	@ (8000f70 <MX_GPIO_Init+0x134>)
 8000ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eaa:	f003 0302 	and.w	r3, r3, #2
 8000eae:	607b      	str	r3, [r7, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2120      	movs	r1, #32
 8000eb6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eba:	f001 febf 	bl	8002c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	f244 1181 	movw	r1, #16769	@ 0x4181
 8000ec4:	482b      	ldr	r0, [pc, #172]	@ (8000f74 <MX_GPIO_Init+0x138>)
 8000ec6:	f001 feb9 	bl	8002c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000eca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ece:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ed0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ed4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eda:	f107 0314 	add.w	r3, r7, #20
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4825      	ldr	r0, [pc, #148]	@ (8000f78 <MX_GPIO_Init+0x13c>)
 8000ee2:	f001 fce9 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ee6:	2320      	movs	r3, #32
 8000ee8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eea:	2301      	movs	r3, #1
 8000eec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ef6:	f107 0314 	add.w	r3, r7, #20
 8000efa:	4619      	mov	r1, r3
 8000efc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f00:	f001 fcda 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_8;
 8000f04:	f244 1381 	movw	r3, #16769	@ 0x4181
 8000f08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f12:	2300      	movs	r3, #0
 8000f14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f16:	f107 0314 	add.w	r3, r7, #20
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4815      	ldr	r0, [pc, #84]	@ (8000f74 <MX_GPIO_Init+0x138>)
 8000f1e:	f001 fccb 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8000f22:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000f26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	4619      	mov	r1, r3
 8000f36:	4810      	ldr	r0, [pc, #64]	@ (8000f78 <MX_GPIO_Init+0x13c>)
 8000f38:	f001 fcbe 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f3c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f4a:	f107 0314 	add.w	r3, r7, #20
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4809      	ldr	r0, [pc, #36]	@ (8000f78 <MX_GPIO_Init+0x13c>)
 8000f52:	f001 fcb1 	bl	80028b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2100      	movs	r1, #0
 8000f5a:	2028      	movs	r0, #40	@ 0x28
 8000f5c:	f001 fc75 	bl	800284a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f60:	2028      	movs	r0, #40	@ 0x28
 8000f62:	f001 fc8e 	bl	8002882 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f66:	bf00      	nop
 8000f68:	3728      	adds	r7, #40	@ 0x28
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40021000 	.word	0x40021000
 8000f74:	48000400 	.word	0x48000400
 8000f78:	48000800 	.word	0x48000800

08000f7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f80:	b672      	cpsid	i
}
 8000f82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f84:	bf00      	nop
 8000f86:	e7fd      	b.n	8000f84 <Error_Handler+0x8>

08000f88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000fcc <HAL_MspInit+0x44>)
 8000f90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f92:	4a0e      	ldr	r2, [pc, #56]	@ (8000fcc <HAL_MspInit+0x44>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000fcc <HAL_MspInit+0x44>)
 8000f9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa6:	4b09      	ldr	r3, [pc, #36]	@ (8000fcc <HAL_MspInit+0x44>)
 8000fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000faa:	4a08      	ldr	r2, [pc, #32]	@ (8000fcc <HAL_MspInit+0x44>)
 8000fac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fb2:	4b06      	ldr	r3, [pc, #24]	@ (8000fcc <HAL_MspInit+0x44>)
 8000fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fba:	603b      	str	r3, [r7, #0]
 8000fbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	40021000 	.word	0x40021000

08000fd0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08c      	sub	sp, #48	@ 0x30
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 031c 	add.w	r3, r7, #28
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a33      	ldr	r2, [pc, #204]	@ (80010bc <HAL_ADC_MspInit+0xec>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d12d      	bne.n	800104e <HAL_ADC_MspInit+0x7e>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8000ff2:	4b33      	ldr	r3, [pc, #204]	@ (80010c0 <HAL_ADC_MspInit+0xf0>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	4a31      	ldr	r2, [pc, #196]	@ (80010c0 <HAL_ADC_MspInit+0xf0>)
 8000ffa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000ffc:	4b30      	ldr	r3, [pc, #192]	@ (80010c0 <HAL_ADC_MspInit+0xf0>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d10b      	bne.n	800101c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001004:	4b2f      	ldr	r3, [pc, #188]	@ (80010c4 <HAL_ADC_MspInit+0xf4>)
 8001006:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001008:	4a2e      	ldr	r2, [pc, #184]	@ (80010c4 <HAL_ADC_MspInit+0xf4>)
 800100a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800100e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001010:	4b2c      	ldr	r3, [pc, #176]	@ (80010c4 <HAL_ADC_MspInit+0xf4>)
 8001012:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001014:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001018:	61bb      	str	r3, [r7, #24]
 800101a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800101c:	4b29      	ldr	r3, [pc, #164]	@ (80010c4 <HAL_ADC_MspInit+0xf4>)
 800101e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001020:	4a28      	ldr	r2, [pc, #160]	@ (80010c4 <HAL_ADC_MspInit+0xf4>)
 8001022:	f043 0304 	orr.w	r3, r3, #4
 8001026:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001028:	4b26      	ldr	r3, [pc, #152]	@ (80010c4 <HAL_ADC_MspInit+0xf4>)
 800102a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800102c:	f003 0304 	and.w	r3, r3, #4
 8001030:	617b      	str	r3, [r7, #20]
 8001032:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001034:	2301      	movs	r3, #1
 8001036:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001038:	230b      	movs	r3, #11
 800103a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001040:	f107 031c 	add.w	r3, r7, #28
 8001044:	4619      	mov	r1, r3
 8001046:	4820      	ldr	r0, [pc, #128]	@ (80010c8 <HAL_ADC_MspInit+0xf8>)
 8001048:	f001 fc36 	bl	80028b8 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 800104c:	e031      	b.n	80010b2 <HAL_ADC_MspInit+0xe2>
  else if(hadc->Instance==ADC2)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a1e      	ldr	r2, [pc, #120]	@ (80010cc <HAL_ADC_MspInit+0xfc>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d12c      	bne.n	80010b2 <HAL_ADC_MspInit+0xe2>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001058:	4b19      	ldr	r3, [pc, #100]	@ (80010c0 <HAL_ADC_MspInit+0xf0>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	3301      	adds	r3, #1
 800105e:	4a18      	ldr	r2, [pc, #96]	@ (80010c0 <HAL_ADC_MspInit+0xf0>)
 8001060:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001062:	4b17      	ldr	r3, [pc, #92]	@ (80010c0 <HAL_ADC_MspInit+0xf0>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d10b      	bne.n	8001082 <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 800106a:	4b16      	ldr	r3, [pc, #88]	@ (80010c4 <HAL_ADC_MspInit+0xf4>)
 800106c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800106e:	4a15      	ldr	r2, [pc, #84]	@ (80010c4 <HAL_ADC_MspInit+0xf4>)
 8001070:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001074:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001076:	4b13      	ldr	r3, [pc, #76]	@ (80010c4 <HAL_ADC_MspInit+0xf4>)
 8001078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800107a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800107e:	613b      	str	r3, [r7, #16]
 8001080:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001082:	4b10      	ldr	r3, [pc, #64]	@ (80010c4 <HAL_ADC_MspInit+0xf4>)
 8001084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001086:	4a0f      	ldr	r2, [pc, #60]	@ (80010c4 <HAL_ADC_MspInit+0xf4>)
 8001088:	f043 0304 	orr.w	r3, r3, #4
 800108c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800108e:	4b0d      	ldr	r3, [pc, #52]	@ (80010c4 <HAL_ADC_MspInit+0xf4>)
 8001090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001092:	f003 0304 	and.w	r3, r3, #4
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800109a:	2302      	movs	r3, #2
 800109c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800109e:	230b      	movs	r3, #11
 80010a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a6:	f107 031c 	add.w	r3, r7, #28
 80010aa:	4619      	mov	r1, r3
 80010ac:	4806      	ldr	r0, [pc, #24]	@ (80010c8 <HAL_ADC_MspInit+0xf8>)
 80010ae:	f001 fc03 	bl	80028b8 <HAL_GPIO_Init>
}
 80010b2:	bf00      	nop
 80010b4:	3730      	adds	r7, #48	@ 0x30
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	50040000 	.word	0x50040000
 80010c0:	20000400 	.word	0x20000400
 80010c4:	40021000 	.word	0x40021000
 80010c8:	48000800 	.word	0x48000800
 80010cc:	50040100 	.word	0x50040100

080010d0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b0ac      	sub	sp, #176	@ 0xb0
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	2288      	movs	r2, #136	@ 0x88
 80010ee:	2100      	movs	r1, #0
 80010f0:	4618      	mov	r0, r3
 80010f2:	f004 f93f 	bl	8005374 <memset>
  if(hi2c->Instance==I2C1)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a21      	ldr	r2, [pc, #132]	@ (8001180 <HAL_I2C_MspInit+0xb0>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d13b      	bne.n	8001178 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001100:	2340      	movs	r3, #64	@ 0x40
 8001102:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001104:	2300      	movs	r3, #0
 8001106:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	4618      	mov	r0, r3
 800110e:	f002 fd5b 	bl	8003bc8 <HAL_RCCEx_PeriphCLKConfig>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001118:	f7ff ff30 	bl	8000f7c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800111c:	4b19      	ldr	r3, [pc, #100]	@ (8001184 <HAL_I2C_MspInit+0xb4>)
 800111e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001120:	4a18      	ldr	r2, [pc, #96]	@ (8001184 <HAL_I2C_MspInit+0xb4>)
 8001122:	f043 0302 	orr.w	r3, r3, #2
 8001126:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001128:	4b16      	ldr	r3, [pc, #88]	@ (8001184 <HAL_I2C_MspInit+0xb4>)
 800112a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112c:	f003 0302 	and.w	r3, r3, #2
 8001130:	613b      	str	r3, [r7, #16]
 8001132:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001134:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001138:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800113c:	2312      	movs	r3, #18
 800113e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001148:	2303      	movs	r3, #3
 800114a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800114e:	2304      	movs	r3, #4
 8001150:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001154:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001158:	4619      	mov	r1, r3
 800115a:	480b      	ldr	r0, [pc, #44]	@ (8001188 <HAL_I2C_MspInit+0xb8>)
 800115c:	f001 fbac 	bl	80028b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001160:	4b08      	ldr	r3, [pc, #32]	@ (8001184 <HAL_I2C_MspInit+0xb4>)
 8001162:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001164:	4a07      	ldr	r2, [pc, #28]	@ (8001184 <HAL_I2C_MspInit+0xb4>)
 8001166:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800116a:	6593      	str	r3, [r2, #88]	@ 0x58
 800116c:	4b05      	ldr	r3, [pc, #20]	@ (8001184 <HAL_I2C_MspInit+0xb4>)
 800116e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001170:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001178:	bf00      	nop
 800117a:	37b0      	adds	r7, #176	@ 0xb0
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40005400 	.word	0x40005400
 8001184:	40021000 	.word	0x40021000
 8001188:	48000400 	.word	0x48000400

0800118c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b0b2      	sub	sp, #200	@ 0xc8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001194:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011a8:	2288      	movs	r2, #136	@ 0x88
 80011aa:	2100      	movs	r1, #0
 80011ac:	4618      	mov	r0, r3
 80011ae:	f004 f8e1 	bl	8005374 <memset>
  if(huart->Instance==UART4)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a84      	ldr	r2, [pc, #528]	@ (80013c8 <HAL_UART_MspInit+0x23c>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d13c      	bne.n	8001236 <HAL_UART_MspInit+0xaa>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80011bc:	2308      	movs	r3, #8
 80011be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80011c0:	2300      	movs	r3, #0
 80011c2:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011c8:	4618      	mov	r0, r3
 80011ca:	f002 fcfd 	bl	8003bc8 <HAL_RCCEx_PeriphCLKConfig>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011d4:	f7ff fed2 	bl	8000f7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80011d8:	4b7c      	ldr	r3, [pc, #496]	@ (80013cc <HAL_UART_MspInit+0x240>)
 80011da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011dc:	4a7b      	ldr	r2, [pc, #492]	@ (80013cc <HAL_UART_MspInit+0x240>)
 80011de:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80011e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80011e4:	4b79      	ldr	r3, [pc, #484]	@ (80013cc <HAL_UART_MspInit+0x240>)
 80011e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80011ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80011ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f0:	4b76      	ldr	r3, [pc, #472]	@ (80013cc <HAL_UART_MspInit+0x240>)
 80011f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f4:	4a75      	ldr	r2, [pc, #468]	@ (80013cc <HAL_UART_MspInit+0x240>)
 80011f6:	f043 0301 	orr.w	r3, r3, #1
 80011fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011fc:	4b73      	ldr	r3, [pc, #460]	@ (80013cc <HAL_UART_MspInit+0x240>)
 80011fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001200:	f003 0301 	and.w	r3, r3, #1
 8001204:	627b      	str	r3, [r7, #36]	@ 0x24
 8001206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001208:	2303      	movs	r3, #3
 800120a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120e:	2302      	movs	r3, #2
 8001210:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121a:	2303      	movs	r3, #3
 800121c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001220:	2308      	movs	r3, #8
 8001222:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001226:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800122a:	4619      	mov	r1, r3
 800122c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001230:	f001 fb42 	bl	80028b8 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8001234:	e0c4      	b.n	80013c0 <HAL_UART_MspInit+0x234>
  else if(huart->Instance==USART1)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a65      	ldr	r2, [pc, #404]	@ (80013d0 <HAL_UART_MspInit+0x244>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d13d      	bne.n	80012bc <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001240:	2301      	movs	r3, #1
 8001242:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001244:	2300      	movs	r3, #0
 8001246:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001248:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800124c:	4618      	mov	r0, r3
 800124e:	f002 fcbb 	bl	8003bc8 <HAL_RCCEx_PeriphCLKConfig>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8001258:	f7ff fe90 	bl	8000f7c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800125c:	4b5b      	ldr	r3, [pc, #364]	@ (80013cc <HAL_UART_MspInit+0x240>)
 800125e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001260:	4a5a      	ldr	r2, [pc, #360]	@ (80013cc <HAL_UART_MspInit+0x240>)
 8001262:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001266:	6613      	str	r3, [r2, #96]	@ 0x60
 8001268:	4b58      	ldr	r3, [pc, #352]	@ (80013cc <HAL_UART_MspInit+0x240>)
 800126a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800126c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001270:	623b      	str	r3, [r7, #32]
 8001272:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001274:	4b55      	ldr	r3, [pc, #340]	@ (80013cc <HAL_UART_MspInit+0x240>)
 8001276:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001278:	4a54      	ldr	r2, [pc, #336]	@ (80013cc <HAL_UART_MspInit+0x240>)
 800127a:	f043 0301 	orr.w	r3, r3, #1
 800127e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001280:	4b52      	ldr	r3, [pc, #328]	@ (80013cc <HAL_UART_MspInit+0x240>)
 8001282:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001284:	f003 0301 	and.w	r3, r3, #1
 8001288:	61fb      	str	r3, [r7, #28]
 800128a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800128c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001290:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001294:	2302      	movs	r3, #2
 8001296:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a0:	2303      	movs	r3, #3
 80012a2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012a6:	2307      	movs	r3, #7
 80012a8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ac:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80012b0:	4619      	mov	r1, r3
 80012b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012b6:	f001 faff 	bl	80028b8 <HAL_GPIO_Init>
}
 80012ba:	e081      	b.n	80013c0 <HAL_UART_MspInit+0x234>
  else if(huart->Instance==USART2)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a44      	ldr	r2, [pc, #272]	@ (80013d4 <HAL_UART_MspInit+0x248>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d13c      	bne.n	8001340 <HAL_UART_MspInit+0x1b4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80012c6:	2302      	movs	r3, #2
 80012c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80012ca:	2300      	movs	r3, #0
 80012cc:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012d2:	4618      	mov	r0, r3
 80012d4:	f002 fc78 	bl	8003bc8 <HAL_RCCEx_PeriphCLKConfig>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <HAL_UART_MspInit+0x156>
      Error_Handler();
 80012de:	f7ff fe4d 	bl	8000f7c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80012e2:	4b3a      	ldr	r3, [pc, #232]	@ (80013cc <HAL_UART_MspInit+0x240>)
 80012e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012e6:	4a39      	ldr	r2, [pc, #228]	@ (80013cc <HAL_UART_MspInit+0x240>)
 80012e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80012ee:	4b37      	ldr	r3, [pc, #220]	@ (80013cc <HAL_UART_MspInit+0x240>)
 80012f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012f6:	61bb      	str	r3, [r7, #24]
 80012f8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fa:	4b34      	ldr	r3, [pc, #208]	@ (80013cc <HAL_UART_MspInit+0x240>)
 80012fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012fe:	4a33      	ldr	r2, [pc, #204]	@ (80013cc <HAL_UART_MspInit+0x240>)
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001306:	4b31      	ldr	r3, [pc, #196]	@ (80013cc <HAL_UART_MspInit+0x240>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	617b      	str	r3, [r7, #20]
 8001310:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001312:	230c      	movs	r3, #12
 8001314:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001318:	2302      	movs	r3, #2
 800131a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001324:	2303      	movs	r3, #3
 8001326:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800132a:	2307      	movs	r3, #7
 800132c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001330:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001334:	4619      	mov	r1, r3
 8001336:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800133a:	f001 fabd 	bl	80028b8 <HAL_GPIO_Init>
}
 800133e:	e03f      	b.n	80013c0 <HAL_UART_MspInit+0x234>
  else if(huart->Instance==USART3)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a24      	ldr	r2, [pc, #144]	@ (80013d8 <HAL_UART_MspInit+0x24c>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d13a      	bne.n	80013c0 <HAL_UART_MspInit+0x234>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800134a:	2304      	movs	r3, #4
 800134c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800134e:	2300      	movs	r3, #0
 8001350:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001352:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001356:	4618      	mov	r0, r3
 8001358:	f002 fc36 	bl	8003bc8 <HAL_RCCEx_PeriphCLKConfig>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <HAL_UART_MspInit+0x1da>
      Error_Handler();
 8001362:	f7ff fe0b 	bl	8000f7c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001366:	4b19      	ldr	r3, [pc, #100]	@ (80013cc <HAL_UART_MspInit+0x240>)
 8001368:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800136a:	4a18      	ldr	r2, [pc, #96]	@ (80013cc <HAL_UART_MspInit+0x240>)
 800136c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001370:	6593      	str	r3, [r2, #88]	@ 0x58
 8001372:	4b16      	ldr	r3, [pc, #88]	@ (80013cc <HAL_UART_MspInit+0x240>)
 8001374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001376:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800137e:	4b13      	ldr	r3, [pc, #76]	@ (80013cc <HAL_UART_MspInit+0x240>)
 8001380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001382:	4a12      	ldr	r2, [pc, #72]	@ (80013cc <HAL_UART_MspInit+0x240>)
 8001384:	f043 0304 	orr.w	r3, r3, #4
 8001388:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800138a:	4b10      	ldr	r3, [pc, #64]	@ (80013cc <HAL_UART_MspInit+0x240>)
 800138c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138e:	f003 0304 	and.w	r3, r3, #4
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001396:	2330      	movs	r3, #48	@ 0x30
 8001398:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139c:	2302      	movs	r3, #2
 800139e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a8:	2303      	movs	r3, #3
 80013aa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013ae:	2307      	movs	r3, #7
 80013b0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b4:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80013b8:	4619      	mov	r1, r3
 80013ba:	4808      	ldr	r0, [pc, #32]	@ (80013dc <HAL_UART_MspInit+0x250>)
 80013bc:	f001 fa7c 	bl	80028b8 <HAL_GPIO_Init>
}
 80013c0:	bf00      	nop
 80013c2:	37c8      	adds	r7, #200	@ 0xc8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40004c00 	.word	0x40004c00
 80013cc:	40021000 	.word	0x40021000
 80013d0:	40013800 	.word	0x40013800
 80013d4:	40004400 	.word	0x40004400
 80013d8:	40004800 	.word	0x40004800
 80013dc:	48000800 	.word	0x48000800

080013e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013e4:	bf00      	nop
 80013e6:	e7fd      	b.n	80013e4 <NMI_Handler+0x4>

080013e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ec:	bf00      	nop
 80013ee:	e7fd      	b.n	80013ec <HardFault_Handler+0x4>

080013f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f4:	bf00      	nop
 80013f6:	e7fd      	b.n	80013f4 <MemManage_Handler+0x4>

080013f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013fc:	bf00      	nop
 80013fe:	e7fd      	b.n	80013fc <BusFault_Handler+0x4>

08001400 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001404:	bf00      	nop
 8001406:	e7fd      	b.n	8001404 <UsageFault_Handler+0x4>

08001408 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001436:	f000 f945 	bl	80016c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}

0800143e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001442:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001446:	f001 fc11 	bl	8002c6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}

0800144e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b086      	sub	sp, #24
 8001452:	af00      	add	r7, sp, #0
 8001454:	60f8      	str	r0, [r7, #12]
 8001456:	60b9      	str	r1, [r7, #8]
 8001458:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800145a:	2300      	movs	r3, #0
 800145c:	617b      	str	r3, [r7, #20]
 800145e:	e00a      	b.n	8001476 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001460:	f3af 8000 	nop.w
 8001464:	4601      	mov	r1, r0
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	1c5a      	adds	r2, r3, #1
 800146a:	60ba      	str	r2, [r7, #8]
 800146c:	b2ca      	uxtb	r2, r1
 800146e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	3301      	adds	r3, #1
 8001474:	617b      	str	r3, [r7, #20]
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	429a      	cmp	r2, r3
 800147c:	dbf0      	blt.n	8001460 <_read+0x12>
  }

  return len;
 800147e:	687b      	ldr	r3, [r7, #4]
}
 8001480:	4618      	mov	r0, r3
 8001482:	3718      	adds	r7, #24
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
 8001498:	e009      	b.n	80014ae <_write+0x26>
  {
    __io_putchar(*ptr++);
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	1c5a      	adds	r2, r3, #1
 800149e:	60ba      	str	r2, [r7, #8]
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	3301      	adds	r3, #1
 80014ac:	617b      	str	r3, [r7, #20]
 80014ae:	697a      	ldr	r2, [r7, #20]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	dbf1      	blt.n	800149a <_write+0x12>
  }
  return len;
 80014b6:	687b      	ldr	r3, [r7, #4]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3718      	adds	r7, #24
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <_close>:

int _close(int file)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014e8:	605a      	str	r2, [r3, #4]
  return 0;
 80014ea:	2300      	movs	r3, #0
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <_isatty>:

int _isatty(int file)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001500:	2301      	movs	r3, #1
}
 8001502:	4618      	mov	r0, r3
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800150e:	b480      	push	{r7}
 8001510:	b085      	sub	sp, #20
 8001512:	af00      	add	r7, sp, #0
 8001514:	60f8      	str	r0, [r7, #12]
 8001516:	60b9      	str	r1, [r7, #8]
 8001518:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800151a:	2300      	movs	r3, #0
}
 800151c:	4618      	mov	r0, r3
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001530:	4a14      	ldr	r2, [pc, #80]	@ (8001584 <_sbrk+0x5c>)
 8001532:	4b15      	ldr	r3, [pc, #84]	@ (8001588 <_sbrk+0x60>)
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800153c:	4b13      	ldr	r3, [pc, #76]	@ (800158c <_sbrk+0x64>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d102      	bne.n	800154a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001544:	4b11      	ldr	r3, [pc, #68]	@ (800158c <_sbrk+0x64>)
 8001546:	4a12      	ldr	r2, [pc, #72]	@ (8001590 <_sbrk+0x68>)
 8001548:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800154a:	4b10      	ldr	r3, [pc, #64]	@ (800158c <_sbrk+0x64>)
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4413      	add	r3, r2
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	429a      	cmp	r2, r3
 8001556:	d207      	bcs.n	8001568 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001558:	f003 ff5a 	bl	8005410 <__errno>
 800155c:	4603      	mov	r3, r0
 800155e:	220c      	movs	r2, #12
 8001560:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001562:	f04f 33ff 	mov.w	r3, #4294967295
 8001566:	e009      	b.n	800157c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001568:	4b08      	ldr	r3, [pc, #32]	@ (800158c <_sbrk+0x64>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800156e:	4b07      	ldr	r3, [pc, #28]	@ (800158c <_sbrk+0x64>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4413      	add	r3, r2
 8001576:	4a05      	ldr	r2, [pc, #20]	@ (800158c <_sbrk+0x64>)
 8001578:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800157a:	68fb      	ldr	r3, [r7, #12]
}
 800157c:	4618      	mov	r0, r3
 800157e:	3718      	adds	r7, #24
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20018000 	.word	0x20018000
 8001588:	00000400 	.word	0x00000400
 800158c:	20000404 	.word	0x20000404
 8001590:	20000558 	.word	0x20000558

08001594 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001598:	4b06      	ldr	r3, [pc, #24]	@ (80015b4 <SystemInit+0x20>)
 800159a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800159e:	4a05      	ldr	r2, [pc, #20]	@ (80015b4 <SystemInit+0x20>)
 80015a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80015b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015bc:	f7ff ffea 	bl	8001594 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015c0:	480c      	ldr	r0, [pc, #48]	@ (80015f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80015c2:	490d      	ldr	r1, [pc, #52]	@ (80015f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015c4:	4a0d      	ldr	r2, [pc, #52]	@ (80015fc <LoopForever+0xe>)
  movs r3, #0
 80015c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015c8:	e002      	b.n	80015d0 <LoopCopyDataInit>

080015ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ce:	3304      	adds	r3, #4

080015d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015d4:	d3f9      	bcc.n	80015ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001600 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015d8:	4c0a      	ldr	r4, [pc, #40]	@ (8001604 <LoopForever+0x16>)
  movs r3, #0
 80015da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015dc:	e001      	b.n	80015e2 <LoopFillZerobss>

080015de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e0:	3204      	adds	r2, #4

080015e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015e4:	d3fb      	bcc.n	80015de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015e6:	f003 ff19 	bl	800541c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015ea:	f7ff f949 	bl	8000880 <main>

080015ee <LoopForever>:

LoopForever:
    b LoopForever
 80015ee:	e7fe      	b.n	80015ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80015f0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80015f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015f8:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 80015fc:	0800599c 	.word	0x0800599c
  ldr r2, =_sbss
 8001600:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8001604:	20000558 	.word	0x20000558

08001608 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001608:	e7fe      	b.n	8001608 <ADC1_2_IRQHandler>
	...

0800160c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001612:	2300      	movs	r3, #0
 8001614:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001616:	4b0c      	ldr	r3, [pc, #48]	@ (8001648 <HAL_Init+0x3c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a0b      	ldr	r2, [pc, #44]	@ (8001648 <HAL_Init+0x3c>)
 800161c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001620:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001622:	2003      	movs	r0, #3
 8001624:	f001 f906 	bl	8002834 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001628:	2000      	movs	r0, #0
 800162a:	f000 f80f 	bl	800164c <HAL_InitTick>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d002      	beq.n	800163a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	71fb      	strb	r3, [r7, #7]
 8001638:	e001      	b.n	800163e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800163a:	f7ff fca5 	bl	8000f88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800163e:	79fb      	ldrb	r3, [r7, #7]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40022000 	.word	0x40022000

0800164c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001654:	2300      	movs	r3, #0
 8001656:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001658:	4b17      	ldr	r3, [pc, #92]	@ (80016b8 <HAL_InitTick+0x6c>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d023      	beq.n	80016a8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001660:	4b16      	ldr	r3, [pc, #88]	@ (80016bc <HAL_InitTick+0x70>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	4b14      	ldr	r3, [pc, #80]	@ (80016b8 <HAL_InitTick+0x6c>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	4619      	mov	r1, r3
 800166a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800166e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001672:	fbb2 f3f3 	udiv	r3, r2, r3
 8001676:	4618      	mov	r0, r3
 8001678:	f001 f911 	bl	800289e <HAL_SYSTICK_Config>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d10f      	bne.n	80016a2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2b0f      	cmp	r3, #15
 8001686:	d809      	bhi.n	800169c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001688:	2200      	movs	r2, #0
 800168a:	6879      	ldr	r1, [r7, #4]
 800168c:	f04f 30ff 	mov.w	r0, #4294967295
 8001690:	f001 f8db 	bl	800284a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001694:	4a0a      	ldr	r2, [pc, #40]	@ (80016c0 <HAL_InitTick+0x74>)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6013      	str	r3, [r2, #0]
 800169a:	e007      	b.n	80016ac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	73fb      	strb	r3, [r7, #15]
 80016a0:	e004      	b.n	80016ac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	73fb      	strb	r3, [r7, #15]
 80016a6:	e001      	b.n	80016ac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000040 	.word	0x20000040
 80016bc:	20000038 	.word	0x20000038
 80016c0:	2000003c 	.word	0x2000003c

080016c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016c8:	4b06      	ldr	r3, [pc, #24]	@ (80016e4 <HAL_IncTick+0x20>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	461a      	mov	r2, r3
 80016ce:	4b06      	ldr	r3, [pc, #24]	@ (80016e8 <HAL_IncTick+0x24>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4413      	add	r3, r2
 80016d4:	4a04      	ldr	r2, [pc, #16]	@ (80016e8 <HAL_IncTick+0x24>)
 80016d6:	6013      	str	r3, [r2, #0]
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	20000040 	.word	0x20000040
 80016e8:	20000408 	.word	0x20000408

080016ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  return uwTick;
 80016f0:	4b03      	ldr	r3, [pc, #12]	@ (8001700 <HAL_GetTick+0x14>)
 80016f2:	681b      	ldr	r3, [r3, #0]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	20000408 	.word	0x20000408

08001704 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800170c:	f7ff ffee 	bl	80016ec <HAL_GetTick>
 8001710:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800171c:	d005      	beq.n	800172a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800171e:	4b0a      	ldr	r3, [pc, #40]	@ (8001748 <HAL_Delay+0x44>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	461a      	mov	r2, r3
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	4413      	add	r3, r2
 8001728:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800172a:	bf00      	nop
 800172c:	f7ff ffde 	bl	80016ec <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	429a      	cmp	r2, r3
 800173a:	d8f7      	bhi.n	800172c <HAL_Delay+0x28>
  {
  }
}
 800173c:	bf00      	nop
 800173e:	bf00      	nop
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000040 	.word	0x20000040

0800174c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	431a      	orrs	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	609a      	str	r2, [r3, #8]
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001772:	b480      	push	{r7}
 8001774:	b083      	sub	sp, #12
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
 800177a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	431a      	orrs	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	609a      	str	r2, [r3, #8]
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b087      	sub	sp, #28
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
 80017c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	3360      	adds	r3, #96	@ 0x60
 80017c6:	461a      	mov	r2, r3
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	4413      	add	r3, r2
 80017ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	4b08      	ldr	r3, [pc, #32]	@ (80017f8 <LL_ADC_SetOffset+0x44>)
 80017d6:	4013      	ands	r3, r2
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80017de:	683a      	ldr	r2, [r7, #0]
 80017e0:	430a      	orrs	r2, r1
 80017e2:	4313      	orrs	r3, r2
 80017e4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80017ec:	bf00      	nop
 80017ee:	371c      	adds	r7, #28
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	03fff000 	.word	0x03fff000

080017fc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	3360      	adds	r3, #96	@ 0x60
 800180a:	461a      	mov	r2, r3
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	4413      	add	r3, r2
 8001812:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800181c:	4618      	mov	r0, r3
 800181e:	3714      	adds	r7, #20
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001828:	b480      	push	{r7}
 800182a:	b087      	sub	sp, #28
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	3360      	adds	r3, #96	@ 0x60
 8001838:	461a      	mov	r2, r3
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4413      	add	r3, r2
 8001840:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	431a      	orrs	r2, r3
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001852:	bf00      	nop
 8001854:	371c      	adds	r7, #28
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800185e:	b480      	push	{r7}
 8001860:	b087      	sub	sp, #28
 8001862:	af00      	add	r7, sp, #0
 8001864:	60f8      	str	r0, [r7, #12]
 8001866:	60b9      	str	r1, [r7, #8]
 8001868:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	3330      	adds	r3, #48	@ 0x30
 800186e:	461a      	mov	r2, r3
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	0a1b      	lsrs	r3, r3, #8
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	f003 030c 	and.w	r3, r3, #12
 800187a:	4413      	add	r3, r2
 800187c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	f003 031f 	and.w	r3, r3, #31
 8001888:	211f      	movs	r1, #31
 800188a:	fa01 f303 	lsl.w	r3, r1, r3
 800188e:	43db      	mvns	r3, r3
 8001890:	401a      	ands	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	0e9b      	lsrs	r3, r3, #26
 8001896:	f003 011f 	and.w	r1, r3, #31
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	f003 031f 	and.w	r3, r3, #31
 80018a0:	fa01 f303 	lsl.w	r3, r1, r3
 80018a4:	431a      	orrs	r2, r3
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80018aa:	bf00      	nop
 80018ac:	371c      	adds	r7, #28
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b087      	sub	sp, #28
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	60f8      	str	r0, [r7, #12]
 80018be:	60b9      	str	r1, [r7, #8]
 80018c0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	3314      	adds	r3, #20
 80018c6:	461a      	mov	r2, r3
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	0e5b      	lsrs	r3, r3, #25
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	f003 0304 	and.w	r3, r3, #4
 80018d2:	4413      	add	r3, r2
 80018d4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	0d1b      	lsrs	r3, r3, #20
 80018de:	f003 031f 	and.w	r3, r3, #31
 80018e2:	2107      	movs	r1, #7
 80018e4:	fa01 f303 	lsl.w	r3, r1, r3
 80018e8:	43db      	mvns	r3, r3
 80018ea:	401a      	ands	r2, r3
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	0d1b      	lsrs	r3, r3, #20
 80018f0:	f003 031f 	and.w	r3, r3, #31
 80018f4:	6879      	ldr	r1, [r7, #4]
 80018f6:	fa01 f303 	lsl.w	r3, r1, r3
 80018fa:	431a      	orrs	r2, r3
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001900:	bf00      	nop
 8001902:	371c      	adds	r7, #28
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001924:	43db      	mvns	r3, r3
 8001926:	401a      	ands	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f003 0318 	and.w	r3, r3, #24
 800192e:	4908      	ldr	r1, [pc, #32]	@ (8001950 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001930:	40d9      	lsrs	r1, r3
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	400b      	ands	r3, r1
 8001936:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800193a:	431a      	orrs	r2, r3
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001942:	bf00      	nop
 8001944:	3714      	adds	r7, #20
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	0007ffff 	.word	0x0007ffff

08001954 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001964:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	6093      	str	r3, [r2, #8]
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001988:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800198c:	d101      	bne.n	8001992 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800198e:	2301      	movs	r3, #1
 8001990:	e000      	b.n	8001994 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80019b0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80019b4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80019dc:	d101      	bne.n	80019e2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80019de:	2301      	movs	r3, #1
 80019e0:	e000      	b.n	80019e4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d101      	bne.n	8001a08 <LL_ADC_IsEnabled+0x18>
 8001a04:	2301      	movs	r3, #1
 8001a06:	e000      	b.n	8001a0a <LL_ADC_IsEnabled+0x1a>
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a16:	b480      	push	{r7}
 8001a18:	b083      	sub	sp, #12
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f003 0304 	and.w	r3, r3, #4
 8001a26:	2b04      	cmp	r3, #4
 8001a28:	d101      	bne.n	8001a2e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e000      	b.n	8001a30 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f003 0308 	and.w	r3, r3, #8
 8001a4c:	2b08      	cmp	r3, #8
 8001a4e:	d101      	bne.n	8001a54 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a50:	2301      	movs	r3, #1
 8001a52:	e000      	b.n	8001a56 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
	...

08001a64 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a64:	b590      	push	{r4, r7, lr}
 8001a66:	b089      	sub	sp, #36	@ 0x24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e130      	b.n	8001ce0 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d109      	bne.n	8001aa0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f7ff fa9f 	bl	8000fd0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff ff67 	bl	8001978 <LL_ADC_IsDeepPowerDownEnabled>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d004      	beq.n	8001aba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff ff4d 	bl	8001954 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff ff82 	bl	80019c8 <LL_ADC_IsInternalRegulatorEnabled>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d115      	bne.n	8001af6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff ff66 	bl	80019a0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ad4:	4b84      	ldr	r3, [pc, #528]	@ (8001ce8 <HAL_ADC_Init+0x284>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	099b      	lsrs	r3, r3, #6
 8001ada:	4a84      	ldr	r2, [pc, #528]	@ (8001cec <HAL_ADC_Init+0x288>)
 8001adc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae0:	099b      	lsrs	r3, r3, #6
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ae8:	e002      	b.n	8001af0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	3b01      	subs	r3, #1
 8001aee:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1f9      	bne.n	8001aea <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff ff64 	bl	80019c8 <LL_ADC_IsInternalRegulatorEnabled>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d10d      	bne.n	8001b22 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b0a:	f043 0210 	orr.w	r2, r3, #16
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b16:	f043 0201 	orr.w	r2, r3, #1
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff ff75 	bl	8001a16 <LL_ADC_REG_IsConversionOngoing>
 8001b2c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b32:	f003 0310 	and.w	r3, r3, #16
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f040 80c9 	bne.w	8001cce <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f040 80c5 	bne.w	8001cce <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b48:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001b4c:	f043 0202 	orr.w	r2, r3, #2
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff ff49 	bl	80019f0 <LL_ADC_IsEnabled>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d115      	bne.n	8001b90 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b64:	4862      	ldr	r0, [pc, #392]	@ (8001cf0 <HAL_ADC_Init+0x28c>)
 8001b66:	f7ff ff43 	bl	80019f0 <LL_ADC_IsEnabled>
 8001b6a:	4604      	mov	r4, r0
 8001b6c:	4861      	ldr	r0, [pc, #388]	@ (8001cf4 <HAL_ADC_Init+0x290>)
 8001b6e:	f7ff ff3f 	bl	80019f0 <LL_ADC_IsEnabled>
 8001b72:	4603      	mov	r3, r0
 8001b74:	431c      	orrs	r4, r3
 8001b76:	4860      	ldr	r0, [pc, #384]	@ (8001cf8 <HAL_ADC_Init+0x294>)
 8001b78:	f7ff ff3a 	bl	80019f0 <LL_ADC_IsEnabled>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	4323      	orrs	r3, r4
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d105      	bne.n	8001b90 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	4619      	mov	r1, r3
 8001b8a:	485c      	ldr	r0, [pc, #368]	@ (8001cfc <HAL_ADC_Init+0x298>)
 8001b8c:	f7ff fdde 	bl	800174c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	7e5b      	ldrb	r3, [r3, #25]
 8001b94:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b9a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001ba0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001ba6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bae:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d106      	bne.n	8001bcc <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	045b      	lsls	r3, r3, #17
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d009      	beq.n	8001be8 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bd8:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001be0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	68da      	ldr	r2, [r3, #12]
 8001bee:	4b44      	ldr	r3, [pc, #272]	@ (8001d00 <HAL_ADC_Init+0x29c>)
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	6812      	ldr	r2, [r2, #0]
 8001bf6:	69b9      	ldr	r1, [r7, #24]
 8001bf8:	430b      	orrs	r3, r1
 8001bfa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff ff1b 	bl	8001a3c <LL_ADC_INJ_IsConversionOngoing>
 8001c06:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d13d      	bne.n	8001c8a <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d13a      	bne.n	8001c8a <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c18:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001c20:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c22:	4313      	orrs	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001c30:	f023 0302 	bic.w	r3, r3, #2
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	6812      	ldr	r2, [r2, #0]
 8001c38:	69b9      	ldr	r1, [r7, #24]
 8001c3a:	430b      	orrs	r3, r1
 8001c3c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d118      	bne.n	8001c7a <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001c52:	f023 0304 	bic.w	r3, r3, #4
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001c5e:	4311      	orrs	r1, r2
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001c64:	4311      	orrs	r1, r2
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	431a      	orrs	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f042 0201 	orr.w	r2, r2, #1
 8001c76:	611a      	str	r2, [r3, #16]
 8001c78:	e007      	b.n	8001c8a <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	691a      	ldr	r2, [r3, #16]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f022 0201 	bic.w	r2, r2, #1
 8001c88:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d10c      	bne.n	8001cac <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c98:	f023 010f 	bic.w	r1, r3, #15
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	69db      	ldr	r3, [r3, #28]
 8001ca0:	1e5a      	subs	r2, r3, #1
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	631a      	str	r2, [r3, #48]	@ 0x30
 8001caa:	e007      	b.n	8001cbc <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f022 020f 	bic.w	r2, r2, #15
 8001cba:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cc0:	f023 0303 	bic.w	r3, r3, #3
 8001cc4:	f043 0201 	orr.w	r2, r3, #1
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	655a      	str	r2, [r3, #84]	@ 0x54
 8001ccc:	e007      	b.n	8001cde <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cd2:	f043 0210 	orr.w	r2, r3, #16
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001cde:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3724      	adds	r7, #36	@ 0x24
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd90      	pop	{r4, r7, pc}
 8001ce8:	20000038 	.word	0x20000038
 8001cec:	053e2d63 	.word	0x053e2d63
 8001cf0:	50040000 	.word	0x50040000
 8001cf4:	50040100 	.word	0x50040100
 8001cf8:	50040200 	.word	0x50040200
 8001cfc:	50040300 	.word	0x50040300
 8001d00:	fff0c007 	.word	0xfff0c007

08001d04 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b0b6      	sub	sp, #216	@ 0xd8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d101      	bne.n	8001d26 <HAL_ADC_ConfigChannel+0x22>
 8001d22:	2302      	movs	r3, #2
 8001d24:	e3c9      	b.n	80024ba <HAL_ADC_ConfigChannel+0x7b6>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff fe6f 	bl	8001a16 <LL_ADC_REG_IsConversionOngoing>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f040 83aa 	bne.w	8002494 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b05      	cmp	r3, #5
 8001d4e:	d824      	bhi.n	8001d9a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	3b02      	subs	r3, #2
 8001d56:	2b03      	cmp	r3, #3
 8001d58:	d81b      	bhi.n	8001d92 <HAL_ADC_ConfigChannel+0x8e>
 8001d5a:	a201      	add	r2, pc, #4	@ (adr r2, 8001d60 <HAL_ADC_ConfigChannel+0x5c>)
 8001d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d60:	08001d71 	.word	0x08001d71
 8001d64:	08001d79 	.word	0x08001d79
 8001d68:	08001d81 	.word	0x08001d81
 8001d6c:	08001d89 	.word	0x08001d89
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001d70:	230c      	movs	r3, #12
 8001d72:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001d76:	e010      	b.n	8001d9a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001d78:	2312      	movs	r3, #18
 8001d7a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001d7e:	e00c      	b.n	8001d9a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001d80:	2318      	movs	r3, #24
 8001d82:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001d86:	e008      	b.n	8001d9a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001d88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001d90:	e003      	b.n	8001d9a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001d92:	2306      	movs	r3, #6
 8001d94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001d98:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6818      	ldr	r0, [r3, #0]
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	461a      	mov	r2, r3
 8001da4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001da8:	f7ff fd59 	bl	800185e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff fe30 	bl	8001a16 <LL_ADC_REG_IsConversionOngoing>
 8001db6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff fe3c 	bl	8001a3c <LL_ADC_INJ_IsConversionOngoing>
 8001dc4:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001dc8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f040 81a4 	bne.w	800211a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001dd2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f040 819f 	bne.w	800211a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6818      	ldr	r0, [r3, #0]
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	6819      	ldr	r1, [r3, #0]
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	461a      	mov	r2, r3
 8001dea:	f7ff fd64 	bl	80018b6 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	695a      	ldr	r2, [r3, #20]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	08db      	lsrs	r3, r3, #3
 8001dfa:	f003 0303 	and.w	r3, r3, #3
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	2b04      	cmp	r3, #4
 8001e0e:	d00a      	beq.n	8001e26 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6818      	ldr	r0, [r3, #0]
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	6919      	ldr	r1, [r3, #16]
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001e20:	f7ff fcc8 	bl	80017b4 <LL_ADC_SetOffset>
 8001e24:	e179      	b.n	800211a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff fce5 	bl	80017fc <LL_ADC_GetOffsetChannel>
 8001e32:	4603      	mov	r3, r0
 8001e34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d10a      	bne.n	8001e52 <HAL_ADC_ConfigChannel+0x14e>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2100      	movs	r1, #0
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff fcda 	bl	80017fc <LL_ADC_GetOffsetChannel>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	0e9b      	lsrs	r3, r3, #26
 8001e4c:	f003 021f 	and.w	r2, r3, #31
 8001e50:	e01e      	b.n	8001e90 <HAL_ADC_ConfigChannel+0x18c>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2100      	movs	r1, #0
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff fccf 	bl	80017fc <LL_ADC_GetOffsetChannel>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e64:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001e68:	fa93 f3a3 	rbit	r3, r3
 8001e6c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e70:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001e74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e78:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d101      	bne.n	8001e84 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001e80:	2320      	movs	r3, #32
 8001e82:	e004      	b.n	8001e8e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001e84:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001e88:	fab3 f383 	clz	r3, r3
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d105      	bne.n	8001ea8 <HAL_ADC_ConfigChannel+0x1a4>
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	0e9b      	lsrs	r3, r3, #26
 8001ea2:	f003 031f 	and.w	r3, r3, #31
 8001ea6:	e018      	b.n	8001eda <HAL_ADC_ConfigChannel+0x1d6>
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001eb4:	fa93 f3a3 	rbit	r3, r3
 8001eb8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001ebc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001ec0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001ec4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d101      	bne.n	8001ed0 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001ecc:	2320      	movs	r3, #32
 8001ece:	e004      	b.n	8001eda <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001ed0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001ed4:	fab3 f383 	clz	r3, r3
 8001ed8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d106      	bne.n	8001eec <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff fc9e 	bl	8001828 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff fc82 	bl	80017fc <LL_ADC_GetOffsetChannel>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d10a      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x214>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2101      	movs	r1, #1
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff fc77 	bl	80017fc <LL_ADC_GetOffsetChannel>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	0e9b      	lsrs	r3, r3, #26
 8001f12:	f003 021f 	and.w	r2, r3, #31
 8001f16:	e01e      	b.n	8001f56 <HAL_ADC_ConfigChannel+0x252>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2101      	movs	r1, #1
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7ff fc6c 	bl	80017fc <LL_ADC_GetOffsetChannel>
 8001f24:	4603      	mov	r3, r0
 8001f26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001f2e:	fa93 f3a3 	rbit	r3, r3
 8001f32:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001f36:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001f3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001f3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001f46:	2320      	movs	r3, #32
 8001f48:	e004      	b.n	8001f54 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001f4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001f4e:	fab3 f383 	clz	r3, r3
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d105      	bne.n	8001f6e <HAL_ADC_ConfigChannel+0x26a>
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	0e9b      	lsrs	r3, r3, #26
 8001f68:	f003 031f 	and.w	r3, r3, #31
 8001f6c:	e018      	b.n	8001fa0 <HAL_ADC_ConfigChannel+0x29c>
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f76:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001f7a:	fa93 f3a3 	rbit	r3, r3
 8001f7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001f82:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001f86:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001f8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001f92:	2320      	movs	r3, #32
 8001f94:	e004      	b.n	8001fa0 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001f96:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001f9a:	fab3 f383 	clz	r3, r3
 8001f9e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d106      	bne.n	8001fb2 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	2101      	movs	r1, #1
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff fc3b 	bl	8001828 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2102      	movs	r1, #2
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff fc1f 	bl	80017fc <LL_ADC_GetOffsetChannel>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d10a      	bne.n	8001fde <HAL_ADC_ConfigChannel+0x2da>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2102      	movs	r1, #2
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff fc14 	bl	80017fc <LL_ADC_GetOffsetChannel>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	0e9b      	lsrs	r3, r3, #26
 8001fd8:	f003 021f 	and.w	r2, r3, #31
 8001fdc:	e01e      	b.n	800201c <HAL_ADC_ConfigChannel+0x318>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2102      	movs	r1, #2
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff fc09 	bl	80017fc <LL_ADC_GetOffsetChannel>
 8001fea:	4603      	mov	r3, r0
 8001fec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001ff4:	fa93 f3a3 	rbit	r3, r3
 8001ff8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001ffc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002000:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002004:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002008:	2b00      	cmp	r3, #0
 800200a:	d101      	bne.n	8002010 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800200c:	2320      	movs	r3, #32
 800200e:	e004      	b.n	800201a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002010:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002014:	fab3 f383 	clz	r3, r3
 8002018:	b2db      	uxtb	r3, r3
 800201a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002024:	2b00      	cmp	r3, #0
 8002026:	d105      	bne.n	8002034 <HAL_ADC_ConfigChannel+0x330>
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	0e9b      	lsrs	r3, r3, #26
 800202e:	f003 031f 	and.w	r3, r3, #31
 8002032:	e014      	b.n	800205e <HAL_ADC_ConfigChannel+0x35a>
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800203c:	fa93 f3a3 	rbit	r3, r3
 8002040:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002042:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002044:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002048:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002050:	2320      	movs	r3, #32
 8002052:	e004      	b.n	800205e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002054:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002058:	fab3 f383 	clz	r3, r3
 800205c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800205e:	429a      	cmp	r2, r3
 8002060:	d106      	bne.n	8002070 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2200      	movs	r2, #0
 8002068:	2102      	movs	r1, #2
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff fbdc 	bl	8001828 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2103      	movs	r1, #3
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff fbc0 	bl	80017fc <LL_ADC_GetOffsetChannel>
 800207c:	4603      	mov	r3, r0
 800207e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002082:	2b00      	cmp	r3, #0
 8002084:	d10a      	bne.n	800209c <HAL_ADC_ConfigChannel+0x398>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2103      	movs	r1, #3
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff fbb5 	bl	80017fc <LL_ADC_GetOffsetChannel>
 8002092:	4603      	mov	r3, r0
 8002094:	0e9b      	lsrs	r3, r3, #26
 8002096:	f003 021f 	and.w	r2, r3, #31
 800209a:	e017      	b.n	80020cc <HAL_ADC_ConfigChannel+0x3c8>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2103      	movs	r1, #3
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff fbaa 	bl	80017fc <LL_ADC_GetOffsetChannel>
 80020a8:	4603      	mov	r3, r0
 80020aa:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80020ae:	fa93 f3a3 	rbit	r3, r3
 80020b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80020b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80020b6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80020b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80020be:	2320      	movs	r3, #32
 80020c0:	e003      	b.n	80020ca <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80020c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80020c4:	fab3 f383 	clz	r3, r3
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d105      	bne.n	80020e4 <HAL_ADC_ConfigChannel+0x3e0>
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	0e9b      	lsrs	r3, r3, #26
 80020de:	f003 031f 	and.w	r3, r3, #31
 80020e2:	e011      	b.n	8002108 <HAL_ADC_ConfigChannel+0x404>
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020ec:	fa93 f3a3 	rbit	r3, r3
 80020f0:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80020f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80020f4:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80020f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d101      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80020fc:	2320      	movs	r3, #32
 80020fe:	e003      	b.n	8002108 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002100:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002102:	fab3 f383 	clz	r3, r3
 8002106:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002108:	429a      	cmp	r2, r3
 800210a:	d106      	bne.n	800211a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2200      	movs	r2, #0
 8002112:	2103      	movs	r1, #3
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff fb87 	bl	8001828 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4618      	mov	r0, r3
 8002120:	f7ff fc66 	bl	80019f0 <LL_ADC_IsEnabled>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	f040 8140 	bne.w	80023ac <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6818      	ldr	r0, [r3, #0]
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	6819      	ldr	r1, [r3, #0]
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	461a      	mov	r2, r3
 800213a:	f7ff fbe7 	bl	800190c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	4a8f      	ldr	r2, [pc, #572]	@ (8002380 <HAL_ADC_ConfigChannel+0x67c>)
 8002144:	4293      	cmp	r3, r2
 8002146:	f040 8131 	bne.w	80023ac <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10b      	bne.n	8002172 <HAL_ADC_ConfigChannel+0x46e>
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	0e9b      	lsrs	r3, r3, #26
 8002160:	3301      	adds	r3, #1
 8002162:	f003 031f 	and.w	r3, r3, #31
 8002166:	2b09      	cmp	r3, #9
 8002168:	bf94      	ite	ls
 800216a:	2301      	movls	r3, #1
 800216c:	2300      	movhi	r3, #0
 800216e:	b2db      	uxtb	r3, r3
 8002170:	e019      	b.n	80021a6 <HAL_ADC_ConfigChannel+0x4a2>
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002178:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800217a:	fa93 f3a3 	rbit	r3, r3
 800217e:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002180:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002182:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002184:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800218a:	2320      	movs	r3, #32
 800218c:	e003      	b.n	8002196 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800218e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002190:	fab3 f383 	clz	r3, r3
 8002194:	b2db      	uxtb	r3, r3
 8002196:	3301      	adds	r3, #1
 8002198:	f003 031f 	and.w	r3, r3, #31
 800219c:	2b09      	cmp	r3, #9
 800219e:	bf94      	ite	ls
 80021a0:	2301      	movls	r3, #1
 80021a2:	2300      	movhi	r3, #0
 80021a4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d079      	beq.n	800229e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d107      	bne.n	80021c6 <HAL_ADC_ConfigChannel+0x4c2>
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	0e9b      	lsrs	r3, r3, #26
 80021bc:	3301      	adds	r3, #1
 80021be:	069b      	lsls	r3, r3, #26
 80021c0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80021c4:	e015      	b.n	80021f2 <HAL_ADC_ConfigChannel+0x4ee>
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021ce:	fa93 f3a3 	rbit	r3, r3
 80021d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80021d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80021d6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80021d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80021de:	2320      	movs	r3, #32
 80021e0:	e003      	b.n	80021ea <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80021e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80021e4:	fab3 f383 	clz	r3, r3
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	3301      	adds	r3, #1
 80021ec:	069b      	lsls	r3, r3, #26
 80021ee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d109      	bne.n	8002212 <HAL_ADC_ConfigChannel+0x50e>
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	0e9b      	lsrs	r3, r3, #26
 8002204:	3301      	adds	r3, #1
 8002206:	f003 031f 	and.w	r3, r3, #31
 800220a:	2101      	movs	r1, #1
 800220c:	fa01 f303 	lsl.w	r3, r1, r3
 8002210:	e017      	b.n	8002242 <HAL_ADC_ConfigChannel+0x53e>
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002218:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800221a:	fa93 f3a3 	rbit	r3, r3
 800221e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002220:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002222:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002224:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800222a:	2320      	movs	r3, #32
 800222c:	e003      	b.n	8002236 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800222e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002230:	fab3 f383 	clz	r3, r3
 8002234:	b2db      	uxtb	r3, r3
 8002236:	3301      	adds	r3, #1
 8002238:	f003 031f 	and.w	r3, r3, #31
 800223c:	2101      	movs	r1, #1
 800223e:	fa01 f303 	lsl.w	r3, r1, r3
 8002242:	ea42 0103 	orr.w	r1, r2, r3
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10a      	bne.n	8002268 <HAL_ADC_ConfigChannel+0x564>
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	0e9b      	lsrs	r3, r3, #26
 8002258:	3301      	adds	r3, #1
 800225a:	f003 021f 	and.w	r2, r3, #31
 800225e:	4613      	mov	r3, r2
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	4413      	add	r3, r2
 8002264:	051b      	lsls	r3, r3, #20
 8002266:	e018      	b.n	800229a <HAL_ADC_ConfigChannel+0x596>
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002270:	fa93 f3a3 	rbit	r3, r3
 8002274:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002278:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800227a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800227c:	2b00      	cmp	r3, #0
 800227e:	d101      	bne.n	8002284 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002280:	2320      	movs	r3, #32
 8002282:	e003      	b.n	800228c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002286:	fab3 f383 	clz	r3, r3
 800228a:	b2db      	uxtb	r3, r3
 800228c:	3301      	adds	r3, #1
 800228e:	f003 021f 	and.w	r2, r3, #31
 8002292:	4613      	mov	r3, r2
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	4413      	add	r3, r2
 8002298:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800229a:	430b      	orrs	r3, r1
 800229c:	e081      	b.n	80023a2 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d107      	bne.n	80022ba <HAL_ADC_ConfigChannel+0x5b6>
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	0e9b      	lsrs	r3, r3, #26
 80022b0:	3301      	adds	r3, #1
 80022b2:	069b      	lsls	r3, r3, #26
 80022b4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022b8:	e015      	b.n	80022e6 <HAL_ADC_ConfigChannel+0x5e2>
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022c2:	fa93 f3a3 	rbit	r3, r3
 80022c6:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80022c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80022cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80022d2:	2320      	movs	r3, #32
 80022d4:	e003      	b.n	80022de <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80022d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022d8:	fab3 f383 	clz	r3, r3
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	3301      	adds	r3, #1
 80022e0:	069b      	lsls	r3, r3, #26
 80022e2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d109      	bne.n	8002306 <HAL_ADC_ConfigChannel+0x602>
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	0e9b      	lsrs	r3, r3, #26
 80022f8:	3301      	adds	r3, #1
 80022fa:	f003 031f 	and.w	r3, r3, #31
 80022fe:	2101      	movs	r1, #1
 8002300:	fa01 f303 	lsl.w	r3, r1, r3
 8002304:	e017      	b.n	8002336 <HAL_ADC_ConfigChannel+0x632>
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	fa93 f3a3 	rbit	r3, r3
 8002312:	61bb      	str	r3, [r7, #24]
  return result;
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002318:	6a3b      	ldr	r3, [r7, #32]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800231e:	2320      	movs	r3, #32
 8002320:	e003      	b.n	800232a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002322:	6a3b      	ldr	r3, [r7, #32]
 8002324:	fab3 f383 	clz	r3, r3
 8002328:	b2db      	uxtb	r3, r3
 800232a:	3301      	adds	r3, #1
 800232c:	f003 031f 	and.w	r3, r3, #31
 8002330:	2101      	movs	r1, #1
 8002332:	fa01 f303 	lsl.w	r3, r1, r3
 8002336:	ea42 0103 	orr.w	r1, r2, r3
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002342:	2b00      	cmp	r3, #0
 8002344:	d10d      	bne.n	8002362 <HAL_ADC_ConfigChannel+0x65e>
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	0e9b      	lsrs	r3, r3, #26
 800234c:	3301      	adds	r3, #1
 800234e:	f003 021f 	and.w	r2, r3, #31
 8002352:	4613      	mov	r3, r2
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	4413      	add	r3, r2
 8002358:	3b1e      	subs	r3, #30
 800235a:	051b      	lsls	r3, r3, #20
 800235c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002360:	e01e      	b.n	80023a0 <HAL_ADC_ConfigChannel+0x69c>
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	fa93 f3a3 	rbit	r3, r3
 800236e:	60fb      	str	r3, [r7, #12]
  return result;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d104      	bne.n	8002384 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800237a:	2320      	movs	r3, #32
 800237c:	e006      	b.n	800238c <HAL_ADC_ConfigChannel+0x688>
 800237e:	bf00      	nop
 8002380:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	fab3 f383 	clz	r3, r3
 800238a:	b2db      	uxtb	r3, r3
 800238c:	3301      	adds	r3, #1
 800238e:	f003 021f 	and.w	r2, r3, #31
 8002392:	4613      	mov	r3, r2
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	4413      	add	r3, r2
 8002398:	3b1e      	subs	r3, #30
 800239a:	051b      	lsls	r3, r3, #20
 800239c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023a0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023a6:	4619      	mov	r1, r3
 80023a8:	f7ff fa85 	bl	80018b6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	4b44      	ldr	r3, [pc, #272]	@ (80024c4 <HAL_ADC_ConfigChannel+0x7c0>)
 80023b2:	4013      	ands	r3, r2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d07a      	beq.n	80024ae <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023b8:	4843      	ldr	r0, [pc, #268]	@ (80024c8 <HAL_ADC_ConfigChannel+0x7c4>)
 80023ba:	f7ff f9ed 	bl	8001798 <LL_ADC_GetCommonPathInternalCh>
 80023be:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a41      	ldr	r2, [pc, #260]	@ (80024cc <HAL_ADC_ConfigChannel+0x7c8>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d12c      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80023cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80023d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d126      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a3c      	ldr	r2, [pc, #240]	@ (80024d0 <HAL_ADC_ConfigChannel+0x7cc>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d004      	beq.n	80023ec <HAL_ADC_ConfigChannel+0x6e8>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a3b      	ldr	r2, [pc, #236]	@ (80024d4 <HAL_ADC_ConfigChannel+0x7d0>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d15d      	bne.n	80024a8 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80023f0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80023f4:	4619      	mov	r1, r3
 80023f6:	4834      	ldr	r0, [pc, #208]	@ (80024c8 <HAL_ADC_ConfigChannel+0x7c4>)
 80023f8:	f7ff f9bb 	bl	8001772 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023fc:	4b36      	ldr	r3, [pc, #216]	@ (80024d8 <HAL_ADC_ConfigChannel+0x7d4>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	099b      	lsrs	r3, r3, #6
 8002402:	4a36      	ldr	r2, [pc, #216]	@ (80024dc <HAL_ADC_ConfigChannel+0x7d8>)
 8002404:	fba2 2303 	umull	r2, r3, r2, r3
 8002408:	099b      	lsrs	r3, r3, #6
 800240a:	1c5a      	adds	r2, r3, #1
 800240c:	4613      	mov	r3, r2
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	4413      	add	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002416:	e002      	b.n	800241e <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	3b01      	subs	r3, #1
 800241c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1f9      	bne.n	8002418 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002424:	e040      	b.n	80024a8 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a2d      	ldr	r2, [pc, #180]	@ (80024e0 <HAL_ADC_ConfigChannel+0x7dc>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d118      	bne.n	8002462 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002430:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002434:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d112      	bne.n	8002462 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a23      	ldr	r2, [pc, #140]	@ (80024d0 <HAL_ADC_ConfigChannel+0x7cc>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d004      	beq.n	8002450 <HAL_ADC_ConfigChannel+0x74c>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a22      	ldr	r2, [pc, #136]	@ (80024d4 <HAL_ADC_ConfigChannel+0x7d0>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d12d      	bne.n	80024ac <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002450:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002454:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002458:	4619      	mov	r1, r3
 800245a:	481b      	ldr	r0, [pc, #108]	@ (80024c8 <HAL_ADC_ConfigChannel+0x7c4>)
 800245c:	f7ff f989 	bl	8001772 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002460:	e024      	b.n	80024ac <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a1f      	ldr	r2, [pc, #124]	@ (80024e4 <HAL_ADC_ConfigChannel+0x7e0>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d120      	bne.n	80024ae <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800246c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002470:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d11a      	bne.n	80024ae <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a14      	ldr	r2, [pc, #80]	@ (80024d0 <HAL_ADC_ConfigChannel+0x7cc>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d115      	bne.n	80024ae <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002482:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002486:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800248a:	4619      	mov	r1, r3
 800248c:	480e      	ldr	r0, [pc, #56]	@ (80024c8 <HAL_ADC_ConfigChannel+0x7c4>)
 800248e:	f7ff f970 	bl	8001772 <LL_ADC_SetCommonPathInternalCh>
 8002492:	e00c      	b.n	80024ae <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002498:	f043 0220 	orr.w	r2, r3, #32
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80024a6:	e002      	b.n	80024ae <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024a8:	bf00      	nop
 80024aa:	e000      	b.n	80024ae <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024ac:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80024b6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	37d8      	adds	r7, #216	@ 0xd8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	80080000 	.word	0x80080000
 80024c8:	50040300 	.word	0x50040300
 80024cc:	c7520000 	.word	0xc7520000
 80024d0:	50040000 	.word	0x50040000
 80024d4:	50040200 	.word	0x50040200
 80024d8:	20000038 	.word	0x20000038
 80024dc:	053e2d63 	.word	0x053e2d63
 80024e0:	cb840000 	.word	0xcb840000
 80024e4:	80000001 	.word	0x80000001

080024e8 <LL_ADC_IsEnabled>:
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d101      	bne.n	8002500 <LL_ADC_IsEnabled+0x18>
 80024fc:	2301      	movs	r3, #1
 80024fe:	e000      	b.n	8002502 <LL_ADC_IsEnabled+0x1a>
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr

0800250e <LL_ADC_REG_IsConversionOngoing>:
{
 800250e:	b480      	push	{r7}
 8002510:	b083      	sub	sp, #12
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f003 0304 	and.w	r3, r3, #4
 800251e:	2b04      	cmp	r3, #4
 8002520:	d101      	bne.n	8002526 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002522:	2301      	movs	r3, #1
 8002524:	e000      	b.n	8002528 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002526:	2300      	movs	r3, #0
}
 8002528:	4618      	mov	r0, r3
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002534:	b590      	push	{r4, r7, lr}
 8002536:	b09f      	sub	sp, #124	@ 0x7c
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800253e:	2300      	movs	r3, #0
 8002540:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800254a:	2b01      	cmp	r3, #1
 800254c:	d101      	bne.n	8002552 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800254e:	2302      	movs	r3, #2
 8002550:	e093      	b.n	800267a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800255a:	2300      	movs	r3, #0
 800255c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800255e:	2300      	movs	r3, #0
 8002560:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a47      	ldr	r2, [pc, #284]	@ (8002684 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d102      	bne.n	8002572 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800256c:	4b46      	ldr	r3, [pc, #280]	@ (8002688 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800256e:	60bb      	str	r3, [r7, #8]
 8002570:	e001      	b.n	8002576 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002572:	2300      	movs	r3, #0
 8002574:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d10b      	bne.n	8002594 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002580:	f043 0220 	orr.w	r2, r3, #32
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e072      	b.n	800267a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	4618      	mov	r0, r3
 8002598:	f7ff ffb9 	bl	800250e <LL_ADC_REG_IsConversionOngoing>
 800259c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff ffb3 	bl	800250e <LL_ADC_REG_IsConversionOngoing>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d154      	bne.n	8002658 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80025ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d151      	bne.n	8002658 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80025b4:	4b35      	ldr	r3, [pc, #212]	@ (800268c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80025b6:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d02c      	beq.n	800261a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80025c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	6859      	ldr	r1, [r3, #4]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80025d2:	035b      	lsls	r3, r3, #13
 80025d4:	430b      	orrs	r3, r1
 80025d6:	431a      	orrs	r2, r3
 80025d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025da:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025dc:	4829      	ldr	r0, [pc, #164]	@ (8002684 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80025de:	f7ff ff83 	bl	80024e8 <LL_ADC_IsEnabled>
 80025e2:	4604      	mov	r4, r0
 80025e4:	4828      	ldr	r0, [pc, #160]	@ (8002688 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80025e6:	f7ff ff7f 	bl	80024e8 <LL_ADC_IsEnabled>
 80025ea:	4603      	mov	r3, r0
 80025ec:	431c      	orrs	r4, r3
 80025ee:	4828      	ldr	r0, [pc, #160]	@ (8002690 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80025f0:	f7ff ff7a 	bl	80024e8 <LL_ADC_IsEnabled>
 80025f4:	4603      	mov	r3, r0
 80025f6:	4323      	orrs	r3, r4
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d137      	bne.n	800266c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80025fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002604:	f023 030f 	bic.w	r3, r3, #15
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	6811      	ldr	r1, [r2, #0]
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	6892      	ldr	r2, [r2, #8]
 8002610:	430a      	orrs	r2, r1
 8002612:	431a      	orrs	r2, r3
 8002614:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002616:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002618:	e028      	b.n	800266c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800261a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002622:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002624:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002626:	4817      	ldr	r0, [pc, #92]	@ (8002684 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002628:	f7ff ff5e 	bl	80024e8 <LL_ADC_IsEnabled>
 800262c:	4604      	mov	r4, r0
 800262e:	4816      	ldr	r0, [pc, #88]	@ (8002688 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002630:	f7ff ff5a 	bl	80024e8 <LL_ADC_IsEnabled>
 8002634:	4603      	mov	r3, r0
 8002636:	431c      	orrs	r4, r3
 8002638:	4815      	ldr	r0, [pc, #84]	@ (8002690 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800263a:	f7ff ff55 	bl	80024e8 <LL_ADC_IsEnabled>
 800263e:	4603      	mov	r3, r0
 8002640:	4323      	orrs	r3, r4
 8002642:	2b00      	cmp	r3, #0
 8002644:	d112      	bne.n	800266c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002646:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800264e:	f023 030f 	bic.w	r3, r3, #15
 8002652:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002654:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002656:	e009      	b.n	800266c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800265c:	f043 0220 	orr.w	r2, r3, #32
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800266a:	e000      	b.n	800266e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800266c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002676:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800267a:	4618      	mov	r0, r3
 800267c:	377c      	adds	r7, #124	@ 0x7c
 800267e:	46bd      	mov	sp, r7
 8002680:	bd90      	pop	{r4, r7, pc}
 8002682:	bf00      	nop
 8002684:	50040000 	.word	0x50040000
 8002688:	50040100 	.word	0x50040100
 800268c:	50040300 	.word	0x50040300
 8002690:	50040200 	.word	0x50040200

08002694 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002694:	b480      	push	{r7}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026a4:	4b0c      	ldr	r3, [pc, #48]	@ (80026d8 <__NVIC_SetPriorityGrouping+0x44>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026aa:	68ba      	ldr	r2, [r7, #8]
 80026ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80026b0:	4013      	ands	r3, r2
 80026b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80026c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026c6:	4a04      	ldr	r2, [pc, #16]	@ (80026d8 <__NVIC_SetPriorityGrouping+0x44>)
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	60d3      	str	r3, [r2, #12]
}
 80026cc:	bf00      	nop
 80026ce:	3714      	adds	r7, #20
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	e000ed00 	.word	0xe000ed00

080026dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026e0:	4b04      	ldr	r3, [pc, #16]	@ (80026f4 <__NVIC_GetPriorityGrouping+0x18>)
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	0a1b      	lsrs	r3, r3, #8
 80026e6:	f003 0307 	and.w	r3, r3, #7
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	e000ed00 	.word	0xe000ed00

080026f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	4603      	mov	r3, r0
 8002700:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002706:	2b00      	cmp	r3, #0
 8002708:	db0b      	blt.n	8002722 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800270a:	79fb      	ldrb	r3, [r7, #7]
 800270c:	f003 021f 	and.w	r2, r3, #31
 8002710:	4907      	ldr	r1, [pc, #28]	@ (8002730 <__NVIC_EnableIRQ+0x38>)
 8002712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002716:	095b      	lsrs	r3, r3, #5
 8002718:	2001      	movs	r0, #1
 800271a:	fa00 f202 	lsl.w	r2, r0, r2
 800271e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002722:	bf00      	nop
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	e000e100 	.word	0xe000e100

08002734 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	4603      	mov	r3, r0
 800273c:	6039      	str	r1, [r7, #0]
 800273e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002744:	2b00      	cmp	r3, #0
 8002746:	db0a      	blt.n	800275e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	b2da      	uxtb	r2, r3
 800274c:	490c      	ldr	r1, [pc, #48]	@ (8002780 <__NVIC_SetPriority+0x4c>)
 800274e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002752:	0112      	lsls	r2, r2, #4
 8002754:	b2d2      	uxtb	r2, r2
 8002756:	440b      	add	r3, r1
 8002758:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800275c:	e00a      	b.n	8002774 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	b2da      	uxtb	r2, r3
 8002762:	4908      	ldr	r1, [pc, #32]	@ (8002784 <__NVIC_SetPriority+0x50>)
 8002764:	79fb      	ldrb	r3, [r7, #7]
 8002766:	f003 030f 	and.w	r3, r3, #15
 800276a:	3b04      	subs	r3, #4
 800276c:	0112      	lsls	r2, r2, #4
 800276e:	b2d2      	uxtb	r2, r2
 8002770:	440b      	add	r3, r1
 8002772:	761a      	strb	r2, [r3, #24]
}
 8002774:	bf00      	nop
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	e000e100 	.word	0xe000e100
 8002784:	e000ed00 	.word	0xe000ed00

08002788 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002788:	b480      	push	{r7}
 800278a:	b089      	sub	sp, #36	@ 0x24
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f003 0307 	and.w	r3, r3, #7
 800279a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	f1c3 0307 	rsb	r3, r3, #7
 80027a2:	2b04      	cmp	r3, #4
 80027a4:	bf28      	it	cs
 80027a6:	2304      	movcs	r3, #4
 80027a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	3304      	adds	r3, #4
 80027ae:	2b06      	cmp	r3, #6
 80027b0:	d902      	bls.n	80027b8 <NVIC_EncodePriority+0x30>
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	3b03      	subs	r3, #3
 80027b6:	e000      	b.n	80027ba <NVIC_EncodePriority+0x32>
 80027b8:	2300      	movs	r3, #0
 80027ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027bc:	f04f 32ff 	mov.w	r2, #4294967295
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	43da      	mvns	r2, r3
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	401a      	ands	r2, r3
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027d0:	f04f 31ff 	mov.w	r1, #4294967295
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	fa01 f303 	lsl.w	r3, r1, r3
 80027da:	43d9      	mvns	r1, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027e0:	4313      	orrs	r3, r2
         );
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3724      	adds	r7, #36	@ 0x24
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
	...

080027f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	3b01      	subs	r3, #1
 80027fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002800:	d301      	bcc.n	8002806 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002802:	2301      	movs	r3, #1
 8002804:	e00f      	b.n	8002826 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002806:	4a0a      	ldr	r2, [pc, #40]	@ (8002830 <SysTick_Config+0x40>)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	3b01      	subs	r3, #1
 800280c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800280e:	210f      	movs	r1, #15
 8002810:	f04f 30ff 	mov.w	r0, #4294967295
 8002814:	f7ff ff8e 	bl	8002734 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002818:	4b05      	ldr	r3, [pc, #20]	@ (8002830 <SysTick_Config+0x40>)
 800281a:	2200      	movs	r2, #0
 800281c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800281e:	4b04      	ldr	r3, [pc, #16]	@ (8002830 <SysTick_Config+0x40>)
 8002820:	2207      	movs	r2, #7
 8002822:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	e000e010 	.word	0xe000e010

08002834 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f7ff ff29 	bl	8002694 <__NVIC_SetPriorityGrouping>
}
 8002842:	bf00      	nop
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b086      	sub	sp, #24
 800284e:	af00      	add	r7, sp, #0
 8002850:	4603      	mov	r3, r0
 8002852:	60b9      	str	r1, [r7, #8]
 8002854:	607a      	str	r2, [r7, #4]
 8002856:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002858:	2300      	movs	r3, #0
 800285a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800285c:	f7ff ff3e 	bl	80026dc <__NVIC_GetPriorityGrouping>
 8002860:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	68b9      	ldr	r1, [r7, #8]
 8002866:	6978      	ldr	r0, [r7, #20]
 8002868:	f7ff ff8e 	bl	8002788 <NVIC_EncodePriority>
 800286c:	4602      	mov	r2, r0
 800286e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002872:	4611      	mov	r1, r2
 8002874:	4618      	mov	r0, r3
 8002876:	f7ff ff5d 	bl	8002734 <__NVIC_SetPriority>
}
 800287a:	bf00      	nop
 800287c:	3718      	adds	r7, #24
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002882:	b580      	push	{r7, lr}
 8002884:	b082      	sub	sp, #8
 8002886:	af00      	add	r7, sp, #0
 8002888:	4603      	mov	r3, r0
 800288a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800288c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff ff31 	bl	80026f8 <__NVIC_EnableIRQ>
}
 8002896:	bf00      	nop
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b082      	sub	sp, #8
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f7ff ffa2 	bl	80027f0 <SysTick_Config>
 80028ac:	4603      	mov	r3, r0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
	...

080028b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b087      	sub	sp, #28
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028c2:	2300      	movs	r3, #0
 80028c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028c6:	e17f      	b.n	8002bc8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	2101      	movs	r1, #1
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	fa01 f303 	lsl.w	r3, r1, r3
 80028d4:	4013      	ands	r3, r2
 80028d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f000 8171 	beq.w	8002bc2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f003 0303 	and.w	r3, r3, #3
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d005      	beq.n	80028f8 <HAL_GPIO_Init+0x40>
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 0303 	and.w	r3, r3, #3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d130      	bne.n	800295a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	2203      	movs	r2, #3
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	43db      	mvns	r3, r3
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	4013      	ands	r3, r2
 800290e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	68da      	ldr	r2, [r3, #12]
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	4313      	orrs	r3, r2
 8002920:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800292e:	2201      	movs	r2, #1
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	43db      	mvns	r3, r3
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	4013      	ands	r3, r2
 800293c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	091b      	lsrs	r3, r3, #4
 8002944:	f003 0201 	and.w	r2, r3, #1
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	4313      	orrs	r3, r2
 8002952:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f003 0303 	and.w	r3, r3, #3
 8002962:	2b03      	cmp	r3, #3
 8002964:	d118      	bne.n	8002998 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800296a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800296c:	2201      	movs	r2, #1
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	43db      	mvns	r3, r3
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	4013      	ands	r3, r2
 800297a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	08db      	lsrs	r3, r3, #3
 8002982:	f003 0201 	and.w	r2, r3, #1
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	4313      	orrs	r3, r2
 8002990:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f003 0303 	and.w	r3, r3, #3
 80029a0:	2b03      	cmp	r3, #3
 80029a2:	d017      	beq.n	80029d4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	2203      	movs	r2, #3
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	43db      	mvns	r3, r3
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	4013      	ands	r3, r2
 80029ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	689a      	ldr	r2, [r3, #8]
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f003 0303 	and.w	r3, r3, #3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d123      	bne.n	8002a28 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	08da      	lsrs	r2, r3, #3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	3208      	adds	r2, #8
 80029e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	f003 0307 	and.w	r3, r3, #7
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	220f      	movs	r2, #15
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	43db      	mvns	r3, r3
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	4013      	ands	r3, r2
 8002a02:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	691a      	ldr	r2, [r3, #16]
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	08da      	lsrs	r2, r3, #3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	3208      	adds	r2, #8
 8002a22:	6939      	ldr	r1, [r7, #16]
 8002a24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	2203      	movs	r2, #3
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f003 0203 	and.w	r2, r3, #3
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f000 80ac 	beq.w	8002bc2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a6a:	4b5f      	ldr	r3, [pc, #380]	@ (8002be8 <HAL_GPIO_Init+0x330>)
 8002a6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a6e:	4a5e      	ldr	r2, [pc, #376]	@ (8002be8 <HAL_GPIO_Init+0x330>)
 8002a70:	f043 0301 	orr.w	r3, r3, #1
 8002a74:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a76:	4b5c      	ldr	r3, [pc, #368]	@ (8002be8 <HAL_GPIO_Init+0x330>)
 8002a78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	60bb      	str	r3, [r7, #8]
 8002a80:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a82:	4a5a      	ldr	r2, [pc, #360]	@ (8002bec <HAL_GPIO_Init+0x334>)
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	089b      	lsrs	r3, r3, #2
 8002a88:	3302      	adds	r3, #2
 8002a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	f003 0303 	and.w	r3, r3, #3
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	220f      	movs	r2, #15
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	43db      	mvns	r3, r3
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002aac:	d025      	beq.n	8002afa <HAL_GPIO_Init+0x242>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a4f      	ldr	r2, [pc, #316]	@ (8002bf0 <HAL_GPIO_Init+0x338>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d01f      	beq.n	8002af6 <HAL_GPIO_Init+0x23e>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a4e      	ldr	r2, [pc, #312]	@ (8002bf4 <HAL_GPIO_Init+0x33c>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d019      	beq.n	8002af2 <HAL_GPIO_Init+0x23a>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a4d      	ldr	r2, [pc, #308]	@ (8002bf8 <HAL_GPIO_Init+0x340>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d013      	beq.n	8002aee <HAL_GPIO_Init+0x236>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a4c      	ldr	r2, [pc, #304]	@ (8002bfc <HAL_GPIO_Init+0x344>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d00d      	beq.n	8002aea <HAL_GPIO_Init+0x232>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a4b      	ldr	r2, [pc, #300]	@ (8002c00 <HAL_GPIO_Init+0x348>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d007      	beq.n	8002ae6 <HAL_GPIO_Init+0x22e>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a4a      	ldr	r2, [pc, #296]	@ (8002c04 <HAL_GPIO_Init+0x34c>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d101      	bne.n	8002ae2 <HAL_GPIO_Init+0x22a>
 8002ade:	2306      	movs	r3, #6
 8002ae0:	e00c      	b.n	8002afc <HAL_GPIO_Init+0x244>
 8002ae2:	2307      	movs	r3, #7
 8002ae4:	e00a      	b.n	8002afc <HAL_GPIO_Init+0x244>
 8002ae6:	2305      	movs	r3, #5
 8002ae8:	e008      	b.n	8002afc <HAL_GPIO_Init+0x244>
 8002aea:	2304      	movs	r3, #4
 8002aec:	e006      	b.n	8002afc <HAL_GPIO_Init+0x244>
 8002aee:	2303      	movs	r3, #3
 8002af0:	e004      	b.n	8002afc <HAL_GPIO_Init+0x244>
 8002af2:	2302      	movs	r3, #2
 8002af4:	e002      	b.n	8002afc <HAL_GPIO_Init+0x244>
 8002af6:	2301      	movs	r3, #1
 8002af8:	e000      	b.n	8002afc <HAL_GPIO_Init+0x244>
 8002afa:	2300      	movs	r3, #0
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	f002 0203 	and.w	r2, r2, #3
 8002b02:	0092      	lsls	r2, r2, #2
 8002b04:	4093      	lsls	r3, r2
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b0c:	4937      	ldr	r1, [pc, #220]	@ (8002bec <HAL_GPIO_Init+0x334>)
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	089b      	lsrs	r3, r3, #2
 8002b12:	3302      	adds	r3, #2
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b1a:	4b3b      	ldr	r3, [pc, #236]	@ (8002c08 <HAL_GPIO_Init+0x350>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	43db      	mvns	r3, r3
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	4013      	ands	r3, r2
 8002b28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d003      	beq.n	8002b3e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b3e:	4a32      	ldr	r2, [pc, #200]	@ (8002c08 <HAL_GPIO_Init+0x350>)
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b44:	4b30      	ldr	r3, [pc, #192]	@ (8002c08 <HAL_GPIO_Init+0x350>)
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	4013      	ands	r3, r2
 8002b52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d003      	beq.n	8002b68 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b68:	4a27      	ldr	r2, [pc, #156]	@ (8002c08 <HAL_GPIO_Init+0x350>)
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002b6e:	4b26      	ldr	r3, [pc, #152]	@ (8002c08 <HAL_GPIO_Init+0x350>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	43db      	mvns	r3, r3
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d003      	beq.n	8002b92 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b92:	4a1d      	ldr	r2, [pc, #116]	@ (8002c08 <HAL_GPIO_Init+0x350>)
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002b98:	4b1b      	ldr	r3, [pc, #108]	@ (8002c08 <HAL_GPIO_Init+0x350>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d003      	beq.n	8002bbc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002bbc:	4a12      	ldr	r2, [pc, #72]	@ (8002c08 <HAL_GPIO_Init+0x350>)
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	fa22 f303 	lsr.w	r3, r2, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f47f ae78 	bne.w	80028c8 <HAL_GPIO_Init+0x10>
  }
}
 8002bd8:	bf00      	nop
 8002bda:	bf00      	nop
 8002bdc:	371c      	adds	r7, #28
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	40021000 	.word	0x40021000
 8002bec:	40010000 	.word	0x40010000
 8002bf0:	48000400 	.word	0x48000400
 8002bf4:	48000800 	.word	0x48000800
 8002bf8:	48000c00 	.word	0x48000c00
 8002bfc:	48001000 	.word	0x48001000
 8002c00:	48001400 	.word	0x48001400
 8002c04:	48001800 	.word	0x48001800
 8002c08:	40010400 	.word	0x40010400

08002c0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	460b      	mov	r3, r1
 8002c16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	691a      	ldr	r2, [r3, #16]
 8002c1c:	887b      	ldrh	r3, [r7, #2]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d002      	beq.n	8002c2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c24:	2301      	movs	r3, #1
 8002c26:	73fb      	strb	r3, [r7, #15]
 8002c28:	e001      	b.n	8002c2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3714      	adds	r7, #20
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	460b      	mov	r3, r1
 8002c46:	807b      	strh	r3, [r7, #2]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c4c:	787b      	ldrb	r3, [r7, #1]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d003      	beq.n	8002c5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c52:	887a      	ldrh	r2, [r7, #2]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c58:	e002      	b.n	8002c60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c5a:	887a      	ldrh	r2, [r7, #2]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	4603      	mov	r3, r0
 8002c74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002c76:	4b08      	ldr	r3, [pc, #32]	@ (8002c98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c78:	695a      	ldr	r2, [r3, #20]
 8002c7a:	88fb      	ldrh	r3, [r7, #6]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d006      	beq.n	8002c90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c82:	4a05      	ldr	r2, [pc, #20]	@ (8002c98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c84:	88fb      	ldrh	r3, [r7, #6]
 8002c86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c88:	88fb      	ldrh	r3, [r7, #6]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7fd fdd8 	bl	8000840 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c90:	bf00      	nop
 8002c92:	3708      	adds	r7, #8
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	40010400 	.word	0x40010400

08002c9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e08d      	b.n	8002dca <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d106      	bne.n	8002cc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7fe fa04 	bl	80010d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2224      	movs	r2, #36	@ 0x24
 8002ccc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f022 0201 	bic.w	r2, r2, #1
 8002cde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685a      	ldr	r2, [r3, #4]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002cec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002cfc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d107      	bne.n	8002d16 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689a      	ldr	r2, [r3, #8]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d12:	609a      	str	r2, [r3, #8]
 8002d14:	e006      	b.n	8002d24 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	689a      	ldr	r2, [r3, #8]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002d22:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d108      	bne.n	8002d3e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	685a      	ldr	r2, [r3, #4]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d3a:	605a      	str	r2, [r3, #4]
 8002d3c:	e007      	b.n	8002d4e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d4c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	6812      	ldr	r2, [r2, #0]
 8002d58:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002d5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d60:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68da      	ldr	r2, [r3, #12]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002d70:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	691a      	ldr	r2, [r3, #16]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	69d9      	ldr	r1, [r3, #28]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a1a      	ldr	r2, [r3, #32]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f042 0201 	orr.w	r2, r2, #1
 8002daa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2220      	movs	r2, #32
 8002db6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b083      	sub	sp, #12
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
 8002dda:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	2b20      	cmp	r3, #32
 8002de6:	d138      	bne.n	8002e5a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d101      	bne.n	8002df6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002df2:	2302      	movs	r3, #2
 8002df4:	e032      	b.n	8002e5c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2224      	movs	r2, #36	@ 0x24
 8002e02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f022 0201 	bic.w	r2, r2, #1
 8002e14:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002e24:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	6819      	ldr	r1, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	430a      	orrs	r2, r1
 8002e34:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f042 0201 	orr.w	r2, r2, #1
 8002e44:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2220      	movs	r2, #32
 8002e4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e56:	2300      	movs	r3, #0
 8002e58:	e000      	b.n	8002e5c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e5a:	2302      	movs	r3, #2
  }
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b20      	cmp	r3, #32
 8002e7c:	d139      	bne.n	8002ef2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d101      	bne.n	8002e8c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002e88:	2302      	movs	r3, #2
 8002e8a:	e033      	b.n	8002ef4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2224      	movs	r2, #36	@ 0x24
 8002e98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 0201 	bic.w	r2, r2, #1
 8002eaa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002eba:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	021b      	lsls	r3, r3, #8
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f042 0201 	orr.w	r2, r2, #1
 8002edc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2220      	movs	r2, #32
 8002ee2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	e000      	b.n	8002ef4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ef2:	2302      	movs	r3, #2
  }
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3714      	adds	r7, #20
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002f04:	4b04      	ldr	r3, [pc, #16]	@ (8002f18 <HAL_PWREx_GetVoltageRange+0x18>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	40007000 	.word	0x40007000

08002f1c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f2a:	d130      	bne.n	8002f8e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f2c:	4b23      	ldr	r3, [pc, #140]	@ (8002fbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f38:	d038      	beq.n	8002fac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f3a:	4b20      	ldr	r3, [pc, #128]	@ (8002fbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f42:	4a1e      	ldr	r2, [pc, #120]	@ (8002fbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f44:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f48:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f4a:	4b1d      	ldr	r3, [pc, #116]	@ (8002fc0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2232      	movs	r2, #50	@ 0x32
 8002f50:	fb02 f303 	mul.w	r3, r2, r3
 8002f54:	4a1b      	ldr	r2, [pc, #108]	@ (8002fc4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002f56:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5a:	0c9b      	lsrs	r3, r3, #18
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f60:	e002      	b.n	8002f68 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	3b01      	subs	r3, #1
 8002f66:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f68:	4b14      	ldr	r3, [pc, #80]	@ (8002fbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f6a:	695b      	ldr	r3, [r3, #20]
 8002f6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f74:	d102      	bne.n	8002f7c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1f2      	bne.n	8002f62 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f7c:	4b0f      	ldr	r3, [pc, #60]	@ (8002fbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f88:	d110      	bne.n	8002fac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e00f      	b.n	8002fae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f8e:	4b0b      	ldr	r3, [pc, #44]	@ (8002fbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f9a:	d007      	beq.n	8002fac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f9c:	4b07      	ldr	r3, [pc, #28]	@ (8002fbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002fa4:	4a05      	ldr	r2, [pc, #20]	@ (8002fbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fa6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002faa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3714      	adds	r7, #20
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	40007000 	.word	0x40007000
 8002fc0:	20000038 	.word	0x20000038
 8002fc4:	431bde83 	.word	0x431bde83

08002fc8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b088      	sub	sp, #32
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e3ca      	b.n	8003770 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fda:	4b97      	ldr	r3, [pc, #604]	@ (8003238 <HAL_RCC_OscConfig+0x270>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 030c 	and.w	r3, r3, #12
 8002fe2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fe4:	4b94      	ldr	r3, [pc, #592]	@ (8003238 <HAL_RCC_OscConfig+0x270>)
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	f003 0303 	and.w	r3, r3, #3
 8002fec:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0310 	and.w	r3, r3, #16
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f000 80e4 	beq.w	80031c4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d007      	beq.n	8003012 <HAL_RCC_OscConfig+0x4a>
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	2b0c      	cmp	r3, #12
 8003006:	f040 808b 	bne.w	8003120 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	2b01      	cmp	r3, #1
 800300e:	f040 8087 	bne.w	8003120 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003012:	4b89      	ldr	r3, [pc, #548]	@ (8003238 <HAL_RCC_OscConfig+0x270>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d005      	beq.n	800302a <HAL_RCC_OscConfig+0x62>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e3a2      	b.n	8003770 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a1a      	ldr	r2, [r3, #32]
 800302e:	4b82      	ldr	r3, [pc, #520]	@ (8003238 <HAL_RCC_OscConfig+0x270>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0308 	and.w	r3, r3, #8
 8003036:	2b00      	cmp	r3, #0
 8003038:	d004      	beq.n	8003044 <HAL_RCC_OscConfig+0x7c>
 800303a:	4b7f      	ldr	r3, [pc, #508]	@ (8003238 <HAL_RCC_OscConfig+0x270>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003042:	e005      	b.n	8003050 <HAL_RCC_OscConfig+0x88>
 8003044:	4b7c      	ldr	r3, [pc, #496]	@ (8003238 <HAL_RCC_OscConfig+0x270>)
 8003046:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800304a:	091b      	lsrs	r3, r3, #4
 800304c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003050:	4293      	cmp	r3, r2
 8003052:	d223      	bcs.n	800309c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a1b      	ldr	r3, [r3, #32]
 8003058:	4618      	mov	r0, r3
 800305a:	f000 fd55 	bl	8003b08 <RCC_SetFlashLatencyFromMSIRange>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e383      	b.n	8003770 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003068:	4b73      	ldr	r3, [pc, #460]	@ (8003238 <HAL_RCC_OscConfig+0x270>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a72      	ldr	r2, [pc, #456]	@ (8003238 <HAL_RCC_OscConfig+0x270>)
 800306e:	f043 0308 	orr.w	r3, r3, #8
 8003072:	6013      	str	r3, [r2, #0]
 8003074:	4b70      	ldr	r3, [pc, #448]	@ (8003238 <HAL_RCC_OscConfig+0x270>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a1b      	ldr	r3, [r3, #32]
 8003080:	496d      	ldr	r1, [pc, #436]	@ (8003238 <HAL_RCC_OscConfig+0x270>)
 8003082:	4313      	orrs	r3, r2
 8003084:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003086:	4b6c      	ldr	r3, [pc, #432]	@ (8003238 <HAL_RCC_OscConfig+0x270>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	021b      	lsls	r3, r3, #8
 8003094:	4968      	ldr	r1, [pc, #416]	@ (8003238 <HAL_RCC_OscConfig+0x270>)
 8003096:	4313      	orrs	r3, r2
 8003098:	604b      	str	r3, [r1, #4]
 800309a:	e025      	b.n	80030e8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800309c:	4b66      	ldr	r3, [pc, #408]	@ (8003238 <HAL_RCC_OscConfig+0x270>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a65      	ldr	r2, [pc, #404]	@ (8003238 <HAL_RCC_OscConfig+0x270>)
 80030a2:	f043 0308 	orr.w	r3, r3, #8
 80030a6:	6013      	str	r3, [r2, #0]
 80030a8:	4b63      	ldr	r3, [pc, #396]	@ (8003238 <HAL_RCC_OscConfig+0x270>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a1b      	ldr	r3, [r3, #32]
 80030b4:	4960      	ldr	r1, [pc, #384]	@ (8003238 <HAL_RCC_OscConfig+0x270>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030ba:	4b5f      	ldr	r3, [pc, #380]	@ (8003238 <HAL_RCC_OscConfig+0x270>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	69db      	ldr	r3, [r3, #28]
 80030c6:	021b      	lsls	r3, r3, #8
 80030c8:	495b      	ldr	r1, [pc, #364]	@ (8003238 <HAL_RCC_OscConfig+0x270>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d109      	bne.n	80030e8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	4618      	mov	r0, r3
 80030da:	f000 fd15 	bl	8003b08 <RCC_SetFlashLatencyFromMSIRange>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e343      	b.n	8003770 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030e8:	f000 fc4a 	bl	8003980 <HAL_RCC_GetSysClockFreq>
 80030ec:	4602      	mov	r2, r0
 80030ee:	4b52      	ldr	r3, [pc, #328]	@ (8003238 <HAL_RCC_OscConfig+0x270>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	091b      	lsrs	r3, r3, #4
 80030f4:	f003 030f 	and.w	r3, r3, #15
 80030f8:	4950      	ldr	r1, [pc, #320]	@ (800323c <HAL_RCC_OscConfig+0x274>)
 80030fa:	5ccb      	ldrb	r3, [r1, r3]
 80030fc:	f003 031f 	and.w	r3, r3, #31
 8003100:	fa22 f303 	lsr.w	r3, r2, r3
 8003104:	4a4e      	ldr	r2, [pc, #312]	@ (8003240 <HAL_RCC_OscConfig+0x278>)
 8003106:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003108:	4b4e      	ldr	r3, [pc, #312]	@ (8003244 <HAL_RCC_OscConfig+0x27c>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4618      	mov	r0, r3
 800310e:	f7fe fa9d 	bl	800164c <HAL_InitTick>
 8003112:	4603      	mov	r3, r0
 8003114:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003116:	7bfb      	ldrb	r3, [r7, #15]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d052      	beq.n	80031c2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800311c:	7bfb      	ldrb	r3, [r7, #15]
 800311e:	e327      	b.n	8003770 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d032      	beq.n	800318e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003128:	4b43      	ldr	r3, [pc, #268]	@ (8003238 <HAL_RCC_OscConfig+0x270>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a42      	ldr	r2, [pc, #264]	@ (8003238 <HAL_RCC_OscConfig+0x270>)
 800312e:	f043 0301 	orr.w	r3, r3, #1
 8003132:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003134:	f7fe fada 	bl	80016ec <HAL_GetTick>
 8003138:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800313a:	e008      	b.n	800314e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800313c:	f7fe fad6 	bl	80016ec <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e310      	b.n	8003770 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800314e:	4b3a      	ldr	r3, [pc, #232]	@ (8003238 <HAL_RCC_OscConfig+0x270>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d0f0      	beq.n	800313c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800315a:	4b37      	ldr	r3, [pc, #220]	@ (8003238 <HAL_RCC_OscConfig+0x270>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a36      	ldr	r2, [pc, #216]	@ (8003238 <HAL_RCC_OscConfig+0x270>)
 8003160:	f043 0308 	orr.w	r3, r3, #8
 8003164:	6013      	str	r3, [r2, #0]
 8003166:	4b34      	ldr	r3, [pc, #208]	@ (8003238 <HAL_RCC_OscConfig+0x270>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	4931      	ldr	r1, [pc, #196]	@ (8003238 <HAL_RCC_OscConfig+0x270>)
 8003174:	4313      	orrs	r3, r2
 8003176:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003178:	4b2f      	ldr	r3, [pc, #188]	@ (8003238 <HAL_RCC_OscConfig+0x270>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	69db      	ldr	r3, [r3, #28]
 8003184:	021b      	lsls	r3, r3, #8
 8003186:	492c      	ldr	r1, [pc, #176]	@ (8003238 <HAL_RCC_OscConfig+0x270>)
 8003188:	4313      	orrs	r3, r2
 800318a:	604b      	str	r3, [r1, #4]
 800318c:	e01a      	b.n	80031c4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800318e:	4b2a      	ldr	r3, [pc, #168]	@ (8003238 <HAL_RCC_OscConfig+0x270>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a29      	ldr	r2, [pc, #164]	@ (8003238 <HAL_RCC_OscConfig+0x270>)
 8003194:	f023 0301 	bic.w	r3, r3, #1
 8003198:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800319a:	f7fe faa7 	bl	80016ec <HAL_GetTick>
 800319e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031a0:	e008      	b.n	80031b4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031a2:	f7fe faa3 	bl	80016ec <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d901      	bls.n	80031b4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e2dd      	b.n	8003770 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031b4:	4b20      	ldr	r3, [pc, #128]	@ (8003238 <HAL_RCC_OscConfig+0x270>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d1f0      	bne.n	80031a2 <HAL_RCC_OscConfig+0x1da>
 80031c0:	e000      	b.n	80031c4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031c2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d074      	beq.n	80032ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	2b08      	cmp	r3, #8
 80031d4:	d005      	beq.n	80031e2 <HAL_RCC_OscConfig+0x21a>
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	2b0c      	cmp	r3, #12
 80031da:	d10e      	bne.n	80031fa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	2b03      	cmp	r3, #3
 80031e0:	d10b      	bne.n	80031fa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031e2:	4b15      	ldr	r3, [pc, #84]	@ (8003238 <HAL_RCC_OscConfig+0x270>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d064      	beq.n	80032b8 <HAL_RCC_OscConfig+0x2f0>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d160      	bne.n	80032b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e2ba      	b.n	8003770 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003202:	d106      	bne.n	8003212 <HAL_RCC_OscConfig+0x24a>
 8003204:	4b0c      	ldr	r3, [pc, #48]	@ (8003238 <HAL_RCC_OscConfig+0x270>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a0b      	ldr	r2, [pc, #44]	@ (8003238 <HAL_RCC_OscConfig+0x270>)
 800320a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800320e:	6013      	str	r3, [r2, #0]
 8003210:	e026      	b.n	8003260 <HAL_RCC_OscConfig+0x298>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800321a:	d115      	bne.n	8003248 <HAL_RCC_OscConfig+0x280>
 800321c:	4b06      	ldr	r3, [pc, #24]	@ (8003238 <HAL_RCC_OscConfig+0x270>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a05      	ldr	r2, [pc, #20]	@ (8003238 <HAL_RCC_OscConfig+0x270>)
 8003222:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003226:	6013      	str	r3, [r2, #0]
 8003228:	4b03      	ldr	r3, [pc, #12]	@ (8003238 <HAL_RCC_OscConfig+0x270>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a02      	ldr	r2, [pc, #8]	@ (8003238 <HAL_RCC_OscConfig+0x270>)
 800322e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003232:	6013      	str	r3, [r2, #0]
 8003234:	e014      	b.n	8003260 <HAL_RCC_OscConfig+0x298>
 8003236:	bf00      	nop
 8003238:	40021000 	.word	0x40021000
 800323c:	08005944 	.word	0x08005944
 8003240:	20000038 	.word	0x20000038
 8003244:	2000003c 	.word	0x2000003c
 8003248:	4ba0      	ldr	r3, [pc, #640]	@ (80034cc <HAL_RCC_OscConfig+0x504>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a9f      	ldr	r2, [pc, #636]	@ (80034cc <HAL_RCC_OscConfig+0x504>)
 800324e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003252:	6013      	str	r3, [r2, #0]
 8003254:	4b9d      	ldr	r3, [pc, #628]	@ (80034cc <HAL_RCC_OscConfig+0x504>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a9c      	ldr	r2, [pc, #624]	@ (80034cc <HAL_RCC_OscConfig+0x504>)
 800325a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800325e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d013      	beq.n	8003290 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003268:	f7fe fa40 	bl	80016ec <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003270:	f7fe fa3c 	bl	80016ec <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b64      	cmp	r3, #100	@ 0x64
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e276      	b.n	8003770 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003282:	4b92      	ldr	r3, [pc, #584]	@ (80034cc <HAL_RCC_OscConfig+0x504>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d0f0      	beq.n	8003270 <HAL_RCC_OscConfig+0x2a8>
 800328e:	e014      	b.n	80032ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003290:	f7fe fa2c 	bl	80016ec <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003298:	f7fe fa28 	bl	80016ec <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b64      	cmp	r3, #100	@ 0x64
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e262      	b.n	8003770 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032aa:	4b88      	ldr	r3, [pc, #544]	@ (80034cc <HAL_RCC_OscConfig+0x504>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1f0      	bne.n	8003298 <HAL_RCC_OscConfig+0x2d0>
 80032b6:	e000      	b.n	80032ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d060      	beq.n	8003388 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	2b04      	cmp	r3, #4
 80032ca:	d005      	beq.n	80032d8 <HAL_RCC_OscConfig+0x310>
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	2b0c      	cmp	r3, #12
 80032d0:	d119      	bne.n	8003306 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d116      	bne.n	8003306 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032d8:	4b7c      	ldr	r3, [pc, #496]	@ (80034cc <HAL_RCC_OscConfig+0x504>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d005      	beq.n	80032f0 <HAL_RCC_OscConfig+0x328>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d101      	bne.n	80032f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e23f      	b.n	8003770 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032f0:	4b76      	ldr	r3, [pc, #472]	@ (80034cc <HAL_RCC_OscConfig+0x504>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	061b      	lsls	r3, r3, #24
 80032fe:	4973      	ldr	r1, [pc, #460]	@ (80034cc <HAL_RCC_OscConfig+0x504>)
 8003300:	4313      	orrs	r3, r2
 8003302:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003304:	e040      	b.n	8003388 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d023      	beq.n	8003356 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800330e:	4b6f      	ldr	r3, [pc, #444]	@ (80034cc <HAL_RCC_OscConfig+0x504>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a6e      	ldr	r2, [pc, #440]	@ (80034cc <HAL_RCC_OscConfig+0x504>)
 8003314:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003318:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800331a:	f7fe f9e7 	bl	80016ec <HAL_GetTick>
 800331e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003320:	e008      	b.n	8003334 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003322:	f7fe f9e3 	bl	80016ec <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	2b02      	cmp	r3, #2
 800332e:	d901      	bls.n	8003334 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e21d      	b.n	8003770 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003334:	4b65      	ldr	r3, [pc, #404]	@ (80034cc <HAL_RCC_OscConfig+0x504>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800333c:	2b00      	cmp	r3, #0
 800333e:	d0f0      	beq.n	8003322 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003340:	4b62      	ldr	r3, [pc, #392]	@ (80034cc <HAL_RCC_OscConfig+0x504>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	061b      	lsls	r3, r3, #24
 800334e:	495f      	ldr	r1, [pc, #380]	@ (80034cc <HAL_RCC_OscConfig+0x504>)
 8003350:	4313      	orrs	r3, r2
 8003352:	604b      	str	r3, [r1, #4]
 8003354:	e018      	b.n	8003388 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003356:	4b5d      	ldr	r3, [pc, #372]	@ (80034cc <HAL_RCC_OscConfig+0x504>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a5c      	ldr	r2, [pc, #368]	@ (80034cc <HAL_RCC_OscConfig+0x504>)
 800335c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003360:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003362:	f7fe f9c3 	bl	80016ec <HAL_GetTick>
 8003366:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003368:	e008      	b.n	800337c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800336a:	f7fe f9bf 	bl	80016ec <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d901      	bls.n	800337c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e1f9      	b.n	8003770 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800337c:	4b53      	ldr	r3, [pc, #332]	@ (80034cc <HAL_RCC_OscConfig+0x504>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1f0      	bne.n	800336a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0308 	and.w	r3, r3, #8
 8003390:	2b00      	cmp	r3, #0
 8003392:	d03c      	beq.n	800340e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	695b      	ldr	r3, [r3, #20]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d01c      	beq.n	80033d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800339c:	4b4b      	ldr	r3, [pc, #300]	@ (80034cc <HAL_RCC_OscConfig+0x504>)
 800339e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033a2:	4a4a      	ldr	r2, [pc, #296]	@ (80034cc <HAL_RCC_OscConfig+0x504>)
 80033a4:	f043 0301 	orr.w	r3, r3, #1
 80033a8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ac:	f7fe f99e 	bl	80016ec <HAL_GetTick>
 80033b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033b4:	f7fe f99a 	bl	80016ec <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e1d4      	b.n	8003770 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033c6:	4b41      	ldr	r3, [pc, #260]	@ (80034cc <HAL_RCC_OscConfig+0x504>)
 80033c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d0ef      	beq.n	80033b4 <HAL_RCC_OscConfig+0x3ec>
 80033d4:	e01b      	b.n	800340e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033d6:	4b3d      	ldr	r3, [pc, #244]	@ (80034cc <HAL_RCC_OscConfig+0x504>)
 80033d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033dc:	4a3b      	ldr	r2, [pc, #236]	@ (80034cc <HAL_RCC_OscConfig+0x504>)
 80033de:	f023 0301 	bic.w	r3, r3, #1
 80033e2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e6:	f7fe f981 	bl	80016ec <HAL_GetTick>
 80033ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033ec:	e008      	b.n	8003400 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033ee:	f7fe f97d 	bl	80016ec <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d901      	bls.n	8003400 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e1b7      	b.n	8003770 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003400:	4b32      	ldr	r3, [pc, #200]	@ (80034cc <HAL_RCC_OscConfig+0x504>)
 8003402:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1ef      	bne.n	80033ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0304 	and.w	r3, r3, #4
 8003416:	2b00      	cmp	r3, #0
 8003418:	f000 80a6 	beq.w	8003568 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800341c:	2300      	movs	r3, #0
 800341e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003420:	4b2a      	ldr	r3, [pc, #168]	@ (80034cc <HAL_RCC_OscConfig+0x504>)
 8003422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003424:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d10d      	bne.n	8003448 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800342c:	4b27      	ldr	r3, [pc, #156]	@ (80034cc <HAL_RCC_OscConfig+0x504>)
 800342e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003430:	4a26      	ldr	r2, [pc, #152]	@ (80034cc <HAL_RCC_OscConfig+0x504>)
 8003432:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003436:	6593      	str	r3, [r2, #88]	@ 0x58
 8003438:	4b24      	ldr	r3, [pc, #144]	@ (80034cc <HAL_RCC_OscConfig+0x504>)
 800343a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800343c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003440:	60bb      	str	r3, [r7, #8]
 8003442:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003444:	2301      	movs	r3, #1
 8003446:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003448:	4b21      	ldr	r3, [pc, #132]	@ (80034d0 <HAL_RCC_OscConfig+0x508>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003450:	2b00      	cmp	r3, #0
 8003452:	d118      	bne.n	8003486 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003454:	4b1e      	ldr	r3, [pc, #120]	@ (80034d0 <HAL_RCC_OscConfig+0x508>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a1d      	ldr	r2, [pc, #116]	@ (80034d0 <HAL_RCC_OscConfig+0x508>)
 800345a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800345e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003460:	f7fe f944 	bl	80016ec <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003468:	f7fe f940 	bl	80016ec <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e17a      	b.n	8003770 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800347a:	4b15      	ldr	r3, [pc, #84]	@ (80034d0 <HAL_RCC_OscConfig+0x508>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003482:	2b00      	cmp	r3, #0
 8003484:	d0f0      	beq.n	8003468 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d108      	bne.n	80034a0 <HAL_RCC_OscConfig+0x4d8>
 800348e:	4b0f      	ldr	r3, [pc, #60]	@ (80034cc <HAL_RCC_OscConfig+0x504>)
 8003490:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003494:	4a0d      	ldr	r2, [pc, #52]	@ (80034cc <HAL_RCC_OscConfig+0x504>)
 8003496:	f043 0301 	orr.w	r3, r3, #1
 800349a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800349e:	e029      	b.n	80034f4 <HAL_RCC_OscConfig+0x52c>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	2b05      	cmp	r3, #5
 80034a6:	d115      	bne.n	80034d4 <HAL_RCC_OscConfig+0x50c>
 80034a8:	4b08      	ldr	r3, [pc, #32]	@ (80034cc <HAL_RCC_OscConfig+0x504>)
 80034aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034ae:	4a07      	ldr	r2, [pc, #28]	@ (80034cc <HAL_RCC_OscConfig+0x504>)
 80034b0:	f043 0304 	orr.w	r3, r3, #4
 80034b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80034b8:	4b04      	ldr	r3, [pc, #16]	@ (80034cc <HAL_RCC_OscConfig+0x504>)
 80034ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034be:	4a03      	ldr	r2, [pc, #12]	@ (80034cc <HAL_RCC_OscConfig+0x504>)
 80034c0:	f043 0301 	orr.w	r3, r3, #1
 80034c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80034c8:	e014      	b.n	80034f4 <HAL_RCC_OscConfig+0x52c>
 80034ca:	bf00      	nop
 80034cc:	40021000 	.word	0x40021000
 80034d0:	40007000 	.word	0x40007000
 80034d4:	4b9c      	ldr	r3, [pc, #624]	@ (8003748 <HAL_RCC_OscConfig+0x780>)
 80034d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034da:	4a9b      	ldr	r2, [pc, #620]	@ (8003748 <HAL_RCC_OscConfig+0x780>)
 80034dc:	f023 0301 	bic.w	r3, r3, #1
 80034e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80034e4:	4b98      	ldr	r3, [pc, #608]	@ (8003748 <HAL_RCC_OscConfig+0x780>)
 80034e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034ea:	4a97      	ldr	r2, [pc, #604]	@ (8003748 <HAL_RCC_OscConfig+0x780>)
 80034ec:	f023 0304 	bic.w	r3, r3, #4
 80034f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d016      	beq.n	800352a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034fc:	f7fe f8f6 	bl	80016ec <HAL_GetTick>
 8003500:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003502:	e00a      	b.n	800351a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003504:	f7fe f8f2 	bl	80016ec <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003512:	4293      	cmp	r3, r2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e12a      	b.n	8003770 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800351a:	4b8b      	ldr	r3, [pc, #556]	@ (8003748 <HAL_RCC_OscConfig+0x780>)
 800351c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003520:	f003 0302 	and.w	r3, r3, #2
 8003524:	2b00      	cmp	r3, #0
 8003526:	d0ed      	beq.n	8003504 <HAL_RCC_OscConfig+0x53c>
 8003528:	e015      	b.n	8003556 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800352a:	f7fe f8df 	bl	80016ec <HAL_GetTick>
 800352e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003530:	e00a      	b.n	8003548 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003532:	f7fe f8db 	bl	80016ec <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003540:	4293      	cmp	r3, r2
 8003542:	d901      	bls.n	8003548 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e113      	b.n	8003770 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003548:	4b7f      	ldr	r3, [pc, #508]	@ (8003748 <HAL_RCC_OscConfig+0x780>)
 800354a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1ed      	bne.n	8003532 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003556:	7ffb      	ldrb	r3, [r7, #31]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d105      	bne.n	8003568 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800355c:	4b7a      	ldr	r3, [pc, #488]	@ (8003748 <HAL_RCC_OscConfig+0x780>)
 800355e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003560:	4a79      	ldr	r2, [pc, #484]	@ (8003748 <HAL_RCC_OscConfig+0x780>)
 8003562:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003566:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 80fe 	beq.w	800376e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003576:	2b02      	cmp	r3, #2
 8003578:	f040 80d0 	bne.w	800371c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800357c:	4b72      	ldr	r3, [pc, #456]	@ (8003748 <HAL_RCC_OscConfig+0x780>)
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	f003 0203 	and.w	r2, r3, #3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800358c:	429a      	cmp	r2, r3
 800358e:	d130      	bne.n	80035f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800359a:	3b01      	subs	r3, #1
 800359c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800359e:	429a      	cmp	r2, r3
 80035a0:	d127      	bne.n	80035f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035ac:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d11f      	bne.n	80035f2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80035bc:	2a07      	cmp	r2, #7
 80035be:	bf14      	ite	ne
 80035c0:	2201      	movne	r2, #1
 80035c2:	2200      	moveq	r2, #0
 80035c4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d113      	bne.n	80035f2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035d4:	085b      	lsrs	r3, r3, #1
 80035d6:	3b01      	subs	r3, #1
 80035d8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80035da:	429a      	cmp	r2, r3
 80035dc:	d109      	bne.n	80035f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e8:	085b      	lsrs	r3, r3, #1
 80035ea:	3b01      	subs	r3, #1
 80035ec:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d06e      	beq.n	80036d0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	2b0c      	cmp	r3, #12
 80035f6:	d069      	beq.n	80036cc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80035f8:	4b53      	ldr	r3, [pc, #332]	@ (8003748 <HAL_RCC_OscConfig+0x780>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d105      	bne.n	8003610 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003604:	4b50      	ldr	r3, [pc, #320]	@ (8003748 <HAL_RCC_OscConfig+0x780>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e0ad      	b.n	8003770 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003614:	4b4c      	ldr	r3, [pc, #304]	@ (8003748 <HAL_RCC_OscConfig+0x780>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a4b      	ldr	r2, [pc, #300]	@ (8003748 <HAL_RCC_OscConfig+0x780>)
 800361a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800361e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003620:	f7fe f864 	bl	80016ec <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003626:	e008      	b.n	800363a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003628:	f7fe f860 	bl	80016ec <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b02      	cmp	r3, #2
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e09a      	b.n	8003770 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800363a:	4b43      	ldr	r3, [pc, #268]	@ (8003748 <HAL_RCC_OscConfig+0x780>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1f0      	bne.n	8003628 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003646:	4b40      	ldr	r3, [pc, #256]	@ (8003748 <HAL_RCC_OscConfig+0x780>)
 8003648:	68da      	ldr	r2, [r3, #12]
 800364a:	4b40      	ldr	r3, [pc, #256]	@ (800374c <HAL_RCC_OscConfig+0x784>)
 800364c:	4013      	ands	r3, r2
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003656:	3a01      	subs	r2, #1
 8003658:	0112      	lsls	r2, r2, #4
 800365a:	4311      	orrs	r1, r2
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003660:	0212      	lsls	r2, r2, #8
 8003662:	4311      	orrs	r1, r2
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003668:	0852      	lsrs	r2, r2, #1
 800366a:	3a01      	subs	r2, #1
 800366c:	0552      	lsls	r2, r2, #21
 800366e:	4311      	orrs	r1, r2
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003674:	0852      	lsrs	r2, r2, #1
 8003676:	3a01      	subs	r2, #1
 8003678:	0652      	lsls	r2, r2, #25
 800367a:	4311      	orrs	r1, r2
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003680:	0912      	lsrs	r2, r2, #4
 8003682:	0452      	lsls	r2, r2, #17
 8003684:	430a      	orrs	r2, r1
 8003686:	4930      	ldr	r1, [pc, #192]	@ (8003748 <HAL_RCC_OscConfig+0x780>)
 8003688:	4313      	orrs	r3, r2
 800368a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800368c:	4b2e      	ldr	r3, [pc, #184]	@ (8003748 <HAL_RCC_OscConfig+0x780>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a2d      	ldr	r2, [pc, #180]	@ (8003748 <HAL_RCC_OscConfig+0x780>)
 8003692:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003696:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003698:	4b2b      	ldr	r3, [pc, #172]	@ (8003748 <HAL_RCC_OscConfig+0x780>)
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	4a2a      	ldr	r2, [pc, #168]	@ (8003748 <HAL_RCC_OscConfig+0x780>)
 800369e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036a2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036a4:	f7fe f822 	bl	80016ec <HAL_GetTick>
 80036a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036aa:	e008      	b.n	80036be <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ac:	f7fe f81e 	bl	80016ec <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e058      	b.n	8003770 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036be:	4b22      	ldr	r3, [pc, #136]	@ (8003748 <HAL_RCC_OscConfig+0x780>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d0f0      	beq.n	80036ac <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036ca:	e050      	b.n	800376e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e04f      	b.n	8003770 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036d0:	4b1d      	ldr	r3, [pc, #116]	@ (8003748 <HAL_RCC_OscConfig+0x780>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d148      	bne.n	800376e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80036dc:	4b1a      	ldr	r3, [pc, #104]	@ (8003748 <HAL_RCC_OscConfig+0x780>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a19      	ldr	r2, [pc, #100]	@ (8003748 <HAL_RCC_OscConfig+0x780>)
 80036e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036e6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036e8:	4b17      	ldr	r3, [pc, #92]	@ (8003748 <HAL_RCC_OscConfig+0x780>)
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	4a16      	ldr	r2, [pc, #88]	@ (8003748 <HAL_RCC_OscConfig+0x780>)
 80036ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036f2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80036f4:	f7fd fffa 	bl	80016ec <HAL_GetTick>
 80036f8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036fa:	e008      	b.n	800370e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036fc:	f7fd fff6 	bl	80016ec <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b02      	cmp	r3, #2
 8003708:	d901      	bls.n	800370e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e030      	b.n	8003770 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800370e:	4b0e      	ldr	r3, [pc, #56]	@ (8003748 <HAL_RCC_OscConfig+0x780>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d0f0      	beq.n	80036fc <HAL_RCC_OscConfig+0x734>
 800371a:	e028      	b.n	800376e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	2b0c      	cmp	r3, #12
 8003720:	d023      	beq.n	800376a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003722:	4b09      	ldr	r3, [pc, #36]	@ (8003748 <HAL_RCC_OscConfig+0x780>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a08      	ldr	r2, [pc, #32]	@ (8003748 <HAL_RCC_OscConfig+0x780>)
 8003728:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800372c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800372e:	f7fd ffdd 	bl	80016ec <HAL_GetTick>
 8003732:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003734:	e00c      	b.n	8003750 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003736:	f7fd ffd9 	bl	80016ec <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	2b02      	cmp	r3, #2
 8003742:	d905      	bls.n	8003750 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e013      	b.n	8003770 <HAL_RCC_OscConfig+0x7a8>
 8003748:	40021000 	.word	0x40021000
 800374c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003750:	4b09      	ldr	r3, [pc, #36]	@ (8003778 <HAL_RCC_OscConfig+0x7b0>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1ec      	bne.n	8003736 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800375c:	4b06      	ldr	r3, [pc, #24]	@ (8003778 <HAL_RCC_OscConfig+0x7b0>)
 800375e:	68da      	ldr	r2, [r3, #12]
 8003760:	4905      	ldr	r1, [pc, #20]	@ (8003778 <HAL_RCC_OscConfig+0x7b0>)
 8003762:	4b06      	ldr	r3, [pc, #24]	@ (800377c <HAL_RCC_OscConfig+0x7b4>)
 8003764:	4013      	ands	r3, r2
 8003766:	60cb      	str	r3, [r1, #12]
 8003768:	e001      	b.n	800376e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e000      	b.n	8003770 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3720      	adds	r7, #32
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	40021000 	.word	0x40021000
 800377c:	feeefffc 	.word	0xfeeefffc

08003780 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d101      	bne.n	8003794 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e0e7      	b.n	8003964 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003794:	4b75      	ldr	r3, [pc, #468]	@ (800396c <HAL_RCC_ClockConfig+0x1ec>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0307 	and.w	r3, r3, #7
 800379c:	683a      	ldr	r2, [r7, #0]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d910      	bls.n	80037c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037a2:	4b72      	ldr	r3, [pc, #456]	@ (800396c <HAL_RCC_ClockConfig+0x1ec>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f023 0207 	bic.w	r2, r3, #7
 80037aa:	4970      	ldr	r1, [pc, #448]	@ (800396c <HAL_RCC_ClockConfig+0x1ec>)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037b2:	4b6e      	ldr	r3, [pc, #440]	@ (800396c <HAL_RCC_ClockConfig+0x1ec>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0307 	and.w	r3, r3, #7
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d001      	beq.n	80037c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e0cf      	b.n	8003964 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d010      	beq.n	80037f2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689a      	ldr	r2, [r3, #8]
 80037d4:	4b66      	ldr	r3, [pc, #408]	@ (8003970 <HAL_RCC_ClockConfig+0x1f0>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037dc:	429a      	cmp	r2, r3
 80037de:	d908      	bls.n	80037f2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037e0:	4b63      	ldr	r3, [pc, #396]	@ (8003970 <HAL_RCC_ClockConfig+0x1f0>)
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	4960      	ldr	r1, [pc, #384]	@ (8003970 <HAL_RCC_ClockConfig+0x1f0>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d04c      	beq.n	8003898 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	2b03      	cmp	r3, #3
 8003804:	d107      	bne.n	8003816 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003806:	4b5a      	ldr	r3, [pc, #360]	@ (8003970 <HAL_RCC_ClockConfig+0x1f0>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d121      	bne.n	8003856 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e0a6      	b.n	8003964 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	2b02      	cmp	r3, #2
 800381c:	d107      	bne.n	800382e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800381e:	4b54      	ldr	r3, [pc, #336]	@ (8003970 <HAL_RCC_ClockConfig+0x1f0>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d115      	bne.n	8003856 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e09a      	b.n	8003964 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d107      	bne.n	8003846 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003836:	4b4e      	ldr	r3, [pc, #312]	@ (8003970 <HAL_RCC_ClockConfig+0x1f0>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d109      	bne.n	8003856 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e08e      	b.n	8003964 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003846:	4b4a      	ldr	r3, [pc, #296]	@ (8003970 <HAL_RCC_ClockConfig+0x1f0>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800384e:	2b00      	cmp	r3, #0
 8003850:	d101      	bne.n	8003856 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e086      	b.n	8003964 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003856:	4b46      	ldr	r3, [pc, #280]	@ (8003970 <HAL_RCC_ClockConfig+0x1f0>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f023 0203 	bic.w	r2, r3, #3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	4943      	ldr	r1, [pc, #268]	@ (8003970 <HAL_RCC_ClockConfig+0x1f0>)
 8003864:	4313      	orrs	r3, r2
 8003866:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003868:	f7fd ff40 	bl	80016ec <HAL_GetTick>
 800386c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800386e:	e00a      	b.n	8003886 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003870:	f7fd ff3c 	bl	80016ec <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800387e:	4293      	cmp	r3, r2
 8003880:	d901      	bls.n	8003886 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e06e      	b.n	8003964 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003886:	4b3a      	ldr	r3, [pc, #232]	@ (8003970 <HAL_RCC_ClockConfig+0x1f0>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f003 020c 	and.w	r2, r3, #12
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	429a      	cmp	r2, r3
 8003896:	d1eb      	bne.n	8003870 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d010      	beq.n	80038c6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689a      	ldr	r2, [r3, #8]
 80038a8:	4b31      	ldr	r3, [pc, #196]	@ (8003970 <HAL_RCC_ClockConfig+0x1f0>)
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d208      	bcs.n	80038c6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038b4:	4b2e      	ldr	r3, [pc, #184]	@ (8003970 <HAL_RCC_ClockConfig+0x1f0>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	492b      	ldr	r1, [pc, #172]	@ (8003970 <HAL_RCC_ClockConfig+0x1f0>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038c6:	4b29      	ldr	r3, [pc, #164]	@ (800396c <HAL_RCC_ClockConfig+0x1ec>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0307 	and.w	r3, r3, #7
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d210      	bcs.n	80038f6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038d4:	4b25      	ldr	r3, [pc, #148]	@ (800396c <HAL_RCC_ClockConfig+0x1ec>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f023 0207 	bic.w	r2, r3, #7
 80038dc:	4923      	ldr	r1, [pc, #140]	@ (800396c <HAL_RCC_ClockConfig+0x1ec>)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038e4:	4b21      	ldr	r3, [pc, #132]	@ (800396c <HAL_RCC_ClockConfig+0x1ec>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0307 	and.w	r3, r3, #7
 80038ec:	683a      	ldr	r2, [r7, #0]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d001      	beq.n	80038f6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e036      	b.n	8003964 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0304 	and.w	r3, r3, #4
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d008      	beq.n	8003914 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003902:	4b1b      	ldr	r3, [pc, #108]	@ (8003970 <HAL_RCC_ClockConfig+0x1f0>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	4918      	ldr	r1, [pc, #96]	@ (8003970 <HAL_RCC_ClockConfig+0x1f0>)
 8003910:	4313      	orrs	r3, r2
 8003912:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0308 	and.w	r3, r3, #8
 800391c:	2b00      	cmp	r3, #0
 800391e:	d009      	beq.n	8003934 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003920:	4b13      	ldr	r3, [pc, #76]	@ (8003970 <HAL_RCC_ClockConfig+0x1f0>)
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	00db      	lsls	r3, r3, #3
 800392e:	4910      	ldr	r1, [pc, #64]	@ (8003970 <HAL_RCC_ClockConfig+0x1f0>)
 8003930:	4313      	orrs	r3, r2
 8003932:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003934:	f000 f824 	bl	8003980 <HAL_RCC_GetSysClockFreq>
 8003938:	4602      	mov	r2, r0
 800393a:	4b0d      	ldr	r3, [pc, #52]	@ (8003970 <HAL_RCC_ClockConfig+0x1f0>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	091b      	lsrs	r3, r3, #4
 8003940:	f003 030f 	and.w	r3, r3, #15
 8003944:	490b      	ldr	r1, [pc, #44]	@ (8003974 <HAL_RCC_ClockConfig+0x1f4>)
 8003946:	5ccb      	ldrb	r3, [r1, r3]
 8003948:	f003 031f 	and.w	r3, r3, #31
 800394c:	fa22 f303 	lsr.w	r3, r2, r3
 8003950:	4a09      	ldr	r2, [pc, #36]	@ (8003978 <HAL_RCC_ClockConfig+0x1f8>)
 8003952:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003954:	4b09      	ldr	r3, [pc, #36]	@ (800397c <HAL_RCC_ClockConfig+0x1fc>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4618      	mov	r0, r3
 800395a:	f7fd fe77 	bl	800164c <HAL_InitTick>
 800395e:	4603      	mov	r3, r0
 8003960:	72fb      	strb	r3, [r7, #11]

  return status;
 8003962:	7afb      	ldrb	r3, [r7, #11]
}
 8003964:	4618      	mov	r0, r3
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	40022000 	.word	0x40022000
 8003970:	40021000 	.word	0x40021000
 8003974:	08005944 	.word	0x08005944
 8003978:	20000038 	.word	0x20000038
 800397c:	2000003c 	.word	0x2000003c

08003980 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003980:	b480      	push	{r7}
 8003982:	b089      	sub	sp, #36	@ 0x24
 8003984:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003986:	2300      	movs	r3, #0
 8003988:	61fb      	str	r3, [r7, #28]
 800398a:	2300      	movs	r3, #0
 800398c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800398e:	4b3e      	ldr	r3, [pc, #248]	@ (8003a88 <HAL_RCC_GetSysClockFreq+0x108>)
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f003 030c 	and.w	r3, r3, #12
 8003996:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003998:	4b3b      	ldr	r3, [pc, #236]	@ (8003a88 <HAL_RCC_GetSysClockFreq+0x108>)
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	f003 0303 	and.w	r3, r3, #3
 80039a0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d005      	beq.n	80039b4 <HAL_RCC_GetSysClockFreq+0x34>
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	2b0c      	cmp	r3, #12
 80039ac:	d121      	bne.n	80039f2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d11e      	bne.n	80039f2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80039b4:	4b34      	ldr	r3, [pc, #208]	@ (8003a88 <HAL_RCC_GetSysClockFreq+0x108>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0308 	and.w	r3, r3, #8
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d107      	bne.n	80039d0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80039c0:	4b31      	ldr	r3, [pc, #196]	@ (8003a88 <HAL_RCC_GetSysClockFreq+0x108>)
 80039c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039c6:	0a1b      	lsrs	r3, r3, #8
 80039c8:	f003 030f 	and.w	r3, r3, #15
 80039cc:	61fb      	str	r3, [r7, #28]
 80039ce:	e005      	b.n	80039dc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80039d0:	4b2d      	ldr	r3, [pc, #180]	@ (8003a88 <HAL_RCC_GetSysClockFreq+0x108>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	091b      	lsrs	r3, r3, #4
 80039d6:	f003 030f 	and.w	r3, r3, #15
 80039da:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80039dc:	4a2b      	ldr	r2, [pc, #172]	@ (8003a8c <HAL_RCC_GetSysClockFreq+0x10c>)
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039e4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d10d      	bne.n	8003a08 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039f0:	e00a      	b.n	8003a08 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	2b04      	cmp	r3, #4
 80039f6:	d102      	bne.n	80039fe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80039f8:	4b25      	ldr	r3, [pc, #148]	@ (8003a90 <HAL_RCC_GetSysClockFreq+0x110>)
 80039fa:	61bb      	str	r3, [r7, #24]
 80039fc:	e004      	b.n	8003a08 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	2b08      	cmp	r3, #8
 8003a02:	d101      	bne.n	8003a08 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a04:	4b23      	ldr	r3, [pc, #140]	@ (8003a94 <HAL_RCC_GetSysClockFreq+0x114>)
 8003a06:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	2b0c      	cmp	r3, #12
 8003a0c:	d134      	bne.n	8003a78 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a0e:	4b1e      	ldr	r3, [pc, #120]	@ (8003a88 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	f003 0303 	and.w	r3, r3, #3
 8003a16:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d003      	beq.n	8003a26 <HAL_RCC_GetSysClockFreq+0xa6>
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	2b03      	cmp	r3, #3
 8003a22:	d003      	beq.n	8003a2c <HAL_RCC_GetSysClockFreq+0xac>
 8003a24:	e005      	b.n	8003a32 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003a26:	4b1a      	ldr	r3, [pc, #104]	@ (8003a90 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a28:	617b      	str	r3, [r7, #20]
      break;
 8003a2a:	e005      	b.n	8003a38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003a2c:	4b19      	ldr	r3, [pc, #100]	@ (8003a94 <HAL_RCC_GetSysClockFreq+0x114>)
 8003a2e:	617b      	str	r3, [r7, #20]
      break;
 8003a30:	e002      	b.n	8003a38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	617b      	str	r3, [r7, #20]
      break;
 8003a36:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a38:	4b13      	ldr	r3, [pc, #76]	@ (8003a88 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	091b      	lsrs	r3, r3, #4
 8003a3e:	f003 0307 	and.w	r3, r3, #7
 8003a42:	3301      	adds	r3, #1
 8003a44:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003a46:	4b10      	ldr	r3, [pc, #64]	@ (8003a88 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	0a1b      	lsrs	r3, r3, #8
 8003a4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a50:	697a      	ldr	r2, [r7, #20]
 8003a52:	fb03 f202 	mul.w	r2, r3, r2
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a5c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8003a88 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	0e5b      	lsrs	r3, r3, #25
 8003a64:	f003 0303 	and.w	r3, r3, #3
 8003a68:	3301      	adds	r3, #1
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003a6e:	697a      	ldr	r2, [r7, #20]
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a76:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003a78:	69bb      	ldr	r3, [r7, #24]
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3724      	adds	r7, #36	@ 0x24
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	40021000 	.word	0x40021000
 8003a8c:	0800595c 	.word	0x0800595c
 8003a90:	00f42400 	.word	0x00f42400
 8003a94:	007a1200 	.word	0x007a1200

08003a98 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a9c:	4b03      	ldr	r3, [pc, #12]	@ (8003aac <HAL_RCC_GetHCLKFreq+0x14>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	20000038 	.word	0x20000038

08003ab0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ab4:	f7ff fff0 	bl	8003a98 <HAL_RCC_GetHCLKFreq>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	4b06      	ldr	r3, [pc, #24]	@ (8003ad4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	0a1b      	lsrs	r3, r3, #8
 8003ac0:	f003 0307 	and.w	r3, r3, #7
 8003ac4:	4904      	ldr	r1, [pc, #16]	@ (8003ad8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ac6:	5ccb      	ldrb	r3, [r1, r3]
 8003ac8:	f003 031f 	and.w	r3, r3, #31
 8003acc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	40021000 	.word	0x40021000
 8003ad8:	08005954 	.word	0x08005954

08003adc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003ae0:	f7ff ffda 	bl	8003a98 <HAL_RCC_GetHCLKFreq>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	4b06      	ldr	r3, [pc, #24]	@ (8003b00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	0adb      	lsrs	r3, r3, #11
 8003aec:	f003 0307 	and.w	r3, r3, #7
 8003af0:	4904      	ldr	r1, [pc, #16]	@ (8003b04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003af2:	5ccb      	ldrb	r3, [r1, r3]
 8003af4:	f003 031f 	and.w	r3, r3, #31
 8003af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	40021000 	.word	0x40021000
 8003b04:	08005954 	.word	0x08005954

08003b08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b086      	sub	sp, #24
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003b10:	2300      	movs	r3, #0
 8003b12:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003b14:	4b2a      	ldr	r3, [pc, #168]	@ (8003bc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d003      	beq.n	8003b28 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003b20:	f7ff f9ee 	bl	8002f00 <HAL_PWREx_GetVoltageRange>
 8003b24:	6178      	str	r0, [r7, #20]
 8003b26:	e014      	b.n	8003b52 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b28:	4b25      	ldr	r3, [pc, #148]	@ (8003bc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b2c:	4a24      	ldr	r2, [pc, #144]	@ (8003bc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b32:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b34:	4b22      	ldr	r3, [pc, #136]	@ (8003bc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b3c:	60fb      	str	r3, [r7, #12]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003b40:	f7ff f9de 	bl	8002f00 <HAL_PWREx_GetVoltageRange>
 8003b44:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003b46:	4b1e      	ldr	r3, [pc, #120]	@ (8003bc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b4a:	4a1d      	ldr	r2, [pc, #116]	@ (8003bc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b50:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b58:	d10b      	bne.n	8003b72 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2b80      	cmp	r3, #128	@ 0x80
 8003b5e:	d919      	bls.n	8003b94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2ba0      	cmp	r3, #160	@ 0xa0
 8003b64:	d902      	bls.n	8003b6c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b66:	2302      	movs	r3, #2
 8003b68:	613b      	str	r3, [r7, #16]
 8003b6a:	e013      	b.n	8003b94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	613b      	str	r3, [r7, #16]
 8003b70:	e010      	b.n	8003b94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2b80      	cmp	r3, #128	@ 0x80
 8003b76:	d902      	bls.n	8003b7e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003b78:	2303      	movs	r3, #3
 8003b7a:	613b      	str	r3, [r7, #16]
 8003b7c:	e00a      	b.n	8003b94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2b80      	cmp	r3, #128	@ 0x80
 8003b82:	d102      	bne.n	8003b8a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b84:	2302      	movs	r3, #2
 8003b86:	613b      	str	r3, [r7, #16]
 8003b88:	e004      	b.n	8003b94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2b70      	cmp	r3, #112	@ 0x70
 8003b8e:	d101      	bne.n	8003b94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b90:	2301      	movs	r3, #1
 8003b92:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b94:	4b0b      	ldr	r3, [pc, #44]	@ (8003bc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f023 0207 	bic.w	r2, r3, #7
 8003b9c:	4909      	ldr	r1, [pc, #36]	@ (8003bc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ba4:	4b07      	ldr	r3, [pc, #28]	@ (8003bc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0307 	and.w	r3, r3, #7
 8003bac:	693a      	ldr	r2, [r7, #16]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d001      	beq.n	8003bb6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e000      	b.n	8003bb8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3718      	adds	r7, #24
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	40021000 	.word	0x40021000
 8003bc4:	40022000 	.word	0x40022000

08003bc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b086      	sub	sp, #24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d041      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003be8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003bec:	d02a      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003bee:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003bf2:	d824      	bhi.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003bf4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003bf8:	d008      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003bfa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003bfe:	d81e      	bhi.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00a      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003c04:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c08:	d010      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003c0a:	e018      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c0c:	4b86      	ldr	r3, [pc, #536]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	4a85      	ldr	r2, [pc, #532]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c16:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c18:	e015      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	3304      	adds	r3, #4
 8003c1e:	2100      	movs	r1, #0
 8003c20:	4618      	mov	r0, r3
 8003c22:	f000 fabb 	bl	800419c <RCCEx_PLLSAI1_Config>
 8003c26:	4603      	mov	r3, r0
 8003c28:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c2a:	e00c      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	3320      	adds	r3, #32
 8003c30:	2100      	movs	r1, #0
 8003c32:	4618      	mov	r0, r3
 8003c34:	f000 fba6 	bl	8004384 <RCCEx_PLLSAI2_Config>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c3c:	e003      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	74fb      	strb	r3, [r7, #19]
      break;
 8003c42:	e000      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003c44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c46:	7cfb      	ldrb	r3, [r7, #19]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d10b      	bne.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c4c:	4b76      	ldr	r3, [pc, #472]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c52:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c5a:	4973      	ldr	r1, [pc, #460]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003c62:	e001      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c64:	7cfb      	ldrb	r3, [r7, #19]
 8003c66:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d041      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c78:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003c7c:	d02a      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003c7e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003c82:	d824      	bhi.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c84:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c88:	d008      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003c8a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c8e:	d81e      	bhi.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00a      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003c94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c98:	d010      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c9a:	e018      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c9c:	4b62      	ldr	r3, [pc, #392]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	4a61      	ldr	r2, [pc, #388]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ca2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ca6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ca8:	e015      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	3304      	adds	r3, #4
 8003cae:	2100      	movs	r1, #0
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f000 fa73 	bl	800419c <RCCEx_PLLSAI1_Config>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003cba:	e00c      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	3320      	adds	r3, #32
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 fb5e 	bl	8004384 <RCCEx_PLLSAI2_Config>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ccc:	e003      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	74fb      	strb	r3, [r7, #19]
      break;
 8003cd2:	e000      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003cd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cd6:	7cfb      	ldrb	r3, [r7, #19]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d10b      	bne.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003cdc:	4b52      	ldr	r3, [pc, #328]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ce2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003cea:	494f      	ldr	r1, [pc, #316]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003cf2:	e001      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cf4:	7cfb      	ldrb	r3, [r7, #19]
 8003cf6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f000 80a0 	beq.w	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d06:	2300      	movs	r3, #0
 8003d08:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d0a:	4b47      	ldr	r3, [pc, #284]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d101      	bne.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003d16:	2301      	movs	r3, #1
 8003d18:	e000      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00d      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d20:	4b41      	ldr	r3, [pc, #260]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d24:	4a40      	ldr	r2, [pc, #256]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d2c:	4b3e      	ldr	r3, [pc, #248]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d34:	60bb      	str	r3, [r7, #8]
 8003d36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d3c:	4b3b      	ldr	r3, [pc, #236]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a3a      	ldr	r2, [pc, #232]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d46:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d48:	f7fd fcd0 	bl	80016ec <HAL_GetTick>
 8003d4c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d4e:	e009      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d50:	f7fd fccc 	bl	80016ec <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d902      	bls.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	74fb      	strb	r3, [r7, #19]
        break;
 8003d62:	e005      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d64:	4b31      	ldr	r3, [pc, #196]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d0ef      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003d70:	7cfb      	ldrb	r3, [r7, #19]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d15c      	bne.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d76:	4b2c      	ldr	r3, [pc, #176]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d80:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d01f      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d019      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d94:	4b24      	ldr	r3, [pc, #144]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d9e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003da0:	4b21      	ldr	r3, [pc, #132]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003da6:	4a20      	ldr	r2, [pc, #128]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003da8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003db0:	4b1d      	ldr	r3, [pc, #116]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003db6:	4a1c      	ldr	r2, [pc, #112]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003db8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003dc0:	4a19      	ldr	r2, [pc, #100]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	f003 0301 	and.w	r3, r3, #1
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d016      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd2:	f7fd fc8b 	bl	80016ec <HAL_GetTick>
 8003dd6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dd8:	e00b      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dda:	f7fd fc87 	bl	80016ec <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d902      	bls.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	74fb      	strb	r3, [r7, #19]
            break;
 8003df0:	e006      	b.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003df2:	4b0d      	ldr	r3, [pc, #52]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d0ec      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003e00:	7cfb      	ldrb	r3, [r7, #19]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10c      	bne.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e06:	4b08      	ldr	r3, [pc, #32]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e0c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e16:	4904      	ldr	r1, [pc, #16]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003e1e:	e009      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e20:	7cfb      	ldrb	r3, [r7, #19]
 8003e22:	74bb      	strb	r3, [r7, #18]
 8003e24:	e006      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003e26:	bf00      	nop
 8003e28:	40021000 	.word	0x40021000
 8003e2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e30:	7cfb      	ldrb	r3, [r7, #19]
 8003e32:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e34:	7c7b      	ldrb	r3, [r7, #17]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d105      	bne.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e3a:	4b9e      	ldr	r3, [pc, #632]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e3e:	4a9d      	ldr	r2, [pc, #628]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e44:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00a      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e52:	4b98      	ldr	r3, [pc, #608]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e58:	f023 0203 	bic.w	r2, r3, #3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e60:	4994      	ldr	r1, [pc, #592]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00a      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e74:	4b8f      	ldr	r3, [pc, #572]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e7a:	f023 020c 	bic.w	r2, r3, #12
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e82:	498c      	ldr	r1, [pc, #560]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0304 	and.w	r3, r3, #4
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00a      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e96:	4b87      	ldr	r3, [pc, #540]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e9c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea4:	4983      	ldr	r1, [pc, #524]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0308 	and.w	r3, r3, #8
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00a      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003eb8:	4b7e      	ldr	r3, [pc, #504]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ebe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ec6:	497b      	ldr	r1, [pc, #492]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0310 	and.w	r3, r3, #16
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00a      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003eda:	4b76      	ldr	r3, [pc, #472]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ee0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ee8:	4972      	ldr	r1, [pc, #456]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0320 	and.w	r3, r3, #32
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00a      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003efc:	4b6d      	ldr	r3, [pc, #436]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f02:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f0a:	496a      	ldr	r1, [pc, #424]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00a      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f1e:	4b65      	ldr	r3, [pc, #404]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f24:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f2c:	4961      	ldr	r1, [pc, #388]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00a      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f40:	4b5c      	ldr	r3, [pc, #368]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f46:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f4e:	4959      	ldr	r1, [pc, #356]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00a      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f62:	4b54      	ldr	r3, [pc, #336]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f68:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f70:	4950      	ldr	r1, [pc, #320]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00a      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f84:	4b4b      	ldr	r3, [pc, #300]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f8a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f92:	4948      	ldr	r1, [pc, #288]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00a      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003fa6:	4b43      	ldr	r3, [pc, #268]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fb4:	493f      	ldr	r1, [pc, #252]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d028      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fc8:	4b3a      	ldr	r3, [pc, #232]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fd6:	4937      	ldr	r1, [pc, #220]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fe2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fe6:	d106      	bne.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fe8:	4b32      	ldr	r3, [pc, #200]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	4a31      	ldr	r2, [pc, #196]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ff2:	60d3      	str	r3, [r2, #12]
 8003ff4:	e011      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ffa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ffe:	d10c      	bne.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	3304      	adds	r3, #4
 8004004:	2101      	movs	r1, #1
 8004006:	4618      	mov	r0, r3
 8004008:	f000 f8c8 	bl	800419c <RCCEx_PLLSAI1_Config>
 800400c:	4603      	mov	r3, r0
 800400e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004010:	7cfb      	ldrb	r3, [r7, #19]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d001      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004016:	7cfb      	ldrb	r3, [r7, #19]
 8004018:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d028      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004026:	4b23      	ldr	r3, [pc, #140]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004028:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800402c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004034:	491f      	ldr	r1, [pc, #124]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004036:	4313      	orrs	r3, r2
 8004038:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004040:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004044:	d106      	bne.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004046:	4b1b      	ldr	r3, [pc, #108]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	4a1a      	ldr	r2, [pc, #104]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800404c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004050:	60d3      	str	r3, [r2, #12]
 8004052:	e011      	b.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004058:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800405c:	d10c      	bne.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	3304      	adds	r3, #4
 8004062:	2101      	movs	r1, #1
 8004064:	4618      	mov	r0, r3
 8004066:	f000 f899 	bl	800419c <RCCEx_PLLSAI1_Config>
 800406a:	4603      	mov	r3, r0
 800406c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800406e:	7cfb      	ldrb	r3, [r7, #19]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d001      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004074:	7cfb      	ldrb	r3, [r7, #19]
 8004076:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d02b      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004084:	4b0b      	ldr	r3, [pc, #44]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004086:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800408a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004092:	4908      	ldr	r1, [pc, #32]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004094:	4313      	orrs	r3, r2
 8004096:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800409e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040a2:	d109      	bne.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040a4:	4b03      	ldr	r3, [pc, #12]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	4a02      	ldr	r2, [pc, #8]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040ae:	60d3      	str	r3, [r2, #12]
 80040b0:	e014      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80040b2:	bf00      	nop
 80040b4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80040c0:	d10c      	bne.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	3304      	adds	r3, #4
 80040c6:	2101      	movs	r1, #1
 80040c8:	4618      	mov	r0, r3
 80040ca:	f000 f867 	bl	800419c <RCCEx_PLLSAI1_Config>
 80040ce:	4603      	mov	r3, r0
 80040d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040d2:	7cfb      	ldrb	r3, [r7, #19]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d001      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80040d8:	7cfb      	ldrb	r3, [r7, #19]
 80040da:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d02f      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040e8:	4b2b      	ldr	r3, [pc, #172]	@ (8004198 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ee:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040f6:	4928      	ldr	r1, [pc, #160]	@ (8004198 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004102:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004106:	d10d      	bne.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	3304      	adds	r3, #4
 800410c:	2102      	movs	r1, #2
 800410e:	4618      	mov	r0, r3
 8004110:	f000 f844 	bl	800419c <RCCEx_PLLSAI1_Config>
 8004114:	4603      	mov	r3, r0
 8004116:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004118:	7cfb      	ldrb	r3, [r7, #19]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d014      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800411e:	7cfb      	ldrb	r3, [r7, #19]
 8004120:	74bb      	strb	r3, [r7, #18]
 8004122:	e011      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004128:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800412c:	d10c      	bne.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	3320      	adds	r3, #32
 8004132:	2102      	movs	r1, #2
 8004134:	4618      	mov	r0, r3
 8004136:	f000 f925 	bl	8004384 <RCCEx_PLLSAI2_Config>
 800413a:	4603      	mov	r3, r0
 800413c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800413e:	7cfb      	ldrb	r3, [r7, #19]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d001      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004144:	7cfb      	ldrb	r3, [r7, #19]
 8004146:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00a      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004154:	4b10      	ldr	r3, [pc, #64]	@ (8004198 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800415a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004162:	490d      	ldr	r1, [pc, #52]	@ (8004198 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004164:	4313      	orrs	r3, r2
 8004166:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00b      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004176:	4b08      	ldr	r3, [pc, #32]	@ (8004198 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004178:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800417c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004186:	4904      	ldr	r1, [pc, #16]	@ (8004198 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004188:	4313      	orrs	r3, r2
 800418a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800418e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004190:	4618      	mov	r0, r3
 8004192:	3718      	adds	r7, #24
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	40021000 	.word	0x40021000

0800419c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041a6:	2300      	movs	r3, #0
 80041a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80041aa:	4b75      	ldr	r3, [pc, #468]	@ (8004380 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	f003 0303 	and.w	r3, r3, #3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d018      	beq.n	80041e8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80041b6:	4b72      	ldr	r3, [pc, #456]	@ (8004380 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	f003 0203 	and.w	r2, r3, #3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d10d      	bne.n	80041e2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
       ||
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d009      	beq.n	80041e2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80041ce:	4b6c      	ldr	r3, [pc, #432]	@ (8004380 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	091b      	lsrs	r3, r3, #4
 80041d4:	f003 0307 	and.w	r3, r3, #7
 80041d8:	1c5a      	adds	r2, r3, #1
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
       ||
 80041de:	429a      	cmp	r2, r3
 80041e0:	d047      	beq.n	8004272 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	73fb      	strb	r3, [r7, #15]
 80041e6:	e044      	b.n	8004272 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2b03      	cmp	r3, #3
 80041ee:	d018      	beq.n	8004222 <RCCEx_PLLSAI1_Config+0x86>
 80041f0:	2b03      	cmp	r3, #3
 80041f2:	d825      	bhi.n	8004240 <RCCEx_PLLSAI1_Config+0xa4>
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d002      	beq.n	80041fe <RCCEx_PLLSAI1_Config+0x62>
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d009      	beq.n	8004210 <RCCEx_PLLSAI1_Config+0x74>
 80041fc:	e020      	b.n	8004240 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80041fe:	4b60      	ldr	r3, [pc, #384]	@ (8004380 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d11d      	bne.n	8004246 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800420e:	e01a      	b.n	8004246 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004210:	4b5b      	ldr	r3, [pc, #364]	@ (8004380 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004218:	2b00      	cmp	r3, #0
 800421a:	d116      	bne.n	800424a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004220:	e013      	b.n	800424a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004222:	4b57      	ldr	r3, [pc, #348]	@ (8004380 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d10f      	bne.n	800424e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800422e:	4b54      	ldr	r3, [pc, #336]	@ (8004380 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d109      	bne.n	800424e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800423e:	e006      	b.n	800424e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	73fb      	strb	r3, [r7, #15]
      break;
 8004244:	e004      	b.n	8004250 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004246:	bf00      	nop
 8004248:	e002      	b.n	8004250 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800424a:	bf00      	nop
 800424c:	e000      	b.n	8004250 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800424e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004250:	7bfb      	ldrb	r3, [r7, #15]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10d      	bne.n	8004272 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004256:	4b4a      	ldr	r3, [pc, #296]	@ (8004380 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6819      	ldr	r1, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	3b01      	subs	r3, #1
 8004268:	011b      	lsls	r3, r3, #4
 800426a:	430b      	orrs	r3, r1
 800426c:	4944      	ldr	r1, [pc, #272]	@ (8004380 <RCCEx_PLLSAI1_Config+0x1e4>)
 800426e:	4313      	orrs	r3, r2
 8004270:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004272:	7bfb      	ldrb	r3, [r7, #15]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d17d      	bne.n	8004374 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004278:	4b41      	ldr	r3, [pc, #260]	@ (8004380 <RCCEx_PLLSAI1_Config+0x1e4>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a40      	ldr	r2, [pc, #256]	@ (8004380 <RCCEx_PLLSAI1_Config+0x1e4>)
 800427e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004282:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004284:	f7fd fa32 	bl	80016ec <HAL_GetTick>
 8004288:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800428a:	e009      	b.n	80042a0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800428c:	f7fd fa2e 	bl	80016ec <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	2b02      	cmp	r3, #2
 8004298:	d902      	bls.n	80042a0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	73fb      	strb	r3, [r7, #15]
        break;
 800429e:	e005      	b.n	80042ac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80042a0:	4b37      	ldr	r3, [pc, #220]	@ (8004380 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1ef      	bne.n	800428c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80042ac:	7bfb      	ldrb	r3, [r7, #15]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d160      	bne.n	8004374 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d111      	bne.n	80042dc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042b8:	4b31      	ldr	r3, [pc, #196]	@ (8004380 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80042c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	6892      	ldr	r2, [r2, #8]
 80042c8:	0211      	lsls	r1, r2, #8
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	68d2      	ldr	r2, [r2, #12]
 80042ce:	0912      	lsrs	r2, r2, #4
 80042d0:	0452      	lsls	r2, r2, #17
 80042d2:	430a      	orrs	r2, r1
 80042d4:	492a      	ldr	r1, [pc, #168]	@ (8004380 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	610b      	str	r3, [r1, #16]
 80042da:	e027      	b.n	800432c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d112      	bne.n	8004308 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042e2:	4b27      	ldr	r3, [pc, #156]	@ (8004380 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80042ea:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	6892      	ldr	r2, [r2, #8]
 80042f2:	0211      	lsls	r1, r2, #8
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	6912      	ldr	r2, [r2, #16]
 80042f8:	0852      	lsrs	r2, r2, #1
 80042fa:	3a01      	subs	r2, #1
 80042fc:	0552      	lsls	r2, r2, #21
 80042fe:	430a      	orrs	r2, r1
 8004300:	491f      	ldr	r1, [pc, #124]	@ (8004380 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004302:	4313      	orrs	r3, r2
 8004304:	610b      	str	r3, [r1, #16]
 8004306:	e011      	b.n	800432c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004308:	4b1d      	ldr	r3, [pc, #116]	@ (8004380 <RCCEx_PLLSAI1_Config+0x1e4>)
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004310:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	6892      	ldr	r2, [r2, #8]
 8004318:	0211      	lsls	r1, r2, #8
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	6952      	ldr	r2, [r2, #20]
 800431e:	0852      	lsrs	r2, r2, #1
 8004320:	3a01      	subs	r2, #1
 8004322:	0652      	lsls	r2, r2, #25
 8004324:	430a      	orrs	r2, r1
 8004326:	4916      	ldr	r1, [pc, #88]	@ (8004380 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004328:	4313      	orrs	r3, r2
 800432a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800432c:	4b14      	ldr	r3, [pc, #80]	@ (8004380 <RCCEx_PLLSAI1_Config+0x1e4>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a13      	ldr	r2, [pc, #76]	@ (8004380 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004332:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004336:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004338:	f7fd f9d8 	bl	80016ec <HAL_GetTick>
 800433c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800433e:	e009      	b.n	8004354 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004340:	f7fd f9d4 	bl	80016ec <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b02      	cmp	r3, #2
 800434c:	d902      	bls.n	8004354 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	73fb      	strb	r3, [r7, #15]
          break;
 8004352:	e005      	b.n	8004360 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004354:	4b0a      	ldr	r3, [pc, #40]	@ (8004380 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d0ef      	beq.n	8004340 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004360:	7bfb      	ldrb	r3, [r7, #15]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d106      	bne.n	8004374 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004366:	4b06      	ldr	r3, [pc, #24]	@ (8004380 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004368:	691a      	ldr	r2, [r3, #16]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	4904      	ldr	r1, [pc, #16]	@ (8004380 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004370:	4313      	orrs	r3, r2
 8004372:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004374:	7bfb      	ldrb	r3, [r7, #15]
}
 8004376:	4618      	mov	r0, r3
 8004378:	3710      	adds	r7, #16
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	40021000 	.word	0x40021000

08004384 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800438e:	2300      	movs	r3, #0
 8004390:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004392:	4b6a      	ldr	r3, [pc, #424]	@ (800453c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	f003 0303 	and.w	r3, r3, #3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d018      	beq.n	80043d0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800439e:	4b67      	ldr	r3, [pc, #412]	@ (800453c <RCCEx_PLLSAI2_Config+0x1b8>)
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	f003 0203 	and.w	r2, r3, #3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d10d      	bne.n	80043ca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
       ||
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d009      	beq.n	80043ca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80043b6:	4b61      	ldr	r3, [pc, #388]	@ (800453c <RCCEx_PLLSAI2_Config+0x1b8>)
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	091b      	lsrs	r3, r3, #4
 80043bc:	f003 0307 	and.w	r3, r3, #7
 80043c0:	1c5a      	adds	r2, r3, #1
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
       ||
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d047      	beq.n	800445a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	73fb      	strb	r3, [r7, #15]
 80043ce:	e044      	b.n	800445a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2b03      	cmp	r3, #3
 80043d6:	d018      	beq.n	800440a <RCCEx_PLLSAI2_Config+0x86>
 80043d8:	2b03      	cmp	r3, #3
 80043da:	d825      	bhi.n	8004428 <RCCEx_PLLSAI2_Config+0xa4>
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d002      	beq.n	80043e6 <RCCEx_PLLSAI2_Config+0x62>
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d009      	beq.n	80043f8 <RCCEx_PLLSAI2_Config+0x74>
 80043e4:	e020      	b.n	8004428 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043e6:	4b55      	ldr	r3, [pc, #340]	@ (800453c <RCCEx_PLLSAI2_Config+0x1b8>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0302 	and.w	r3, r3, #2
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d11d      	bne.n	800442e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043f6:	e01a      	b.n	800442e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043f8:	4b50      	ldr	r3, [pc, #320]	@ (800453c <RCCEx_PLLSAI2_Config+0x1b8>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004400:	2b00      	cmp	r3, #0
 8004402:	d116      	bne.n	8004432 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004408:	e013      	b.n	8004432 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800440a:	4b4c      	ldr	r3, [pc, #304]	@ (800453c <RCCEx_PLLSAI2_Config+0x1b8>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d10f      	bne.n	8004436 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004416:	4b49      	ldr	r3, [pc, #292]	@ (800453c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d109      	bne.n	8004436 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004426:	e006      	b.n	8004436 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	73fb      	strb	r3, [r7, #15]
      break;
 800442c:	e004      	b.n	8004438 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800442e:	bf00      	nop
 8004430:	e002      	b.n	8004438 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004432:	bf00      	nop
 8004434:	e000      	b.n	8004438 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004436:	bf00      	nop
    }

    if(status == HAL_OK)
 8004438:	7bfb      	ldrb	r3, [r7, #15]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10d      	bne.n	800445a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800443e:	4b3f      	ldr	r3, [pc, #252]	@ (800453c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6819      	ldr	r1, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	3b01      	subs	r3, #1
 8004450:	011b      	lsls	r3, r3, #4
 8004452:	430b      	orrs	r3, r1
 8004454:	4939      	ldr	r1, [pc, #228]	@ (800453c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004456:	4313      	orrs	r3, r2
 8004458:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800445a:	7bfb      	ldrb	r3, [r7, #15]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d167      	bne.n	8004530 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004460:	4b36      	ldr	r3, [pc, #216]	@ (800453c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a35      	ldr	r2, [pc, #212]	@ (800453c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004466:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800446a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800446c:	f7fd f93e 	bl	80016ec <HAL_GetTick>
 8004470:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004472:	e009      	b.n	8004488 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004474:	f7fd f93a 	bl	80016ec <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b02      	cmp	r3, #2
 8004480:	d902      	bls.n	8004488 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	73fb      	strb	r3, [r7, #15]
        break;
 8004486:	e005      	b.n	8004494 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004488:	4b2c      	ldr	r3, [pc, #176]	@ (800453c <RCCEx_PLLSAI2_Config+0x1b8>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1ef      	bne.n	8004474 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004494:	7bfb      	ldrb	r3, [r7, #15]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d14a      	bne.n	8004530 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d111      	bne.n	80044c4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80044a0:	4b26      	ldr	r3, [pc, #152]	@ (800453c <RCCEx_PLLSAI2_Config+0x1b8>)
 80044a2:	695b      	ldr	r3, [r3, #20]
 80044a4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80044a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	6892      	ldr	r2, [r2, #8]
 80044b0:	0211      	lsls	r1, r2, #8
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	68d2      	ldr	r2, [r2, #12]
 80044b6:	0912      	lsrs	r2, r2, #4
 80044b8:	0452      	lsls	r2, r2, #17
 80044ba:	430a      	orrs	r2, r1
 80044bc:	491f      	ldr	r1, [pc, #124]	@ (800453c <RCCEx_PLLSAI2_Config+0x1b8>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	614b      	str	r3, [r1, #20]
 80044c2:	e011      	b.n	80044e8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80044c4:	4b1d      	ldr	r3, [pc, #116]	@ (800453c <RCCEx_PLLSAI2_Config+0x1b8>)
 80044c6:	695b      	ldr	r3, [r3, #20]
 80044c8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80044cc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	6892      	ldr	r2, [r2, #8]
 80044d4:	0211      	lsls	r1, r2, #8
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	6912      	ldr	r2, [r2, #16]
 80044da:	0852      	lsrs	r2, r2, #1
 80044dc:	3a01      	subs	r2, #1
 80044de:	0652      	lsls	r2, r2, #25
 80044e0:	430a      	orrs	r2, r1
 80044e2:	4916      	ldr	r1, [pc, #88]	@ (800453c <RCCEx_PLLSAI2_Config+0x1b8>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80044e8:	4b14      	ldr	r3, [pc, #80]	@ (800453c <RCCEx_PLLSAI2_Config+0x1b8>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a13      	ldr	r2, [pc, #76]	@ (800453c <RCCEx_PLLSAI2_Config+0x1b8>)
 80044ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f4:	f7fd f8fa 	bl	80016ec <HAL_GetTick>
 80044f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80044fa:	e009      	b.n	8004510 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80044fc:	f7fd f8f6 	bl	80016ec <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b02      	cmp	r3, #2
 8004508:	d902      	bls.n	8004510 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	73fb      	strb	r3, [r7, #15]
          break;
 800450e:	e005      	b.n	800451c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004510:	4b0a      	ldr	r3, [pc, #40]	@ (800453c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d0ef      	beq.n	80044fc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800451c:	7bfb      	ldrb	r3, [r7, #15]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d106      	bne.n	8004530 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004522:	4b06      	ldr	r3, [pc, #24]	@ (800453c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004524:	695a      	ldr	r2, [r3, #20]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	4904      	ldr	r1, [pc, #16]	@ (800453c <RCCEx_PLLSAI2_Config+0x1b8>)
 800452c:	4313      	orrs	r3, r2
 800452e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004530:	7bfb      	ldrb	r3, [r7, #15]
}
 8004532:	4618      	mov	r0, r3
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	40021000 	.word	0x40021000

08004540 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e040      	b.n	80045d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004556:	2b00      	cmp	r3, #0
 8004558:	d106      	bne.n	8004568 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f7fc fe12 	bl	800118c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2224      	movs	r2, #36	@ 0x24
 800456c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f022 0201 	bic.w	r2, r2, #1
 800457c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004582:	2b00      	cmp	r3, #0
 8004584:	d002      	beq.n	800458c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 fae0 	bl	8004b4c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 f825 	bl	80045dc <UART_SetConfig>
 8004592:	4603      	mov	r3, r0
 8004594:	2b01      	cmp	r3, #1
 8004596:	d101      	bne.n	800459c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e01b      	b.n	80045d4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	685a      	ldr	r2, [r3, #4]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80045aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	689a      	ldr	r2, [r3, #8]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80045ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f042 0201 	orr.w	r2, r2, #1
 80045ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 fb5f 	bl	8004c90 <UART_CheckIdleState>
 80045d2:	4603      	mov	r3, r0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3708      	adds	r7, #8
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045e0:	b08a      	sub	sp, #40	@ 0x28
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045e6:	2300      	movs	r3, #0
 80045e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	689a      	ldr	r2, [r3, #8]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	431a      	orrs	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	431a      	orrs	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	69db      	ldr	r3, [r3, #28]
 8004600:	4313      	orrs	r3, r2
 8004602:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	4ba4      	ldr	r3, [pc, #656]	@ (800489c <UART_SetConfig+0x2c0>)
 800460c:	4013      	ands	r3, r2
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	6812      	ldr	r2, [r2, #0]
 8004612:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004614:	430b      	orrs	r3, r1
 8004616:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	68da      	ldr	r2, [r3, #12]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	430a      	orrs	r2, r1
 800462c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a99      	ldr	r2, [pc, #612]	@ (80048a0 <UART_SetConfig+0x2c4>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d004      	beq.n	8004648 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004644:	4313      	orrs	r3, r2
 8004646:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004658:	430a      	orrs	r2, r1
 800465a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a90      	ldr	r2, [pc, #576]	@ (80048a4 <UART_SetConfig+0x2c8>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d126      	bne.n	80046b4 <UART_SetConfig+0xd8>
 8004666:	4b90      	ldr	r3, [pc, #576]	@ (80048a8 <UART_SetConfig+0x2cc>)
 8004668:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800466c:	f003 0303 	and.w	r3, r3, #3
 8004670:	2b03      	cmp	r3, #3
 8004672:	d81b      	bhi.n	80046ac <UART_SetConfig+0xd0>
 8004674:	a201      	add	r2, pc, #4	@ (adr r2, 800467c <UART_SetConfig+0xa0>)
 8004676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800467a:	bf00      	nop
 800467c:	0800468d 	.word	0x0800468d
 8004680:	0800469d 	.word	0x0800469d
 8004684:	08004695 	.word	0x08004695
 8004688:	080046a5 	.word	0x080046a5
 800468c:	2301      	movs	r3, #1
 800468e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004692:	e116      	b.n	80048c2 <UART_SetConfig+0x2e6>
 8004694:	2302      	movs	r3, #2
 8004696:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800469a:	e112      	b.n	80048c2 <UART_SetConfig+0x2e6>
 800469c:	2304      	movs	r3, #4
 800469e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046a2:	e10e      	b.n	80048c2 <UART_SetConfig+0x2e6>
 80046a4:	2308      	movs	r3, #8
 80046a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046aa:	e10a      	b.n	80048c2 <UART_SetConfig+0x2e6>
 80046ac:	2310      	movs	r3, #16
 80046ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046b2:	e106      	b.n	80048c2 <UART_SetConfig+0x2e6>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a7c      	ldr	r2, [pc, #496]	@ (80048ac <UART_SetConfig+0x2d0>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d138      	bne.n	8004730 <UART_SetConfig+0x154>
 80046be:	4b7a      	ldr	r3, [pc, #488]	@ (80048a8 <UART_SetConfig+0x2cc>)
 80046c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046c4:	f003 030c 	and.w	r3, r3, #12
 80046c8:	2b0c      	cmp	r3, #12
 80046ca:	d82d      	bhi.n	8004728 <UART_SetConfig+0x14c>
 80046cc:	a201      	add	r2, pc, #4	@ (adr r2, 80046d4 <UART_SetConfig+0xf8>)
 80046ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d2:	bf00      	nop
 80046d4:	08004709 	.word	0x08004709
 80046d8:	08004729 	.word	0x08004729
 80046dc:	08004729 	.word	0x08004729
 80046e0:	08004729 	.word	0x08004729
 80046e4:	08004719 	.word	0x08004719
 80046e8:	08004729 	.word	0x08004729
 80046ec:	08004729 	.word	0x08004729
 80046f0:	08004729 	.word	0x08004729
 80046f4:	08004711 	.word	0x08004711
 80046f8:	08004729 	.word	0x08004729
 80046fc:	08004729 	.word	0x08004729
 8004700:	08004729 	.word	0x08004729
 8004704:	08004721 	.word	0x08004721
 8004708:	2300      	movs	r3, #0
 800470a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800470e:	e0d8      	b.n	80048c2 <UART_SetConfig+0x2e6>
 8004710:	2302      	movs	r3, #2
 8004712:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004716:	e0d4      	b.n	80048c2 <UART_SetConfig+0x2e6>
 8004718:	2304      	movs	r3, #4
 800471a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800471e:	e0d0      	b.n	80048c2 <UART_SetConfig+0x2e6>
 8004720:	2308      	movs	r3, #8
 8004722:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004726:	e0cc      	b.n	80048c2 <UART_SetConfig+0x2e6>
 8004728:	2310      	movs	r3, #16
 800472a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800472e:	e0c8      	b.n	80048c2 <UART_SetConfig+0x2e6>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a5e      	ldr	r2, [pc, #376]	@ (80048b0 <UART_SetConfig+0x2d4>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d125      	bne.n	8004786 <UART_SetConfig+0x1aa>
 800473a:	4b5b      	ldr	r3, [pc, #364]	@ (80048a8 <UART_SetConfig+0x2cc>)
 800473c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004740:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004744:	2b30      	cmp	r3, #48	@ 0x30
 8004746:	d016      	beq.n	8004776 <UART_SetConfig+0x19a>
 8004748:	2b30      	cmp	r3, #48	@ 0x30
 800474a:	d818      	bhi.n	800477e <UART_SetConfig+0x1a2>
 800474c:	2b20      	cmp	r3, #32
 800474e:	d00a      	beq.n	8004766 <UART_SetConfig+0x18a>
 8004750:	2b20      	cmp	r3, #32
 8004752:	d814      	bhi.n	800477e <UART_SetConfig+0x1a2>
 8004754:	2b00      	cmp	r3, #0
 8004756:	d002      	beq.n	800475e <UART_SetConfig+0x182>
 8004758:	2b10      	cmp	r3, #16
 800475a:	d008      	beq.n	800476e <UART_SetConfig+0x192>
 800475c:	e00f      	b.n	800477e <UART_SetConfig+0x1a2>
 800475e:	2300      	movs	r3, #0
 8004760:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004764:	e0ad      	b.n	80048c2 <UART_SetConfig+0x2e6>
 8004766:	2302      	movs	r3, #2
 8004768:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800476c:	e0a9      	b.n	80048c2 <UART_SetConfig+0x2e6>
 800476e:	2304      	movs	r3, #4
 8004770:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004774:	e0a5      	b.n	80048c2 <UART_SetConfig+0x2e6>
 8004776:	2308      	movs	r3, #8
 8004778:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800477c:	e0a1      	b.n	80048c2 <UART_SetConfig+0x2e6>
 800477e:	2310      	movs	r3, #16
 8004780:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004784:	e09d      	b.n	80048c2 <UART_SetConfig+0x2e6>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a4a      	ldr	r2, [pc, #296]	@ (80048b4 <UART_SetConfig+0x2d8>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d125      	bne.n	80047dc <UART_SetConfig+0x200>
 8004790:	4b45      	ldr	r3, [pc, #276]	@ (80048a8 <UART_SetConfig+0x2cc>)
 8004792:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004796:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800479a:	2bc0      	cmp	r3, #192	@ 0xc0
 800479c:	d016      	beq.n	80047cc <UART_SetConfig+0x1f0>
 800479e:	2bc0      	cmp	r3, #192	@ 0xc0
 80047a0:	d818      	bhi.n	80047d4 <UART_SetConfig+0x1f8>
 80047a2:	2b80      	cmp	r3, #128	@ 0x80
 80047a4:	d00a      	beq.n	80047bc <UART_SetConfig+0x1e0>
 80047a6:	2b80      	cmp	r3, #128	@ 0x80
 80047a8:	d814      	bhi.n	80047d4 <UART_SetConfig+0x1f8>
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d002      	beq.n	80047b4 <UART_SetConfig+0x1d8>
 80047ae:	2b40      	cmp	r3, #64	@ 0x40
 80047b0:	d008      	beq.n	80047c4 <UART_SetConfig+0x1e8>
 80047b2:	e00f      	b.n	80047d4 <UART_SetConfig+0x1f8>
 80047b4:	2300      	movs	r3, #0
 80047b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047ba:	e082      	b.n	80048c2 <UART_SetConfig+0x2e6>
 80047bc:	2302      	movs	r3, #2
 80047be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047c2:	e07e      	b.n	80048c2 <UART_SetConfig+0x2e6>
 80047c4:	2304      	movs	r3, #4
 80047c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047ca:	e07a      	b.n	80048c2 <UART_SetConfig+0x2e6>
 80047cc:	2308      	movs	r3, #8
 80047ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047d2:	e076      	b.n	80048c2 <UART_SetConfig+0x2e6>
 80047d4:	2310      	movs	r3, #16
 80047d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047da:	e072      	b.n	80048c2 <UART_SetConfig+0x2e6>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a35      	ldr	r2, [pc, #212]	@ (80048b8 <UART_SetConfig+0x2dc>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d12a      	bne.n	800483c <UART_SetConfig+0x260>
 80047e6:	4b30      	ldr	r3, [pc, #192]	@ (80048a8 <UART_SetConfig+0x2cc>)
 80047e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047f4:	d01a      	beq.n	800482c <UART_SetConfig+0x250>
 80047f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047fa:	d81b      	bhi.n	8004834 <UART_SetConfig+0x258>
 80047fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004800:	d00c      	beq.n	800481c <UART_SetConfig+0x240>
 8004802:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004806:	d815      	bhi.n	8004834 <UART_SetConfig+0x258>
 8004808:	2b00      	cmp	r3, #0
 800480a:	d003      	beq.n	8004814 <UART_SetConfig+0x238>
 800480c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004810:	d008      	beq.n	8004824 <UART_SetConfig+0x248>
 8004812:	e00f      	b.n	8004834 <UART_SetConfig+0x258>
 8004814:	2300      	movs	r3, #0
 8004816:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800481a:	e052      	b.n	80048c2 <UART_SetConfig+0x2e6>
 800481c:	2302      	movs	r3, #2
 800481e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004822:	e04e      	b.n	80048c2 <UART_SetConfig+0x2e6>
 8004824:	2304      	movs	r3, #4
 8004826:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800482a:	e04a      	b.n	80048c2 <UART_SetConfig+0x2e6>
 800482c:	2308      	movs	r3, #8
 800482e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004832:	e046      	b.n	80048c2 <UART_SetConfig+0x2e6>
 8004834:	2310      	movs	r3, #16
 8004836:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800483a:	e042      	b.n	80048c2 <UART_SetConfig+0x2e6>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a17      	ldr	r2, [pc, #92]	@ (80048a0 <UART_SetConfig+0x2c4>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d13a      	bne.n	80048bc <UART_SetConfig+0x2e0>
 8004846:	4b18      	ldr	r3, [pc, #96]	@ (80048a8 <UART_SetConfig+0x2cc>)
 8004848:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800484c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004850:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004854:	d01a      	beq.n	800488c <UART_SetConfig+0x2b0>
 8004856:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800485a:	d81b      	bhi.n	8004894 <UART_SetConfig+0x2b8>
 800485c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004860:	d00c      	beq.n	800487c <UART_SetConfig+0x2a0>
 8004862:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004866:	d815      	bhi.n	8004894 <UART_SetConfig+0x2b8>
 8004868:	2b00      	cmp	r3, #0
 800486a:	d003      	beq.n	8004874 <UART_SetConfig+0x298>
 800486c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004870:	d008      	beq.n	8004884 <UART_SetConfig+0x2a8>
 8004872:	e00f      	b.n	8004894 <UART_SetConfig+0x2b8>
 8004874:	2300      	movs	r3, #0
 8004876:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800487a:	e022      	b.n	80048c2 <UART_SetConfig+0x2e6>
 800487c:	2302      	movs	r3, #2
 800487e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004882:	e01e      	b.n	80048c2 <UART_SetConfig+0x2e6>
 8004884:	2304      	movs	r3, #4
 8004886:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800488a:	e01a      	b.n	80048c2 <UART_SetConfig+0x2e6>
 800488c:	2308      	movs	r3, #8
 800488e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004892:	e016      	b.n	80048c2 <UART_SetConfig+0x2e6>
 8004894:	2310      	movs	r3, #16
 8004896:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800489a:	e012      	b.n	80048c2 <UART_SetConfig+0x2e6>
 800489c:	efff69f3 	.word	0xefff69f3
 80048a0:	40008000 	.word	0x40008000
 80048a4:	40013800 	.word	0x40013800
 80048a8:	40021000 	.word	0x40021000
 80048ac:	40004400 	.word	0x40004400
 80048b0:	40004800 	.word	0x40004800
 80048b4:	40004c00 	.word	0x40004c00
 80048b8:	40005000 	.word	0x40005000
 80048bc:	2310      	movs	r3, #16
 80048be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a9f      	ldr	r2, [pc, #636]	@ (8004b44 <UART_SetConfig+0x568>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d17a      	bne.n	80049c2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80048cc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80048d0:	2b08      	cmp	r3, #8
 80048d2:	d824      	bhi.n	800491e <UART_SetConfig+0x342>
 80048d4:	a201      	add	r2, pc, #4	@ (adr r2, 80048dc <UART_SetConfig+0x300>)
 80048d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048da:	bf00      	nop
 80048dc:	08004901 	.word	0x08004901
 80048e0:	0800491f 	.word	0x0800491f
 80048e4:	08004909 	.word	0x08004909
 80048e8:	0800491f 	.word	0x0800491f
 80048ec:	0800490f 	.word	0x0800490f
 80048f0:	0800491f 	.word	0x0800491f
 80048f4:	0800491f 	.word	0x0800491f
 80048f8:	0800491f 	.word	0x0800491f
 80048fc:	08004917 	.word	0x08004917
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004900:	f7ff f8d6 	bl	8003ab0 <HAL_RCC_GetPCLK1Freq>
 8004904:	61f8      	str	r0, [r7, #28]
        break;
 8004906:	e010      	b.n	800492a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004908:	4b8f      	ldr	r3, [pc, #572]	@ (8004b48 <UART_SetConfig+0x56c>)
 800490a:	61fb      	str	r3, [r7, #28]
        break;
 800490c:	e00d      	b.n	800492a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800490e:	f7ff f837 	bl	8003980 <HAL_RCC_GetSysClockFreq>
 8004912:	61f8      	str	r0, [r7, #28]
        break;
 8004914:	e009      	b.n	800492a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004916:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800491a:	61fb      	str	r3, [r7, #28]
        break;
 800491c:	e005      	b.n	800492a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800491e:	2300      	movs	r3, #0
 8004920:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004928:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	2b00      	cmp	r3, #0
 800492e:	f000 80fb 	beq.w	8004b28 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	685a      	ldr	r2, [r3, #4]
 8004936:	4613      	mov	r3, r2
 8004938:	005b      	lsls	r3, r3, #1
 800493a:	4413      	add	r3, r2
 800493c:	69fa      	ldr	r2, [r7, #28]
 800493e:	429a      	cmp	r2, r3
 8004940:	d305      	bcc.n	800494e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004948:	69fa      	ldr	r2, [r7, #28]
 800494a:	429a      	cmp	r2, r3
 800494c:	d903      	bls.n	8004956 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004954:	e0e8      	b.n	8004b28 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	2200      	movs	r2, #0
 800495a:	461c      	mov	r4, r3
 800495c:	4615      	mov	r5, r2
 800495e:	f04f 0200 	mov.w	r2, #0
 8004962:	f04f 0300 	mov.w	r3, #0
 8004966:	022b      	lsls	r3, r5, #8
 8004968:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800496c:	0222      	lsls	r2, r4, #8
 800496e:	68f9      	ldr	r1, [r7, #12]
 8004970:	6849      	ldr	r1, [r1, #4]
 8004972:	0849      	lsrs	r1, r1, #1
 8004974:	2000      	movs	r0, #0
 8004976:	4688      	mov	r8, r1
 8004978:	4681      	mov	r9, r0
 800497a:	eb12 0a08 	adds.w	sl, r2, r8
 800497e:	eb43 0b09 	adc.w	fp, r3, r9
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	603b      	str	r3, [r7, #0]
 800498a:	607a      	str	r2, [r7, #4]
 800498c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004990:	4650      	mov	r0, sl
 8004992:	4659      	mov	r1, fp
 8004994:	f7fb fc18 	bl	80001c8 <__aeabi_uldivmod>
 8004998:	4602      	mov	r2, r0
 800499a:	460b      	mov	r3, r1
 800499c:	4613      	mov	r3, r2
 800499e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049a6:	d308      	bcc.n	80049ba <UART_SetConfig+0x3de>
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049ae:	d204      	bcs.n	80049ba <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	69ba      	ldr	r2, [r7, #24]
 80049b6:	60da      	str	r2, [r3, #12]
 80049b8:	e0b6      	b.n	8004b28 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80049c0:	e0b2      	b.n	8004b28 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	69db      	ldr	r3, [r3, #28]
 80049c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049ca:	d15e      	bne.n	8004a8a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80049cc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80049d0:	2b08      	cmp	r3, #8
 80049d2:	d828      	bhi.n	8004a26 <UART_SetConfig+0x44a>
 80049d4:	a201      	add	r2, pc, #4	@ (adr r2, 80049dc <UART_SetConfig+0x400>)
 80049d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049da:	bf00      	nop
 80049dc:	08004a01 	.word	0x08004a01
 80049e0:	08004a09 	.word	0x08004a09
 80049e4:	08004a11 	.word	0x08004a11
 80049e8:	08004a27 	.word	0x08004a27
 80049ec:	08004a17 	.word	0x08004a17
 80049f0:	08004a27 	.word	0x08004a27
 80049f4:	08004a27 	.word	0x08004a27
 80049f8:	08004a27 	.word	0x08004a27
 80049fc:	08004a1f 	.word	0x08004a1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a00:	f7ff f856 	bl	8003ab0 <HAL_RCC_GetPCLK1Freq>
 8004a04:	61f8      	str	r0, [r7, #28]
        break;
 8004a06:	e014      	b.n	8004a32 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a08:	f7ff f868 	bl	8003adc <HAL_RCC_GetPCLK2Freq>
 8004a0c:	61f8      	str	r0, [r7, #28]
        break;
 8004a0e:	e010      	b.n	8004a32 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a10:	4b4d      	ldr	r3, [pc, #308]	@ (8004b48 <UART_SetConfig+0x56c>)
 8004a12:	61fb      	str	r3, [r7, #28]
        break;
 8004a14:	e00d      	b.n	8004a32 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a16:	f7fe ffb3 	bl	8003980 <HAL_RCC_GetSysClockFreq>
 8004a1a:	61f8      	str	r0, [r7, #28]
        break;
 8004a1c:	e009      	b.n	8004a32 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a22:	61fb      	str	r3, [r7, #28]
        break;
 8004a24:	e005      	b.n	8004a32 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004a26:	2300      	movs	r3, #0
 8004a28:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004a30:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d077      	beq.n	8004b28 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	005a      	lsls	r2, r3, #1
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	085b      	lsrs	r3, r3, #1
 8004a42:	441a      	add	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a4c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	2b0f      	cmp	r3, #15
 8004a52:	d916      	bls.n	8004a82 <UART_SetConfig+0x4a6>
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a5a:	d212      	bcs.n	8004a82 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	f023 030f 	bic.w	r3, r3, #15
 8004a64:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	085b      	lsrs	r3, r3, #1
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	f003 0307 	and.w	r3, r3, #7
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	8afb      	ldrh	r3, [r7, #22]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	8afa      	ldrh	r2, [r7, #22]
 8004a7e:	60da      	str	r2, [r3, #12]
 8004a80:	e052      	b.n	8004b28 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004a88:	e04e      	b.n	8004b28 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a8a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004a8e:	2b08      	cmp	r3, #8
 8004a90:	d827      	bhi.n	8004ae2 <UART_SetConfig+0x506>
 8004a92:	a201      	add	r2, pc, #4	@ (adr r2, 8004a98 <UART_SetConfig+0x4bc>)
 8004a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a98:	08004abd 	.word	0x08004abd
 8004a9c:	08004ac5 	.word	0x08004ac5
 8004aa0:	08004acd 	.word	0x08004acd
 8004aa4:	08004ae3 	.word	0x08004ae3
 8004aa8:	08004ad3 	.word	0x08004ad3
 8004aac:	08004ae3 	.word	0x08004ae3
 8004ab0:	08004ae3 	.word	0x08004ae3
 8004ab4:	08004ae3 	.word	0x08004ae3
 8004ab8:	08004adb 	.word	0x08004adb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004abc:	f7fe fff8 	bl	8003ab0 <HAL_RCC_GetPCLK1Freq>
 8004ac0:	61f8      	str	r0, [r7, #28]
        break;
 8004ac2:	e014      	b.n	8004aee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ac4:	f7ff f80a 	bl	8003adc <HAL_RCC_GetPCLK2Freq>
 8004ac8:	61f8      	str	r0, [r7, #28]
        break;
 8004aca:	e010      	b.n	8004aee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004acc:	4b1e      	ldr	r3, [pc, #120]	@ (8004b48 <UART_SetConfig+0x56c>)
 8004ace:	61fb      	str	r3, [r7, #28]
        break;
 8004ad0:	e00d      	b.n	8004aee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ad2:	f7fe ff55 	bl	8003980 <HAL_RCC_GetSysClockFreq>
 8004ad6:	61f8      	str	r0, [r7, #28]
        break;
 8004ad8:	e009      	b.n	8004aee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ada:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ade:	61fb      	str	r3, [r7, #28]
        break;
 8004ae0:	e005      	b.n	8004aee <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004aec:	bf00      	nop
    }

    if (pclk != 0U)
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d019      	beq.n	8004b28 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	085a      	lsrs	r2, r3, #1
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	441a      	add	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b06:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	2b0f      	cmp	r3, #15
 8004b0c:	d909      	bls.n	8004b22 <UART_SetConfig+0x546>
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b14:	d205      	bcs.n	8004b22 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	b29a      	uxth	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	60da      	str	r2, [r3, #12]
 8004b20:	e002      	b.n	8004b28 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004b34:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3728      	adds	r7, #40	@ 0x28
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b42:	bf00      	nop
 8004b44:	40008000 	.word	0x40008000
 8004b48:	00f42400 	.word	0x00f42400

08004b4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b58:	f003 0308 	and.w	r3, r3, #8
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d00a      	beq.n	8004b76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	430a      	orrs	r2, r1
 8004b74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b7a:	f003 0301 	and.w	r3, r3, #1
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00a      	beq.n	8004b98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	430a      	orrs	r2, r1
 8004b96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b9c:	f003 0302 	and.w	r3, r3, #2
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d00a      	beq.n	8004bba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bbe:	f003 0304 	and.w	r3, r3, #4
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00a      	beq.n	8004bdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004be0:	f003 0310 	and.w	r3, r3, #16
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d00a      	beq.n	8004bfe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c02:	f003 0320 	and.w	r3, r3, #32
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00a      	beq.n	8004c20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d01a      	beq.n	8004c62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c4a:	d10a      	bne.n	8004c62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00a      	beq.n	8004c84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	430a      	orrs	r2, r1
 8004c82:	605a      	str	r2, [r3, #4]
  }
}
 8004c84:	bf00      	nop
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b098      	sub	sp, #96	@ 0x60
 8004c94:	af02      	add	r7, sp, #8
 8004c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ca0:	f7fc fd24 	bl	80016ec <HAL_GetTick>
 8004ca4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0308 	and.w	r3, r3, #8
 8004cb0:	2b08      	cmp	r3, #8
 8004cb2:	d12e      	bne.n	8004d12 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cb4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004cb8:	9300      	str	r3, [sp, #0]
 8004cba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 f88c 	bl	8004de0 <UART_WaitOnFlagUntilTimeout>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d021      	beq.n	8004d12 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cd6:	e853 3f00 	ldrex	r3, [r3]
 8004cda:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004cdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cde:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ce2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	461a      	mov	r2, r3
 8004cea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004cec:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cee:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004cf2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004cf4:	e841 2300 	strex	r3, r2, [r1]
 8004cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004cfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1e6      	bne.n	8004cce <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2220      	movs	r2, #32
 8004d04:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e062      	b.n	8004dd8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0304 	and.w	r3, r3, #4
 8004d1c:	2b04      	cmp	r3, #4
 8004d1e:	d149      	bne.n	8004db4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d20:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004d24:	9300      	str	r3, [sp, #0]
 8004d26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 f856 	bl	8004de0 <UART_WaitOnFlagUntilTimeout>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d03c      	beq.n	8004db4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d42:	e853 3f00 	ldrex	r3, [r3]
 8004d46:	623b      	str	r3, [r7, #32]
   return(result);
 8004d48:	6a3b      	ldr	r3, [r7, #32]
 8004d4a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	461a      	mov	r2, r3
 8004d56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d58:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d60:	e841 2300 	strex	r3, r2, [r1]
 8004d64:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1e6      	bne.n	8004d3a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	3308      	adds	r3, #8
 8004d72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	e853 3f00 	ldrex	r3, [r3]
 8004d7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f023 0301 	bic.w	r3, r3, #1
 8004d82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	3308      	adds	r3, #8
 8004d8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d8c:	61fa      	str	r2, [r7, #28]
 8004d8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d90:	69b9      	ldr	r1, [r7, #24]
 8004d92:	69fa      	ldr	r2, [r7, #28]
 8004d94:	e841 2300 	strex	r3, r2, [r1]
 8004d98:	617b      	str	r3, [r7, #20]
   return(result);
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d1e5      	bne.n	8004d6c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2220      	movs	r2, #32
 8004da4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	e011      	b.n	8004dd8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2220      	movs	r2, #32
 8004db8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2220      	movs	r2, #32
 8004dbe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3758      	adds	r7, #88	@ 0x58
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	603b      	str	r3, [r7, #0]
 8004dec:	4613      	mov	r3, r2
 8004dee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004df0:	e04f      	b.n	8004e92 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df8:	d04b      	beq.n	8004e92 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dfa:	f7fc fc77 	bl	80016ec <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	69ba      	ldr	r2, [r7, #24]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d302      	bcc.n	8004e10 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d101      	bne.n	8004e14 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e04e      	b.n	8004eb2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0304 	and.w	r3, r3, #4
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d037      	beq.n	8004e92 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	2b80      	cmp	r3, #128	@ 0x80
 8004e26:	d034      	beq.n	8004e92 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	2b40      	cmp	r3, #64	@ 0x40
 8004e2c:	d031      	beq.n	8004e92 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	69db      	ldr	r3, [r3, #28]
 8004e34:	f003 0308 	and.w	r3, r3, #8
 8004e38:	2b08      	cmp	r3, #8
 8004e3a:	d110      	bne.n	8004e5e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2208      	movs	r2, #8
 8004e42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e44:	68f8      	ldr	r0, [r7, #12]
 8004e46:	f000 f838 	bl	8004eba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2208      	movs	r2, #8
 8004e4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e029      	b.n	8004eb2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	69db      	ldr	r3, [r3, #28]
 8004e64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e6c:	d111      	bne.n	8004e92 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004e76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e78:	68f8      	ldr	r0, [r7, #12]
 8004e7a:	f000 f81e 	bl	8004eba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2220      	movs	r2, #32
 8004e82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e00f      	b.n	8004eb2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	69da      	ldr	r2, [r3, #28]
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	68ba      	ldr	r2, [r7, #8]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	bf0c      	ite	eq
 8004ea2:	2301      	moveq	r3, #1
 8004ea4:	2300      	movne	r3, #0
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	79fb      	ldrb	r3, [r7, #7]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d0a0      	beq.n	8004df2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3710      	adds	r7, #16
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b095      	sub	sp, #84	@ 0x54
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eca:	e853 3f00 	ldrex	r3, [r3]
 8004ece:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ed6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	461a      	mov	r2, r3
 8004ede:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ee0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ee2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004ee6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ee8:	e841 2300 	strex	r3, r2, [r1]
 8004eec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d1e6      	bne.n	8004ec2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	3308      	adds	r3, #8
 8004efa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004efc:	6a3b      	ldr	r3, [r7, #32]
 8004efe:	e853 3f00 	ldrex	r3, [r3]
 8004f02:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	f023 0301 	bic.w	r3, r3, #1
 8004f0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	3308      	adds	r3, #8
 8004f12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f14:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f16:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f1c:	e841 2300 	strex	r3, r2, [r1]
 8004f20:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1e5      	bne.n	8004ef4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d118      	bne.n	8004f62 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	e853 3f00 	ldrex	r3, [r3]
 8004f3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	f023 0310 	bic.w	r3, r3, #16
 8004f44:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f4e:	61bb      	str	r3, [r7, #24]
 8004f50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f52:	6979      	ldr	r1, [r7, #20]
 8004f54:	69ba      	ldr	r2, [r7, #24]
 8004f56:	e841 2300 	strex	r3, r2, [r1]
 8004f5a:	613b      	str	r3, [r7, #16]
   return(result);
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1e6      	bne.n	8004f30 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2220      	movs	r2, #32
 8004f66:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004f76:	bf00      	nop
 8004f78:	3754      	adds	r7, #84	@ 0x54
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
	...

08004f84 <std>:
 8004f84:	2300      	movs	r3, #0
 8004f86:	b510      	push	{r4, lr}
 8004f88:	4604      	mov	r4, r0
 8004f8a:	e9c0 3300 	strd	r3, r3, [r0]
 8004f8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f92:	6083      	str	r3, [r0, #8]
 8004f94:	8181      	strh	r1, [r0, #12]
 8004f96:	6643      	str	r3, [r0, #100]	@ 0x64
 8004f98:	81c2      	strh	r2, [r0, #14]
 8004f9a:	6183      	str	r3, [r0, #24]
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	2208      	movs	r2, #8
 8004fa0:	305c      	adds	r0, #92	@ 0x5c
 8004fa2:	f000 f9e7 	bl	8005374 <memset>
 8004fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8004fdc <std+0x58>)
 8004fa8:	6263      	str	r3, [r4, #36]	@ 0x24
 8004faa:	4b0d      	ldr	r3, [pc, #52]	@ (8004fe0 <std+0x5c>)
 8004fac:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004fae:	4b0d      	ldr	r3, [pc, #52]	@ (8004fe4 <std+0x60>)
 8004fb0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8004fe8 <std+0x64>)
 8004fb4:	6323      	str	r3, [r4, #48]	@ 0x30
 8004fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8004fec <std+0x68>)
 8004fb8:	6224      	str	r4, [r4, #32]
 8004fba:	429c      	cmp	r4, r3
 8004fbc:	d006      	beq.n	8004fcc <std+0x48>
 8004fbe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004fc2:	4294      	cmp	r4, r2
 8004fc4:	d002      	beq.n	8004fcc <std+0x48>
 8004fc6:	33d0      	adds	r3, #208	@ 0xd0
 8004fc8:	429c      	cmp	r4, r3
 8004fca:	d105      	bne.n	8004fd8 <std+0x54>
 8004fcc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004fd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fd4:	f000 ba46 	b.w	8005464 <__retarget_lock_init_recursive>
 8004fd8:	bd10      	pop	{r4, pc}
 8004fda:	bf00      	nop
 8004fdc:	080051c5 	.word	0x080051c5
 8004fe0:	080051e7 	.word	0x080051e7
 8004fe4:	0800521f 	.word	0x0800521f
 8004fe8:	08005243 	.word	0x08005243
 8004fec:	2000040c 	.word	0x2000040c

08004ff0 <stdio_exit_handler>:
 8004ff0:	4a02      	ldr	r2, [pc, #8]	@ (8004ffc <stdio_exit_handler+0xc>)
 8004ff2:	4903      	ldr	r1, [pc, #12]	@ (8005000 <stdio_exit_handler+0x10>)
 8004ff4:	4803      	ldr	r0, [pc, #12]	@ (8005004 <stdio_exit_handler+0x14>)
 8004ff6:	f000 b869 	b.w	80050cc <_fwalk_sglue>
 8004ffa:	bf00      	nop
 8004ffc:	20000044 	.word	0x20000044
 8005000:	08005765 	.word	0x08005765
 8005004:	20000054 	.word	0x20000054

08005008 <cleanup_stdio>:
 8005008:	6841      	ldr	r1, [r0, #4]
 800500a:	4b0c      	ldr	r3, [pc, #48]	@ (800503c <cleanup_stdio+0x34>)
 800500c:	4299      	cmp	r1, r3
 800500e:	b510      	push	{r4, lr}
 8005010:	4604      	mov	r4, r0
 8005012:	d001      	beq.n	8005018 <cleanup_stdio+0x10>
 8005014:	f000 fba6 	bl	8005764 <_fflush_r>
 8005018:	68a1      	ldr	r1, [r4, #8]
 800501a:	4b09      	ldr	r3, [pc, #36]	@ (8005040 <cleanup_stdio+0x38>)
 800501c:	4299      	cmp	r1, r3
 800501e:	d002      	beq.n	8005026 <cleanup_stdio+0x1e>
 8005020:	4620      	mov	r0, r4
 8005022:	f000 fb9f 	bl	8005764 <_fflush_r>
 8005026:	68e1      	ldr	r1, [r4, #12]
 8005028:	4b06      	ldr	r3, [pc, #24]	@ (8005044 <cleanup_stdio+0x3c>)
 800502a:	4299      	cmp	r1, r3
 800502c:	d004      	beq.n	8005038 <cleanup_stdio+0x30>
 800502e:	4620      	mov	r0, r4
 8005030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005034:	f000 bb96 	b.w	8005764 <_fflush_r>
 8005038:	bd10      	pop	{r4, pc}
 800503a:	bf00      	nop
 800503c:	2000040c 	.word	0x2000040c
 8005040:	20000474 	.word	0x20000474
 8005044:	200004dc 	.word	0x200004dc

08005048 <global_stdio_init.part.0>:
 8005048:	b510      	push	{r4, lr}
 800504a:	4b0b      	ldr	r3, [pc, #44]	@ (8005078 <global_stdio_init.part.0+0x30>)
 800504c:	4c0b      	ldr	r4, [pc, #44]	@ (800507c <global_stdio_init.part.0+0x34>)
 800504e:	4a0c      	ldr	r2, [pc, #48]	@ (8005080 <global_stdio_init.part.0+0x38>)
 8005050:	601a      	str	r2, [r3, #0]
 8005052:	4620      	mov	r0, r4
 8005054:	2200      	movs	r2, #0
 8005056:	2104      	movs	r1, #4
 8005058:	f7ff ff94 	bl	8004f84 <std>
 800505c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005060:	2201      	movs	r2, #1
 8005062:	2109      	movs	r1, #9
 8005064:	f7ff ff8e 	bl	8004f84 <std>
 8005068:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800506c:	2202      	movs	r2, #2
 800506e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005072:	2112      	movs	r1, #18
 8005074:	f7ff bf86 	b.w	8004f84 <std>
 8005078:	20000544 	.word	0x20000544
 800507c:	2000040c 	.word	0x2000040c
 8005080:	08004ff1 	.word	0x08004ff1

08005084 <__sfp_lock_acquire>:
 8005084:	4801      	ldr	r0, [pc, #4]	@ (800508c <__sfp_lock_acquire+0x8>)
 8005086:	f000 b9ee 	b.w	8005466 <__retarget_lock_acquire_recursive>
 800508a:	bf00      	nop
 800508c:	2000054d 	.word	0x2000054d

08005090 <__sfp_lock_release>:
 8005090:	4801      	ldr	r0, [pc, #4]	@ (8005098 <__sfp_lock_release+0x8>)
 8005092:	f000 b9e9 	b.w	8005468 <__retarget_lock_release_recursive>
 8005096:	bf00      	nop
 8005098:	2000054d 	.word	0x2000054d

0800509c <__sinit>:
 800509c:	b510      	push	{r4, lr}
 800509e:	4604      	mov	r4, r0
 80050a0:	f7ff fff0 	bl	8005084 <__sfp_lock_acquire>
 80050a4:	6a23      	ldr	r3, [r4, #32]
 80050a6:	b11b      	cbz	r3, 80050b0 <__sinit+0x14>
 80050a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050ac:	f7ff bff0 	b.w	8005090 <__sfp_lock_release>
 80050b0:	4b04      	ldr	r3, [pc, #16]	@ (80050c4 <__sinit+0x28>)
 80050b2:	6223      	str	r3, [r4, #32]
 80050b4:	4b04      	ldr	r3, [pc, #16]	@ (80050c8 <__sinit+0x2c>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d1f5      	bne.n	80050a8 <__sinit+0xc>
 80050bc:	f7ff ffc4 	bl	8005048 <global_stdio_init.part.0>
 80050c0:	e7f2      	b.n	80050a8 <__sinit+0xc>
 80050c2:	bf00      	nop
 80050c4:	08005009 	.word	0x08005009
 80050c8:	20000544 	.word	0x20000544

080050cc <_fwalk_sglue>:
 80050cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050d0:	4607      	mov	r7, r0
 80050d2:	4688      	mov	r8, r1
 80050d4:	4614      	mov	r4, r2
 80050d6:	2600      	movs	r6, #0
 80050d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80050dc:	f1b9 0901 	subs.w	r9, r9, #1
 80050e0:	d505      	bpl.n	80050ee <_fwalk_sglue+0x22>
 80050e2:	6824      	ldr	r4, [r4, #0]
 80050e4:	2c00      	cmp	r4, #0
 80050e6:	d1f7      	bne.n	80050d8 <_fwalk_sglue+0xc>
 80050e8:	4630      	mov	r0, r6
 80050ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050ee:	89ab      	ldrh	r3, [r5, #12]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d907      	bls.n	8005104 <_fwalk_sglue+0x38>
 80050f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80050f8:	3301      	adds	r3, #1
 80050fa:	d003      	beq.n	8005104 <_fwalk_sglue+0x38>
 80050fc:	4629      	mov	r1, r5
 80050fe:	4638      	mov	r0, r7
 8005100:	47c0      	blx	r8
 8005102:	4306      	orrs	r6, r0
 8005104:	3568      	adds	r5, #104	@ 0x68
 8005106:	e7e9      	b.n	80050dc <_fwalk_sglue+0x10>

08005108 <_puts_r>:
 8005108:	6a03      	ldr	r3, [r0, #32]
 800510a:	b570      	push	{r4, r5, r6, lr}
 800510c:	6884      	ldr	r4, [r0, #8]
 800510e:	4605      	mov	r5, r0
 8005110:	460e      	mov	r6, r1
 8005112:	b90b      	cbnz	r3, 8005118 <_puts_r+0x10>
 8005114:	f7ff ffc2 	bl	800509c <__sinit>
 8005118:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800511a:	07db      	lsls	r3, r3, #31
 800511c:	d405      	bmi.n	800512a <_puts_r+0x22>
 800511e:	89a3      	ldrh	r3, [r4, #12]
 8005120:	0598      	lsls	r0, r3, #22
 8005122:	d402      	bmi.n	800512a <_puts_r+0x22>
 8005124:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005126:	f000 f99e 	bl	8005466 <__retarget_lock_acquire_recursive>
 800512a:	89a3      	ldrh	r3, [r4, #12]
 800512c:	0719      	lsls	r1, r3, #28
 800512e:	d502      	bpl.n	8005136 <_puts_r+0x2e>
 8005130:	6923      	ldr	r3, [r4, #16]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d135      	bne.n	80051a2 <_puts_r+0x9a>
 8005136:	4621      	mov	r1, r4
 8005138:	4628      	mov	r0, r5
 800513a:	f000 f8c5 	bl	80052c8 <__swsetup_r>
 800513e:	b380      	cbz	r0, 80051a2 <_puts_r+0x9a>
 8005140:	f04f 35ff 	mov.w	r5, #4294967295
 8005144:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005146:	07da      	lsls	r2, r3, #31
 8005148:	d405      	bmi.n	8005156 <_puts_r+0x4e>
 800514a:	89a3      	ldrh	r3, [r4, #12]
 800514c:	059b      	lsls	r3, r3, #22
 800514e:	d402      	bmi.n	8005156 <_puts_r+0x4e>
 8005150:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005152:	f000 f989 	bl	8005468 <__retarget_lock_release_recursive>
 8005156:	4628      	mov	r0, r5
 8005158:	bd70      	pop	{r4, r5, r6, pc}
 800515a:	2b00      	cmp	r3, #0
 800515c:	da04      	bge.n	8005168 <_puts_r+0x60>
 800515e:	69a2      	ldr	r2, [r4, #24]
 8005160:	429a      	cmp	r2, r3
 8005162:	dc17      	bgt.n	8005194 <_puts_r+0x8c>
 8005164:	290a      	cmp	r1, #10
 8005166:	d015      	beq.n	8005194 <_puts_r+0x8c>
 8005168:	6823      	ldr	r3, [r4, #0]
 800516a:	1c5a      	adds	r2, r3, #1
 800516c:	6022      	str	r2, [r4, #0]
 800516e:	7019      	strb	r1, [r3, #0]
 8005170:	68a3      	ldr	r3, [r4, #8]
 8005172:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005176:	3b01      	subs	r3, #1
 8005178:	60a3      	str	r3, [r4, #8]
 800517a:	2900      	cmp	r1, #0
 800517c:	d1ed      	bne.n	800515a <_puts_r+0x52>
 800517e:	2b00      	cmp	r3, #0
 8005180:	da11      	bge.n	80051a6 <_puts_r+0x9e>
 8005182:	4622      	mov	r2, r4
 8005184:	210a      	movs	r1, #10
 8005186:	4628      	mov	r0, r5
 8005188:	f000 f85f 	bl	800524a <__swbuf_r>
 800518c:	3001      	adds	r0, #1
 800518e:	d0d7      	beq.n	8005140 <_puts_r+0x38>
 8005190:	250a      	movs	r5, #10
 8005192:	e7d7      	b.n	8005144 <_puts_r+0x3c>
 8005194:	4622      	mov	r2, r4
 8005196:	4628      	mov	r0, r5
 8005198:	f000 f857 	bl	800524a <__swbuf_r>
 800519c:	3001      	adds	r0, #1
 800519e:	d1e7      	bne.n	8005170 <_puts_r+0x68>
 80051a0:	e7ce      	b.n	8005140 <_puts_r+0x38>
 80051a2:	3e01      	subs	r6, #1
 80051a4:	e7e4      	b.n	8005170 <_puts_r+0x68>
 80051a6:	6823      	ldr	r3, [r4, #0]
 80051a8:	1c5a      	adds	r2, r3, #1
 80051aa:	6022      	str	r2, [r4, #0]
 80051ac:	220a      	movs	r2, #10
 80051ae:	701a      	strb	r2, [r3, #0]
 80051b0:	e7ee      	b.n	8005190 <_puts_r+0x88>
	...

080051b4 <puts>:
 80051b4:	4b02      	ldr	r3, [pc, #8]	@ (80051c0 <puts+0xc>)
 80051b6:	4601      	mov	r1, r0
 80051b8:	6818      	ldr	r0, [r3, #0]
 80051ba:	f7ff bfa5 	b.w	8005108 <_puts_r>
 80051be:	bf00      	nop
 80051c0:	20000050 	.word	0x20000050

080051c4 <__sread>:
 80051c4:	b510      	push	{r4, lr}
 80051c6:	460c      	mov	r4, r1
 80051c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051cc:	f000 f8fc 	bl	80053c8 <_read_r>
 80051d0:	2800      	cmp	r0, #0
 80051d2:	bfab      	itete	ge
 80051d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80051d6:	89a3      	ldrhlt	r3, [r4, #12]
 80051d8:	181b      	addge	r3, r3, r0
 80051da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80051de:	bfac      	ite	ge
 80051e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80051e2:	81a3      	strhlt	r3, [r4, #12]
 80051e4:	bd10      	pop	{r4, pc}

080051e6 <__swrite>:
 80051e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051ea:	461f      	mov	r7, r3
 80051ec:	898b      	ldrh	r3, [r1, #12]
 80051ee:	05db      	lsls	r3, r3, #23
 80051f0:	4605      	mov	r5, r0
 80051f2:	460c      	mov	r4, r1
 80051f4:	4616      	mov	r6, r2
 80051f6:	d505      	bpl.n	8005204 <__swrite+0x1e>
 80051f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051fc:	2302      	movs	r3, #2
 80051fe:	2200      	movs	r2, #0
 8005200:	f000 f8d0 	bl	80053a4 <_lseek_r>
 8005204:	89a3      	ldrh	r3, [r4, #12]
 8005206:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800520a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800520e:	81a3      	strh	r3, [r4, #12]
 8005210:	4632      	mov	r2, r6
 8005212:	463b      	mov	r3, r7
 8005214:	4628      	mov	r0, r5
 8005216:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800521a:	f000 b8e7 	b.w	80053ec <_write_r>

0800521e <__sseek>:
 800521e:	b510      	push	{r4, lr}
 8005220:	460c      	mov	r4, r1
 8005222:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005226:	f000 f8bd 	bl	80053a4 <_lseek_r>
 800522a:	1c43      	adds	r3, r0, #1
 800522c:	89a3      	ldrh	r3, [r4, #12]
 800522e:	bf15      	itete	ne
 8005230:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005232:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005236:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800523a:	81a3      	strheq	r3, [r4, #12]
 800523c:	bf18      	it	ne
 800523e:	81a3      	strhne	r3, [r4, #12]
 8005240:	bd10      	pop	{r4, pc}

08005242 <__sclose>:
 8005242:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005246:	f000 b89d 	b.w	8005384 <_close_r>

0800524a <__swbuf_r>:
 800524a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800524c:	460e      	mov	r6, r1
 800524e:	4614      	mov	r4, r2
 8005250:	4605      	mov	r5, r0
 8005252:	b118      	cbz	r0, 800525c <__swbuf_r+0x12>
 8005254:	6a03      	ldr	r3, [r0, #32]
 8005256:	b90b      	cbnz	r3, 800525c <__swbuf_r+0x12>
 8005258:	f7ff ff20 	bl	800509c <__sinit>
 800525c:	69a3      	ldr	r3, [r4, #24]
 800525e:	60a3      	str	r3, [r4, #8]
 8005260:	89a3      	ldrh	r3, [r4, #12]
 8005262:	071a      	lsls	r2, r3, #28
 8005264:	d501      	bpl.n	800526a <__swbuf_r+0x20>
 8005266:	6923      	ldr	r3, [r4, #16]
 8005268:	b943      	cbnz	r3, 800527c <__swbuf_r+0x32>
 800526a:	4621      	mov	r1, r4
 800526c:	4628      	mov	r0, r5
 800526e:	f000 f82b 	bl	80052c8 <__swsetup_r>
 8005272:	b118      	cbz	r0, 800527c <__swbuf_r+0x32>
 8005274:	f04f 37ff 	mov.w	r7, #4294967295
 8005278:	4638      	mov	r0, r7
 800527a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800527c:	6823      	ldr	r3, [r4, #0]
 800527e:	6922      	ldr	r2, [r4, #16]
 8005280:	1a98      	subs	r0, r3, r2
 8005282:	6963      	ldr	r3, [r4, #20]
 8005284:	b2f6      	uxtb	r6, r6
 8005286:	4283      	cmp	r3, r0
 8005288:	4637      	mov	r7, r6
 800528a:	dc05      	bgt.n	8005298 <__swbuf_r+0x4e>
 800528c:	4621      	mov	r1, r4
 800528e:	4628      	mov	r0, r5
 8005290:	f000 fa68 	bl	8005764 <_fflush_r>
 8005294:	2800      	cmp	r0, #0
 8005296:	d1ed      	bne.n	8005274 <__swbuf_r+0x2a>
 8005298:	68a3      	ldr	r3, [r4, #8]
 800529a:	3b01      	subs	r3, #1
 800529c:	60a3      	str	r3, [r4, #8]
 800529e:	6823      	ldr	r3, [r4, #0]
 80052a0:	1c5a      	adds	r2, r3, #1
 80052a2:	6022      	str	r2, [r4, #0]
 80052a4:	701e      	strb	r6, [r3, #0]
 80052a6:	6962      	ldr	r2, [r4, #20]
 80052a8:	1c43      	adds	r3, r0, #1
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d004      	beq.n	80052b8 <__swbuf_r+0x6e>
 80052ae:	89a3      	ldrh	r3, [r4, #12]
 80052b0:	07db      	lsls	r3, r3, #31
 80052b2:	d5e1      	bpl.n	8005278 <__swbuf_r+0x2e>
 80052b4:	2e0a      	cmp	r6, #10
 80052b6:	d1df      	bne.n	8005278 <__swbuf_r+0x2e>
 80052b8:	4621      	mov	r1, r4
 80052ba:	4628      	mov	r0, r5
 80052bc:	f000 fa52 	bl	8005764 <_fflush_r>
 80052c0:	2800      	cmp	r0, #0
 80052c2:	d0d9      	beq.n	8005278 <__swbuf_r+0x2e>
 80052c4:	e7d6      	b.n	8005274 <__swbuf_r+0x2a>
	...

080052c8 <__swsetup_r>:
 80052c8:	b538      	push	{r3, r4, r5, lr}
 80052ca:	4b29      	ldr	r3, [pc, #164]	@ (8005370 <__swsetup_r+0xa8>)
 80052cc:	4605      	mov	r5, r0
 80052ce:	6818      	ldr	r0, [r3, #0]
 80052d0:	460c      	mov	r4, r1
 80052d2:	b118      	cbz	r0, 80052dc <__swsetup_r+0x14>
 80052d4:	6a03      	ldr	r3, [r0, #32]
 80052d6:	b90b      	cbnz	r3, 80052dc <__swsetup_r+0x14>
 80052d8:	f7ff fee0 	bl	800509c <__sinit>
 80052dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052e0:	0719      	lsls	r1, r3, #28
 80052e2:	d422      	bmi.n	800532a <__swsetup_r+0x62>
 80052e4:	06da      	lsls	r2, r3, #27
 80052e6:	d407      	bmi.n	80052f8 <__swsetup_r+0x30>
 80052e8:	2209      	movs	r2, #9
 80052ea:	602a      	str	r2, [r5, #0]
 80052ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052f0:	81a3      	strh	r3, [r4, #12]
 80052f2:	f04f 30ff 	mov.w	r0, #4294967295
 80052f6:	e033      	b.n	8005360 <__swsetup_r+0x98>
 80052f8:	0758      	lsls	r0, r3, #29
 80052fa:	d512      	bpl.n	8005322 <__swsetup_r+0x5a>
 80052fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80052fe:	b141      	cbz	r1, 8005312 <__swsetup_r+0x4a>
 8005300:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005304:	4299      	cmp	r1, r3
 8005306:	d002      	beq.n	800530e <__swsetup_r+0x46>
 8005308:	4628      	mov	r0, r5
 800530a:	f000 f8af 	bl	800546c <_free_r>
 800530e:	2300      	movs	r3, #0
 8005310:	6363      	str	r3, [r4, #52]	@ 0x34
 8005312:	89a3      	ldrh	r3, [r4, #12]
 8005314:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005318:	81a3      	strh	r3, [r4, #12]
 800531a:	2300      	movs	r3, #0
 800531c:	6063      	str	r3, [r4, #4]
 800531e:	6923      	ldr	r3, [r4, #16]
 8005320:	6023      	str	r3, [r4, #0]
 8005322:	89a3      	ldrh	r3, [r4, #12]
 8005324:	f043 0308 	orr.w	r3, r3, #8
 8005328:	81a3      	strh	r3, [r4, #12]
 800532a:	6923      	ldr	r3, [r4, #16]
 800532c:	b94b      	cbnz	r3, 8005342 <__swsetup_r+0x7a>
 800532e:	89a3      	ldrh	r3, [r4, #12]
 8005330:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005334:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005338:	d003      	beq.n	8005342 <__swsetup_r+0x7a>
 800533a:	4621      	mov	r1, r4
 800533c:	4628      	mov	r0, r5
 800533e:	f000 fa5f 	bl	8005800 <__smakebuf_r>
 8005342:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005346:	f013 0201 	ands.w	r2, r3, #1
 800534a:	d00a      	beq.n	8005362 <__swsetup_r+0x9a>
 800534c:	2200      	movs	r2, #0
 800534e:	60a2      	str	r2, [r4, #8]
 8005350:	6962      	ldr	r2, [r4, #20]
 8005352:	4252      	negs	r2, r2
 8005354:	61a2      	str	r2, [r4, #24]
 8005356:	6922      	ldr	r2, [r4, #16]
 8005358:	b942      	cbnz	r2, 800536c <__swsetup_r+0xa4>
 800535a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800535e:	d1c5      	bne.n	80052ec <__swsetup_r+0x24>
 8005360:	bd38      	pop	{r3, r4, r5, pc}
 8005362:	0799      	lsls	r1, r3, #30
 8005364:	bf58      	it	pl
 8005366:	6962      	ldrpl	r2, [r4, #20]
 8005368:	60a2      	str	r2, [r4, #8]
 800536a:	e7f4      	b.n	8005356 <__swsetup_r+0x8e>
 800536c:	2000      	movs	r0, #0
 800536e:	e7f7      	b.n	8005360 <__swsetup_r+0x98>
 8005370:	20000050 	.word	0x20000050

08005374 <memset>:
 8005374:	4402      	add	r2, r0
 8005376:	4603      	mov	r3, r0
 8005378:	4293      	cmp	r3, r2
 800537a:	d100      	bne.n	800537e <memset+0xa>
 800537c:	4770      	bx	lr
 800537e:	f803 1b01 	strb.w	r1, [r3], #1
 8005382:	e7f9      	b.n	8005378 <memset+0x4>

08005384 <_close_r>:
 8005384:	b538      	push	{r3, r4, r5, lr}
 8005386:	4d06      	ldr	r5, [pc, #24]	@ (80053a0 <_close_r+0x1c>)
 8005388:	2300      	movs	r3, #0
 800538a:	4604      	mov	r4, r0
 800538c:	4608      	mov	r0, r1
 800538e:	602b      	str	r3, [r5, #0]
 8005390:	f7fc f896 	bl	80014c0 <_close>
 8005394:	1c43      	adds	r3, r0, #1
 8005396:	d102      	bne.n	800539e <_close_r+0x1a>
 8005398:	682b      	ldr	r3, [r5, #0]
 800539a:	b103      	cbz	r3, 800539e <_close_r+0x1a>
 800539c:	6023      	str	r3, [r4, #0]
 800539e:	bd38      	pop	{r3, r4, r5, pc}
 80053a0:	20000548 	.word	0x20000548

080053a4 <_lseek_r>:
 80053a4:	b538      	push	{r3, r4, r5, lr}
 80053a6:	4d07      	ldr	r5, [pc, #28]	@ (80053c4 <_lseek_r+0x20>)
 80053a8:	4604      	mov	r4, r0
 80053aa:	4608      	mov	r0, r1
 80053ac:	4611      	mov	r1, r2
 80053ae:	2200      	movs	r2, #0
 80053b0:	602a      	str	r2, [r5, #0]
 80053b2:	461a      	mov	r2, r3
 80053b4:	f7fc f8ab 	bl	800150e <_lseek>
 80053b8:	1c43      	adds	r3, r0, #1
 80053ba:	d102      	bne.n	80053c2 <_lseek_r+0x1e>
 80053bc:	682b      	ldr	r3, [r5, #0]
 80053be:	b103      	cbz	r3, 80053c2 <_lseek_r+0x1e>
 80053c0:	6023      	str	r3, [r4, #0]
 80053c2:	bd38      	pop	{r3, r4, r5, pc}
 80053c4:	20000548 	.word	0x20000548

080053c8 <_read_r>:
 80053c8:	b538      	push	{r3, r4, r5, lr}
 80053ca:	4d07      	ldr	r5, [pc, #28]	@ (80053e8 <_read_r+0x20>)
 80053cc:	4604      	mov	r4, r0
 80053ce:	4608      	mov	r0, r1
 80053d0:	4611      	mov	r1, r2
 80053d2:	2200      	movs	r2, #0
 80053d4:	602a      	str	r2, [r5, #0]
 80053d6:	461a      	mov	r2, r3
 80053d8:	f7fc f839 	bl	800144e <_read>
 80053dc:	1c43      	adds	r3, r0, #1
 80053de:	d102      	bne.n	80053e6 <_read_r+0x1e>
 80053e0:	682b      	ldr	r3, [r5, #0]
 80053e2:	b103      	cbz	r3, 80053e6 <_read_r+0x1e>
 80053e4:	6023      	str	r3, [r4, #0]
 80053e6:	bd38      	pop	{r3, r4, r5, pc}
 80053e8:	20000548 	.word	0x20000548

080053ec <_write_r>:
 80053ec:	b538      	push	{r3, r4, r5, lr}
 80053ee:	4d07      	ldr	r5, [pc, #28]	@ (800540c <_write_r+0x20>)
 80053f0:	4604      	mov	r4, r0
 80053f2:	4608      	mov	r0, r1
 80053f4:	4611      	mov	r1, r2
 80053f6:	2200      	movs	r2, #0
 80053f8:	602a      	str	r2, [r5, #0]
 80053fa:	461a      	mov	r2, r3
 80053fc:	f7fc f844 	bl	8001488 <_write>
 8005400:	1c43      	adds	r3, r0, #1
 8005402:	d102      	bne.n	800540a <_write_r+0x1e>
 8005404:	682b      	ldr	r3, [r5, #0]
 8005406:	b103      	cbz	r3, 800540a <_write_r+0x1e>
 8005408:	6023      	str	r3, [r4, #0]
 800540a:	bd38      	pop	{r3, r4, r5, pc}
 800540c:	20000548 	.word	0x20000548

08005410 <__errno>:
 8005410:	4b01      	ldr	r3, [pc, #4]	@ (8005418 <__errno+0x8>)
 8005412:	6818      	ldr	r0, [r3, #0]
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	20000050 	.word	0x20000050

0800541c <__libc_init_array>:
 800541c:	b570      	push	{r4, r5, r6, lr}
 800541e:	4d0d      	ldr	r5, [pc, #52]	@ (8005454 <__libc_init_array+0x38>)
 8005420:	4c0d      	ldr	r4, [pc, #52]	@ (8005458 <__libc_init_array+0x3c>)
 8005422:	1b64      	subs	r4, r4, r5
 8005424:	10a4      	asrs	r4, r4, #2
 8005426:	2600      	movs	r6, #0
 8005428:	42a6      	cmp	r6, r4
 800542a:	d109      	bne.n	8005440 <__libc_init_array+0x24>
 800542c:	4d0b      	ldr	r5, [pc, #44]	@ (800545c <__libc_init_array+0x40>)
 800542e:	4c0c      	ldr	r4, [pc, #48]	@ (8005460 <__libc_init_array+0x44>)
 8005430:	f000 fa54 	bl	80058dc <_init>
 8005434:	1b64      	subs	r4, r4, r5
 8005436:	10a4      	asrs	r4, r4, #2
 8005438:	2600      	movs	r6, #0
 800543a:	42a6      	cmp	r6, r4
 800543c:	d105      	bne.n	800544a <__libc_init_array+0x2e>
 800543e:	bd70      	pop	{r4, r5, r6, pc}
 8005440:	f855 3b04 	ldr.w	r3, [r5], #4
 8005444:	4798      	blx	r3
 8005446:	3601      	adds	r6, #1
 8005448:	e7ee      	b.n	8005428 <__libc_init_array+0xc>
 800544a:	f855 3b04 	ldr.w	r3, [r5], #4
 800544e:	4798      	blx	r3
 8005450:	3601      	adds	r6, #1
 8005452:	e7f2      	b.n	800543a <__libc_init_array+0x1e>
 8005454:	08005994 	.word	0x08005994
 8005458:	08005994 	.word	0x08005994
 800545c:	08005994 	.word	0x08005994
 8005460:	08005998 	.word	0x08005998

08005464 <__retarget_lock_init_recursive>:
 8005464:	4770      	bx	lr

08005466 <__retarget_lock_acquire_recursive>:
 8005466:	4770      	bx	lr

08005468 <__retarget_lock_release_recursive>:
 8005468:	4770      	bx	lr
	...

0800546c <_free_r>:
 800546c:	b538      	push	{r3, r4, r5, lr}
 800546e:	4605      	mov	r5, r0
 8005470:	2900      	cmp	r1, #0
 8005472:	d041      	beq.n	80054f8 <_free_r+0x8c>
 8005474:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005478:	1f0c      	subs	r4, r1, #4
 800547a:	2b00      	cmp	r3, #0
 800547c:	bfb8      	it	lt
 800547e:	18e4      	addlt	r4, r4, r3
 8005480:	f000 f8e0 	bl	8005644 <__malloc_lock>
 8005484:	4a1d      	ldr	r2, [pc, #116]	@ (80054fc <_free_r+0x90>)
 8005486:	6813      	ldr	r3, [r2, #0]
 8005488:	b933      	cbnz	r3, 8005498 <_free_r+0x2c>
 800548a:	6063      	str	r3, [r4, #4]
 800548c:	6014      	str	r4, [r2, #0]
 800548e:	4628      	mov	r0, r5
 8005490:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005494:	f000 b8dc 	b.w	8005650 <__malloc_unlock>
 8005498:	42a3      	cmp	r3, r4
 800549a:	d908      	bls.n	80054ae <_free_r+0x42>
 800549c:	6820      	ldr	r0, [r4, #0]
 800549e:	1821      	adds	r1, r4, r0
 80054a0:	428b      	cmp	r3, r1
 80054a2:	bf01      	itttt	eq
 80054a4:	6819      	ldreq	r1, [r3, #0]
 80054a6:	685b      	ldreq	r3, [r3, #4]
 80054a8:	1809      	addeq	r1, r1, r0
 80054aa:	6021      	streq	r1, [r4, #0]
 80054ac:	e7ed      	b.n	800548a <_free_r+0x1e>
 80054ae:	461a      	mov	r2, r3
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	b10b      	cbz	r3, 80054b8 <_free_r+0x4c>
 80054b4:	42a3      	cmp	r3, r4
 80054b6:	d9fa      	bls.n	80054ae <_free_r+0x42>
 80054b8:	6811      	ldr	r1, [r2, #0]
 80054ba:	1850      	adds	r0, r2, r1
 80054bc:	42a0      	cmp	r0, r4
 80054be:	d10b      	bne.n	80054d8 <_free_r+0x6c>
 80054c0:	6820      	ldr	r0, [r4, #0]
 80054c2:	4401      	add	r1, r0
 80054c4:	1850      	adds	r0, r2, r1
 80054c6:	4283      	cmp	r3, r0
 80054c8:	6011      	str	r1, [r2, #0]
 80054ca:	d1e0      	bne.n	800548e <_free_r+0x22>
 80054cc:	6818      	ldr	r0, [r3, #0]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	6053      	str	r3, [r2, #4]
 80054d2:	4408      	add	r0, r1
 80054d4:	6010      	str	r0, [r2, #0]
 80054d6:	e7da      	b.n	800548e <_free_r+0x22>
 80054d8:	d902      	bls.n	80054e0 <_free_r+0x74>
 80054da:	230c      	movs	r3, #12
 80054dc:	602b      	str	r3, [r5, #0]
 80054de:	e7d6      	b.n	800548e <_free_r+0x22>
 80054e0:	6820      	ldr	r0, [r4, #0]
 80054e2:	1821      	adds	r1, r4, r0
 80054e4:	428b      	cmp	r3, r1
 80054e6:	bf04      	itt	eq
 80054e8:	6819      	ldreq	r1, [r3, #0]
 80054ea:	685b      	ldreq	r3, [r3, #4]
 80054ec:	6063      	str	r3, [r4, #4]
 80054ee:	bf04      	itt	eq
 80054f0:	1809      	addeq	r1, r1, r0
 80054f2:	6021      	streq	r1, [r4, #0]
 80054f4:	6054      	str	r4, [r2, #4]
 80054f6:	e7ca      	b.n	800548e <_free_r+0x22>
 80054f8:	bd38      	pop	{r3, r4, r5, pc}
 80054fa:	bf00      	nop
 80054fc:	20000554 	.word	0x20000554

08005500 <sbrk_aligned>:
 8005500:	b570      	push	{r4, r5, r6, lr}
 8005502:	4e0f      	ldr	r6, [pc, #60]	@ (8005540 <sbrk_aligned+0x40>)
 8005504:	460c      	mov	r4, r1
 8005506:	6831      	ldr	r1, [r6, #0]
 8005508:	4605      	mov	r5, r0
 800550a:	b911      	cbnz	r1, 8005512 <sbrk_aligned+0x12>
 800550c:	f000 f9d6 	bl	80058bc <_sbrk_r>
 8005510:	6030      	str	r0, [r6, #0]
 8005512:	4621      	mov	r1, r4
 8005514:	4628      	mov	r0, r5
 8005516:	f000 f9d1 	bl	80058bc <_sbrk_r>
 800551a:	1c43      	adds	r3, r0, #1
 800551c:	d103      	bne.n	8005526 <sbrk_aligned+0x26>
 800551e:	f04f 34ff 	mov.w	r4, #4294967295
 8005522:	4620      	mov	r0, r4
 8005524:	bd70      	pop	{r4, r5, r6, pc}
 8005526:	1cc4      	adds	r4, r0, #3
 8005528:	f024 0403 	bic.w	r4, r4, #3
 800552c:	42a0      	cmp	r0, r4
 800552e:	d0f8      	beq.n	8005522 <sbrk_aligned+0x22>
 8005530:	1a21      	subs	r1, r4, r0
 8005532:	4628      	mov	r0, r5
 8005534:	f000 f9c2 	bl	80058bc <_sbrk_r>
 8005538:	3001      	adds	r0, #1
 800553a:	d1f2      	bne.n	8005522 <sbrk_aligned+0x22>
 800553c:	e7ef      	b.n	800551e <sbrk_aligned+0x1e>
 800553e:	bf00      	nop
 8005540:	20000550 	.word	0x20000550

08005544 <_malloc_r>:
 8005544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005548:	1ccd      	adds	r5, r1, #3
 800554a:	f025 0503 	bic.w	r5, r5, #3
 800554e:	3508      	adds	r5, #8
 8005550:	2d0c      	cmp	r5, #12
 8005552:	bf38      	it	cc
 8005554:	250c      	movcc	r5, #12
 8005556:	2d00      	cmp	r5, #0
 8005558:	4606      	mov	r6, r0
 800555a:	db01      	blt.n	8005560 <_malloc_r+0x1c>
 800555c:	42a9      	cmp	r1, r5
 800555e:	d904      	bls.n	800556a <_malloc_r+0x26>
 8005560:	230c      	movs	r3, #12
 8005562:	6033      	str	r3, [r6, #0]
 8005564:	2000      	movs	r0, #0
 8005566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800556a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005640 <_malloc_r+0xfc>
 800556e:	f000 f869 	bl	8005644 <__malloc_lock>
 8005572:	f8d8 3000 	ldr.w	r3, [r8]
 8005576:	461c      	mov	r4, r3
 8005578:	bb44      	cbnz	r4, 80055cc <_malloc_r+0x88>
 800557a:	4629      	mov	r1, r5
 800557c:	4630      	mov	r0, r6
 800557e:	f7ff ffbf 	bl	8005500 <sbrk_aligned>
 8005582:	1c43      	adds	r3, r0, #1
 8005584:	4604      	mov	r4, r0
 8005586:	d158      	bne.n	800563a <_malloc_r+0xf6>
 8005588:	f8d8 4000 	ldr.w	r4, [r8]
 800558c:	4627      	mov	r7, r4
 800558e:	2f00      	cmp	r7, #0
 8005590:	d143      	bne.n	800561a <_malloc_r+0xd6>
 8005592:	2c00      	cmp	r4, #0
 8005594:	d04b      	beq.n	800562e <_malloc_r+0xea>
 8005596:	6823      	ldr	r3, [r4, #0]
 8005598:	4639      	mov	r1, r7
 800559a:	4630      	mov	r0, r6
 800559c:	eb04 0903 	add.w	r9, r4, r3
 80055a0:	f000 f98c 	bl	80058bc <_sbrk_r>
 80055a4:	4581      	cmp	r9, r0
 80055a6:	d142      	bne.n	800562e <_malloc_r+0xea>
 80055a8:	6821      	ldr	r1, [r4, #0]
 80055aa:	1a6d      	subs	r5, r5, r1
 80055ac:	4629      	mov	r1, r5
 80055ae:	4630      	mov	r0, r6
 80055b0:	f7ff ffa6 	bl	8005500 <sbrk_aligned>
 80055b4:	3001      	adds	r0, #1
 80055b6:	d03a      	beq.n	800562e <_malloc_r+0xea>
 80055b8:	6823      	ldr	r3, [r4, #0]
 80055ba:	442b      	add	r3, r5
 80055bc:	6023      	str	r3, [r4, #0]
 80055be:	f8d8 3000 	ldr.w	r3, [r8]
 80055c2:	685a      	ldr	r2, [r3, #4]
 80055c4:	bb62      	cbnz	r2, 8005620 <_malloc_r+0xdc>
 80055c6:	f8c8 7000 	str.w	r7, [r8]
 80055ca:	e00f      	b.n	80055ec <_malloc_r+0xa8>
 80055cc:	6822      	ldr	r2, [r4, #0]
 80055ce:	1b52      	subs	r2, r2, r5
 80055d0:	d420      	bmi.n	8005614 <_malloc_r+0xd0>
 80055d2:	2a0b      	cmp	r2, #11
 80055d4:	d917      	bls.n	8005606 <_malloc_r+0xc2>
 80055d6:	1961      	adds	r1, r4, r5
 80055d8:	42a3      	cmp	r3, r4
 80055da:	6025      	str	r5, [r4, #0]
 80055dc:	bf18      	it	ne
 80055de:	6059      	strne	r1, [r3, #4]
 80055e0:	6863      	ldr	r3, [r4, #4]
 80055e2:	bf08      	it	eq
 80055e4:	f8c8 1000 	streq.w	r1, [r8]
 80055e8:	5162      	str	r2, [r4, r5]
 80055ea:	604b      	str	r3, [r1, #4]
 80055ec:	4630      	mov	r0, r6
 80055ee:	f000 f82f 	bl	8005650 <__malloc_unlock>
 80055f2:	f104 000b 	add.w	r0, r4, #11
 80055f6:	1d23      	adds	r3, r4, #4
 80055f8:	f020 0007 	bic.w	r0, r0, #7
 80055fc:	1ac2      	subs	r2, r0, r3
 80055fe:	bf1c      	itt	ne
 8005600:	1a1b      	subne	r3, r3, r0
 8005602:	50a3      	strne	r3, [r4, r2]
 8005604:	e7af      	b.n	8005566 <_malloc_r+0x22>
 8005606:	6862      	ldr	r2, [r4, #4]
 8005608:	42a3      	cmp	r3, r4
 800560a:	bf0c      	ite	eq
 800560c:	f8c8 2000 	streq.w	r2, [r8]
 8005610:	605a      	strne	r2, [r3, #4]
 8005612:	e7eb      	b.n	80055ec <_malloc_r+0xa8>
 8005614:	4623      	mov	r3, r4
 8005616:	6864      	ldr	r4, [r4, #4]
 8005618:	e7ae      	b.n	8005578 <_malloc_r+0x34>
 800561a:	463c      	mov	r4, r7
 800561c:	687f      	ldr	r7, [r7, #4]
 800561e:	e7b6      	b.n	800558e <_malloc_r+0x4a>
 8005620:	461a      	mov	r2, r3
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	42a3      	cmp	r3, r4
 8005626:	d1fb      	bne.n	8005620 <_malloc_r+0xdc>
 8005628:	2300      	movs	r3, #0
 800562a:	6053      	str	r3, [r2, #4]
 800562c:	e7de      	b.n	80055ec <_malloc_r+0xa8>
 800562e:	230c      	movs	r3, #12
 8005630:	6033      	str	r3, [r6, #0]
 8005632:	4630      	mov	r0, r6
 8005634:	f000 f80c 	bl	8005650 <__malloc_unlock>
 8005638:	e794      	b.n	8005564 <_malloc_r+0x20>
 800563a:	6005      	str	r5, [r0, #0]
 800563c:	e7d6      	b.n	80055ec <_malloc_r+0xa8>
 800563e:	bf00      	nop
 8005640:	20000554 	.word	0x20000554

08005644 <__malloc_lock>:
 8005644:	4801      	ldr	r0, [pc, #4]	@ (800564c <__malloc_lock+0x8>)
 8005646:	f7ff bf0e 	b.w	8005466 <__retarget_lock_acquire_recursive>
 800564a:	bf00      	nop
 800564c:	2000054c 	.word	0x2000054c

08005650 <__malloc_unlock>:
 8005650:	4801      	ldr	r0, [pc, #4]	@ (8005658 <__malloc_unlock+0x8>)
 8005652:	f7ff bf09 	b.w	8005468 <__retarget_lock_release_recursive>
 8005656:	bf00      	nop
 8005658:	2000054c 	.word	0x2000054c

0800565c <__sflush_r>:
 800565c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005664:	0716      	lsls	r6, r2, #28
 8005666:	4605      	mov	r5, r0
 8005668:	460c      	mov	r4, r1
 800566a:	d454      	bmi.n	8005716 <__sflush_r+0xba>
 800566c:	684b      	ldr	r3, [r1, #4]
 800566e:	2b00      	cmp	r3, #0
 8005670:	dc02      	bgt.n	8005678 <__sflush_r+0x1c>
 8005672:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005674:	2b00      	cmp	r3, #0
 8005676:	dd48      	ble.n	800570a <__sflush_r+0xae>
 8005678:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800567a:	2e00      	cmp	r6, #0
 800567c:	d045      	beq.n	800570a <__sflush_r+0xae>
 800567e:	2300      	movs	r3, #0
 8005680:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005684:	682f      	ldr	r7, [r5, #0]
 8005686:	6a21      	ldr	r1, [r4, #32]
 8005688:	602b      	str	r3, [r5, #0]
 800568a:	d030      	beq.n	80056ee <__sflush_r+0x92>
 800568c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800568e:	89a3      	ldrh	r3, [r4, #12]
 8005690:	0759      	lsls	r1, r3, #29
 8005692:	d505      	bpl.n	80056a0 <__sflush_r+0x44>
 8005694:	6863      	ldr	r3, [r4, #4]
 8005696:	1ad2      	subs	r2, r2, r3
 8005698:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800569a:	b10b      	cbz	r3, 80056a0 <__sflush_r+0x44>
 800569c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800569e:	1ad2      	subs	r2, r2, r3
 80056a0:	2300      	movs	r3, #0
 80056a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80056a4:	6a21      	ldr	r1, [r4, #32]
 80056a6:	4628      	mov	r0, r5
 80056a8:	47b0      	blx	r6
 80056aa:	1c43      	adds	r3, r0, #1
 80056ac:	89a3      	ldrh	r3, [r4, #12]
 80056ae:	d106      	bne.n	80056be <__sflush_r+0x62>
 80056b0:	6829      	ldr	r1, [r5, #0]
 80056b2:	291d      	cmp	r1, #29
 80056b4:	d82b      	bhi.n	800570e <__sflush_r+0xb2>
 80056b6:	4a2a      	ldr	r2, [pc, #168]	@ (8005760 <__sflush_r+0x104>)
 80056b8:	40ca      	lsrs	r2, r1
 80056ba:	07d6      	lsls	r6, r2, #31
 80056bc:	d527      	bpl.n	800570e <__sflush_r+0xb2>
 80056be:	2200      	movs	r2, #0
 80056c0:	6062      	str	r2, [r4, #4]
 80056c2:	04d9      	lsls	r1, r3, #19
 80056c4:	6922      	ldr	r2, [r4, #16]
 80056c6:	6022      	str	r2, [r4, #0]
 80056c8:	d504      	bpl.n	80056d4 <__sflush_r+0x78>
 80056ca:	1c42      	adds	r2, r0, #1
 80056cc:	d101      	bne.n	80056d2 <__sflush_r+0x76>
 80056ce:	682b      	ldr	r3, [r5, #0]
 80056d0:	b903      	cbnz	r3, 80056d4 <__sflush_r+0x78>
 80056d2:	6560      	str	r0, [r4, #84]	@ 0x54
 80056d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80056d6:	602f      	str	r7, [r5, #0]
 80056d8:	b1b9      	cbz	r1, 800570a <__sflush_r+0xae>
 80056da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80056de:	4299      	cmp	r1, r3
 80056e0:	d002      	beq.n	80056e8 <__sflush_r+0x8c>
 80056e2:	4628      	mov	r0, r5
 80056e4:	f7ff fec2 	bl	800546c <_free_r>
 80056e8:	2300      	movs	r3, #0
 80056ea:	6363      	str	r3, [r4, #52]	@ 0x34
 80056ec:	e00d      	b.n	800570a <__sflush_r+0xae>
 80056ee:	2301      	movs	r3, #1
 80056f0:	4628      	mov	r0, r5
 80056f2:	47b0      	blx	r6
 80056f4:	4602      	mov	r2, r0
 80056f6:	1c50      	adds	r0, r2, #1
 80056f8:	d1c9      	bne.n	800568e <__sflush_r+0x32>
 80056fa:	682b      	ldr	r3, [r5, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d0c6      	beq.n	800568e <__sflush_r+0x32>
 8005700:	2b1d      	cmp	r3, #29
 8005702:	d001      	beq.n	8005708 <__sflush_r+0xac>
 8005704:	2b16      	cmp	r3, #22
 8005706:	d11e      	bne.n	8005746 <__sflush_r+0xea>
 8005708:	602f      	str	r7, [r5, #0]
 800570a:	2000      	movs	r0, #0
 800570c:	e022      	b.n	8005754 <__sflush_r+0xf8>
 800570e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005712:	b21b      	sxth	r3, r3
 8005714:	e01b      	b.n	800574e <__sflush_r+0xf2>
 8005716:	690f      	ldr	r7, [r1, #16]
 8005718:	2f00      	cmp	r7, #0
 800571a:	d0f6      	beq.n	800570a <__sflush_r+0xae>
 800571c:	0793      	lsls	r3, r2, #30
 800571e:	680e      	ldr	r6, [r1, #0]
 8005720:	bf08      	it	eq
 8005722:	694b      	ldreq	r3, [r1, #20]
 8005724:	600f      	str	r7, [r1, #0]
 8005726:	bf18      	it	ne
 8005728:	2300      	movne	r3, #0
 800572a:	eba6 0807 	sub.w	r8, r6, r7
 800572e:	608b      	str	r3, [r1, #8]
 8005730:	f1b8 0f00 	cmp.w	r8, #0
 8005734:	dde9      	ble.n	800570a <__sflush_r+0xae>
 8005736:	6a21      	ldr	r1, [r4, #32]
 8005738:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800573a:	4643      	mov	r3, r8
 800573c:	463a      	mov	r2, r7
 800573e:	4628      	mov	r0, r5
 8005740:	47b0      	blx	r6
 8005742:	2800      	cmp	r0, #0
 8005744:	dc08      	bgt.n	8005758 <__sflush_r+0xfc>
 8005746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800574a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800574e:	81a3      	strh	r3, [r4, #12]
 8005750:	f04f 30ff 	mov.w	r0, #4294967295
 8005754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005758:	4407      	add	r7, r0
 800575a:	eba8 0800 	sub.w	r8, r8, r0
 800575e:	e7e7      	b.n	8005730 <__sflush_r+0xd4>
 8005760:	20400001 	.word	0x20400001

08005764 <_fflush_r>:
 8005764:	b538      	push	{r3, r4, r5, lr}
 8005766:	690b      	ldr	r3, [r1, #16]
 8005768:	4605      	mov	r5, r0
 800576a:	460c      	mov	r4, r1
 800576c:	b913      	cbnz	r3, 8005774 <_fflush_r+0x10>
 800576e:	2500      	movs	r5, #0
 8005770:	4628      	mov	r0, r5
 8005772:	bd38      	pop	{r3, r4, r5, pc}
 8005774:	b118      	cbz	r0, 800577e <_fflush_r+0x1a>
 8005776:	6a03      	ldr	r3, [r0, #32]
 8005778:	b90b      	cbnz	r3, 800577e <_fflush_r+0x1a>
 800577a:	f7ff fc8f 	bl	800509c <__sinit>
 800577e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d0f3      	beq.n	800576e <_fflush_r+0xa>
 8005786:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005788:	07d0      	lsls	r0, r2, #31
 800578a:	d404      	bmi.n	8005796 <_fflush_r+0x32>
 800578c:	0599      	lsls	r1, r3, #22
 800578e:	d402      	bmi.n	8005796 <_fflush_r+0x32>
 8005790:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005792:	f7ff fe68 	bl	8005466 <__retarget_lock_acquire_recursive>
 8005796:	4628      	mov	r0, r5
 8005798:	4621      	mov	r1, r4
 800579a:	f7ff ff5f 	bl	800565c <__sflush_r>
 800579e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80057a0:	07da      	lsls	r2, r3, #31
 80057a2:	4605      	mov	r5, r0
 80057a4:	d4e4      	bmi.n	8005770 <_fflush_r+0xc>
 80057a6:	89a3      	ldrh	r3, [r4, #12]
 80057a8:	059b      	lsls	r3, r3, #22
 80057aa:	d4e1      	bmi.n	8005770 <_fflush_r+0xc>
 80057ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80057ae:	f7ff fe5b 	bl	8005468 <__retarget_lock_release_recursive>
 80057b2:	e7dd      	b.n	8005770 <_fflush_r+0xc>

080057b4 <__swhatbuf_r>:
 80057b4:	b570      	push	{r4, r5, r6, lr}
 80057b6:	460c      	mov	r4, r1
 80057b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057bc:	2900      	cmp	r1, #0
 80057be:	b096      	sub	sp, #88	@ 0x58
 80057c0:	4615      	mov	r5, r2
 80057c2:	461e      	mov	r6, r3
 80057c4:	da0d      	bge.n	80057e2 <__swhatbuf_r+0x2e>
 80057c6:	89a3      	ldrh	r3, [r4, #12]
 80057c8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80057cc:	f04f 0100 	mov.w	r1, #0
 80057d0:	bf14      	ite	ne
 80057d2:	2340      	movne	r3, #64	@ 0x40
 80057d4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80057d8:	2000      	movs	r0, #0
 80057da:	6031      	str	r1, [r6, #0]
 80057dc:	602b      	str	r3, [r5, #0]
 80057de:	b016      	add	sp, #88	@ 0x58
 80057e0:	bd70      	pop	{r4, r5, r6, pc}
 80057e2:	466a      	mov	r2, sp
 80057e4:	f000 f848 	bl	8005878 <_fstat_r>
 80057e8:	2800      	cmp	r0, #0
 80057ea:	dbec      	blt.n	80057c6 <__swhatbuf_r+0x12>
 80057ec:	9901      	ldr	r1, [sp, #4]
 80057ee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80057f2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80057f6:	4259      	negs	r1, r3
 80057f8:	4159      	adcs	r1, r3
 80057fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80057fe:	e7eb      	b.n	80057d8 <__swhatbuf_r+0x24>

08005800 <__smakebuf_r>:
 8005800:	898b      	ldrh	r3, [r1, #12]
 8005802:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005804:	079d      	lsls	r5, r3, #30
 8005806:	4606      	mov	r6, r0
 8005808:	460c      	mov	r4, r1
 800580a:	d507      	bpl.n	800581c <__smakebuf_r+0x1c>
 800580c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005810:	6023      	str	r3, [r4, #0]
 8005812:	6123      	str	r3, [r4, #16]
 8005814:	2301      	movs	r3, #1
 8005816:	6163      	str	r3, [r4, #20]
 8005818:	b003      	add	sp, #12
 800581a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800581c:	ab01      	add	r3, sp, #4
 800581e:	466a      	mov	r2, sp
 8005820:	f7ff ffc8 	bl	80057b4 <__swhatbuf_r>
 8005824:	9f00      	ldr	r7, [sp, #0]
 8005826:	4605      	mov	r5, r0
 8005828:	4639      	mov	r1, r7
 800582a:	4630      	mov	r0, r6
 800582c:	f7ff fe8a 	bl	8005544 <_malloc_r>
 8005830:	b948      	cbnz	r0, 8005846 <__smakebuf_r+0x46>
 8005832:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005836:	059a      	lsls	r2, r3, #22
 8005838:	d4ee      	bmi.n	8005818 <__smakebuf_r+0x18>
 800583a:	f023 0303 	bic.w	r3, r3, #3
 800583e:	f043 0302 	orr.w	r3, r3, #2
 8005842:	81a3      	strh	r3, [r4, #12]
 8005844:	e7e2      	b.n	800580c <__smakebuf_r+0xc>
 8005846:	89a3      	ldrh	r3, [r4, #12]
 8005848:	6020      	str	r0, [r4, #0]
 800584a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800584e:	81a3      	strh	r3, [r4, #12]
 8005850:	9b01      	ldr	r3, [sp, #4]
 8005852:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005856:	b15b      	cbz	r3, 8005870 <__smakebuf_r+0x70>
 8005858:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800585c:	4630      	mov	r0, r6
 800585e:	f000 f81d 	bl	800589c <_isatty_r>
 8005862:	b128      	cbz	r0, 8005870 <__smakebuf_r+0x70>
 8005864:	89a3      	ldrh	r3, [r4, #12]
 8005866:	f023 0303 	bic.w	r3, r3, #3
 800586a:	f043 0301 	orr.w	r3, r3, #1
 800586e:	81a3      	strh	r3, [r4, #12]
 8005870:	89a3      	ldrh	r3, [r4, #12]
 8005872:	431d      	orrs	r5, r3
 8005874:	81a5      	strh	r5, [r4, #12]
 8005876:	e7cf      	b.n	8005818 <__smakebuf_r+0x18>

08005878 <_fstat_r>:
 8005878:	b538      	push	{r3, r4, r5, lr}
 800587a:	4d07      	ldr	r5, [pc, #28]	@ (8005898 <_fstat_r+0x20>)
 800587c:	2300      	movs	r3, #0
 800587e:	4604      	mov	r4, r0
 8005880:	4608      	mov	r0, r1
 8005882:	4611      	mov	r1, r2
 8005884:	602b      	str	r3, [r5, #0]
 8005886:	f7fb fe27 	bl	80014d8 <_fstat>
 800588a:	1c43      	adds	r3, r0, #1
 800588c:	d102      	bne.n	8005894 <_fstat_r+0x1c>
 800588e:	682b      	ldr	r3, [r5, #0]
 8005890:	b103      	cbz	r3, 8005894 <_fstat_r+0x1c>
 8005892:	6023      	str	r3, [r4, #0]
 8005894:	bd38      	pop	{r3, r4, r5, pc}
 8005896:	bf00      	nop
 8005898:	20000548 	.word	0x20000548

0800589c <_isatty_r>:
 800589c:	b538      	push	{r3, r4, r5, lr}
 800589e:	4d06      	ldr	r5, [pc, #24]	@ (80058b8 <_isatty_r+0x1c>)
 80058a0:	2300      	movs	r3, #0
 80058a2:	4604      	mov	r4, r0
 80058a4:	4608      	mov	r0, r1
 80058a6:	602b      	str	r3, [r5, #0]
 80058a8:	f7fb fe26 	bl	80014f8 <_isatty>
 80058ac:	1c43      	adds	r3, r0, #1
 80058ae:	d102      	bne.n	80058b6 <_isatty_r+0x1a>
 80058b0:	682b      	ldr	r3, [r5, #0]
 80058b2:	b103      	cbz	r3, 80058b6 <_isatty_r+0x1a>
 80058b4:	6023      	str	r3, [r4, #0]
 80058b6:	bd38      	pop	{r3, r4, r5, pc}
 80058b8:	20000548 	.word	0x20000548

080058bc <_sbrk_r>:
 80058bc:	b538      	push	{r3, r4, r5, lr}
 80058be:	4d06      	ldr	r5, [pc, #24]	@ (80058d8 <_sbrk_r+0x1c>)
 80058c0:	2300      	movs	r3, #0
 80058c2:	4604      	mov	r4, r0
 80058c4:	4608      	mov	r0, r1
 80058c6:	602b      	str	r3, [r5, #0]
 80058c8:	f7fb fe2e 	bl	8001528 <_sbrk>
 80058cc:	1c43      	adds	r3, r0, #1
 80058ce:	d102      	bne.n	80058d6 <_sbrk_r+0x1a>
 80058d0:	682b      	ldr	r3, [r5, #0]
 80058d2:	b103      	cbz	r3, 80058d6 <_sbrk_r+0x1a>
 80058d4:	6023      	str	r3, [r4, #0]
 80058d6:	bd38      	pop	{r3, r4, r5, pc}
 80058d8:	20000548 	.word	0x20000548

080058dc <_init>:
 80058dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058de:	bf00      	nop
 80058e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058e2:	bc08      	pop	{r3}
 80058e4:	469e      	mov	lr, r3
 80058e6:	4770      	bx	lr

080058e8 <_fini>:
 80058e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ea:	bf00      	nop
 80058ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ee:	bc08      	pop	{r3}
 80058f0:	469e      	mov	lr, r3
 80058f2:	4770      	bx	lr
