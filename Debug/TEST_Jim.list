
TEST_Jim.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005400  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08005588  08005588  00006588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055ec  080055ec  00007014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080055ec  080055ec  000065ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055f4  080055f4  00007014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055f4  080055f4  000065f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080055f8  080055f8  000065f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080055fc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ac  20000014  08005610  00007014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c0  08005610  000073c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013038  00000000  00000000  00007044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002569  00000000  00000000  0001a07c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001048  00000000  00000000  0001c5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cb3  00000000  00000000  0001d630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028346  00000000  00000000  0001e2e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013492  00000000  00000000  00046629  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fde4d  00000000  00000000  00059abb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00157908  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004538  00000000  00000000  0015794c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0015be84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005570 	.word	0x08005570

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08005570 	.word	0x08005570

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <lightOnLED>:
ADCReadContext_t fsr1Context = {0};
ADCReadContext_t fsr2Context = {0};

//////////////////////////////////
void lightOnLED(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	//int count=0;
	//int statusLED=0;
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80004f8:	2201      	movs	r2, #1
 80004fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80004fe:	4802      	ldr	r0, [pc, #8]	@ (8000508 <lightOnLED+0x14>)
 8000500:	f002 fe66 	bl	80031d0 <HAL_GPIO_WritePin>
    //state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8);
    //HAL_Delay(100);
}
 8000504:	bf00      	nop
 8000506:	bd80      	pop	{r7, pc}
 8000508:	48000400 	.word	0x48000400

0800050c <lightOffLED>:
void lightOffLED(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
	//int count=0;
	//int statusLED=0;

    //將 PB8 Off
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000510:	2200      	movs	r2, #0
 8000512:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000516:	4802      	ldr	r0, [pc, #8]	@ (8000520 <lightOffLED+0x14>)
 8000518:	f002 fe5a 	bl	80031d0 <HAL_GPIO_WritePin>
    //state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8);
    //receive_data_uart();
    //HAL_Delay(100);
    //i++;
}
 800051c:	bf00      	nop
 800051e:	bd80      	pop	{r7, pc}
 8000520:	48000400 	.word	0x48000400

08000524 <readSingleADCValue>:
uint16_t readSingleADCValue(int sensorIndex)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b086      	sub	sp, #24
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status;
    uint16_t adcValue = 0;
 800052c:	2300      	movs	r3, #0
 800052e:	82fb      	strh	r3, [r7, #22]
    ADC_HandleTypeDef* hadc = NULL;
 8000530:	2300      	movs	r3, #0
 8000532:	613b      	str	r3, [r7, #16]

    // 根據 sensorIndex 選擇對應 ADC
    if (sensorIndex == 1) {
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2b01      	cmp	r3, #1
 8000538:	d102      	bne.n	8000540 <readSingleADCValue+0x1c>
        hadc = &hadc1;
 800053a:	4b15      	ldr	r3, [pc, #84]	@ (8000590 <readSingleADCValue+0x6c>)
 800053c:	613b      	str	r3, [r7, #16]
 800053e:	e009      	b.n	8000554 <readSingleADCValue+0x30>
    } else if (sensorIndex == 2) {
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	2b02      	cmp	r3, #2
 8000544:	d102      	bne.n	800054c <readSingleADCValue+0x28>
        hadc = &hadc2;
 8000546:	4b13      	ldr	r3, [pc, #76]	@ (8000594 <readSingleADCValue+0x70>)
 8000548:	613b      	str	r3, [r7, #16]
 800054a:	e003      	b.n	8000554 <readSingleADCValue+0x30>
    } else {
    	Error_Handler();  // 加入錯誤處理
 800054c:	f000 fe04 	bl	8001158 <Error_Handler>
        return 0; // 無效的 index
 8000550:	2300      	movs	r3, #0
 8000552:	e018      	b.n	8000586 <readSingleADCValue+0x62>
    }

    // 啟動 ADC
    status = HAL_ADC_Start(hadc);
 8000554:	6938      	ldr	r0, [r7, #16]
 8000556:	f001 fc79 	bl	8001e4c <HAL_ADC_Start>
 800055a:	4603      	mov	r3, r0
 800055c:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) {
 800055e:	7bfb      	ldrb	r3, [r7, #15]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <readSingleADCValue+0x44>
        return 0; // 啟動失敗
 8000564:	2300      	movs	r3, #0
 8000566:	e00e      	b.n	8000586 <readSingleADCValue+0x62>
    }

    // 輪詢等待轉換完成
    status = HAL_ADC_PollForConversion(hadc, 10);
 8000568:	210a      	movs	r1, #10
 800056a:	6938      	ldr	r0, [r7, #16]
 800056c:	f001 fd28 	bl	8001fc0 <HAL_ADC_PollForConversion>
 8000570:	4603      	mov	r3, r0
 8000572:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 8000574:	7bfb      	ldrb	r3, [r7, #15]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d104      	bne.n	8000584 <readSingleADCValue+0x60>
        adcValue = HAL_ADC_GetValue(hadc);
 800057a:	6938      	ldr	r0, [r7, #16]
 800057c:	f001 fdf8 	bl	8002170 <HAL_ADC_GetValue>
 8000580:	4603      	mov	r3, r0
 8000582:	82fb      	strh	r3, [r7, #22]
    }

    return adcValue;
 8000584:	8afb      	ldrh	r3, [r7, #22]
}
 8000586:	4618      	mov	r0, r3
 8000588:	3718      	adds	r7, #24
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	20000078 	.word	0x20000078
 8000594:	200000dc 	.word	0x200000dc

08000598 <startADCRead>:

void startADCRead(ADCReadContext_t *context, int sensorIndex, uint32_t sensorPressDuration)
{
 8000598:	b480      	push	{r7}
 800059a:	b085      	sub	sp, #20
 800059c:	af00      	add	r7, sp, #0
 800059e:	60f8      	str	r0, [r7, #12]
 80005a0:	60b9      	str	r1, [r7, #8]
 80005a2:	607a      	str	r2, [r7, #4]
    (*context).sensorIndex = sensorIndex;
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	68ba      	ldr	r2, [r7, #8]
 80005a8:	615a      	str	r2, [r3, #20]
    (*context).maxCount = sensorPressDuration / 10;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4a0d      	ldr	r2, [pc, #52]	@ (80005e4 <startADCRead+0x4c>)
 80005ae:	fba2 2303 	umull	r2, r3, r2, r3
 80005b2:	08da      	lsrs	r2, r3, #3
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	611a      	str	r2, [r3, #16]
    if ((*context).maxCount == 0) (*context).maxCount = 1; // 防除以0
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	691b      	ldr	r3, [r3, #16]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d102      	bne.n	80005c6 <startADCRead+0x2e>
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	2201      	movs	r2, #1
 80005c4:	611a      	str	r2, [r3, #16]
    (*context).sum = 0;
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	2200      	movs	r2, #0
 80005ca:	609a      	str	r2, [r3, #8]
    (*context).count = 0;
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	2200      	movs	r2, #0
 80005d0:	60da      	str	r2, [r3, #12]
    (*context).state = ADC_READ_INIT;
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	2200      	movs	r2, #0
 80005d6:	701a      	strb	r2, [r3, #0]
}
 80005d8:	bf00      	nop
 80005da:	3714      	adds	r7, #20
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr
 80005e4:	cccccccd 	.word	0xcccccccd

080005e8 <processADCRead>:

bool processADCRead(ADCReadContext_t *context)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
    switch ((*context).state)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b02      	cmp	r3, #2
 80005f6:	d040      	beq.n	800067a <processADCRead+0x92>
 80005f8:	2b02      	cmp	r3, #2
 80005fa:	dc40      	bgt.n	800067e <processADCRead+0x96>
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d002      	beq.n	8000606 <processADCRead+0x1e>
 8000600:	2b01      	cmp	r3, #1
 8000602:	d009      	beq.n	8000618 <processADCRead+0x30>

        case ADC_READ_DONE:
            return true;  // 完成讀取了

        default:
            break;
 8000604:	e03b      	b.n	800067e <processADCRead+0x96>
            (*context).startTime = HAL_GetTick();
 8000606:	f001 f8bd 	bl	8001784 <HAL_GetTick>
 800060a:	4602      	mov	r2, r0
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	605a      	str	r2, [r3, #4]
            (*context).state = ADC_READING;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	2201      	movs	r2, #1
 8000614:	701a      	strb	r2, [r3, #0]
            break;
 8000616:	e035      	b.n	8000684 <processADCRead+0x9c>
            if (HAL_GetTick() - (*context).startTime >= 10)  // 間隔10ms讀一次
 8000618:	f001 f8b4 	bl	8001784 <HAL_GetTick>
 800061c:	4602      	mov	r2, r0
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	685b      	ldr	r3, [r3, #4]
 8000622:	1ad3      	subs	r3, r2, r3
 8000624:	2b09      	cmp	r3, #9
 8000626:	d92c      	bls.n	8000682 <processADCRead+0x9a>
                uint16_t valueADC = readSingleADCValue((*context).sensorIndex);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	695b      	ldr	r3, [r3, #20]
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff ff79 	bl	8000524 <readSingleADCValue>
 8000632:	4603      	mov	r3, r0
 8000634:	81fb      	strh	r3, [r7, #14]
                (*context).sum += valueADC;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	689a      	ldr	r2, [r3, #8]
 800063a:	89fb      	ldrh	r3, [r7, #14]
 800063c:	441a      	add	r2, r3
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	609a      	str	r2, [r3, #8]
                (*context).count++;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	68db      	ldr	r3, [r3, #12]
 8000646:	1c5a      	adds	r2, r3, #1
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	60da      	str	r2, [r3, #12]
                (*context).startTime = HAL_GetTick(); // 重設計時
 800064c:	f001 f89a 	bl	8001784 <HAL_GetTick>
 8000650:	4602      	mov	r2, r0
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	605a      	str	r2, [r3, #4]
                if ((*context).count >= (*context).maxCount)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	68da      	ldr	r2, [r3, #12]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	691b      	ldr	r3, [r3, #16]
 800065e:	429a      	cmp	r2, r3
 8000660:	d30f      	bcc.n	8000682 <processADCRead+0x9a>
                    (*context).average = (*context).sum / (*context).count;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	689a      	ldr	r2, [r3, #8]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	68db      	ldr	r3, [r3, #12]
 800066a:	fbb2 f2f3 	udiv	r2, r2, r3
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	619a      	str	r2, [r3, #24]
                    (*context).state = ADC_READ_DONE;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	2202      	movs	r2, #2
 8000676:	701a      	strb	r2, [r3, #0]
            break;
 8000678:	e003      	b.n	8000682 <processADCRead+0x9a>
            return true;  // 完成讀取了
 800067a:	2301      	movs	r3, #1
 800067c:	e003      	b.n	8000686 <processADCRead+0x9e>
            break;
 800067e:	bf00      	nop
 8000680:	e000      	b.n	8000684 <processADCRead+0x9c>
            break;
 8000682:	bf00      	nop
    }
    return false;  // 尚未完成
 8000684:	2300      	movs	r3, #0
}
 8000686:	4618      	mov	r0, r3
 8000688:	3710      	adds	r7, #16
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}

0800068e <getADCReadAverage>:

uint32_t getADCReadAverage(ADCReadContext_t *context)
{
 800068e:	b480      	push	{r7}
 8000690:	b083      	sub	sp, #12
 8000692:	af00      	add	r7, sp, #0
 8000694:	6078      	str	r0, [r7, #4]
    return (*context).average;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	699b      	ldr	r3, [r3, #24]
}
 800069a:	4618      	mov	r0, r3
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
	...

080006a8 <getAllForceSensorState>:

//


bool getAllForceSensorState(bool isSensor1Enabled ,bool isSensor2Enabled ,uint32_t sensorPressDuration,uint32_t pressureValueThreshold)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08a      	sub	sp, #40	@ 0x28
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	60ba      	str	r2, [r7, #8]
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	4603      	mov	r3, r0
 80006b4:	73fb      	strb	r3, [r7, #15]
 80006b6:	460b      	mov	r3, r1
 80006b8:	73bb      	strb	r3, [r7, #14]

	/////////// 這個函式只執行一次,他會用阻塞式的方式等兩個sensor 都做完後 才會跳出去
	// 但是這兩個sensor在讀資料時,是用非阻塞的方式
	//所以每個 sensor 要讀100ms ,但這個函式執行完成,整體時間只有100ms
	bool allForceSensorStateResult = false;
 80006ba:	2300      	movs	r3, #0
 80006bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint32_t forceSensor1AveragedValue = 0;
 80006c0:	2300      	movs	r3, #0
 80006c2:	623b      	str	r3, [r7, #32]
	uint32_t forceSensor2AveragedValue = 0;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61fb      	str	r3, [r7, #28]
	bool fsr1Done = false;
 80006c8:	2300      	movs	r3, #0
 80006ca:	76fb      	strb	r3, [r7, #27]
	bool fsr2Done = false;
 80006cc:	2300      	movs	r3, #0
 80006ce:	76bb      	strb	r3, [r7, #26]
	uint32_t startTime = HAL_GetTick();
 80006d0:	f001 f858 	bl	8001784 <HAL_GetTick>
 80006d4:	6178      	str	r0, [r7, #20]
	// 啟動需要的感測器
	if (isSensor1Enabled) {
 80006d6:	7bfb      	ldrb	r3, [r7, #15]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d007      	beq.n	80006ec <getAllForceSensorState+0x44>
		startADCRead(&fsr1Context, 1, sensorPressDuration);
 80006dc:	68ba      	ldr	r2, [r7, #8]
 80006de:	2101      	movs	r1, #1
 80006e0:	482f      	ldr	r0, [pc, #188]	@ (80007a0 <getAllForceSensorState+0xf8>)
 80006e2:	f7ff ff59 	bl	8000598 <startADCRead>
		fsr1Done = false;
 80006e6:	2300      	movs	r3, #0
 80006e8:	76fb      	strb	r3, [r7, #27]
 80006ea:	e001      	b.n	80006f0 <getAllForceSensorState+0x48>
	} else {
		fsr1Done = true;  // 不啟用就視為已完成
 80006ec:	2301      	movs	r3, #1
 80006ee:	76fb      	strb	r3, [r7, #27]
	}

	if (isSensor2Enabled) {
 80006f0:	7bbb      	ldrb	r3, [r7, #14]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d007      	beq.n	8000706 <getAllForceSensorState+0x5e>
		startADCRead(&fsr2Context, 2, sensorPressDuration);
 80006f6:	68ba      	ldr	r2, [r7, #8]
 80006f8:	2102      	movs	r1, #2
 80006fa:	482a      	ldr	r0, [pc, #168]	@ (80007a4 <getAllForceSensorState+0xfc>)
 80006fc:	f7ff ff4c 	bl	8000598 <startADCRead>
		fsr2Done = false;
 8000700:	2300      	movs	r3, #0
 8000702:	76bb      	strb	r3, [r7, #26]
 8000704:	e026      	b.n	8000754 <getAllForceSensorState+0xac>
	} else {
		fsr2Done = true;  // 不啟用就視為已完成
 8000706:	2301      	movs	r3, #1
 8000708:	76bb      	strb	r3, [r7, #26]
	}

	// 非阻塞等待兩個感測器都完成
	while (!fsr1Done || !fsr2Done)
 800070a:	e023      	b.n	8000754 <getAllForceSensorState+0xac>
	{
		if (!fsr1Done && processADCRead(&fsr1Context)) {
 800070c:	7efb      	ldrb	r3, [r7, #27]
 800070e:	f083 0301 	eor.w	r3, r3, #1
 8000712:	b2db      	uxtb	r3, r3
 8000714:	2b00      	cmp	r3, #0
 8000716:	d00b      	beq.n	8000730 <getAllForceSensorState+0x88>
 8000718:	4821      	ldr	r0, [pc, #132]	@ (80007a0 <getAllForceSensorState+0xf8>)
 800071a:	f7ff ff65 	bl	80005e8 <processADCRead>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d005      	beq.n	8000730 <getAllForceSensorState+0x88>
			forceSensor1AveragedValue = getADCReadAverage(&fsr1Context);
 8000724:	481e      	ldr	r0, [pc, #120]	@ (80007a0 <getAllForceSensorState+0xf8>)
 8000726:	f7ff ffb2 	bl	800068e <getADCReadAverage>
 800072a:	6238      	str	r0, [r7, #32]
			fsr1Done = true;
 800072c:	2301      	movs	r3, #1
 800072e:	76fb      	strb	r3, [r7, #27]
		}

		if (!fsr2Done && processADCRead(&fsr2Context)) {
 8000730:	7ebb      	ldrb	r3, [r7, #26]
 8000732:	f083 0301 	eor.w	r3, r3, #1
 8000736:	b2db      	uxtb	r3, r3
 8000738:	2b00      	cmp	r3, #0
 800073a:	d00b      	beq.n	8000754 <getAllForceSensorState+0xac>
 800073c:	4819      	ldr	r0, [pc, #100]	@ (80007a4 <getAllForceSensorState+0xfc>)
 800073e:	f7ff ff53 	bl	80005e8 <processADCRead>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d005      	beq.n	8000754 <getAllForceSensorState+0xac>
			forceSensor2AveragedValue = getADCReadAverage(&fsr2Context);
 8000748:	4816      	ldr	r0, [pc, #88]	@ (80007a4 <getAllForceSensorState+0xfc>)
 800074a:	f7ff ffa0 	bl	800068e <getADCReadAverage>
 800074e:	61f8      	str	r0, [r7, #28]
			fsr2Done = true;
 8000750:	2301      	movs	r3, #1
 8000752:	76bb      	strb	r3, [r7, #26]
	while (!fsr1Done || !fsr2Done)
 8000754:	7efb      	ldrb	r3, [r7, #27]
 8000756:	f083 0301 	eor.w	r3, r3, #1
 800075a:	b2db      	uxtb	r3, r3
 800075c:	2b00      	cmp	r3, #0
 800075e:	d1d5      	bne.n	800070c <getAllForceSensorState+0x64>
 8000760:	7ebb      	ldrb	r3, [r7, #26]
 8000762:	f083 0301 	eor.w	r3, r3, #1
 8000766:	b2db      	uxtb	r3, r3
 8000768:	2b00      	cmp	r3, #0
 800076a:	d1cf      	bne.n	800070c <getAllForceSensorState+0x64>

		// ✅ 可插入其他非阻塞任務
	}

	// 比較是否有達到閾值
	if ((isSensor1Enabled && forceSensor1AveragedValue > pressureValueThreshold) ||
 800076c:	7bfb      	ldrb	r3, [r7, #15]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d003      	beq.n	800077a <getAllForceSensorState+0xd2>
 8000772:	6a3a      	ldr	r2, [r7, #32]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	429a      	cmp	r2, r3
 8000778:	d806      	bhi.n	8000788 <getAllForceSensorState+0xe0>
 800077a:	7bbb      	ldrb	r3, [r7, #14]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d008      	beq.n	8000792 <getAllForceSensorState+0xea>
		(isSensor2Enabled && forceSensor2AveragedValue > pressureValueThreshold)) {
 8000780:	69fa      	ldr	r2, [r7, #28]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	429a      	cmp	r2, r3
 8000786:	d904      	bls.n	8000792 <getAllForceSensorState+0xea>
		allForceSensorStateResult = true;
 8000788:	2301      	movs	r3, #1
 800078a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		lightOnLED();
 800078e:	f7ff feb1 	bl	80004f4 <lightOnLED>
	}
	else
	{
		//lightOffLED();
	}
	return allForceSensorStateResult;
 8000792:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000796:	4618      	mov	r0, r3
 8000798:	3728      	adds	r7, #40	@ 0x28
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000030 	.word	0x20000030
 80007a4:	2000004c 	.word	0x2000004c

080007a8 <checkSwitchState>:
    //}
}


bool checkSwitchState(int sensorIndex, uint32_t switchDebounceDuration)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b086      	sub	sp, #24
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	6039      	str	r1, [r7, #0]
    static uint32_t lastDebounceTime[MAX_SWITCH_SENSORS] = {0};
    static GPIO_PinState currentState[MAX_SWITCH_SENSORS] = {GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET};
    static GPIO_PinState lastButtonState[MAX_SWITCH_SENSORS] = {GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET};
    bool isTouchSwitchPressed = false;
 80007b2:	2300      	movs	r3, #0
 80007b4:	75fb      	strb	r3, [r7, #23]

    if(sensorIndex < 1 || sensorIndex > MAX_SWITCH_SENSORS) {
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	dd02      	ble.n	80007c2 <checkSwitchState+0x1a>
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2b04      	cmp	r3, #4
 80007c0:	dd01      	ble.n	80007c6 <checkSwitchState+0x1e>
        // 無效的 sensorIndex，直接回傳 false
        return false;
 80007c2:	2300      	movs	r3, #0
 80007c4:	e05e      	b.n	8000884 <checkSwitchState+0xdc>
    }

    uint16_t pin = 0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	82bb      	strh	r3, [r7, #20]
    switch(sensorIndex) {
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	3b01      	subs	r3, #1
 80007ce:	2b03      	cmp	r3, #3
 80007d0:	d818      	bhi.n	8000804 <checkSwitchState+0x5c>
 80007d2:	a201      	add	r2, pc, #4	@ (adr r2, 80007d8 <checkSwitchState+0x30>)
 80007d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007d8:	080007e9 	.word	0x080007e9
 80007dc:	080007f1 	.word	0x080007f1
 80007e0:	080007f7 	.word	0x080007f7
 80007e4:	080007ff 	.word	0x080007ff
        case 1:
        	pin = GPIO_PIN_8;
 80007e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007ec:	82bb      	strh	r3, [r7, #20]
        	break;//GPIO_PIN_8 代表第 8 位元是1(從右邊開始數第九個數字)，二進位是 0000 0001 0000 0000 (十進位 256)
 80007ee:	e009      	b.n	8000804 <checkSwitchState+0x5c>
        case 2: pin = GPIO_PIN_6; break;
 80007f0:	2340      	movs	r3, #64	@ 0x40
 80007f2:	82bb      	strh	r3, [r7, #20]
 80007f4:	e006      	b.n	8000804 <checkSwitchState+0x5c>
        case 3: pin = GPIO_PIN_9; break;
 80007f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80007fa:	82bb      	strh	r3, [r7, #20]
 80007fc:	e002      	b.n	8000804 <checkSwitchState+0x5c>
        case 4: pin = GPIO_PIN_5; break;
 80007fe:	2320      	movs	r3, #32
 8000800:	82bb      	strh	r3, [r7, #20]
 8000802:	bf00      	nop
    }

    //GPIO_PinState currentState = HAL_GPIO_ReadPin(GPIOC, pin);

    // sensorIndex 從 1 開始，陣列從 0 開始，所以要 -1
    int idx = sensorIndex - 1;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	3b01      	subs	r3, #1
 8000808:	613b      	str	r3, [r7, #16]
    currentState[idx] = HAL_GPIO_ReadPin(GPIOC, pin);
 800080a:	8abb      	ldrh	r3, [r7, #20]
 800080c:	4619      	mov	r1, r3
 800080e:	481f      	ldr	r0, [pc, #124]	@ (800088c <checkSwitchState+0xe4>)
 8000810:	f002 fcc6 	bl	80031a0 <HAL_GPIO_ReadPin>
 8000814:	4603      	mov	r3, r0
 8000816:	4619      	mov	r1, r3
 8000818:	4a1d      	ldr	r2, [pc, #116]	@ (8000890 <checkSwitchState+0xe8>)
 800081a:	693b      	ldr	r3, [r7, #16]
 800081c:	4413      	add	r3, r2
 800081e:	460a      	mov	r2, r1
 8000820:	701a      	strb	r2, [r3, #0]
    //currentState
    if(currentState[idx] != lastButtonState[idx]) {
 8000822:	4a1b      	ldr	r2, [pc, #108]	@ (8000890 <checkSwitchState+0xe8>)
 8000824:	693b      	ldr	r3, [r7, #16]
 8000826:	4413      	add	r3, r2
 8000828:	781a      	ldrb	r2, [r3, #0]
 800082a:	491a      	ldr	r1, [pc, #104]	@ (8000894 <checkSwitchState+0xec>)
 800082c:	693b      	ldr	r3, [r7, #16]
 800082e:	440b      	add	r3, r1
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	429a      	cmp	r2, r3
 8000834:	d006      	beq.n	8000844 <checkSwitchState+0x9c>
        lastDebounceTime[idx] = HAL_GetTick();
 8000836:	f000 ffa5 	bl	8001784 <HAL_GetTick>
 800083a:	4602      	mov	r2, r0
 800083c:	4916      	ldr	r1, [pc, #88]	@ (8000898 <checkSwitchState+0xf0>)
 800083e:	693b      	ldr	r3, [r7, #16]
 8000840:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    uint32_t timeNow=HAL_GetTick();
 8000844:	f000 ff9e 	bl	8001784 <HAL_GetTick>
 8000848:	60f8      	str	r0, [r7, #12]
    uint32_t elapsed = timeNow - lastDebounceTime[idx];
 800084a:	4a13      	ldr	r2, [pc, #76]	@ (8000898 <checkSwitchState+0xf0>)
 800084c:	693b      	ldr	r3, [r7, #16]
 800084e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000852:	68fa      	ldr	r2, [r7, #12]
 8000854:	1ad3      	subs	r3, r2, r3
 8000856:	60bb      	str	r3, [r7, #8]
    if(elapsed > switchDebounceDuration) {
 8000858:	68ba      	ldr	r2, [r7, #8]
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	429a      	cmp	r2, r3
 800085e:	d907      	bls.n	8000870 <checkSwitchState+0xc8>
        if(currentState[idx] == GPIO_PIN_RESET) {
 8000860:	4a0b      	ldr	r2, [pc, #44]	@ (8000890 <checkSwitchState+0xe8>)
 8000862:	693b      	ldr	r3, [r7, #16]
 8000864:	4413      	add	r3, r2
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d101      	bne.n	8000870 <checkSwitchState+0xc8>
            isTouchSwitchPressed = true;
 800086c:	2301      	movs	r3, #1
 800086e:	75fb      	strb	r3, [r7, #23]
        }
    }

    lastButtonState[idx] = currentState[idx];
 8000870:	4a07      	ldr	r2, [pc, #28]	@ (8000890 <checkSwitchState+0xe8>)
 8000872:	693b      	ldr	r3, [r7, #16]
 8000874:	4413      	add	r3, r2
 8000876:	7819      	ldrb	r1, [r3, #0]
 8000878:	4a06      	ldr	r2, [pc, #24]	@ (8000894 <checkSwitchState+0xec>)
 800087a:	693b      	ldr	r3, [r7, #16]
 800087c:	4413      	add	r3, r2
 800087e:	460a      	mov	r2, r1
 8000880:	701a      	strb	r2, [r3, #0]

    return isTouchSwitchPressed;
 8000882:	7dfb      	ldrb	r3, [r7, #23]
}
 8000884:	4618      	mov	r0, r3
 8000886:	3718      	adds	r7, #24
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	48000800 	.word	0x48000800
 8000890:	20000000 	.word	0x20000000
 8000894:	20000004 	.word	0x20000004
 8000898:	20000068 	.word	0x20000068

0800089c <getAllTouchSwitchState>:
bool getAllTouchSwitchState(bool isSwitch1Enabled,bool isSwitch2Enabled,bool isSwitch3Enabled,bool isSwitch4Enabled,uint32_t touchSwitchDebounceDuration)
{
 800089c:	b590      	push	{r4, r7, lr}
 800089e:	b08f      	sub	sp, #60	@ 0x3c
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4604      	mov	r4, r0
 80008a4:	4608      	mov	r0, r1
 80008a6:	4611      	mov	r1, r2
 80008a8:	461a      	mov	r2, r3
 80008aa:	4623      	mov	r3, r4
 80008ac:	71fb      	strb	r3, [r7, #7]
 80008ae:	4603      	mov	r3, r0
 80008b0:	71bb      	strb	r3, [r7, #6]
 80008b2:	460b      	mov	r3, r1
 80008b4:	717b      	strb	r3, [r7, #5]
 80008b6:	4613      	mov	r3, r2
 80008b8:	713b      	strb	r3, [r7, #4]
	bool switchEnabled[NUM_SWITCHES] = { isSwitch1Enabled, isSwitch2Enabled, isSwitch3Enabled, isSwitch4Enabled };
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	743b      	strb	r3, [r7, #16]
 80008be:	79bb      	ldrb	r3, [r7, #6]
 80008c0:	747b      	strb	r3, [r7, #17]
	bool allTouchSwitchStateResult=false;
 80008c2:	2300      	movs	r3, #0
 80008c4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	//bool isTouchSwitch1Pressed = true;  // 開關1被按下
	bool isTouchSwitch1Pressed = false; // 開關1沒被按下
 80008c8:	2300      	movs	r3, #0
 80008ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	bool isTouchSwitch2Pressed = false;
 80008ce:	2300      	movs	r3, #0
 80008d0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	bool isTouchSwitch3Pressed = false;
 80008d4:	2300      	movs	r3, #0
 80008d6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	bool isTouchSwitch4Pressed = false;
 80008da:	2300      	movs	r3, #0
 80008dc:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	uint8_t forceSensor2AveragedaValue=0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint8_t disabledCount = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	bool switchPressed[NUM_SWITCHES] = { isTouchSwitch1Pressed,isTouchSwitch2Pressed ,isTouchSwitch3Pressed ,isTouchSwitch4Pressed }; // 儲存各按鈕是否被按下
 80008ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80008f0:	733b      	strb	r3, [r7, #12]
 80008f2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80008f6:	737b      	strb	r3, [r7, #13]
	uint8_t enabledSwitchIndices[NUM_SWITCHES]={0};
 80008f8:	2300      	movs	r3, #0
 80008fa:	813b      	strh	r3, [r7, #8]
	uint8_t enabledSwitchCount=0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	uint8_t pressedCount=0;
 8000902:	2300      	movs	r3, #0
 8000904:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	for(int i=0;i<NUM_SWITCHES;i++)
 8000908:	2300      	movs	r3, #0
 800090a:	633b      	str	r3, [r7, #48]	@ 0x30
 800090c:	e016      	b.n	800093c <getAllTouchSwitchState+0xa0>
	{
		if(switchEnabled[i])
 800090e:	f107 0210 	add.w	r2, r7, #16
 8000912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000914:	4413      	add	r3, r2
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d00c      	beq.n	8000936 <getAllTouchSwitchState+0x9a>
		{
			enabledSwitchIndices[enabledSwitchCount++]=i+1;// // 儲存 switch 編號（從 1 開始）
 800091c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800091e:	b2da      	uxtb	r2, r3
 8000920:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000924:	1c59      	adds	r1, r3, #1
 8000926:	f887 1036 	strb.w	r1, [r7, #54]	@ 0x36
 800092a:	3201      	adds	r2, #1
 800092c:	b2d2      	uxtb	r2, r2
 800092e:	3338      	adds	r3, #56	@ 0x38
 8000930:	443b      	add	r3, r7
 8000932:	f803 2c30 	strb.w	r2, [r3, #-48]
	for(int i=0;i<NUM_SWITCHES;i++)
 8000936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000938:	3301      	adds	r3, #1
 800093a:	633b      	str	r3, [r7, #48]	@ 0x30
 800093c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800093e:	2b01      	cmp	r3, #1
 8000940:	dde5      	ble.n	800090e <getAllTouchSwitchState+0x72>
	}
	//enabledSwitchCount = 3

	//enabledSwitchIndices = {2, 3, 4} 第2 ,第3和第4個 sensor有啟動
	///////////////////////////////////
	uint32_t startTime = HAL_GetTick();
 8000942:	f000 ff1f 	bl	8001784 <HAL_GetTick>
 8000946:	61f8      	str	r0, [r7, #28]
	for(int i=0;i<2;i++)//i=0==>會進去delay,i=1 ==>不會進去delay
 8000948:	2300      	movs	r3, #0
 800094a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800094c:	e03d      	b.n	80009ca <getAllTouchSwitchState+0x12e>
	{
		///
		for(int j=0;j<enabledSwitchCount;j++)
 800094e:	2300      	movs	r3, #0
 8000950:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000952:	e02c      	b.n	80009ae <getAllTouchSwitchState+0x112>
		{
			////enabledSwitchIndices=[1,2,3,4];
			//switchPressed[i]=checkSwitchState(enabledSwitchIndices[i],touchSwitchDebounceDuration);
			switchPressed[enabledSwitchIndices[j]-1]=checkSwitchState(enabledSwitchIndices[j],touchSwitchDebounceDuration);
 8000954:	f107 0208 	add.w	r2, r7, #8
 8000958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800095a:	4413      	add	r3, r2
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	4618      	mov	r0, r3
 8000960:	f107 0208 	add.w	r2, r7, #8
 8000964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000966:	4413      	add	r3, r2
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	1e5c      	subs	r4, r3, #1
 800096c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800096e:	f7ff ff1b 	bl	80007a8 <checkSwitchState>
 8000972:	4603      	mov	r3, r0
 8000974:	461a      	mov	r2, r3
 8000976:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 800097a:	443b      	add	r3, r7
 800097c:	f803 2c2c 	strb.w	r2, [r3, #-44]
			if(switchPressed[enabledSwitchIndices[j] - 1] && (i == 1))
 8000980:	f107 0208 	add.w	r2, r7, #8
 8000984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000986:	4413      	add	r3, r2
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	3b01      	subs	r3, #1
 800098c:	3338      	adds	r3, #56	@ 0x38
 800098e:	443b      	add	r3, r7
 8000990:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d007      	beq.n	80009a8 <getAllTouchSwitchState+0x10c>
 8000998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800099a:	2b01      	cmp	r3, #1
 800099c:	d104      	bne.n	80009a8 <getAllTouchSwitchState+0x10c>
			{
				pressedCount++;
 800099e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80009a2:	3301      	adds	r3, #1
 80009a4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
		for(int j=0;j<enabledSwitchCount;j++)
 80009a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009aa:	3301      	adds	r3, #1
 80009ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80009ae:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80009b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80009b4:	429a      	cmp	r2, r3
 80009b6:	dbcd      	blt.n	8000954 <getAllTouchSwitchState+0xb8>
		///
		//isTouchSwitch1Pressed=checkSwitchState(1,touchSwitchDebounceDuration);
		//isTouchSwitch2Pressed=checkSwitchState(2,touchSwitchDebounceDuration);//再改成2
		//isTouchSwitch3Pressed=checkSwitchState(3,touchSwitchDebounceDuration);
		//isTouchSwitch4Pressed=checkSwitchState(4,touchSwitchDebounceDuration);
		if (i == 0)
 80009b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d102      	bne.n	80009c4 <getAllTouchSwitchState+0x128>
		{
			HAL_Delay(100); // 只在第一次檢查後延遲
 80009be:	2064      	movs	r0, #100	@ 0x64
 80009c0:	f000 feec 	bl	800179c <HAL_Delay>
	for(int i=0;i<2;i++)//i=0==>會進去delay,i=1 ==>不會進去delay
 80009c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009c6:	3301      	adds	r3, #1
 80009c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80009ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	ddbe      	ble.n	800094e <getAllTouchSwitchState+0xb2>
		}
		//HAL_Delay(100); // 每10毫秒檢查一次按鈕狀態
		//isTouchSwitch1Pressed=pressed;
	}
	uint32_t endTime = HAL_GetTick();
 80009d0:	f000 fed8 	bl	8001784 <HAL_GetTick>
 80009d4:	61b8      	str	r0, [r7, #24]
	uint32_t Duration = endTime - startTime;
 80009d6:	69ba      	ldr	r2, [r7, #24]
 80009d8:	69fb      	ldr	r3, [r7, #28]
 80009da:	1ad3      	subs	r3, r2, r3
 80009dc:	617b      	str	r3, [r7, #20]
	}
	*/
	////////////////////////////////////////////////////////////

	//int pressedCount = isTouchSwitch1Pressed + isTouchSwitch2Pressed + isTouchSwitch3Pressed + isTouchSwitch4Pressed;
	if (pressedCount >= 1) {
 80009de:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d005      	beq.n	80009f2 <getAllTouchSwitchState+0x156>
	    // 上面再改成2
		allTouchSwitchStateResult=true;
 80009e6:	2301      	movs	r3, #1
 80009e8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		lightOnLED();//1個以上開關按下 就亮燈
 80009ec:	f7ff fd82 	bl	80004f4 <lightOnLED>
 80009f0:	e001      	b.n	80009f6 <getAllTouchSwitchState+0x15a>
	}
	else
	{
	    // 開關1沒被按下要做的事
		lightOffLED();//沒開關按下
 80009f2:	f7ff fd8b 	bl	800050c <lightOffLED>
	}
	return allTouchSwitchStateResult;
 80009f6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	373c      	adds	r7, #60	@ 0x3c
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd90      	pop	{r4, r7, pc}
	...

08000a04 <HAL_GPIO_EXTI_Callback>:

}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
	if(GPIO_Pin == GPIO_PIN_13){
 8000a0e:	88fb      	ldrh	r3, [r7, #6]
 8000a10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a14:	d10e      	bne.n	8000a34 <HAL_GPIO_EXTI_Callback+0x30>
		ledTrigger = 1;
 8000a16:	4b09      	ldr	r3, [pc, #36]	@ (8000a3c <HAL_GPIO_EXTI_Callback+0x38>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a22:	4807      	ldr	r0, [pc, #28]	@ (8000a40 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000a24:	f002 fbd4 	bl	80031d0 <HAL_GPIO_WritePin>
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);  // 切換燈狀態
	    //HAL_Delay(200);
	    //將 PB8 Off
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a2e:	4804      	ldr	r0, [pc, #16]	@ (8000a40 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000a30:	f002 fbce 	bl	80031d0 <HAL_GPIO_WritePin>
		//x = (x == 0)? 1:0;
	}
}
 8000a34:	bf00      	nop
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	200003b4 	.word	0x200003b4
 8000a40:	48000400 	.word	0x48000400

08000a44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a44:	b5b0      	push	{r4, r5, r7, lr}
 8000a46:	b0a4      	sub	sp, #144	@ 0x90
 8000a48:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
  //char buffer[40]="";
  int arr[10] = {0};  // 全部初始化為 0
 8000a4a:	f107 0320 	add.w	r3, r7, #32
 8000a4e:	2228      	movs	r2, #40	@ 0x28
 8000a50:	2100      	movs	r1, #0
 8000a52:	4618      	mov	r0, r3
 8000a54:	f004 fd5f 	bl	8005516 <memset>
  int a=sizeof(arr);  // ✅ 這裡是陣列大小  a=40   10*4
 8000a58:	2328      	movs	r3, #40	@ 0x28
 8000a5a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  int value=2;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a64:	f000 fe1e 	bl	80016a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a68:	f000 f880 	bl	8000b6c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000a6c:	f000 f8cf 	bl	8000c0e <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a70:	f000 fad2 	bl	8001018 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000a74:	f000 f8f6 	bl	8000c64 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000a78:	f000 f9ce 	bl	8000e18 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000a7c:	f000 fa3c 	bl	8000ef8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000a80:	f000 fa6a 	bl	8000f58 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000a84:	f000 fa98 	bl	8000fb8 <MX_USART3_UART_Init>
  MX_UART4_Init();
 8000a88:	f000 fa06 	bl	8000e98 <MX_UART4_Init>
  MX_ADC2_Init();
 8000a8c:	f000 f960 	bl	8000d50 <MX_ADC2_Init>
	 	}
		*/
	   /////////

	  //下方為同時讀取兩種感測器函式
	  ForceSwitchSensorConfig sensorInputConfig =
 8000a90:	4b34      	ldr	r3, [pc, #208]	@ (8000b64 <main+0x120>)
 8000a92:	f107 040c 	add.w	r4, r7, #12
 8000a96:	461d      	mov	r5, r3
 8000a98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a9c:	682b      	ldr	r3, [r5, #0]
 8000a9e:	6023      	str	r3, [r4, #0]
	  //if(finalState.sensor2) { /* ... */ }
	  /////////////////////////////////////////////////////

	  //下方為讀取力量感測器函式//
	  // 全部力量感測器回傳值//
	  bool forceSensorFinalState=false;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	  //從flash讀取力量感測器初始參數
	  uint32_t forceSensorPressDuration = 100;
 8000aa6:	2364      	movs	r3, #100	@ 0x64
 8000aa8:	67bb      	str	r3, [r7, #120]	@ 0x78
	  uint32_t forcePressValueThreshold = 3000; //
 8000aaa:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8000aae:	677b      	str	r3, [r7, #116]	@ 0x74
	  bool isForceSensor1Enabled=true;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
	  bool isForceSensor2Enabled=true;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72

	  //呼叫讀取所有力量感測器數值
	  uint32_t forceSensorStartTime = HAL_GetTick();
 8000abc:	f000 fe62 	bl	8001784 <HAL_GetTick>
 8000ac0:	66f8      	str	r0, [r7, #108]	@ 0x6c

	  forceSensorFinalState=getAllForceSensorState(isForceSensor1Enabled,isForceSensor2Enabled,forceSensorPressDuration,forcePressValueThreshold);
 8000ac2:	f897 1072 	ldrb.w	r1, [r7, #114]	@ 0x72
 8000ac6:	f897 0073 	ldrb.w	r0, [r7, #115]	@ 0x73
 8000aca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000acc:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8000ace:	f7ff fdeb 	bl	80006a8 <getAllForceSensorState>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	  uint32_t forceSensorEndTime = HAL_GetTick();
 8000ad8:	f000 fe54 	bl	8001784 <HAL_GetTick>
 8000adc:	66b8      	str	r0, [r7, #104]	@ 0x68
	  uint32_t forceSensorDuration = forceSensorEndTime - forceSensorStartTime;
 8000ade:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000ae0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000ae2:	1ad3      	subs	r3, r2, r3
 8000ae4:	667b      	str	r3, [r7, #100]	@ 0x64
	  ///////////////////////////////////////////////////////

	  //下方為讀取接觸開關感測器函式//
	  // 從flash讀取Touch switch enabled flags 初始參數
	  bool isTouchSwitch1Enabled = true;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
	  bool isTouchSwitch2Enabled = true;
 8000aec:	2301      	movs	r3, #1
 8000aee:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
	  //bool isTouchSwitch2Enabled = false;
	  //
	  //bool isTouchSwitch3Enabled = false;
	  bool isTouchSwitch3Enabled = true;
 8000af2:	2301      	movs	r3, #1
 8000af4:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
	  bool isTouchSwitch4Enabled = true;
 8000af8:	2301      	movs	r3, #1
 8000afa:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
	  // Touch switch behavior parameters
	  uint32_t touchSwitchDebounceDuration = 100;
 8000afe:	2364      	movs	r3, #100	@ 0x64
 8000b00:	65fb      	str	r3, [r7, #92]	@ 0x5c
	  uint32_t touchSwitchPressThreshold = 3000;
 8000b02:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8000b06:	65bb      	str	r3, [r7, #88]	@ 0x58
	  // 全部接袃開關回傳值
	  bool touchSwitchFinalState = false;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	  //呼叫讀取所有力量感測器數值
	  uint32_t touchSwitchStartTime = HAL_GetTick();
 8000b0e:	f000 fe39 	bl	8001784 <HAL_GetTick>
 8000b12:	6538      	str	r0, [r7, #80]	@ 0x50

	  touchSwitchFinalState = getAllTouchSwitchState(
 8000b14:	f897 0063 	ldrb.w	r0, [r7, #99]	@ 0x63
 8000b18:	f897 1062 	ldrb.w	r1, [r7, #98]	@ 0x62
 8000b1c:	f897 2061 	ldrb.w	r2, [r7, #97]	@ 0x61
 8000b20:	f897 4060 	ldrb.w	r4, [r7, #96]	@ 0x60
 8000b24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000b26:	9300      	str	r3, [sp, #0]
 8000b28:	4623      	mov	r3, r4
 8000b2a:	f7ff feb7 	bl	800089c <getAllTouchSwitchState>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	bf14      	ite	ne
 8000b34:	2301      	movne	r3, #1
 8000b36:	2300      	moveq	r3, #0
 8000b38:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	      isTouchSwitch3Enabled,
	      isTouchSwitch4Enabled,
	      touchSwitchDebounceDuration);
	  //

	  uint32_t touchSwitchEndTime = HAL_GetTick();
 8000b3c:	f000 fe22 	bl	8001784 <HAL_GetTick>
 8000b40:	64f8      	str	r0, [r7, #76]	@ 0x4c
	  uint32_t touchSwitchDuration = touchSwitchEndTime - touchSwitchStartTime;
 8000b42:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000b44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000b46:	1ad3      	subs	r3, r2, r3
 8000b48:	64bb      	str	r3, [r7, #72]	@ 0x48
	  //getAllTouchSwitchState();

	  //transmitDataUart(buffer);

	  //
	  char txData[] = "12345";
 8000b4a:	4a07      	ldr	r2, [pc, #28]	@ (8000b68 <main+0x124>)
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b52:	6018      	str	r0, [r3, #0]
 8000b54:	3304      	adds	r3, #4
 8000b56:	8019      	strh	r1, [r3, #0]
	      printf("Receive timeout or error\n");
	  }
*/
	  // 啟用力量感測器功能
	  //updateFSRState();   // 呼叫防彈跳判斷
	  HAL_Delay(100);     // 簡短延遲避免過度讀取ADC
 8000b58:	2064      	movs	r0, #100	@ 0x64
 8000b5a:	f000 fe1f 	bl	800179c <HAL_Delay>
  {
 8000b5e:	bf00      	nop
 8000b60:	e796      	b.n	8000a90 <main+0x4c>
 8000b62:	bf00      	nop
 8000b64:	08005588 	.word	0x08005588
 8000b68:	0800559c 	.word	0x0800559c

08000b6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b096      	sub	sp, #88	@ 0x58
 8000b70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b72:	f107 0314 	add.w	r3, r7, #20
 8000b76:	2244      	movs	r2, #68	@ 0x44
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f004 fccb 	bl	8005516 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b80:	463b      	mov	r3, r7
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]
 8000b8a:	60da      	str	r2, [r3, #12]
 8000b8c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b8e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000b92:	f002 fc8d 	bl	80034b0 <HAL_PWREx_ControlVoltageScaling>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000b9c:	f000 fadc 	bl	8001158 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ba4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ba8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000baa:	2310      	movs	r3, #16
 8000bac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000bba:	230a      	movs	r3, #10
 8000bbc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000bbe:	2307      	movs	r3, #7
 8000bc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bca:	f107 0314 	add.w	r3, r7, #20
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f002 fcc4 	bl	800355c <HAL_RCC_OscConfig>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000bda:	f000 fabd 	bl	8001158 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bde:	230f      	movs	r3, #15
 8000be0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000be2:	2303      	movs	r3, #3
 8000be4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be6:	2300      	movs	r3, #0
 8000be8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bf2:	463b      	mov	r3, r7
 8000bf4:	2104      	movs	r1, #4
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f003 f88c 	bl	8003d14 <HAL_RCC_ClockConfig>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000c02:	f000 faa9 	bl	8001158 <Error_Handler>
  }
}
 8000c06:	bf00      	nop
 8000c08:	3758      	adds	r7, #88	@ 0x58
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b0a2      	sub	sp, #136	@ 0x88
 8000c12:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c14:	463b      	mov	r3, r7
 8000c16:	2288      	movs	r2, #136	@ 0x88
 8000c18:	2100      	movs	r1, #0
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f004 fc7b 	bl	8005516 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c20:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000c24:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000c26:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000c2a:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000c30:	2301      	movs	r3, #1
 8000c32:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000c34:	2308      	movs	r3, #8
 8000c36:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000c38:	2307      	movs	r3, #7
 8000c3a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000c40:	2302      	movs	r3, #2
 8000c42:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000c44:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000c48:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c4a:	463b      	mov	r3, r7
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f003 fa85 	bl	800415c <HAL_RCCEx_PeriphCLKConfig>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8000c58:	f000 fa7e 	bl	8001158 <Error_Handler>
  }
}
 8000c5c:	bf00      	nop
 8000c5e:	3788      	adds	r7, #136	@ 0x88
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08a      	sub	sp, #40	@ 0x28
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c6a:	f107 031c 	add.w	r3, r7, #28
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]
 8000c74:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c76:	1d3b      	adds	r3, r7, #4
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]
 8000c84:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c86:	4b2f      	ldr	r3, [pc, #188]	@ (8000d44 <MX_ADC1_Init+0xe0>)
 8000c88:	4a2f      	ldr	r2, [pc, #188]	@ (8000d48 <MX_ADC1_Init+0xe4>)
 8000c8a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c8c:	4b2d      	ldr	r3, [pc, #180]	@ (8000d44 <MX_ADC1_Init+0xe0>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c92:	4b2c      	ldr	r3, [pc, #176]	@ (8000d44 <MX_ADC1_Init+0xe0>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c98:	4b2a      	ldr	r3, [pc, #168]	@ (8000d44 <MX_ADC1_Init+0xe0>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c9e:	4b29      	ldr	r3, [pc, #164]	@ (8000d44 <MX_ADC1_Init+0xe0>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ca4:	4b27      	ldr	r3, [pc, #156]	@ (8000d44 <MX_ADC1_Init+0xe0>)
 8000ca6:	2204      	movs	r2, #4
 8000ca8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000caa:	4b26      	ldr	r3, [pc, #152]	@ (8000d44 <MX_ADC1_Init+0xe0>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cb0:	4b24      	ldr	r3, [pc, #144]	@ (8000d44 <MX_ADC1_Init+0xe0>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000cb6:	4b23      	ldr	r3, [pc, #140]	@ (8000d44 <MX_ADC1_Init+0xe0>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cbc:	4b21      	ldr	r3, [pc, #132]	@ (8000d44 <MX_ADC1_Init+0xe0>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cc4:	4b1f      	ldr	r3, [pc, #124]	@ (8000d44 <MX_ADC1_Init+0xe0>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cca:	4b1e      	ldr	r3, [pc, #120]	@ (8000d44 <MX_ADC1_Init+0xe0>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cd0:	4b1c      	ldr	r3, [pc, #112]	@ (8000d44 <MX_ADC1_Init+0xe0>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cd8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d44 <MX_ADC1_Init+0xe0>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000cde:	4b19      	ldr	r3, [pc, #100]	@ (8000d44 <MX_ADC1_Init+0xe0>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ce6:	4817      	ldr	r0, [pc, #92]	@ (8000d44 <MX_ADC1_Init+0xe0>)
 8000ce8:	f000 ff60 	bl	8001bac <HAL_ADC_Init>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000cf2:	f000 fa31 	bl	8001158 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000cfa:	f107 031c 	add.w	r3, r7, #28
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4810      	ldr	r0, [pc, #64]	@ (8000d44 <MX_ADC1_Init+0xe0>)
 8000d02:	f001 fee1 	bl	8002ac8 <HAL_ADCEx_MultiModeConfigChannel>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000d0c:	f000 fa24 	bl	8001158 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d10:	4b0e      	ldr	r3, [pc, #56]	@ (8000d4c <MX_ADC1_Init+0xe8>)
 8000d12:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d14:	2306      	movs	r3, #6
 8000d16:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d1c:	237f      	movs	r3, #127	@ 0x7f
 8000d1e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d20:	2304      	movs	r3, #4
 8000d22:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d24:	2300      	movs	r3, #0
 8000d26:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d28:	1d3b      	adds	r3, r7, #4
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4805      	ldr	r0, [pc, #20]	@ (8000d44 <MX_ADC1_Init+0xe0>)
 8000d2e:	f001 fa2d 	bl	800218c <HAL_ADC_ConfigChannel>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000d38:	f000 fa0e 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d3c:	bf00      	nop
 8000d3e:	3728      	adds	r7, #40	@ 0x28
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20000078 	.word	0x20000078
 8000d48:	50040000 	.word	0x50040000
 8000d4c:	04300002 	.word	0x04300002

08000d50 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d56:	463b      	mov	r3, r7
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]
 8000d64:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000d66:	4b29      	ldr	r3, [pc, #164]	@ (8000e0c <MX_ADC2_Init+0xbc>)
 8000d68:	4a29      	ldr	r2, [pc, #164]	@ (8000e10 <MX_ADC2_Init+0xc0>)
 8000d6a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d6c:	4b27      	ldr	r3, [pc, #156]	@ (8000e0c <MX_ADC2_Init+0xbc>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000d72:	4b26      	ldr	r3, [pc, #152]	@ (8000e0c <MX_ADC2_Init+0xbc>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d78:	4b24      	ldr	r3, [pc, #144]	@ (8000e0c <MX_ADC2_Init+0xbc>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d7e:	4b23      	ldr	r3, [pc, #140]	@ (8000e0c <MX_ADC2_Init+0xbc>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d84:	4b21      	ldr	r3, [pc, #132]	@ (8000e0c <MX_ADC2_Init+0xbc>)
 8000d86:	2204      	movs	r2, #4
 8000d88:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000d8a:	4b20      	ldr	r3, [pc, #128]	@ (8000e0c <MX_ADC2_Init+0xbc>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000d90:	4b1e      	ldr	r3, [pc, #120]	@ (8000e0c <MX_ADC2_Init+0xbc>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000d96:	4b1d      	ldr	r3, [pc, #116]	@ (8000e0c <MX_ADC2_Init+0xbc>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d9c:	4b1b      	ldr	r3, [pc, #108]	@ (8000e0c <MX_ADC2_Init+0xbc>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000da4:	4b19      	ldr	r3, [pc, #100]	@ (8000e0c <MX_ADC2_Init+0xbc>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000daa:	4b18      	ldr	r3, [pc, #96]	@ (8000e0c <MX_ADC2_Init+0xbc>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000db0:	4b16      	ldr	r3, [pc, #88]	@ (8000e0c <MX_ADC2_Init+0xbc>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000db8:	4b14      	ldr	r3, [pc, #80]	@ (8000e0c <MX_ADC2_Init+0xbc>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000dbe:	4b13      	ldr	r3, [pc, #76]	@ (8000e0c <MX_ADC2_Init+0xbc>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000dc6:	4811      	ldr	r0, [pc, #68]	@ (8000e0c <MX_ADC2_Init+0xbc>)
 8000dc8:	f000 fef0 	bl	8001bac <HAL_ADC_Init>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000dd2:	f000 f9c1 	bl	8001158 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000dd6:	4b0f      	ldr	r3, [pc, #60]	@ (8000e14 <MX_ADC2_Init+0xc4>)
 8000dd8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dda:	2306      	movs	r3, #6
 8000ddc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000dde:	2300      	movs	r3, #0
 8000de0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000de2:	237f      	movs	r3, #127	@ 0x7f
 8000de4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000de6:	2304      	movs	r3, #4
 8000de8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000dee:	463b      	mov	r3, r7
 8000df0:	4619      	mov	r1, r3
 8000df2:	4806      	ldr	r0, [pc, #24]	@ (8000e0c <MX_ADC2_Init+0xbc>)
 8000df4:	f001 f9ca 	bl	800218c <HAL_ADC_ConfigChannel>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8000dfe:	f000 f9ab 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e02:	bf00      	nop
 8000e04:	3718      	adds	r7, #24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	200000dc 	.word	0x200000dc
 8000e10:	50040100 	.word	0x50040100
 8000e14:	08600004 	.word	0x08600004

08000e18 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000e8c <MX_I2C1_Init+0x74>)
 8000e1e:	4a1c      	ldr	r2, [pc, #112]	@ (8000e90 <MX_I2C1_Init+0x78>)
 8000e20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8000e22:	4b1a      	ldr	r3, [pc, #104]	@ (8000e8c <MX_I2C1_Init+0x74>)
 8000e24:	4a1b      	ldr	r2, [pc, #108]	@ (8000e94 <MX_I2C1_Init+0x7c>)
 8000e26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e28:	4b18      	ldr	r3, [pc, #96]	@ (8000e8c <MX_I2C1_Init+0x74>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e2e:	4b17      	ldr	r3, [pc, #92]	@ (8000e8c <MX_I2C1_Init+0x74>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e34:	4b15      	ldr	r3, [pc, #84]	@ (8000e8c <MX_I2C1_Init+0x74>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e3a:	4b14      	ldr	r3, [pc, #80]	@ (8000e8c <MX_I2C1_Init+0x74>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e40:	4b12      	ldr	r3, [pc, #72]	@ (8000e8c <MX_I2C1_Init+0x74>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e46:	4b11      	ldr	r3, [pc, #68]	@ (8000e8c <MX_I2C1_Init+0x74>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e8c <MX_I2C1_Init+0x74>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e52:	480e      	ldr	r0, [pc, #56]	@ (8000e8c <MX_I2C1_Init+0x74>)
 8000e54:	f002 f9ec 	bl	8003230 <HAL_I2C_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e5e:	f000 f97b 	bl	8001158 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e62:	2100      	movs	r1, #0
 8000e64:	4809      	ldr	r0, [pc, #36]	@ (8000e8c <MX_I2C1_Init+0x74>)
 8000e66:	f002 fa7e 	bl	8003366 <HAL_I2CEx_ConfigAnalogFilter>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e70:	f000 f972 	bl	8001158 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e74:	2100      	movs	r1, #0
 8000e76:	4805      	ldr	r0, [pc, #20]	@ (8000e8c <MX_I2C1_Init+0x74>)
 8000e78:	f002 fac0 	bl	80033fc <HAL_I2CEx_ConfigDigitalFilter>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e82:	f000 f969 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20000140 	.word	0x20000140
 8000e90:	40005400 	.word	0x40005400
 8000e94:	10d19ce4 	.word	0x10d19ce4

08000e98 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000e9c:	4b14      	ldr	r3, [pc, #80]	@ (8000ef0 <MX_UART4_Init+0x58>)
 8000e9e:	4a15      	ldr	r2, [pc, #84]	@ (8000ef4 <MX_UART4_Init+0x5c>)
 8000ea0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000ea2:	4b13      	ldr	r3, [pc, #76]	@ (8000ef0 <MX_UART4_Init+0x58>)
 8000ea4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ea8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000eaa:	4b11      	ldr	r3, [pc, #68]	@ (8000ef0 <MX_UART4_Init+0x58>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000eb0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef0 <MX_UART4_Init+0x58>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000eb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef0 <MX_UART4_Init+0x58>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef0 <MX_UART4_Init+0x58>)
 8000ebe:	220c      	movs	r2, #12
 8000ec0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ec2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef0 <MX_UART4_Init+0x58>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ec8:	4b09      	ldr	r3, [pc, #36]	@ (8000ef0 <MX_UART4_Init+0x58>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ece:	4b08      	ldr	r3, [pc, #32]	@ (8000ef0 <MX_UART4_Init+0x58>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ed4:	4b06      	ldr	r3, [pc, #24]	@ (8000ef0 <MX_UART4_Init+0x58>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000eda:	4805      	ldr	r0, [pc, #20]	@ (8000ef0 <MX_UART4_Init+0x58>)
 8000edc:	f003 fdfa 	bl	8004ad4 <HAL_UART_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000ee6:	f000 f937 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000194 	.word	0x20000194
 8000ef4:	40004c00 	.word	0x40004c00

08000ef8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000efc:	4b14      	ldr	r3, [pc, #80]	@ (8000f50 <MX_USART1_UART_Init+0x58>)
 8000efe:	4a15      	ldr	r2, [pc, #84]	@ (8000f54 <MX_USART1_UART_Init+0x5c>)
 8000f00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000f02:	4b13      	ldr	r3, [pc, #76]	@ (8000f50 <MX_USART1_UART_Init+0x58>)
 8000f04:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000f08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f0a:	4b11      	ldr	r3, [pc, #68]	@ (8000f50 <MX_USART1_UART_Init+0x58>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f10:	4b0f      	ldr	r3, [pc, #60]	@ (8000f50 <MX_USART1_UART_Init+0x58>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f16:	4b0e      	ldr	r3, [pc, #56]	@ (8000f50 <MX_USART1_UART_Init+0x58>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f50 <MX_USART1_UART_Init+0x58>)
 8000f1e:	220c      	movs	r2, #12
 8000f20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f22:	4b0b      	ldr	r3, [pc, #44]	@ (8000f50 <MX_USART1_UART_Init+0x58>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f28:	4b09      	ldr	r3, [pc, #36]	@ (8000f50 <MX_USART1_UART_Init+0x58>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f2e:	4b08      	ldr	r3, [pc, #32]	@ (8000f50 <MX_USART1_UART_Init+0x58>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f34:	4b06      	ldr	r3, [pc, #24]	@ (8000f50 <MX_USART1_UART_Init+0x58>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f3a:	4805      	ldr	r0, [pc, #20]	@ (8000f50 <MX_USART1_UART_Init+0x58>)
 8000f3c:	f003 fdca 	bl	8004ad4 <HAL_UART_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000f46:	f000 f907 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	2000021c 	.word	0x2000021c
 8000f54:	40013800 	.word	0x40013800

08000f58 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f5c:	4b14      	ldr	r3, [pc, #80]	@ (8000fb0 <MX_USART2_UART_Init+0x58>)
 8000f5e:	4a15      	ldr	r2, [pc, #84]	@ (8000fb4 <MX_USART2_UART_Init+0x5c>)
 8000f60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f62:	4b13      	ldr	r3, [pc, #76]	@ (8000fb0 <MX_USART2_UART_Init+0x58>)
 8000f64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f6a:	4b11      	ldr	r3, [pc, #68]	@ (8000fb0 <MX_USART2_UART_Init+0x58>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f70:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb0 <MX_USART2_UART_Init+0x58>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f76:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb0 <MX_USART2_UART_Init+0x58>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb0 <MX_USART2_UART_Init+0x58>)
 8000f7e:	220c      	movs	r2, #12
 8000f80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f82:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb0 <MX_USART2_UART_Init+0x58>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f88:	4b09      	ldr	r3, [pc, #36]	@ (8000fb0 <MX_USART2_UART_Init+0x58>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f8e:	4b08      	ldr	r3, [pc, #32]	@ (8000fb0 <MX_USART2_UART_Init+0x58>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f94:	4b06      	ldr	r3, [pc, #24]	@ (8000fb0 <MX_USART2_UART_Init+0x58>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f9a:	4805      	ldr	r0, [pc, #20]	@ (8000fb0 <MX_USART2_UART_Init+0x58>)
 8000f9c:	f003 fd9a 	bl	8004ad4 <HAL_UART_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000fa6:	f000 f8d7 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	200002a4 	.word	0x200002a4
 8000fb4:	40004400 	.word	0x40004400

08000fb8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fbc:	4b14      	ldr	r3, [pc, #80]	@ (8001010 <MX_USART3_UART_Init+0x58>)
 8000fbe:	4a15      	ldr	r2, [pc, #84]	@ (8001014 <MX_USART3_UART_Init+0x5c>)
 8000fc0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000fc2:	4b13      	ldr	r3, [pc, #76]	@ (8001010 <MX_USART3_UART_Init+0x58>)
 8000fc4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000fc8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fca:	4b11      	ldr	r3, [pc, #68]	@ (8001010 <MX_USART3_UART_Init+0x58>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001010 <MX_USART3_UART_Init+0x58>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001010 <MX_USART3_UART_Init+0x58>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8001010 <MX_USART3_UART_Init+0x58>)
 8000fde:	220c      	movs	r2, #12
 8000fe0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8001010 <MX_USART3_UART_Init+0x58>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fe8:	4b09      	ldr	r3, [pc, #36]	@ (8001010 <MX_USART3_UART_Init+0x58>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fee:	4b08      	ldr	r3, [pc, #32]	@ (8001010 <MX_USART3_UART_Init+0x58>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ff4:	4b06      	ldr	r3, [pc, #24]	@ (8001010 <MX_USART3_UART_Init+0x58>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ffa:	4805      	ldr	r0, [pc, #20]	@ (8001010 <MX_USART3_UART_Init+0x58>)
 8000ffc:	f003 fd6a 	bl	8004ad4 <HAL_UART_Init>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001006:	f000 f8a7 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	2000032c 	.word	0x2000032c
 8001014:	40004800 	.word	0x40004800

08001018 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08a      	sub	sp, #40	@ 0x28
 800101c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101e:	f107 0314 	add.w	r3, r7, #20
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	609a      	str	r2, [r3, #8]
 800102a:	60da      	str	r2, [r3, #12]
 800102c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800102e:	4b47      	ldr	r3, [pc, #284]	@ (800114c <MX_GPIO_Init+0x134>)
 8001030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001032:	4a46      	ldr	r2, [pc, #280]	@ (800114c <MX_GPIO_Init+0x134>)
 8001034:	f043 0304 	orr.w	r3, r3, #4
 8001038:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800103a:	4b44      	ldr	r3, [pc, #272]	@ (800114c <MX_GPIO_Init+0x134>)
 800103c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800103e:	f003 0304 	and.w	r3, r3, #4
 8001042:	613b      	str	r3, [r7, #16]
 8001044:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001046:	4b41      	ldr	r3, [pc, #260]	@ (800114c <MX_GPIO_Init+0x134>)
 8001048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800104a:	4a40      	ldr	r2, [pc, #256]	@ (800114c <MX_GPIO_Init+0x134>)
 800104c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001050:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001052:	4b3e      	ldr	r3, [pc, #248]	@ (800114c <MX_GPIO_Init+0x134>)
 8001054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800105e:	4b3b      	ldr	r3, [pc, #236]	@ (800114c <MX_GPIO_Init+0x134>)
 8001060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001062:	4a3a      	ldr	r2, [pc, #232]	@ (800114c <MX_GPIO_Init+0x134>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800106a:	4b38      	ldr	r3, [pc, #224]	@ (800114c <MX_GPIO_Init+0x134>)
 800106c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	60bb      	str	r3, [r7, #8]
 8001074:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001076:	4b35      	ldr	r3, [pc, #212]	@ (800114c <MX_GPIO_Init+0x134>)
 8001078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800107a:	4a34      	ldr	r2, [pc, #208]	@ (800114c <MX_GPIO_Init+0x134>)
 800107c:	f043 0302 	orr.w	r3, r3, #2
 8001080:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001082:	4b32      	ldr	r3, [pc, #200]	@ (800114c <MX_GPIO_Init+0x134>)
 8001084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001086:	f003 0302 	and.w	r3, r3, #2
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800108e:	2200      	movs	r2, #0
 8001090:	2120      	movs	r1, #32
 8001092:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001096:	f002 f89b 	bl	80031d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 800109a:	2200      	movs	r2, #0
 800109c:	f244 1181 	movw	r1, #16769	@ 0x4181
 80010a0:	482b      	ldr	r0, [pc, #172]	@ (8001150 <MX_GPIO_Init+0x138>)
 80010a2:	f002 f895 	bl	80031d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80010a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010ac:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010b6:	f107 0314 	add.w	r3, r7, #20
 80010ba:	4619      	mov	r1, r3
 80010bc:	4825      	ldr	r0, [pc, #148]	@ (8001154 <MX_GPIO_Init+0x13c>)
 80010be:	f001 fec5 	bl	8002e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80010c2:	2320      	movs	r3, #32
 80010c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c6:	2301      	movs	r3, #1
 80010c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ce:	2300      	movs	r3, #0
 80010d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	4619      	mov	r1, r3
 80010d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010dc:	f001 feb6 	bl	8002e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_8;
 80010e0:	f244 1381 	movw	r3, #16769	@ 0x4181
 80010e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e6:	2301      	movs	r3, #1
 80010e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ee:	2300      	movs	r3, #0
 80010f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	4619      	mov	r1, r3
 80010f8:	4815      	ldr	r0, [pc, #84]	@ (8001150 <MX_GPIO_Init+0x138>)
 80010fa:	f001 fea7 	bl	8002e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 80010fe:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001102:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001104:	2300      	movs	r3, #0
 8001106:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001108:	2301      	movs	r3, #1
 800110a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	4619      	mov	r1, r3
 8001112:	4810      	ldr	r0, [pc, #64]	@ (8001154 <MX_GPIO_Init+0x13c>)
 8001114:	f001 fe9a 	bl	8002e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001118:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800111c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800111e:	2300      	movs	r3, #0
 8001120:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001126:	f107 0314 	add.w	r3, r7, #20
 800112a:	4619      	mov	r1, r3
 800112c:	4809      	ldr	r0, [pc, #36]	@ (8001154 <MX_GPIO_Init+0x13c>)
 800112e:	f001 fe8d 	bl	8002e4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001132:	2200      	movs	r2, #0
 8001134:	2100      	movs	r1, #0
 8001136:	2028      	movs	r0, #40	@ 0x28
 8001138:	f001 fe51 	bl	8002dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800113c:	2028      	movs	r0, #40	@ 0x28
 800113e:	f001 fe6a 	bl	8002e16 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001142:	bf00      	nop
 8001144:	3728      	adds	r7, #40	@ 0x28
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40021000 	.word	0x40021000
 8001150:	48000400 	.word	0x48000400
 8001154:	48000800 	.word	0x48000800

08001158 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800115c:	b672      	cpsid	i
}
 800115e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001160:	bf00      	nop
 8001162:	e7fd      	b.n	8001160 <Error_Handler+0x8>

08001164 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800116a:	4b0f      	ldr	r3, [pc, #60]	@ (80011a8 <HAL_MspInit+0x44>)
 800116c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800116e:	4a0e      	ldr	r2, [pc, #56]	@ (80011a8 <HAL_MspInit+0x44>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	6613      	str	r3, [r2, #96]	@ 0x60
 8001176:	4b0c      	ldr	r3, [pc, #48]	@ (80011a8 <HAL_MspInit+0x44>)
 8001178:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001182:	4b09      	ldr	r3, [pc, #36]	@ (80011a8 <HAL_MspInit+0x44>)
 8001184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001186:	4a08      	ldr	r2, [pc, #32]	@ (80011a8 <HAL_MspInit+0x44>)
 8001188:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800118c:	6593      	str	r3, [r2, #88]	@ 0x58
 800118e:	4b06      	ldr	r3, [pc, #24]	@ (80011a8 <HAL_MspInit+0x44>)
 8001190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001192:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001196:	603b      	str	r3, [r7, #0]
 8001198:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	40021000 	.word	0x40021000

080011ac <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08c      	sub	sp, #48	@ 0x30
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	f107 031c 	add.w	r3, r7, #28
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a33      	ldr	r2, [pc, #204]	@ (8001298 <HAL_ADC_MspInit+0xec>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d12d      	bne.n	800122a <HAL_ADC_MspInit+0x7e>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 80011ce:	4b33      	ldr	r3, [pc, #204]	@ (800129c <HAL_ADC_MspInit+0xf0>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	3301      	adds	r3, #1
 80011d4:	4a31      	ldr	r2, [pc, #196]	@ (800129c <HAL_ADC_MspInit+0xf0>)
 80011d6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80011d8:	4b30      	ldr	r3, [pc, #192]	@ (800129c <HAL_ADC_MspInit+0xf0>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d10b      	bne.n	80011f8 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 80011e0:	4b2f      	ldr	r3, [pc, #188]	@ (80012a0 <HAL_ADC_MspInit+0xf4>)
 80011e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e4:	4a2e      	ldr	r2, [pc, #184]	@ (80012a0 <HAL_ADC_MspInit+0xf4>)
 80011e6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80011ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ec:	4b2c      	ldr	r3, [pc, #176]	@ (80012a0 <HAL_ADC_MspInit+0xf4>)
 80011ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011f4:	61bb      	str	r3, [r7, #24]
 80011f6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f8:	4b29      	ldr	r3, [pc, #164]	@ (80012a0 <HAL_ADC_MspInit+0xf4>)
 80011fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011fc:	4a28      	ldr	r2, [pc, #160]	@ (80012a0 <HAL_ADC_MspInit+0xf4>)
 80011fe:	f043 0304 	orr.w	r3, r3, #4
 8001202:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001204:	4b26      	ldr	r3, [pc, #152]	@ (80012a0 <HAL_ADC_MspInit+0xf4>)
 8001206:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001208:	f003 0304 	and.w	r3, r3, #4
 800120c:	617b      	str	r3, [r7, #20]
 800120e:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001210:	2301      	movs	r3, #1
 8001212:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001214:	230b      	movs	r3, #11
 8001216:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800121c:	f107 031c 	add.w	r3, r7, #28
 8001220:	4619      	mov	r1, r3
 8001222:	4820      	ldr	r0, [pc, #128]	@ (80012a4 <HAL_ADC_MspInit+0xf8>)
 8001224:	f001 fe12 	bl	8002e4c <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001228:	e031      	b.n	800128e <HAL_ADC_MspInit+0xe2>
  else if(hadc->Instance==ADC2)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a1e      	ldr	r2, [pc, #120]	@ (80012a8 <HAL_ADC_MspInit+0xfc>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d12c      	bne.n	800128e <HAL_ADC_MspInit+0xe2>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001234:	4b19      	ldr	r3, [pc, #100]	@ (800129c <HAL_ADC_MspInit+0xf0>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	3301      	adds	r3, #1
 800123a:	4a18      	ldr	r2, [pc, #96]	@ (800129c <HAL_ADC_MspInit+0xf0>)
 800123c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800123e:	4b17      	ldr	r3, [pc, #92]	@ (800129c <HAL_ADC_MspInit+0xf0>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d10b      	bne.n	800125e <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001246:	4b16      	ldr	r3, [pc, #88]	@ (80012a0 <HAL_ADC_MspInit+0xf4>)
 8001248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800124a:	4a15      	ldr	r2, [pc, #84]	@ (80012a0 <HAL_ADC_MspInit+0xf4>)
 800124c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001250:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001252:	4b13      	ldr	r3, [pc, #76]	@ (80012a0 <HAL_ADC_MspInit+0xf4>)
 8001254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001256:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800125e:	4b10      	ldr	r3, [pc, #64]	@ (80012a0 <HAL_ADC_MspInit+0xf4>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001262:	4a0f      	ldr	r2, [pc, #60]	@ (80012a0 <HAL_ADC_MspInit+0xf4>)
 8001264:	f043 0304 	orr.w	r3, r3, #4
 8001268:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800126a:	4b0d      	ldr	r3, [pc, #52]	@ (80012a0 <HAL_ADC_MspInit+0xf4>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800126e:	f003 0304 	and.w	r3, r3, #4
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001276:	2302      	movs	r3, #2
 8001278:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800127a:	230b      	movs	r3, #11
 800127c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001282:	f107 031c 	add.w	r3, r7, #28
 8001286:	4619      	mov	r1, r3
 8001288:	4806      	ldr	r0, [pc, #24]	@ (80012a4 <HAL_ADC_MspInit+0xf8>)
 800128a:	f001 fddf 	bl	8002e4c <HAL_GPIO_Init>
}
 800128e:	bf00      	nop
 8001290:	3730      	adds	r7, #48	@ 0x30
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	50040000 	.word	0x50040000
 800129c:	200003b8 	.word	0x200003b8
 80012a0:	40021000 	.word	0x40021000
 80012a4:	48000800 	.word	0x48000800
 80012a8:	50040100 	.word	0x50040100

080012ac <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b0ac      	sub	sp, #176	@ 0xb0
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	2288      	movs	r2, #136	@ 0x88
 80012ca:	2100      	movs	r1, #0
 80012cc:	4618      	mov	r0, r3
 80012ce:	f004 f922 	bl	8005516 <memset>
  if(hi2c->Instance==I2C1)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a21      	ldr	r2, [pc, #132]	@ (800135c <HAL_I2C_MspInit+0xb0>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d13b      	bne.n	8001354 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80012dc:	2340      	movs	r3, #64	@ 0x40
 80012de:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80012e0:	2300      	movs	r3, #0
 80012e2:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	4618      	mov	r0, r3
 80012ea:	f002 ff37 	bl	800415c <HAL_RCCEx_PeriphCLKConfig>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80012f4:	f7ff ff30 	bl	8001158 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f8:	4b19      	ldr	r3, [pc, #100]	@ (8001360 <HAL_I2C_MspInit+0xb4>)
 80012fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012fc:	4a18      	ldr	r2, [pc, #96]	@ (8001360 <HAL_I2C_MspInit+0xb4>)
 80012fe:	f043 0302 	orr.w	r3, r3, #2
 8001302:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001304:	4b16      	ldr	r3, [pc, #88]	@ (8001360 <HAL_I2C_MspInit+0xb4>)
 8001306:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001308:	f003 0302 	and.w	r3, r3, #2
 800130c:	613b      	str	r3, [r7, #16]
 800130e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001310:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001314:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001318:	2312      	movs	r3, #18
 800131a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001324:	2303      	movs	r3, #3
 8001326:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800132a:	2304      	movs	r3, #4
 800132c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001330:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001334:	4619      	mov	r1, r3
 8001336:	480b      	ldr	r0, [pc, #44]	@ (8001364 <HAL_I2C_MspInit+0xb8>)
 8001338:	f001 fd88 	bl	8002e4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800133c:	4b08      	ldr	r3, [pc, #32]	@ (8001360 <HAL_I2C_MspInit+0xb4>)
 800133e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001340:	4a07      	ldr	r2, [pc, #28]	@ (8001360 <HAL_I2C_MspInit+0xb4>)
 8001342:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001346:	6593      	str	r3, [r2, #88]	@ 0x58
 8001348:	4b05      	ldr	r3, [pc, #20]	@ (8001360 <HAL_I2C_MspInit+0xb4>)
 800134a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800134c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001354:	bf00      	nop
 8001356:	37b0      	adds	r7, #176	@ 0xb0
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40005400 	.word	0x40005400
 8001360:	40021000 	.word	0x40021000
 8001364:	48000400 	.word	0x48000400

08001368 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b0b2      	sub	sp, #200	@ 0xc8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001370:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001380:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001384:	2288      	movs	r2, #136	@ 0x88
 8001386:	2100      	movs	r1, #0
 8001388:	4618      	mov	r0, r3
 800138a:	f004 f8c4 	bl	8005516 <memset>
  if(huart->Instance==UART4)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a84      	ldr	r2, [pc, #528]	@ (80015a4 <HAL_UART_MspInit+0x23c>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d13c      	bne.n	8001412 <HAL_UART_MspInit+0xaa>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001398:	2308      	movs	r3, #8
 800139a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800139c:	2300      	movs	r3, #0
 800139e:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013a4:	4618      	mov	r0, r3
 80013a6:	f002 fed9 	bl	800415c <HAL_RCCEx_PeriphCLKConfig>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80013b0:	f7ff fed2 	bl	8001158 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80013b4:	4b7c      	ldr	r3, [pc, #496]	@ (80015a8 <HAL_UART_MspInit+0x240>)
 80013b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013b8:	4a7b      	ldr	r2, [pc, #492]	@ (80015a8 <HAL_UART_MspInit+0x240>)
 80013ba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80013be:	6593      	str	r3, [r2, #88]	@ 0x58
 80013c0:	4b79      	ldr	r3, [pc, #484]	@ (80015a8 <HAL_UART_MspInit+0x240>)
 80013c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80013c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80013ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013cc:	4b76      	ldr	r3, [pc, #472]	@ (80015a8 <HAL_UART_MspInit+0x240>)
 80013ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d0:	4a75      	ldr	r2, [pc, #468]	@ (80015a8 <HAL_UART_MspInit+0x240>)
 80013d2:	f043 0301 	orr.w	r3, r3, #1
 80013d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013d8:	4b73      	ldr	r3, [pc, #460]	@ (80015a8 <HAL_UART_MspInit+0x240>)
 80013da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013dc:	f003 0301 	and.w	r3, r3, #1
 80013e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80013e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80013e4:	2303      	movs	r3, #3
 80013e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ea:	2302      	movs	r3, #2
 80013ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f6:	2303      	movs	r3, #3
 80013f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80013fc:	2308      	movs	r3, #8
 80013fe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001402:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001406:	4619      	mov	r1, r3
 8001408:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800140c:	f001 fd1e 	bl	8002e4c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8001410:	e0c4      	b.n	800159c <HAL_UART_MspInit+0x234>
  else if(huart->Instance==USART1)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a65      	ldr	r2, [pc, #404]	@ (80015ac <HAL_UART_MspInit+0x244>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d13d      	bne.n	8001498 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800141c:	2301      	movs	r3, #1
 800141e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001420:	2300      	movs	r3, #0
 8001422:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001424:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001428:	4618      	mov	r0, r3
 800142a:	f002 fe97 	bl	800415c <HAL_RCCEx_PeriphCLKConfig>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8001434:	f7ff fe90 	bl	8001158 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001438:	4b5b      	ldr	r3, [pc, #364]	@ (80015a8 <HAL_UART_MspInit+0x240>)
 800143a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800143c:	4a5a      	ldr	r2, [pc, #360]	@ (80015a8 <HAL_UART_MspInit+0x240>)
 800143e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001442:	6613      	str	r3, [r2, #96]	@ 0x60
 8001444:	4b58      	ldr	r3, [pc, #352]	@ (80015a8 <HAL_UART_MspInit+0x240>)
 8001446:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001448:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800144c:	623b      	str	r3, [r7, #32]
 800144e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001450:	4b55      	ldr	r3, [pc, #340]	@ (80015a8 <HAL_UART_MspInit+0x240>)
 8001452:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001454:	4a54      	ldr	r2, [pc, #336]	@ (80015a8 <HAL_UART_MspInit+0x240>)
 8001456:	f043 0301 	orr.w	r3, r3, #1
 800145a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800145c:	4b52      	ldr	r3, [pc, #328]	@ (80015a8 <HAL_UART_MspInit+0x240>)
 800145e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001460:	f003 0301 	and.w	r3, r3, #1
 8001464:	61fb      	str	r3, [r7, #28]
 8001466:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001468:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800146c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001470:	2302      	movs	r3, #2
 8001472:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147c:	2303      	movs	r3, #3
 800147e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001482:	2307      	movs	r3, #7
 8001484:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001488:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800148c:	4619      	mov	r1, r3
 800148e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001492:	f001 fcdb 	bl	8002e4c <HAL_GPIO_Init>
}
 8001496:	e081      	b.n	800159c <HAL_UART_MspInit+0x234>
  else if(huart->Instance==USART2)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a44      	ldr	r2, [pc, #272]	@ (80015b0 <HAL_UART_MspInit+0x248>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d13c      	bne.n	800151c <HAL_UART_MspInit+0x1b4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014a2:	2302      	movs	r3, #2
 80014a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014a6:	2300      	movs	r3, #0
 80014a8:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014ae:	4618      	mov	r0, r3
 80014b0:	f002 fe54 	bl	800415c <HAL_RCCEx_PeriphCLKConfig>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <HAL_UART_MspInit+0x156>
      Error_Handler();
 80014ba:	f7ff fe4d 	bl	8001158 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80014be:	4b3a      	ldr	r3, [pc, #232]	@ (80015a8 <HAL_UART_MspInit+0x240>)
 80014c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014c2:	4a39      	ldr	r2, [pc, #228]	@ (80015a8 <HAL_UART_MspInit+0x240>)
 80014c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80014ca:	4b37      	ldr	r3, [pc, #220]	@ (80015a8 <HAL_UART_MspInit+0x240>)
 80014cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014d2:	61bb      	str	r3, [r7, #24]
 80014d4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d6:	4b34      	ldr	r3, [pc, #208]	@ (80015a8 <HAL_UART_MspInit+0x240>)
 80014d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014da:	4a33      	ldr	r2, [pc, #204]	@ (80015a8 <HAL_UART_MspInit+0x240>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014e2:	4b31      	ldr	r3, [pc, #196]	@ (80015a8 <HAL_UART_MspInit+0x240>)
 80014e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	617b      	str	r3, [r7, #20]
 80014ec:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014ee:	230c      	movs	r3, #12
 80014f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f4:	2302      	movs	r3, #2
 80014f6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001500:	2303      	movs	r3, #3
 8001502:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001506:	2307      	movs	r3, #7
 8001508:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150c:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001510:	4619      	mov	r1, r3
 8001512:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001516:	f001 fc99 	bl	8002e4c <HAL_GPIO_Init>
}
 800151a:	e03f      	b.n	800159c <HAL_UART_MspInit+0x234>
  else if(huart->Instance==USART3)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a24      	ldr	r2, [pc, #144]	@ (80015b4 <HAL_UART_MspInit+0x24c>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d13a      	bne.n	800159c <HAL_UART_MspInit+0x234>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001526:	2304      	movs	r3, #4
 8001528:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800152a:	2300      	movs	r3, #0
 800152c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800152e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001532:	4618      	mov	r0, r3
 8001534:	f002 fe12 	bl	800415c <HAL_RCCEx_PeriphCLKConfig>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <HAL_UART_MspInit+0x1da>
      Error_Handler();
 800153e:	f7ff fe0b 	bl	8001158 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001542:	4b19      	ldr	r3, [pc, #100]	@ (80015a8 <HAL_UART_MspInit+0x240>)
 8001544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001546:	4a18      	ldr	r2, [pc, #96]	@ (80015a8 <HAL_UART_MspInit+0x240>)
 8001548:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800154c:	6593      	str	r3, [r2, #88]	@ 0x58
 800154e:	4b16      	ldr	r3, [pc, #88]	@ (80015a8 <HAL_UART_MspInit+0x240>)
 8001550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001552:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001556:	613b      	str	r3, [r7, #16]
 8001558:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800155a:	4b13      	ldr	r3, [pc, #76]	@ (80015a8 <HAL_UART_MspInit+0x240>)
 800155c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800155e:	4a12      	ldr	r2, [pc, #72]	@ (80015a8 <HAL_UART_MspInit+0x240>)
 8001560:	f043 0304 	orr.w	r3, r3, #4
 8001564:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001566:	4b10      	ldr	r3, [pc, #64]	@ (80015a8 <HAL_UART_MspInit+0x240>)
 8001568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800156a:	f003 0304 	and.w	r3, r3, #4
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001572:	2330      	movs	r3, #48	@ 0x30
 8001574:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001578:	2302      	movs	r3, #2
 800157a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001584:	2303      	movs	r3, #3
 8001586:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800158a:	2307      	movs	r3, #7
 800158c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001590:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001594:	4619      	mov	r1, r3
 8001596:	4808      	ldr	r0, [pc, #32]	@ (80015b8 <HAL_UART_MspInit+0x250>)
 8001598:	f001 fc58 	bl	8002e4c <HAL_GPIO_Init>
}
 800159c:	bf00      	nop
 800159e:	37c8      	adds	r7, #200	@ 0xc8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40004c00 	.word	0x40004c00
 80015a8:	40021000 	.word	0x40021000
 80015ac:	40013800 	.word	0x40013800
 80015b0:	40004400 	.word	0x40004400
 80015b4:	40004800 	.word	0x40004800
 80015b8:	48000800 	.word	0x48000800

080015bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015c0:	bf00      	nop
 80015c2:	e7fd      	b.n	80015c0 <NMI_Handler+0x4>

080015c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015c8:	bf00      	nop
 80015ca:	e7fd      	b.n	80015c8 <HardFault_Handler+0x4>

080015cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d0:	bf00      	nop
 80015d2:	e7fd      	b.n	80015d0 <MemManage_Handler+0x4>

080015d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015d8:	bf00      	nop
 80015da:	e7fd      	b.n	80015d8 <BusFault_Handler+0x4>

080015dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e0:	bf00      	nop
 80015e2:	e7fd      	b.n	80015e0 <UsageFault_Handler+0x4>

080015e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001612:	f000 f8a3 	bl	800175c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}

0800161a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800161e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001622:	f001 fded 	bl	8003200 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001630:	4b06      	ldr	r3, [pc, #24]	@ (800164c <SystemInit+0x20>)
 8001632:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001636:	4a05      	ldr	r2, [pc, #20]	@ (800164c <SystemInit+0x20>)
 8001638:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800163c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001650:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001688 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001654:	f7ff ffea 	bl	800162c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001658:	480c      	ldr	r0, [pc, #48]	@ (800168c <LoopForever+0x6>)
  ldr r1, =_edata
 800165a:	490d      	ldr	r1, [pc, #52]	@ (8001690 <LoopForever+0xa>)
  ldr r2, =_sidata
 800165c:	4a0d      	ldr	r2, [pc, #52]	@ (8001694 <LoopForever+0xe>)
  movs r3, #0
 800165e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001660:	e002      	b.n	8001668 <LoopCopyDataInit>

08001662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001666:	3304      	adds	r3, #4

08001668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800166a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800166c:	d3f9      	bcc.n	8001662 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800166e:	4a0a      	ldr	r2, [pc, #40]	@ (8001698 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001670:	4c0a      	ldr	r4, [pc, #40]	@ (800169c <LoopForever+0x16>)
  movs r3, #0
 8001672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001674:	e001      	b.n	800167a <LoopFillZerobss>

08001676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001678:	3204      	adds	r2, #4

0800167a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800167a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800167c:	d3fb      	bcc.n	8001676 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800167e:	f003 ff53 	bl	8005528 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001682:	f7ff f9df 	bl	8000a44 <main>

08001686 <LoopForever>:

LoopForever:
    b LoopForever
 8001686:	e7fe      	b.n	8001686 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001688:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800168c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001690:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001694:	080055fc 	.word	0x080055fc
  ldr r2, =_sbss
 8001698:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800169c:	200003c0 	.word	0x200003c0

080016a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016a0:	e7fe      	b.n	80016a0 <ADC1_2_IRQHandler>
	...

080016a4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016aa:	2300      	movs	r3, #0
 80016ac:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016ae:	4b0c      	ldr	r3, [pc, #48]	@ (80016e0 <HAL_Init+0x3c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a0b      	ldr	r2, [pc, #44]	@ (80016e0 <HAL_Init+0x3c>)
 80016b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016b8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ba:	2003      	movs	r0, #3
 80016bc:	f001 fb84 	bl	8002dc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016c0:	2000      	movs	r0, #0
 80016c2:	f000 f80f 	bl	80016e4 <HAL_InitTick>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d002      	beq.n	80016d2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	71fb      	strb	r3, [r7, #7]
 80016d0:	e001      	b.n	80016d6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016d2:	f7ff fd47 	bl	8001164 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016d6:	79fb      	ldrb	r3, [r7, #7]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40022000 	.word	0x40022000

080016e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016ec:	2300      	movs	r3, #0
 80016ee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80016f0:	4b17      	ldr	r3, [pc, #92]	@ (8001750 <HAL_InitTick+0x6c>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d023      	beq.n	8001740 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80016f8:	4b16      	ldr	r3, [pc, #88]	@ (8001754 <HAL_InitTick+0x70>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	4b14      	ldr	r3, [pc, #80]	@ (8001750 <HAL_InitTick+0x6c>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	4619      	mov	r1, r3
 8001702:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001706:	fbb3 f3f1 	udiv	r3, r3, r1
 800170a:	fbb2 f3f3 	udiv	r3, r2, r3
 800170e:	4618      	mov	r0, r3
 8001710:	f001 fb8f 	bl	8002e32 <HAL_SYSTICK_Config>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d10f      	bne.n	800173a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2b0f      	cmp	r3, #15
 800171e:	d809      	bhi.n	8001734 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001720:	2200      	movs	r2, #0
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	f04f 30ff 	mov.w	r0, #4294967295
 8001728:	f001 fb59 	bl	8002dde <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800172c:	4a0a      	ldr	r2, [pc, #40]	@ (8001758 <HAL_InitTick+0x74>)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6013      	str	r3, [r2, #0]
 8001732:	e007      	b.n	8001744 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	73fb      	strb	r3, [r7, #15]
 8001738:	e004      	b.n	8001744 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	73fb      	strb	r3, [r7, #15]
 800173e:	e001      	b.n	8001744 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001744:	7bfb      	ldrb	r3, [r7, #15]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000010 	.word	0x20000010
 8001754:	20000008 	.word	0x20000008
 8001758:	2000000c 	.word	0x2000000c

0800175c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001760:	4b06      	ldr	r3, [pc, #24]	@ (800177c <HAL_IncTick+0x20>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	461a      	mov	r2, r3
 8001766:	4b06      	ldr	r3, [pc, #24]	@ (8001780 <HAL_IncTick+0x24>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4413      	add	r3, r2
 800176c:	4a04      	ldr	r2, [pc, #16]	@ (8001780 <HAL_IncTick+0x24>)
 800176e:	6013      	str	r3, [r2, #0]
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	20000010 	.word	0x20000010
 8001780:	200003bc 	.word	0x200003bc

08001784 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  return uwTick;
 8001788:	4b03      	ldr	r3, [pc, #12]	@ (8001798 <HAL_GetTick+0x14>)
 800178a:	681b      	ldr	r3, [r3, #0]
}
 800178c:	4618      	mov	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	200003bc 	.word	0x200003bc

0800179c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017a4:	f7ff ffee 	bl	8001784 <HAL_GetTick>
 80017a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017b4:	d005      	beq.n	80017c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80017b6:	4b0a      	ldr	r3, [pc, #40]	@ (80017e0 <HAL_Delay+0x44>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	461a      	mov	r2, r3
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	4413      	add	r3, r2
 80017c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017c2:	bf00      	nop
 80017c4:	f7ff ffde 	bl	8001784 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	68fa      	ldr	r2, [r7, #12]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d8f7      	bhi.n	80017c4 <HAL_Delay+0x28>
  {
  }
}
 80017d4:	bf00      	nop
 80017d6:	bf00      	nop
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000010 	.word	0x20000010

080017e4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	431a      	orrs	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	609a      	str	r2, [r3, #8]
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800180a:	b480      	push	{r7}
 800180c:	b083      	sub	sp, #12
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
 8001812:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	431a      	orrs	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	609a      	str	r2, [r3, #8]
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001840:	4618      	mov	r0, r3
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800184c:	b480      	push	{r7}
 800184e:	b087      	sub	sp, #28
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
 8001858:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	3360      	adds	r3, #96	@ 0x60
 800185e:	461a      	mov	r2, r3
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	4413      	add	r3, r2
 8001866:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	4b08      	ldr	r3, [pc, #32]	@ (8001890 <LL_ADC_SetOffset+0x44>)
 800186e:	4013      	ands	r3, r2
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	430a      	orrs	r2, r1
 800187a:	4313      	orrs	r3, r2
 800187c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001884:	bf00      	nop
 8001886:	371c      	adds	r7, #28
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	03fff000 	.word	0x03fff000

08001894 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	3360      	adds	r3, #96	@ 0x60
 80018a2:	461a      	mov	r2, r3
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4413      	add	r3, r2
 80018aa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b087      	sub	sp, #28
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	3360      	adds	r3, #96	@ 0x60
 80018d0:	461a      	mov	r2, r3
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4413      	add	r3, r2
 80018d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	431a      	orrs	r2, r3
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80018ea:	bf00      	nop
 80018ec:	371c      	adds	r7, #28
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80018f6:	b480      	push	{r7}
 80018f8:	b083      	sub	sp, #12
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001906:	2b00      	cmp	r3, #0
 8001908:	d101      	bne.n	800190e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800190a:	2301      	movs	r3, #1
 800190c:	e000      	b.n	8001910 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800191c:	b480      	push	{r7}
 800191e:	b087      	sub	sp, #28
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	3330      	adds	r3, #48	@ 0x30
 800192c:	461a      	mov	r2, r3
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	0a1b      	lsrs	r3, r3, #8
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	f003 030c 	and.w	r3, r3, #12
 8001938:	4413      	add	r3, r2
 800193a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	f003 031f 	and.w	r3, r3, #31
 8001946:	211f      	movs	r1, #31
 8001948:	fa01 f303 	lsl.w	r3, r1, r3
 800194c:	43db      	mvns	r3, r3
 800194e:	401a      	ands	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	0e9b      	lsrs	r3, r3, #26
 8001954:	f003 011f 	and.w	r1, r3, #31
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	f003 031f 	and.w	r3, r3, #31
 800195e:	fa01 f303 	lsl.w	r3, r1, r3
 8001962:	431a      	orrs	r2, r3
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001968:	bf00      	nop
 800196a:	371c      	adds	r7, #28
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001974:	b480      	push	{r7}
 8001976:	b087      	sub	sp, #28
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	3314      	adds	r3, #20
 8001984:	461a      	mov	r2, r3
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	0e5b      	lsrs	r3, r3, #25
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	f003 0304 	and.w	r3, r3, #4
 8001990:	4413      	add	r3, r2
 8001992:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	0d1b      	lsrs	r3, r3, #20
 800199c:	f003 031f 	and.w	r3, r3, #31
 80019a0:	2107      	movs	r1, #7
 80019a2:	fa01 f303 	lsl.w	r3, r1, r3
 80019a6:	43db      	mvns	r3, r3
 80019a8:	401a      	ands	r2, r3
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	0d1b      	lsrs	r3, r3, #20
 80019ae:	f003 031f 	and.w	r3, r3, #31
 80019b2:	6879      	ldr	r1, [r7, #4]
 80019b4:	fa01 f303 	lsl.w	r3, r1, r3
 80019b8:	431a      	orrs	r2, r3
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80019be:	bf00      	nop
 80019c0:	371c      	adds	r7, #28
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
	...

080019cc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019e4:	43db      	mvns	r3, r3
 80019e6:	401a      	ands	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f003 0318 	and.w	r3, r3, #24
 80019ee:	4908      	ldr	r1, [pc, #32]	@ (8001a10 <LL_ADC_SetChannelSingleDiff+0x44>)
 80019f0:	40d9      	lsrs	r1, r3
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	400b      	ands	r3, r1
 80019f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019fa:	431a      	orrs	r2, r3
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001a02:	bf00      	nop
 8001a04:	3714      	adds	r7, #20
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	0007ffff 	.word	0x0007ffff

08001a14 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f003 031f 	and.w	r3, r3, #31
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001a5c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	6093      	str	r3, [r2, #8]
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001a80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001a84:	d101      	bne.n	8001a8a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a86:	2301      	movs	r3, #1
 8001a88:	e000      	b.n	8001a8c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a8a:	2300      	movs	r3, #0
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001aa8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001aac:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ad0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001ad4:	d101      	bne.n	8001ada <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e000      	b.n	8001adc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001af8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001afc:	f043 0201 	orr.w	r2, r3, #1
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 0301 	and.w	r3, r3, #1
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d101      	bne.n	8001b28 <LL_ADC_IsEnabled+0x18>
 8001b24:	2301      	movs	r3, #1
 8001b26:	e000      	b.n	8001b2a <LL_ADC_IsEnabled+0x1a>
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001b46:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b4a:	f043 0204 	orr.w	r2, r3, #4
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr

08001b5e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	b083      	sub	sp, #12
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 0304 	and.w	r3, r3, #4
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	d101      	bne.n	8001b76 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b72:	2301      	movs	r3, #1
 8001b74:	e000      	b.n	8001b78 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 0308 	and.w	r3, r3, #8
 8001b94:	2b08      	cmp	r3, #8
 8001b96:	d101      	bne.n	8001b9c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e000      	b.n	8001b9e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
	...

08001bac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001bac:	b590      	push	{r4, r7, lr}
 8001bae:	b089      	sub	sp, #36	@ 0x24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e130      	b.n	8001e28 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d109      	bne.n	8001be8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f7ff fae9 	bl	80011ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff ff3f 	bl	8001a70 <LL_ADC_IsDeepPowerDownEnabled>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d004      	beq.n	8001c02 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff ff25 	bl	8001a4c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff ff5a 	bl	8001ac0 <LL_ADC_IsInternalRegulatorEnabled>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d115      	bne.n	8001c3e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff ff3e 	bl	8001a98 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c1c:	4b84      	ldr	r3, [pc, #528]	@ (8001e30 <HAL_ADC_Init+0x284>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	099b      	lsrs	r3, r3, #6
 8001c22:	4a84      	ldr	r2, [pc, #528]	@ (8001e34 <HAL_ADC_Init+0x288>)
 8001c24:	fba2 2303 	umull	r2, r3, r2, r3
 8001c28:	099b      	lsrs	r3, r3, #6
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c30:	e002      	b.n	8001c38 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	3b01      	subs	r3, #1
 8001c36:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1f9      	bne.n	8001c32 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff ff3c 	bl	8001ac0 <LL_ADC_IsInternalRegulatorEnabled>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d10d      	bne.n	8001c6a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c52:	f043 0210 	orr.w	r2, r3, #16
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c5e:	f043 0201 	orr.w	r2, r3, #1
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff ff75 	bl	8001b5e <LL_ADC_REG_IsConversionOngoing>
 8001c74:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c7a:	f003 0310 	and.w	r3, r3, #16
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f040 80c9 	bne.w	8001e16 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f040 80c5 	bne.w	8001e16 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c90:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001c94:	f043 0202 	orr.w	r2, r3, #2
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff ff35 	bl	8001b10 <LL_ADC_IsEnabled>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d115      	bne.n	8001cd8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001cac:	4862      	ldr	r0, [pc, #392]	@ (8001e38 <HAL_ADC_Init+0x28c>)
 8001cae:	f7ff ff2f 	bl	8001b10 <LL_ADC_IsEnabled>
 8001cb2:	4604      	mov	r4, r0
 8001cb4:	4861      	ldr	r0, [pc, #388]	@ (8001e3c <HAL_ADC_Init+0x290>)
 8001cb6:	f7ff ff2b 	bl	8001b10 <LL_ADC_IsEnabled>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	431c      	orrs	r4, r3
 8001cbe:	4860      	ldr	r0, [pc, #384]	@ (8001e40 <HAL_ADC_Init+0x294>)
 8001cc0:	f7ff ff26 	bl	8001b10 <LL_ADC_IsEnabled>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	4323      	orrs	r3, r4
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d105      	bne.n	8001cd8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	485c      	ldr	r0, [pc, #368]	@ (8001e44 <HAL_ADC_Init+0x298>)
 8001cd4:	f7ff fd86 	bl	80017e4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	7e5b      	ldrb	r3, [r3, #25]
 8001cdc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ce2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001ce8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001cee:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cf6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d106      	bne.n	8001d14 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	045b      	lsls	r3, r3, #17
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d009      	beq.n	8001d30 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d20:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d28:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68da      	ldr	r2, [r3, #12]
 8001d36:	4b44      	ldr	r3, [pc, #272]	@ (8001e48 <HAL_ADC_Init+0x29c>)
 8001d38:	4013      	ands	r3, r2
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	6812      	ldr	r2, [r2, #0]
 8001d3e:	69b9      	ldr	r1, [r7, #24]
 8001d40:	430b      	orrs	r3, r1
 8001d42:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff ff1b 	bl	8001b84 <LL_ADC_INJ_IsConversionOngoing>
 8001d4e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d13d      	bne.n	8001dd2 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d13a      	bne.n	8001dd2 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d60:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001d68:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001d78:	f023 0302 	bic.w	r3, r3, #2
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	6812      	ldr	r2, [r2, #0]
 8001d80:	69b9      	ldr	r1, [r7, #24]
 8001d82:	430b      	orrs	r3, r1
 8001d84:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d118      	bne.n	8001dc2 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001d9a:	f023 0304 	bic.w	r3, r3, #4
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001da6:	4311      	orrs	r1, r2
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001dac:	4311      	orrs	r1, r2
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001db2:	430a      	orrs	r2, r1
 8001db4:	431a      	orrs	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f042 0201 	orr.w	r2, r2, #1
 8001dbe:	611a      	str	r2, [r3, #16]
 8001dc0:	e007      	b.n	8001dd2 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	691a      	ldr	r2, [r3, #16]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f022 0201 	bic.w	r2, r2, #1
 8001dd0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d10c      	bne.n	8001df4 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de0:	f023 010f 	bic.w	r1, r3, #15
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	69db      	ldr	r3, [r3, #28]
 8001de8:	1e5a      	subs	r2, r3, #1
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	430a      	orrs	r2, r1
 8001df0:	631a      	str	r2, [r3, #48]	@ 0x30
 8001df2:	e007      	b.n	8001e04 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f022 020f 	bic.w	r2, r2, #15
 8001e02:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e08:	f023 0303 	bic.w	r3, r3, #3
 8001e0c:	f043 0201 	orr.w	r2, r3, #1
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	655a      	str	r2, [r3, #84]	@ 0x54
 8001e14:	e007      	b.n	8001e26 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e1a:	f043 0210 	orr.w	r2, r3, #16
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e26:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3724      	adds	r7, #36	@ 0x24
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd90      	pop	{r4, r7, pc}
 8001e30:	20000008 	.word	0x20000008
 8001e34:	053e2d63 	.word	0x053e2d63
 8001e38:	50040000 	.word	0x50040000
 8001e3c:	50040100 	.word	0x50040100
 8001e40:	50040200 	.word	0x50040200
 8001e44:	50040300 	.word	0x50040300
 8001e48:	fff0c007 	.word	0xfff0c007

08001e4c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e54:	4857      	ldr	r0, [pc, #348]	@ (8001fb4 <HAL_ADC_Start+0x168>)
 8001e56:	f7ff fddd 	bl	8001a14 <LL_ADC_GetMultimode>
 8001e5a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff fe7c 	bl	8001b5e <LL_ADC_REG_IsConversionOngoing>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f040 809c 	bne.w	8001fa6 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d101      	bne.n	8001e7c <HAL_ADC_Start+0x30>
 8001e78:	2302      	movs	r3, #2
 8001e7a:	e097      	b.n	8001fac <HAL_ADC_Start+0x160>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 fd73 	bl	8002970 <ADC_Enable>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001e8e:	7dfb      	ldrb	r3, [r7, #23]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f040 8083 	bne.w	8001f9c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e9a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001e9e:	f023 0301 	bic.w	r3, r3, #1
 8001ea2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a42      	ldr	r2, [pc, #264]	@ (8001fb8 <HAL_ADC_Start+0x16c>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d002      	beq.n	8001eba <HAL_ADC_Start+0x6e>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	e000      	b.n	8001ebc <HAL_ADC_Start+0x70>
 8001eba:	4b40      	ldr	r3, [pc, #256]	@ (8001fbc <HAL_ADC_Start+0x170>)
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	6812      	ldr	r2, [r2, #0]
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d002      	beq.n	8001eca <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d105      	bne.n	8001ed6 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ece:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ede:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ee2:	d106      	bne.n	8001ef2 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee8:	f023 0206 	bic.w	r2, r3, #6
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	659a      	str	r2, [r3, #88]	@ 0x58
 8001ef0:	e002      	b.n	8001ef8 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	221c      	movs	r2, #28
 8001efe:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a2a      	ldr	r2, [pc, #168]	@ (8001fb8 <HAL_ADC_Start+0x16c>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d002      	beq.n	8001f18 <HAL_ADC_Start+0xcc>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	e000      	b.n	8001f1a <HAL_ADC_Start+0xce>
 8001f18:	4b28      	ldr	r3, [pc, #160]	@ (8001fbc <HAL_ADC_Start+0x170>)
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	6812      	ldr	r2, [r2, #0]
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d008      	beq.n	8001f34 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d005      	beq.n	8001f34 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	2b05      	cmp	r3, #5
 8001f2c:	d002      	beq.n	8001f34 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	2b09      	cmp	r3, #9
 8001f32:	d114      	bne.n	8001f5e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d007      	beq.n	8001f52 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f46:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001f4a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff fded 	bl	8001b36 <LL_ADC_REG_StartConversion>
 8001f5c:	e025      	b.n	8001faa <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f62:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a12      	ldr	r2, [pc, #72]	@ (8001fb8 <HAL_ADC_Start+0x16c>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d002      	beq.n	8001f7a <HAL_ADC_Start+0x12e>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	e000      	b.n	8001f7c <HAL_ADC_Start+0x130>
 8001f7a:	4b10      	ldr	r3, [pc, #64]	@ (8001fbc <HAL_ADC_Start+0x170>)
 8001f7c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d00f      	beq.n	8001faa <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f8e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001f92:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	655a      	str	r2, [r3, #84]	@ 0x54
 8001f9a:	e006      	b.n	8001faa <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001fa4:	e001      	b.n	8001faa <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001faa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3718      	adds	r7, #24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	50040300 	.word	0x50040300
 8001fb8:	50040100 	.word	0x50040100
 8001fbc:	50040000 	.word	0x50040000

08001fc0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b088      	sub	sp, #32
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fca:	4866      	ldr	r0, [pc, #408]	@ (8002164 <HAL_ADC_PollForConversion+0x1a4>)
 8001fcc:	f7ff fd22 	bl	8001a14 <LL_ADC_GetMultimode>
 8001fd0:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	2b08      	cmp	r3, #8
 8001fd8:	d102      	bne.n	8001fe0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001fda:	2308      	movs	r3, #8
 8001fdc:	61fb      	str	r3, [r7, #28]
 8001fde:	e02a      	b.n	8002036 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d005      	beq.n	8001ff2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	2b05      	cmp	r3, #5
 8001fea:	d002      	beq.n	8001ff2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	2b09      	cmp	r3, #9
 8001ff0:	d111      	bne.n	8002016 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	f003 0301 	and.w	r3, r3, #1
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d007      	beq.n	8002010 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002004:	f043 0220 	orr.w	r2, r3, #32
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e0a4      	b.n	800215a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002010:	2304      	movs	r3, #4
 8002012:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002014:	e00f      	b.n	8002036 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002016:	4853      	ldr	r0, [pc, #332]	@ (8002164 <HAL_ADC_PollForConversion+0x1a4>)
 8002018:	f7ff fd0a 	bl	8001a30 <LL_ADC_GetMultiDMATransfer>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d007      	beq.n	8002032 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002026:	f043 0220 	orr.w	r2, r3, #32
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e093      	b.n	800215a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002032:	2304      	movs	r3, #4
 8002034:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002036:	f7ff fba5 	bl	8001784 <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800203c:	e021      	b.n	8002082 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002044:	d01d      	beq.n	8002082 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002046:	f7ff fb9d 	bl	8001784 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	429a      	cmp	r2, r3
 8002054:	d302      	bcc.n	800205c <HAL_ADC_PollForConversion+0x9c>
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d112      	bne.n	8002082 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	4013      	ands	r3, r2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d10b      	bne.n	8002082 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800206e:	f043 0204 	orr.w	r2, r3, #4
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e06b      	b.n	800215a <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	4013      	ands	r3, r2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0d6      	beq.n	800203e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002094:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff fc28 	bl	80018f6 <LL_ADC_REG_IsTriggerSourceSWStart>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d01c      	beq.n	80020e6 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	7e5b      	ldrb	r3, [r3, #25]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d118      	bne.n	80020e6 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0308 	and.w	r3, r3, #8
 80020be:	2b08      	cmp	r3, #8
 80020c0:	d111      	bne.n	80020e6 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020c6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d105      	bne.n	80020e6 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020de:	f043 0201 	orr.w	r2, r3, #1
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a1f      	ldr	r2, [pc, #124]	@ (8002168 <HAL_ADC_PollForConversion+0x1a8>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d002      	beq.n	80020f6 <HAL_ADC_PollForConversion+0x136>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	e000      	b.n	80020f8 <HAL_ADC_PollForConversion+0x138>
 80020f6:	4b1d      	ldr	r3, [pc, #116]	@ (800216c <HAL_ADC_PollForConversion+0x1ac>)
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	6812      	ldr	r2, [r2, #0]
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d008      	beq.n	8002112 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d005      	beq.n	8002112 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	2b05      	cmp	r3, #5
 800210a:	d002      	beq.n	8002112 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	2b09      	cmp	r3, #9
 8002110:	d104      	bne.n	800211c <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	61bb      	str	r3, [r7, #24]
 800211a:	e00c      	b.n	8002136 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a11      	ldr	r2, [pc, #68]	@ (8002168 <HAL_ADC_PollForConversion+0x1a8>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d002      	beq.n	800212c <HAL_ADC_PollForConversion+0x16c>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	e000      	b.n	800212e <HAL_ADC_PollForConversion+0x16e>
 800212c:	4b0f      	ldr	r3, [pc, #60]	@ (800216c <HAL_ADC_PollForConversion+0x1ac>)
 800212e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	2b08      	cmp	r3, #8
 800213a:	d104      	bne.n	8002146 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2208      	movs	r2, #8
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	e008      	b.n	8002158 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d103      	bne.n	8002158 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	220c      	movs	r2, #12
 8002156:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3720      	adds	r7, #32
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	50040300 	.word	0x50040300
 8002168:	50040100 	.word	0x50040100
 800216c:	50040000 	.word	0x50040000

08002170 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800217e:	4618      	mov	r0, r3
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
	...

0800218c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b0b6      	sub	sp, #216	@ 0xd8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002196:	2300      	movs	r3, #0
 8002198:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800219c:	2300      	movs	r3, #0
 800219e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d101      	bne.n	80021ae <HAL_ADC_ConfigChannel+0x22>
 80021aa:	2302      	movs	r3, #2
 80021ac:	e3c9      	b.n	8002942 <HAL_ADC_ConfigChannel+0x7b6>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2201      	movs	r2, #1
 80021b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff fccf 	bl	8001b5e <LL_ADC_REG_IsConversionOngoing>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f040 83aa 	bne.w	800291c <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	2b05      	cmp	r3, #5
 80021d6:	d824      	bhi.n	8002222 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	3b02      	subs	r3, #2
 80021de:	2b03      	cmp	r3, #3
 80021e0:	d81b      	bhi.n	800221a <HAL_ADC_ConfigChannel+0x8e>
 80021e2:	a201      	add	r2, pc, #4	@ (adr r2, 80021e8 <HAL_ADC_ConfigChannel+0x5c>)
 80021e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e8:	080021f9 	.word	0x080021f9
 80021ec:	08002201 	.word	0x08002201
 80021f0:	08002209 	.word	0x08002209
 80021f4:	08002211 	.word	0x08002211
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80021f8:	230c      	movs	r3, #12
 80021fa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80021fe:	e010      	b.n	8002222 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002200:	2312      	movs	r3, #18
 8002202:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002206:	e00c      	b.n	8002222 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002208:	2318      	movs	r3, #24
 800220a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800220e:	e008      	b.n	8002222 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002210:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002214:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002218:	e003      	b.n	8002222 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800221a:	2306      	movs	r3, #6
 800221c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002220:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6818      	ldr	r0, [r3, #0]
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	461a      	mov	r2, r3
 800222c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002230:	f7ff fb74 	bl	800191c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff fc90 	bl	8001b5e <LL_ADC_REG_IsConversionOngoing>
 800223e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff fc9c 	bl	8001b84 <LL_ADC_INJ_IsConversionOngoing>
 800224c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002250:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002254:	2b00      	cmp	r3, #0
 8002256:	f040 81a4 	bne.w	80025a2 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800225a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800225e:	2b00      	cmp	r3, #0
 8002260:	f040 819f 	bne.w	80025a2 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6818      	ldr	r0, [r3, #0]
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	6819      	ldr	r1, [r3, #0]
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	461a      	mov	r2, r3
 8002272:	f7ff fb7f 	bl	8001974 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	695a      	ldr	r2, [r3, #20]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	08db      	lsrs	r3, r3, #3
 8002282:	f003 0303 	and.w	r3, r3, #3
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	691b      	ldr	r3, [r3, #16]
 8002294:	2b04      	cmp	r3, #4
 8002296:	d00a      	beq.n	80022ae <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6818      	ldr	r0, [r3, #0]
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	6919      	ldr	r1, [r3, #16]
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80022a8:	f7ff fad0 	bl	800184c <LL_ADC_SetOffset>
 80022ac:	e179      	b.n	80025a2 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2100      	movs	r1, #0
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff faed 	bl	8001894 <LL_ADC_GetOffsetChannel>
 80022ba:	4603      	mov	r3, r0
 80022bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d10a      	bne.n	80022da <HAL_ADC_ConfigChannel+0x14e>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2100      	movs	r1, #0
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff fae2 	bl	8001894 <LL_ADC_GetOffsetChannel>
 80022d0:	4603      	mov	r3, r0
 80022d2:	0e9b      	lsrs	r3, r3, #26
 80022d4:	f003 021f 	and.w	r2, r3, #31
 80022d8:	e01e      	b.n	8002318 <HAL_ADC_ConfigChannel+0x18c>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2100      	movs	r1, #0
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff fad7 	bl	8001894 <LL_ADC_GetOffsetChannel>
 80022e6:	4603      	mov	r3, r0
 80022e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80022f0:	fa93 f3a3 	rbit	r3, r3
 80022f4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80022fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002300:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002304:	2b00      	cmp	r3, #0
 8002306:	d101      	bne.n	800230c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002308:	2320      	movs	r3, #32
 800230a:	e004      	b.n	8002316 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800230c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002310:	fab3 f383 	clz	r3, r3
 8002314:	b2db      	uxtb	r3, r3
 8002316:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002320:	2b00      	cmp	r3, #0
 8002322:	d105      	bne.n	8002330 <HAL_ADC_ConfigChannel+0x1a4>
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	0e9b      	lsrs	r3, r3, #26
 800232a:	f003 031f 	and.w	r3, r3, #31
 800232e:	e018      	b.n	8002362 <HAL_ADC_ConfigChannel+0x1d6>
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002338:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800233c:	fa93 f3a3 	rbit	r3, r3
 8002340:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002344:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002348:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800234c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d101      	bne.n	8002358 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002354:	2320      	movs	r3, #32
 8002356:	e004      	b.n	8002362 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002358:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800235c:	fab3 f383 	clz	r3, r3
 8002360:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002362:	429a      	cmp	r2, r3
 8002364:	d106      	bne.n	8002374 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2200      	movs	r2, #0
 800236c:	2100      	movs	r1, #0
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff faa6 	bl	80018c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2101      	movs	r1, #1
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff fa8a 	bl	8001894 <LL_ADC_GetOffsetChannel>
 8002380:	4603      	mov	r3, r0
 8002382:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002386:	2b00      	cmp	r3, #0
 8002388:	d10a      	bne.n	80023a0 <HAL_ADC_ConfigChannel+0x214>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2101      	movs	r1, #1
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff fa7f 	bl	8001894 <LL_ADC_GetOffsetChannel>
 8002396:	4603      	mov	r3, r0
 8002398:	0e9b      	lsrs	r3, r3, #26
 800239a:	f003 021f 	and.w	r2, r3, #31
 800239e:	e01e      	b.n	80023de <HAL_ADC_ConfigChannel+0x252>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2101      	movs	r1, #1
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff fa74 	bl	8001894 <LL_ADC_GetOffsetChannel>
 80023ac:	4603      	mov	r3, r0
 80023ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80023b6:	fa93 f3a3 	rbit	r3, r3
 80023ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80023be:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80023c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80023c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80023ce:	2320      	movs	r3, #32
 80023d0:	e004      	b.n	80023dc <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80023d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80023d6:	fab3 f383 	clz	r3, r3
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d105      	bne.n	80023f6 <HAL_ADC_ConfigChannel+0x26a>
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	0e9b      	lsrs	r3, r3, #26
 80023f0:	f003 031f 	and.w	r3, r3, #31
 80023f4:	e018      	b.n	8002428 <HAL_ADC_ConfigChannel+0x29c>
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002402:	fa93 f3a3 	rbit	r3, r3
 8002406:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800240a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800240e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002412:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800241a:	2320      	movs	r3, #32
 800241c:	e004      	b.n	8002428 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800241e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002422:	fab3 f383 	clz	r3, r3
 8002426:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002428:	429a      	cmp	r2, r3
 800242a:	d106      	bne.n	800243a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2200      	movs	r2, #0
 8002432:	2101      	movs	r1, #1
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff fa43 	bl	80018c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2102      	movs	r1, #2
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff fa27 	bl	8001894 <LL_ADC_GetOffsetChannel>
 8002446:	4603      	mov	r3, r0
 8002448:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800244c:	2b00      	cmp	r3, #0
 800244e:	d10a      	bne.n	8002466 <HAL_ADC_ConfigChannel+0x2da>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2102      	movs	r1, #2
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff fa1c 	bl	8001894 <LL_ADC_GetOffsetChannel>
 800245c:	4603      	mov	r3, r0
 800245e:	0e9b      	lsrs	r3, r3, #26
 8002460:	f003 021f 	and.w	r2, r3, #31
 8002464:	e01e      	b.n	80024a4 <HAL_ADC_ConfigChannel+0x318>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2102      	movs	r1, #2
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff fa11 	bl	8001894 <LL_ADC_GetOffsetChannel>
 8002472:	4603      	mov	r3, r0
 8002474:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002478:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800247c:	fa93 f3a3 	rbit	r3, r3
 8002480:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002484:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002488:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800248c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002490:	2b00      	cmp	r3, #0
 8002492:	d101      	bne.n	8002498 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002494:	2320      	movs	r3, #32
 8002496:	e004      	b.n	80024a2 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002498:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800249c:	fab3 f383 	clz	r3, r3
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d105      	bne.n	80024bc <HAL_ADC_ConfigChannel+0x330>
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	0e9b      	lsrs	r3, r3, #26
 80024b6:	f003 031f 	and.w	r3, r3, #31
 80024ba:	e014      	b.n	80024e6 <HAL_ADC_ConfigChannel+0x35a>
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80024c4:	fa93 f3a3 	rbit	r3, r3
 80024c8:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80024ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80024d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80024d8:	2320      	movs	r3, #32
 80024da:	e004      	b.n	80024e6 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80024dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80024e0:	fab3 f383 	clz	r3, r3
 80024e4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d106      	bne.n	80024f8 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2200      	movs	r2, #0
 80024f0:	2102      	movs	r1, #2
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff f9e4 	bl	80018c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2103      	movs	r1, #3
 80024fe:	4618      	mov	r0, r3
 8002500:	f7ff f9c8 	bl	8001894 <LL_ADC_GetOffsetChannel>
 8002504:	4603      	mov	r3, r0
 8002506:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10a      	bne.n	8002524 <HAL_ADC_ConfigChannel+0x398>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2103      	movs	r1, #3
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff f9bd 	bl	8001894 <LL_ADC_GetOffsetChannel>
 800251a:	4603      	mov	r3, r0
 800251c:	0e9b      	lsrs	r3, r3, #26
 800251e:	f003 021f 	and.w	r2, r3, #31
 8002522:	e017      	b.n	8002554 <HAL_ADC_ConfigChannel+0x3c8>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2103      	movs	r1, #3
 800252a:	4618      	mov	r0, r3
 800252c:	f7ff f9b2 	bl	8001894 <LL_ADC_GetOffsetChannel>
 8002530:	4603      	mov	r3, r0
 8002532:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002534:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002536:	fa93 f3a3 	rbit	r3, r3
 800253a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800253c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800253e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002540:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002546:	2320      	movs	r3, #32
 8002548:	e003      	b.n	8002552 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800254a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800254c:	fab3 f383 	clz	r3, r3
 8002550:	b2db      	uxtb	r3, r3
 8002552:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800255c:	2b00      	cmp	r3, #0
 800255e:	d105      	bne.n	800256c <HAL_ADC_ConfigChannel+0x3e0>
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	0e9b      	lsrs	r3, r3, #26
 8002566:	f003 031f 	and.w	r3, r3, #31
 800256a:	e011      	b.n	8002590 <HAL_ADC_ConfigChannel+0x404>
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002572:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002574:	fa93 f3a3 	rbit	r3, r3
 8002578:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800257a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800257c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800257e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002580:	2b00      	cmp	r3, #0
 8002582:	d101      	bne.n	8002588 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002584:	2320      	movs	r3, #32
 8002586:	e003      	b.n	8002590 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002588:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800258a:	fab3 f383 	clz	r3, r3
 800258e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002590:	429a      	cmp	r2, r3
 8002592:	d106      	bne.n	80025a2 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2200      	movs	r2, #0
 800259a:	2103      	movs	r1, #3
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff f98f 	bl	80018c0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff fab2 	bl	8001b10 <LL_ADC_IsEnabled>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f040 8140 	bne.w	8002834 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6818      	ldr	r0, [r3, #0]
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	6819      	ldr	r1, [r3, #0]
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	461a      	mov	r2, r3
 80025c2:	f7ff fa03 	bl	80019cc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	4a8f      	ldr	r2, [pc, #572]	@ (8002808 <HAL_ADC_ConfigChannel+0x67c>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	f040 8131 	bne.w	8002834 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d10b      	bne.n	80025fa <HAL_ADC_ConfigChannel+0x46e>
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	0e9b      	lsrs	r3, r3, #26
 80025e8:	3301      	adds	r3, #1
 80025ea:	f003 031f 	and.w	r3, r3, #31
 80025ee:	2b09      	cmp	r3, #9
 80025f0:	bf94      	ite	ls
 80025f2:	2301      	movls	r3, #1
 80025f4:	2300      	movhi	r3, #0
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	e019      	b.n	800262e <HAL_ADC_ConfigChannel+0x4a2>
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002600:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002602:	fa93 f3a3 	rbit	r3, r3
 8002606:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002608:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800260a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800260c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002612:	2320      	movs	r3, #32
 8002614:	e003      	b.n	800261e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002616:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002618:	fab3 f383 	clz	r3, r3
 800261c:	b2db      	uxtb	r3, r3
 800261e:	3301      	adds	r3, #1
 8002620:	f003 031f 	and.w	r3, r3, #31
 8002624:	2b09      	cmp	r3, #9
 8002626:	bf94      	ite	ls
 8002628:	2301      	movls	r3, #1
 800262a:	2300      	movhi	r3, #0
 800262c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800262e:	2b00      	cmp	r3, #0
 8002630:	d079      	beq.n	8002726 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800263a:	2b00      	cmp	r3, #0
 800263c:	d107      	bne.n	800264e <HAL_ADC_ConfigChannel+0x4c2>
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	0e9b      	lsrs	r3, r3, #26
 8002644:	3301      	adds	r3, #1
 8002646:	069b      	lsls	r3, r3, #26
 8002648:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800264c:	e015      	b.n	800267a <HAL_ADC_ConfigChannel+0x4ee>
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002654:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002656:	fa93 f3a3 	rbit	r3, r3
 800265a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800265c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800265e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002660:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002666:	2320      	movs	r3, #32
 8002668:	e003      	b.n	8002672 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800266a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800266c:	fab3 f383 	clz	r3, r3
 8002670:	b2db      	uxtb	r3, r3
 8002672:	3301      	adds	r3, #1
 8002674:	069b      	lsls	r3, r3, #26
 8002676:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002682:	2b00      	cmp	r3, #0
 8002684:	d109      	bne.n	800269a <HAL_ADC_ConfigChannel+0x50e>
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	0e9b      	lsrs	r3, r3, #26
 800268c:	3301      	adds	r3, #1
 800268e:	f003 031f 	and.w	r3, r3, #31
 8002692:	2101      	movs	r1, #1
 8002694:	fa01 f303 	lsl.w	r3, r1, r3
 8002698:	e017      	b.n	80026ca <HAL_ADC_ConfigChannel+0x53e>
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026a2:	fa93 f3a3 	rbit	r3, r3
 80026a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80026a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026aa:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80026ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d101      	bne.n	80026b6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80026b2:	2320      	movs	r3, #32
 80026b4:	e003      	b.n	80026be <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80026b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026b8:	fab3 f383 	clz	r3, r3
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	3301      	adds	r3, #1
 80026c0:	f003 031f 	and.w	r3, r3, #31
 80026c4:	2101      	movs	r1, #1
 80026c6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ca:	ea42 0103 	orr.w	r1, r2, r3
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10a      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x564>
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	0e9b      	lsrs	r3, r3, #26
 80026e0:	3301      	adds	r3, #1
 80026e2:	f003 021f 	and.w	r2, r3, #31
 80026e6:	4613      	mov	r3, r2
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	4413      	add	r3, r2
 80026ec:	051b      	lsls	r3, r3, #20
 80026ee:	e018      	b.n	8002722 <HAL_ADC_ConfigChannel+0x596>
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026f8:	fa93 f3a3 	rbit	r3, r3
 80026fc:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80026fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002700:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002704:	2b00      	cmp	r3, #0
 8002706:	d101      	bne.n	800270c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002708:	2320      	movs	r3, #32
 800270a:	e003      	b.n	8002714 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800270c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800270e:	fab3 f383 	clz	r3, r3
 8002712:	b2db      	uxtb	r3, r3
 8002714:	3301      	adds	r3, #1
 8002716:	f003 021f 	and.w	r2, r3, #31
 800271a:	4613      	mov	r3, r2
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	4413      	add	r3, r2
 8002720:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002722:	430b      	orrs	r3, r1
 8002724:	e081      	b.n	800282a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800272e:	2b00      	cmp	r3, #0
 8002730:	d107      	bne.n	8002742 <HAL_ADC_ConfigChannel+0x5b6>
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	0e9b      	lsrs	r3, r3, #26
 8002738:	3301      	adds	r3, #1
 800273a:	069b      	lsls	r3, r3, #26
 800273c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002740:	e015      	b.n	800276e <HAL_ADC_ConfigChannel+0x5e2>
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800274a:	fa93 f3a3 	rbit	r3, r3
 800274e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002752:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800275a:	2320      	movs	r3, #32
 800275c:	e003      	b.n	8002766 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800275e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002760:	fab3 f383 	clz	r3, r3
 8002764:	b2db      	uxtb	r3, r3
 8002766:	3301      	adds	r3, #1
 8002768:	069b      	lsls	r3, r3, #26
 800276a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002776:	2b00      	cmp	r3, #0
 8002778:	d109      	bne.n	800278e <HAL_ADC_ConfigChannel+0x602>
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	0e9b      	lsrs	r3, r3, #26
 8002780:	3301      	adds	r3, #1
 8002782:	f003 031f 	and.w	r3, r3, #31
 8002786:	2101      	movs	r1, #1
 8002788:	fa01 f303 	lsl.w	r3, r1, r3
 800278c:	e017      	b.n	80027be <HAL_ADC_ConfigChannel+0x632>
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	fa93 f3a3 	rbit	r3, r3
 800279a:	61bb      	str	r3, [r7, #24]
  return result;
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80027a0:	6a3b      	ldr	r3, [r7, #32]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80027a6:	2320      	movs	r3, #32
 80027a8:	e003      	b.n	80027b2 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80027aa:	6a3b      	ldr	r3, [r7, #32]
 80027ac:	fab3 f383 	clz	r3, r3
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	3301      	adds	r3, #1
 80027b4:	f003 031f 	and.w	r3, r3, #31
 80027b8:	2101      	movs	r1, #1
 80027ba:	fa01 f303 	lsl.w	r3, r1, r3
 80027be:	ea42 0103 	orr.w	r1, r2, r3
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10d      	bne.n	80027ea <HAL_ADC_ConfigChannel+0x65e>
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	0e9b      	lsrs	r3, r3, #26
 80027d4:	3301      	adds	r3, #1
 80027d6:	f003 021f 	and.w	r2, r3, #31
 80027da:	4613      	mov	r3, r2
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	4413      	add	r3, r2
 80027e0:	3b1e      	subs	r3, #30
 80027e2:	051b      	lsls	r3, r3, #20
 80027e4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80027e8:	e01e      	b.n	8002828 <HAL_ADC_ConfigChannel+0x69c>
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	fa93 f3a3 	rbit	r3, r3
 80027f6:	60fb      	str	r3, [r7, #12]
  return result;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d104      	bne.n	800280c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002802:	2320      	movs	r3, #32
 8002804:	e006      	b.n	8002814 <HAL_ADC_ConfigChannel+0x688>
 8002806:	bf00      	nop
 8002808:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	fab3 f383 	clz	r3, r3
 8002812:	b2db      	uxtb	r3, r3
 8002814:	3301      	adds	r3, #1
 8002816:	f003 021f 	and.w	r2, r3, #31
 800281a:	4613      	mov	r3, r2
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	4413      	add	r3, r2
 8002820:	3b1e      	subs	r3, #30
 8002822:	051b      	lsls	r3, r3, #20
 8002824:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002828:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800282e:	4619      	mov	r1, r3
 8002830:	f7ff f8a0 	bl	8001974 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	4b44      	ldr	r3, [pc, #272]	@ (800294c <HAL_ADC_ConfigChannel+0x7c0>)
 800283a:	4013      	ands	r3, r2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d07a      	beq.n	8002936 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002840:	4843      	ldr	r0, [pc, #268]	@ (8002950 <HAL_ADC_ConfigChannel+0x7c4>)
 8002842:	f7fe fff5 	bl	8001830 <LL_ADC_GetCommonPathInternalCh>
 8002846:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a41      	ldr	r2, [pc, #260]	@ (8002954 <HAL_ADC_ConfigChannel+0x7c8>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d12c      	bne.n	80028ae <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002854:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002858:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d126      	bne.n	80028ae <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a3c      	ldr	r2, [pc, #240]	@ (8002958 <HAL_ADC_ConfigChannel+0x7cc>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d004      	beq.n	8002874 <HAL_ADC_ConfigChannel+0x6e8>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a3b      	ldr	r2, [pc, #236]	@ (800295c <HAL_ADC_ConfigChannel+0x7d0>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d15d      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002874:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002878:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800287c:	4619      	mov	r1, r3
 800287e:	4834      	ldr	r0, [pc, #208]	@ (8002950 <HAL_ADC_ConfigChannel+0x7c4>)
 8002880:	f7fe ffc3 	bl	800180a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002884:	4b36      	ldr	r3, [pc, #216]	@ (8002960 <HAL_ADC_ConfigChannel+0x7d4>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	099b      	lsrs	r3, r3, #6
 800288a:	4a36      	ldr	r2, [pc, #216]	@ (8002964 <HAL_ADC_ConfigChannel+0x7d8>)
 800288c:	fba2 2303 	umull	r2, r3, r2, r3
 8002890:	099b      	lsrs	r3, r3, #6
 8002892:	1c5a      	adds	r2, r3, #1
 8002894:	4613      	mov	r3, r2
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	4413      	add	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800289e:	e002      	b.n	80028a6 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	3b01      	subs	r3, #1
 80028a4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1f9      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028ac:	e040      	b.n	8002930 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a2d      	ldr	r2, [pc, #180]	@ (8002968 <HAL_ADC_ConfigChannel+0x7dc>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d118      	bne.n	80028ea <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80028b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80028bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d112      	bne.n	80028ea <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a23      	ldr	r2, [pc, #140]	@ (8002958 <HAL_ADC_ConfigChannel+0x7cc>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d004      	beq.n	80028d8 <HAL_ADC_ConfigChannel+0x74c>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a22      	ldr	r2, [pc, #136]	@ (800295c <HAL_ADC_ConfigChannel+0x7d0>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d12d      	bne.n	8002934 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80028dc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028e0:	4619      	mov	r1, r3
 80028e2:	481b      	ldr	r0, [pc, #108]	@ (8002950 <HAL_ADC_ConfigChannel+0x7c4>)
 80028e4:	f7fe ff91 	bl	800180a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028e8:	e024      	b.n	8002934 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a1f      	ldr	r2, [pc, #124]	@ (800296c <HAL_ADC_ConfigChannel+0x7e0>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d120      	bne.n	8002936 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80028f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80028f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d11a      	bne.n	8002936 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a14      	ldr	r2, [pc, #80]	@ (8002958 <HAL_ADC_ConfigChannel+0x7cc>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d115      	bne.n	8002936 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800290a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800290e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002912:	4619      	mov	r1, r3
 8002914:	480e      	ldr	r0, [pc, #56]	@ (8002950 <HAL_ADC_ConfigChannel+0x7c4>)
 8002916:	f7fe ff78 	bl	800180a <LL_ADC_SetCommonPathInternalCh>
 800291a:	e00c      	b.n	8002936 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002920:	f043 0220 	orr.w	r2, r3, #32
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800292e:	e002      	b.n	8002936 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002930:	bf00      	nop
 8002932:	e000      	b.n	8002936 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002934:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800293e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002942:	4618      	mov	r0, r3
 8002944:	37d8      	adds	r7, #216	@ 0xd8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	80080000 	.word	0x80080000
 8002950:	50040300 	.word	0x50040300
 8002954:	c7520000 	.word	0xc7520000
 8002958:	50040000 	.word	0x50040000
 800295c:	50040200 	.word	0x50040200
 8002960:	20000008 	.word	0x20000008
 8002964:	053e2d63 	.word	0x053e2d63
 8002968:	cb840000 	.word	0xcb840000
 800296c:	80000001 	.word	0x80000001

08002970 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002978:	2300      	movs	r3, #0
 800297a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff f8c5 	bl	8001b10 <LL_ADC_IsEnabled>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d169      	bne.n	8002a60 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	689a      	ldr	r2, [r3, #8]
 8002992:	4b36      	ldr	r3, [pc, #216]	@ (8002a6c <ADC_Enable+0xfc>)
 8002994:	4013      	ands	r3, r2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00d      	beq.n	80029b6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800299e:	f043 0210 	orr.w	r2, r3, #16
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029aa:	f043 0201 	orr.w	r2, r3, #1
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e055      	b.n	8002a62 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff f894 	bl	8001ae8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80029c0:	482b      	ldr	r0, [pc, #172]	@ (8002a70 <ADC_Enable+0x100>)
 80029c2:	f7fe ff35 	bl	8001830 <LL_ADC_GetCommonPathInternalCh>
 80029c6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80029c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d013      	beq.n	80029f8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029d0:	4b28      	ldr	r3, [pc, #160]	@ (8002a74 <ADC_Enable+0x104>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	099b      	lsrs	r3, r3, #6
 80029d6:	4a28      	ldr	r2, [pc, #160]	@ (8002a78 <ADC_Enable+0x108>)
 80029d8:	fba2 2303 	umull	r2, r3, r2, r3
 80029dc:	099b      	lsrs	r3, r3, #6
 80029de:	1c5a      	adds	r2, r3, #1
 80029e0:	4613      	mov	r3, r2
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	4413      	add	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80029ea:	e002      	b.n	80029f2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	3b01      	subs	r3, #1
 80029f0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1f9      	bne.n	80029ec <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80029f8:	f7fe fec4 	bl	8001784 <HAL_GetTick>
 80029fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029fe:	e028      	b.n	8002a52 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff f883 	bl	8001b10 <LL_ADC_IsEnabled>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d104      	bne.n	8002a1a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff f867 	bl	8001ae8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a1a:	f7fe feb3 	bl	8001784 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d914      	bls.n	8002a52 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d00d      	beq.n	8002a52 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a3a:	f043 0210 	orr.w	r2, r3, #16
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a46:	f043 0201 	orr.w	r2, r3, #1
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e007      	b.n	8002a62 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d1cf      	bne.n	8002a00 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	8000003f 	.word	0x8000003f
 8002a70:	50040300 	.word	0x50040300
 8002a74:	20000008 	.word	0x20000008
 8002a78:	053e2d63 	.word	0x053e2d63

08002a7c <LL_ADC_IsEnabled>:
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d101      	bne.n	8002a94 <LL_ADC_IsEnabled+0x18>
 8002a90:	2301      	movs	r3, #1
 8002a92:	e000      	b.n	8002a96 <LL_ADC_IsEnabled+0x1a>
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <LL_ADC_REG_IsConversionOngoing>:
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b083      	sub	sp, #12
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f003 0304 	and.w	r3, r3, #4
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	d101      	bne.n	8002aba <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e000      	b.n	8002abc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002ac8:	b590      	push	{r4, r7, lr}
 8002aca:	b09f      	sub	sp, #124	@ 0x7c
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d101      	bne.n	8002ae6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	e093      	b.n	8002c0e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002aee:	2300      	movs	r3, #0
 8002af0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002af2:	2300      	movs	r3, #0
 8002af4:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a47      	ldr	r2, [pc, #284]	@ (8002c18 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d102      	bne.n	8002b06 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002b00:	4b46      	ldr	r3, [pc, #280]	@ (8002c1c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002b02:	60bb      	str	r3, [r7, #8]
 8002b04:	e001      	b.n	8002b0a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002b06:	2300      	movs	r3, #0
 8002b08:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d10b      	bne.n	8002b28 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b14:	f043 0220 	orr.w	r2, r3, #32
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e072      	b.n	8002c0e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7ff ffb9 	bl	8002aa2 <LL_ADC_REG_IsConversionOngoing>
 8002b30:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff ffb3 	bl	8002aa2 <LL_ADC_REG_IsConversionOngoing>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d154      	bne.n	8002bec <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002b42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d151      	bne.n	8002bec <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002b48:	4b35      	ldr	r3, [pc, #212]	@ (8002c20 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002b4a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d02c      	beq.n	8002bae <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002b54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	6859      	ldr	r1, [r3, #4]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002b66:	035b      	lsls	r3, r3, #13
 8002b68:	430b      	orrs	r3, r1
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b6e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b70:	4829      	ldr	r0, [pc, #164]	@ (8002c18 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002b72:	f7ff ff83 	bl	8002a7c <LL_ADC_IsEnabled>
 8002b76:	4604      	mov	r4, r0
 8002b78:	4828      	ldr	r0, [pc, #160]	@ (8002c1c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002b7a:	f7ff ff7f 	bl	8002a7c <LL_ADC_IsEnabled>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	431c      	orrs	r4, r3
 8002b82:	4828      	ldr	r0, [pc, #160]	@ (8002c24 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002b84:	f7ff ff7a 	bl	8002a7c <LL_ADC_IsEnabled>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	4323      	orrs	r3, r4
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d137      	bne.n	8002c00 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002b90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002b98:	f023 030f 	bic.w	r3, r3, #15
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	6811      	ldr	r1, [r2, #0]
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	6892      	ldr	r2, [r2, #8]
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002baa:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002bac:	e028      	b.n	8002c00 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002bae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002bb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002bb8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bba:	4817      	ldr	r0, [pc, #92]	@ (8002c18 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002bbc:	f7ff ff5e 	bl	8002a7c <LL_ADC_IsEnabled>
 8002bc0:	4604      	mov	r4, r0
 8002bc2:	4816      	ldr	r0, [pc, #88]	@ (8002c1c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002bc4:	f7ff ff5a 	bl	8002a7c <LL_ADC_IsEnabled>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	431c      	orrs	r4, r3
 8002bcc:	4815      	ldr	r0, [pc, #84]	@ (8002c24 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002bce:	f7ff ff55 	bl	8002a7c <LL_ADC_IsEnabled>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	4323      	orrs	r3, r4
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d112      	bne.n	8002c00 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002bda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002be2:	f023 030f 	bic.w	r3, r3, #15
 8002be6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002be8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002bea:	e009      	b.n	8002c00 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bf0:	f043 0220 	orr.w	r2, r3, #32
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002bfe:	e000      	b.n	8002c02 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c00:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002c0a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	377c      	adds	r7, #124	@ 0x7c
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd90      	pop	{r4, r7, pc}
 8002c16:	bf00      	nop
 8002c18:	50040000 	.word	0x50040000
 8002c1c:	50040100 	.word	0x50040100
 8002c20:	50040300 	.word	0x50040300
 8002c24:	50040200 	.word	0x50040200

08002c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c38:	4b0c      	ldr	r3, [pc, #48]	@ (8002c6c <__NVIC_SetPriorityGrouping+0x44>)
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c3e:	68ba      	ldr	r2, [r7, #8]
 8002c40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c44:	4013      	ands	r3, r2
 8002c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c5a:	4a04      	ldr	r2, [pc, #16]	@ (8002c6c <__NVIC_SetPriorityGrouping+0x44>)
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	60d3      	str	r3, [r2, #12]
}
 8002c60:	bf00      	nop
 8002c62:	3714      	adds	r7, #20
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr
 8002c6c:	e000ed00 	.word	0xe000ed00

08002c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c74:	4b04      	ldr	r3, [pc, #16]	@ (8002c88 <__NVIC_GetPriorityGrouping+0x18>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	0a1b      	lsrs	r3, r3, #8
 8002c7a:	f003 0307 	and.w	r3, r3, #7
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr
 8002c88:	e000ed00 	.word	0xe000ed00

08002c8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	4603      	mov	r3, r0
 8002c94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	db0b      	blt.n	8002cb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c9e:	79fb      	ldrb	r3, [r7, #7]
 8002ca0:	f003 021f 	and.w	r2, r3, #31
 8002ca4:	4907      	ldr	r1, [pc, #28]	@ (8002cc4 <__NVIC_EnableIRQ+0x38>)
 8002ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002caa:	095b      	lsrs	r3, r3, #5
 8002cac:	2001      	movs	r0, #1
 8002cae:	fa00 f202 	lsl.w	r2, r0, r2
 8002cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	e000e100 	.word	0xe000e100

08002cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	4603      	mov	r3, r0
 8002cd0:	6039      	str	r1, [r7, #0]
 8002cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	db0a      	blt.n	8002cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	b2da      	uxtb	r2, r3
 8002ce0:	490c      	ldr	r1, [pc, #48]	@ (8002d14 <__NVIC_SetPriority+0x4c>)
 8002ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce6:	0112      	lsls	r2, r2, #4
 8002ce8:	b2d2      	uxtb	r2, r2
 8002cea:	440b      	add	r3, r1
 8002cec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cf0:	e00a      	b.n	8002d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	4908      	ldr	r1, [pc, #32]	@ (8002d18 <__NVIC_SetPriority+0x50>)
 8002cf8:	79fb      	ldrb	r3, [r7, #7]
 8002cfa:	f003 030f 	and.w	r3, r3, #15
 8002cfe:	3b04      	subs	r3, #4
 8002d00:	0112      	lsls	r2, r2, #4
 8002d02:	b2d2      	uxtb	r2, r2
 8002d04:	440b      	add	r3, r1
 8002d06:	761a      	strb	r2, [r3, #24]
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr
 8002d14:	e000e100 	.word	0xe000e100
 8002d18:	e000ed00 	.word	0xe000ed00

08002d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b089      	sub	sp, #36	@ 0x24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f003 0307 	and.w	r3, r3, #7
 8002d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	f1c3 0307 	rsb	r3, r3, #7
 8002d36:	2b04      	cmp	r3, #4
 8002d38:	bf28      	it	cs
 8002d3a:	2304      	movcs	r3, #4
 8002d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	3304      	adds	r3, #4
 8002d42:	2b06      	cmp	r3, #6
 8002d44:	d902      	bls.n	8002d4c <NVIC_EncodePriority+0x30>
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	3b03      	subs	r3, #3
 8002d4a:	e000      	b.n	8002d4e <NVIC_EncodePriority+0x32>
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d50:	f04f 32ff 	mov.w	r2, #4294967295
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5a:	43da      	mvns	r2, r3
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	401a      	ands	r2, r3
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d64:	f04f 31ff 	mov.w	r1, #4294967295
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6e:	43d9      	mvns	r1, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d74:	4313      	orrs	r3, r2
         );
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3724      	adds	r7, #36	@ 0x24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
	...

08002d84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d94:	d301      	bcc.n	8002d9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d96:	2301      	movs	r3, #1
 8002d98:	e00f      	b.n	8002dba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d9a:	4a0a      	ldr	r2, [pc, #40]	@ (8002dc4 <SysTick_Config+0x40>)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002da2:	210f      	movs	r1, #15
 8002da4:	f04f 30ff 	mov.w	r0, #4294967295
 8002da8:	f7ff ff8e 	bl	8002cc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dac:	4b05      	ldr	r3, [pc, #20]	@ (8002dc4 <SysTick_Config+0x40>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002db2:	4b04      	ldr	r3, [pc, #16]	@ (8002dc4 <SysTick_Config+0x40>)
 8002db4:	2207      	movs	r2, #7
 8002db6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	e000e010 	.word	0xe000e010

08002dc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f7ff ff29 	bl	8002c28 <__NVIC_SetPriorityGrouping>
}
 8002dd6:	bf00      	nop
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b086      	sub	sp, #24
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	4603      	mov	r3, r0
 8002de6:	60b9      	str	r1, [r7, #8]
 8002de8:	607a      	str	r2, [r7, #4]
 8002dea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002dec:	2300      	movs	r3, #0
 8002dee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002df0:	f7ff ff3e 	bl	8002c70 <__NVIC_GetPriorityGrouping>
 8002df4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	68b9      	ldr	r1, [r7, #8]
 8002dfa:	6978      	ldr	r0, [r7, #20]
 8002dfc:	f7ff ff8e 	bl	8002d1c <NVIC_EncodePriority>
 8002e00:	4602      	mov	r2, r0
 8002e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e06:	4611      	mov	r1, r2
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff ff5d 	bl	8002cc8 <__NVIC_SetPriority>
}
 8002e0e:	bf00      	nop
 8002e10:	3718      	adds	r7, #24
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b082      	sub	sp, #8
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff ff31 	bl	8002c8c <__NVIC_EnableIRQ>
}
 8002e2a:	bf00      	nop
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b082      	sub	sp, #8
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f7ff ffa2 	bl	8002d84 <SysTick_Config>
 8002e40:	4603      	mov	r3, r0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3708      	adds	r7, #8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
	...

08002e4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b087      	sub	sp, #28
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e56:	2300      	movs	r3, #0
 8002e58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e5a:	e17f      	b.n	800315c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	2101      	movs	r1, #1
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	fa01 f303 	lsl.w	r3, r1, r3
 8002e68:	4013      	ands	r3, r2
 8002e6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f000 8171 	beq.w	8003156 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f003 0303 	and.w	r3, r3, #3
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d005      	beq.n	8002e8c <HAL_GPIO_Init+0x40>
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f003 0303 	and.w	r3, r3, #3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d130      	bne.n	8002eee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	2203      	movs	r2, #3
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	43db      	mvns	r3, r3
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	68da      	ldr	r2, [r3, #12]
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	693a      	ldr	r2, [r7, #16]
 8002eba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eca:	43db      	mvns	r3, r3
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	4013      	ands	r3, r2
 8002ed0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	091b      	lsrs	r3, r3, #4
 8002ed8:	f003 0201 	and.w	r2, r3, #1
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f003 0303 	and.w	r3, r3, #3
 8002ef6:	2b03      	cmp	r3, #3
 8002ef8:	d118      	bne.n	8002f2c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002efe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002f00:	2201      	movs	r2, #1
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	43db      	mvns	r3, r3
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	08db      	lsrs	r3, r3, #3
 8002f16:	f003 0201 	and.w	r2, r3, #1
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	693a      	ldr	r2, [r7, #16]
 8002f2a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f003 0303 	and.w	r3, r3, #3
 8002f34:	2b03      	cmp	r3, #3
 8002f36:	d017      	beq.n	8002f68 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	2203      	movs	r2, #3
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f003 0303 	and.w	r3, r3, #3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d123      	bne.n	8002fbc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	08da      	lsrs	r2, r3, #3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	3208      	adds	r2, #8
 8002f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f80:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	f003 0307 	and.w	r3, r3, #7
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	220f      	movs	r2, #15
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	43db      	mvns	r3, r3
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	4013      	ands	r3, r2
 8002f96:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	691a      	ldr	r2, [r3, #16]
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	f003 0307 	and.w	r3, r3, #7
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	08da      	lsrs	r2, r3, #3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	3208      	adds	r2, #8
 8002fb6:	6939      	ldr	r1, [r7, #16]
 8002fb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	2203      	movs	r2, #3
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f003 0203 	and.w	r2, r3, #3
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	693a      	ldr	r2, [r7, #16]
 8002fee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f000 80ac 	beq.w	8003156 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ffe:	4b5f      	ldr	r3, [pc, #380]	@ (800317c <HAL_GPIO_Init+0x330>)
 8003000:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003002:	4a5e      	ldr	r2, [pc, #376]	@ (800317c <HAL_GPIO_Init+0x330>)
 8003004:	f043 0301 	orr.w	r3, r3, #1
 8003008:	6613      	str	r3, [r2, #96]	@ 0x60
 800300a:	4b5c      	ldr	r3, [pc, #368]	@ (800317c <HAL_GPIO_Init+0x330>)
 800300c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	60bb      	str	r3, [r7, #8]
 8003014:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003016:	4a5a      	ldr	r2, [pc, #360]	@ (8003180 <HAL_GPIO_Init+0x334>)
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	089b      	lsrs	r3, r3, #2
 800301c:	3302      	adds	r3, #2
 800301e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003022:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	f003 0303 	and.w	r3, r3, #3
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	220f      	movs	r2, #15
 800302e:	fa02 f303 	lsl.w	r3, r2, r3
 8003032:	43db      	mvns	r3, r3
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	4013      	ands	r3, r2
 8003038:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003040:	d025      	beq.n	800308e <HAL_GPIO_Init+0x242>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a4f      	ldr	r2, [pc, #316]	@ (8003184 <HAL_GPIO_Init+0x338>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d01f      	beq.n	800308a <HAL_GPIO_Init+0x23e>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a4e      	ldr	r2, [pc, #312]	@ (8003188 <HAL_GPIO_Init+0x33c>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d019      	beq.n	8003086 <HAL_GPIO_Init+0x23a>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a4d      	ldr	r2, [pc, #308]	@ (800318c <HAL_GPIO_Init+0x340>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d013      	beq.n	8003082 <HAL_GPIO_Init+0x236>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a4c      	ldr	r2, [pc, #304]	@ (8003190 <HAL_GPIO_Init+0x344>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d00d      	beq.n	800307e <HAL_GPIO_Init+0x232>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a4b      	ldr	r2, [pc, #300]	@ (8003194 <HAL_GPIO_Init+0x348>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d007      	beq.n	800307a <HAL_GPIO_Init+0x22e>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a4a      	ldr	r2, [pc, #296]	@ (8003198 <HAL_GPIO_Init+0x34c>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d101      	bne.n	8003076 <HAL_GPIO_Init+0x22a>
 8003072:	2306      	movs	r3, #6
 8003074:	e00c      	b.n	8003090 <HAL_GPIO_Init+0x244>
 8003076:	2307      	movs	r3, #7
 8003078:	e00a      	b.n	8003090 <HAL_GPIO_Init+0x244>
 800307a:	2305      	movs	r3, #5
 800307c:	e008      	b.n	8003090 <HAL_GPIO_Init+0x244>
 800307e:	2304      	movs	r3, #4
 8003080:	e006      	b.n	8003090 <HAL_GPIO_Init+0x244>
 8003082:	2303      	movs	r3, #3
 8003084:	e004      	b.n	8003090 <HAL_GPIO_Init+0x244>
 8003086:	2302      	movs	r3, #2
 8003088:	e002      	b.n	8003090 <HAL_GPIO_Init+0x244>
 800308a:	2301      	movs	r3, #1
 800308c:	e000      	b.n	8003090 <HAL_GPIO_Init+0x244>
 800308e:	2300      	movs	r3, #0
 8003090:	697a      	ldr	r2, [r7, #20]
 8003092:	f002 0203 	and.w	r2, r2, #3
 8003096:	0092      	lsls	r2, r2, #2
 8003098:	4093      	lsls	r3, r2
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	4313      	orrs	r3, r2
 800309e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80030a0:	4937      	ldr	r1, [pc, #220]	@ (8003180 <HAL_GPIO_Init+0x334>)
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	089b      	lsrs	r3, r3, #2
 80030a6:	3302      	adds	r3, #2
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030ae:	4b3b      	ldr	r3, [pc, #236]	@ (800319c <HAL_GPIO_Init+0x350>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	43db      	mvns	r3, r3
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	4013      	ands	r3, r2
 80030bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d003      	beq.n	80030d2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80030d2:	4a32      	ldr	r2, [pc, #200]	@ (800319c <HAL_GPIO_Init+0x350>)
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80030d8:	4b30      	ldr	r3, [pc, #192]	@ (800319c <HAL_GPIO_Init+0x350>)
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	43db      	mvns	r3, r3
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	4013      	ands	r3, r2
 80030e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d003      	beq.n	80030fc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80030fc:	4a27      	ldr	r2, [pc, #156]	@ (800319c <HAL_GPIO_Init+0x350>)
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003102:	4b26      	ldr	r3, [pc, #152]	@ (800319c <HAL_GPIO_Init+0x350>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	43db      	mvns	r3, r3
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	4013      	ands	r3, r2
 8003110:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	4313      	orrs	r3, r2
 8003124:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003126:	4a1d      	ldr	r2, [pc, #116]	@ (800319c <HAL_GPIO_Init+0x350>)
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800312c:	4b1b      	ldr	r3, [pc, #108]	@ (800319c <HAL_GPIO_Init+0x350>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	43db      	mvns	r3, r3
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	4013      	ands	r3, r2
 800313a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d003      	beq.n	8003150 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	4313      	orrs	r3, r2
 800314e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003150:	4a12      	ldr	r2, [pc, #72]	@ (800319c <HAL_GPIO_Init+0x350>)
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	3301      	adds	r3, #1
 800315a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	fa22 f303 	lsr.w	r3, r2, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	f47f ae78 	bne.w	8002e5c <HAL_GPIO_Init+0x10>
  }
}
 800316c:	bf00      	nop
 800316e:	bf00      	nop
 8003170:	371c      	adds	r7, #28
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	40021000 	.word	0x40021000
 8003180:	40010000 	.word	0x40010000
 8003184:	48000400 	.word	0x48000400
 8003188:	48000800 	.word	0x48000800
 800318c:	48000c00 	.word	0x48000c00
 8003190:	48001000 	.word	0x48001000
 8003194:	48001400 	.word	0x48001400
 8003198:	48001800 	.word	0x48001800
 800319c:	40010400 	.word	0x40010400

080031a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	460b      	mov	r3, r1
 80031aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	691a      	ldr	r2, [r3, #16]
 80031b0:	887b      	ldrh	r3, [r7, #2]
 80031b2:	4013      	ands	r3, r2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d002      	beq.n	80031be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80031b8:	2301      	movs	r3, #1
 80031ba:	73fb      	strb	r3, [r7, #15]
 80031bc:	e001      	b.n	80031c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031be:	2300      	movs	r3, #0
 80031c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80031c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3714      	adds	r7, #20
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	460b      	mov	r3, r1
 80031da:	807b      	strh	r3, [r7, #2]
 80031dc:	4613      	mov	r3, r2
 80031de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031e0:	787b      	ldrb	r3, [r7, #1]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031e6:	887a      	ldrh	r2, [r7, #2]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031ec:	e002      	b.n	80031f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031ee:	887a      	ldrh	r2, [r7, #2]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	4603      	mov	r3, r0
 8003208:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800320a:	4b08      	ldr	r3, [pc, #32]	@ (800322c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800320c:	695a      	ldr	r2, [r3, #20]
 800320e:	88fb      	ldrh	r3, [r7, #6]
 8003210:	4013      	ands	r3, r2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d006      	beq.n	8003224 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003216:	4a05      	ldr	r2, [pc, #20]	@ (800322c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003218:	88fb      	ldrh	r3, [r7, #6]
 800321a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800321c:	88fb      	ldrh	r3, [r7, #6]
 800321e:	4618      	mov	r0, r3
 8003220:	f7fd fbf0 	bl	8000a04 <HAL_GPIO_EXTI_Callback>
  }
}
 8003224:	bf00      	nop
 8003226:	3708      	adds	r7, #8
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	40010400 	.word	0x40010400

08003230 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e08d      	b.n	800335e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d106      	bne.n	800325c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7fe f828 	bl	80012ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2224      	movs	r2, #36	@ 0x24
 8003260:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f022 0201 	bic.w	r2, r2, #1
 8003272:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685a      	ldr	r2, [r3, #4]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003280:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	689a      	ldr	r2, [r3, #8]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003290:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	2b01      	cmp	r3, #1
 8003298:	d107      	bne.n	80032aa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	689a      	ldr	r2, [r3, #8]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032a6:	609a      	str	r2, [r3, #8]
 80032a8:	e006      	b.n	80032b8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	689a      	ldr	r2, [r3, #8]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80032b6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d108      	bne.n	80032d2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032ce:	605a      	str	r2, [r3, #4]
 80032d0:	e007      	b.n	80032e2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	685a      	ldr	r2, [r3, #4]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	6812      	ldr	r2, [r2, #0]
 80032ec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80032f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68da      	ldr	r2, [r3, #12]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003304:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	691a      	ldr	r2, [r3, #16]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	430a      	orrs	r2, r1
 800331e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	69d9      	ldr	r1, [r3, #28]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a1a      	ldr	r2, [r3, #32]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	430a      	orrs	r2, r1
 800332e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 0201 	orr.w	r2, r2, #1
 800333e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2220      	movs	r2, #32
 800334a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003366:	b480      	push	{r7}
 8003368:	b083      	sub	sp, #12
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
 800336e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b20      	cmp	r3, #32
 800337a:	d138      	bne.n	80033ee <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003382:	2b01      	cmp	r3, #1
 8003384:	d101      	bne.n	800338a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003386:	2302      	movs	r3, #2
 8003388:	e032      	b.n	80033f0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2224      	movs	r2, #36	@ 0x24
 8003396:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f022 0201 	bic.w	r2, r2, #1
 80033a8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80033b8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	6819      	ldr	r1, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f042 0201 	orr.w	r2, r2, #1
 80033d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2220      	movs	r2, #32
 80033de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80033ea:	2300      	movs	r3, #0
 80033ec:	e000      	b.n	80033f0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80033ee:	2302      	movs	r3, #2
  }
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b20      	cmp	r3, #32
 8003410:	d139      	bne.n	8003486 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003418:	2b01      	cmp	r3, #1
 800341a:	d101      	bne.n	8003420 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800341c:	2302      	movs	r3, #2
 800341e:	e033      	b.n	8003488 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2224      	movs	r2, #36	@ 0x24
 800342c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 0201 	bic.w	r2, r2, #1
 800343e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800344e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	021b      	lsls	r3, r3, #8
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	4313      	orrs	r3, r2
 8003458:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f042 0201 	orr.w	r2, r2, #1
 8003470:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2220      	movs	r2, #32
 8003476:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003482:	2300      	movs	r3, #0
 8003484:	e000      	b.n	8003488 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003486:	2302      	movs	r3, #2
  }
}
 8003488:	4618      	mov	r0, r3
 800348a:	3714      	adds	r7, #20
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003498:	4b04      	ldr	r3, [pc, #16]	@ (80034ac <HAL_PWREx_GetVoltageRange+0x18>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	40007000 	.word	0x40007000

080034b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034be:	d130      	bne.n	8003522 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80034c0:	4b23      	ldr	r3, [pc, #140]	@ (8003550 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80034c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034cc:	d038      	beq.n	8003540 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80034ce:	4b20      	ldr	r3, [pc, #128]	@ (8003550 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80034d6:	4a1e      	ldr	r2, [pc, #120]	@ (8003550 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034d8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80034dc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80034de:	4b1d      	ldr	r3, [pc, #116]	@ (8003554 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2232      	movs	r2, #50	@ 0x32
 80034e4:	fb02 f303 	mul.w	r3, r2, r3
 80034e8:	4a1b      	ldr	r2, [pc, #108]	@ (8003558 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80034ea:	fba2 2303 	umull	r2, r3, r2, r3
 80034ee:	0c9b      	lsrs	r3, r3, #18
 80034f0:	3301      	adds	r3, #1
 80034f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034f4:	e002      	b.n	80034fc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	3b01      	subs	r3, #1
 80034fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034fc:	4b14      	ldr	r3, [pc, #80]	@ (8003550 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034fe:	695b      	ldr	r3, [r3, #20]
 8003500:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003504:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003508:	d102      	bne.n	8003510 <HAL_PWREx_ControlVoltageScaling+0x60>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1f2      	bne.n	80034f6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003510:	4b0f      	ldr	r3, [pc, #60]	@ (8003550 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003518:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800351c:	d110      	bne.n	8003540 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e00f      	b.n	8003542 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003522:	4b0b      	ldr	r3, [pc, #44]	@ (8003550 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800352a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800352e:	d007      	beq.n	8003540 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003530:	4b07      	ldr	r3, [pc, #28]	@ (8003550 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003538:	4a05      	ldr	r2, [pc, #20]	@ (8003550 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800353a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800353e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3714      	adds	r7, #20
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	40007000 	.word	0x40007000
 8003554:	20000008 	.word	0x20000008
 8003558:	431bde83 	.word	0x431bde83

0800355c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b088      	sub	sp, #32
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e3ca      	b.n	8003d04 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800356e:	4b97      	ldr	r3, [pc, #604]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f003 030c 	and.w	r3, r3, #12
 8003576:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003578:	4b94      	ldr	r3, [pc, #592]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	f003 0303 	and.w	r3, r3, #3
 8003580:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0310 	and.w	r3, r3, #16
 800358a:	2b00      	cmp	r3, #0
 800358c:	f000 80e4 	beq.w	8003758 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d007      	beq.n	80035a6 <HAL_RCC_OscConfig+0x4a>
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	2b0c      	cmp	r3, #12
 800359a:	f040 808b 	bne.w	80036b4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	f040 8087 	bne.w	80036b4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035a6:	4b89      	ldr	r3, [pc, #548]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d005      	beq.n	80035be <HAL_RCC_OscConfig+0x62>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e3a2      	b.n	8003d04 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a1a      	ldr	r2, [r3, #32]
 80035c2:	4b82      	ldr	r3, [pc, #520]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0308 	and.w	r3, r3, #8
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d004      	beq.n	80035d8 <HAL_RCC_OscConfig+0x7c>
 80035ce:	4b7f      	ldr	r3, [pc, #508]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035d6:	e005      	b.n	80035e4 <HAL_RCC_OscConfig+0x88>
 80035d8:	4b7c      	ldr	r3, [pc, #496]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 80035da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035de:	091b      	lsrs	r3, r3, #4
 80035e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d223      	bcs.n	8003630 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a1b      	ldr	r3, [r3, #32]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f000 fd55 	bl	800409c <RCC_SetFlashLatencyFromMSIRange>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d001      	beq.n	80035fc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e383      	b.n	8003d04 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035fc:	4b73      	ldr	r3, [pc, #460]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a72      	ldr	r2, [pc, #456]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 8003602:	f043 0308 	orr.w	r3, r3, #8
 8003606:	6013      	str	r3, [r2, #0]
 8003608:	4b70      	ldr	r3, [pc, #448]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	496d      	ldr	r1, [pc, #436]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 8003616:	4313      	orrs	r3, r2
 8003618:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800361a:	4b6c      	ldr	r3, [pc, #432]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	021b      	lsls	r3, r3, #8
 8003628:	4968      	ldr	r1, [pc, #416]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 800362a:	4313      	orrs	r3, r2
 800362c:	604b      	str	r3, [r1, #4]
 800362e:	e025      	b.n	800367c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003630:	4b66      	ldr	r3, [pc, #408]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a65      	ldr	r2, [pc, #404]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 8003636:	f043 0308 	orr.w	r3, r3, #8
 800363a:	6013      	str	r3, [r2, #0]
 800363c:	4b63      	ldr	r3, [pc, #396]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	4960      	ldr	r1, [pc, #384]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 800364a:	4313      	orrs	r3, r2
 800364c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800364e:	4b5f      	ldr	r3, [pc, #380]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	021b      	lsls	r3, r3, #8
 800365c:	495b      	ldr	r1, [pc, #364]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 800365e:	4313      	orrs	r3, r2
 8003660:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d109      	bne.n	800367c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a1b      	ldr	r3, [r3, #32]
 800366c:	4618      	mov	r0, r3
 800366e:	f000 fd15 	bl	800409c <RCC_SetFlashLatencyFromMSIRange>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d001      	beq.n	800367c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e343      	b.n	8003d04 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800367c:	f000 fc4a 	bl	8003f14 <HAL_RCC_GetSysClockFreq>
 8003680:	4602      	mov	r2, r0
 8003682:	4b52      	ldr	r3, [pc, #328]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	091b      	lsrs	r3, r3, #4
 8003688:	f003 030f 	and.w	r3, r3, #15
 800368c:	4950      	ldr	r1, [pc, #320]	@ (80037d0 <HAL_RCC_OscConfig+0x274>)
 800368e:	5ccb      	ldrb	r3, [r1, r3]
 8003690:	f003 031f 	and.w	r3, r3, #31
 8003694:	fa22 f303 	lsr.w	r3, r2, r3
 8003698:	4a4e      	ldr	r2, [pc, #312]	@ (80037d4 <HAL_RCC_OscConfig+0x278>)
 800369a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800369c:	4b4e      	ldr	r3, [pc, #312]	@ (80037d8 <HAL_RCC_OscConfig+0x27c>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7fe f81f 	bl	80016e4 <HAL_InitTick>
 80036a6:	4603      	mov	r3, r0
 80036a8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80036aa:	7bfb      	ldrb	r3, [r7, #15]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d052      	beq.n	8003756 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80036b0:	7bfb      	ldrb	r3, [r7, #15]
 80036b2:	e327      	b.n	8003d04 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d032      	beq.n	8003722 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80036bc:	4b43      	ldr	r3, [pc, #268]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a42      	ldr	r2, [pc, #264]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 80036c2:	f043 0301 	orr.w	r3, r3, #1
 80036c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80036c8:	f7fe f85c 	bl	8001784 <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036d0:	f7fe f858 	bl	8001784 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e310      	b.n	8003d04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036e2:	4b3a      	ldr	r3, [pc, #232]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d0f0      	beq.n	80036d0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036ee:	4b37      	ldr	r3, [pc, #220]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a36      	ldr	r2, [pc, #216]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 80036f4:	f043 0308 	orr.w	r3, r3, #8
 80036f8:	6013      	str	r3, [r2, #0]
 80036fa:	4b34      	ldr	r3, [pc, #208]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a1b      	ldr	r3, [r3, #32]
 8003706:	4931      	ldr	r1, [pc, #196]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 8003708:	4313      	orrs	r3, r2
 800370a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800370c:	4b2f      	ldr	r3, [pc, #188]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	69db      	ldr	r3, [r3, #28]
 8003718:	021b      	lsls	r3, r3, #8
 800371a:	492c      	ldr	r1, [pc, #176]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 800371c:	4313      	orrs	r3, r2
 800371e:	604b      	str	r3, [r1, #4]
 8003720:	e01a      	b.n	8003758 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003722:	4b2a      	ldr	r3, [pc, #168]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a29      	ldr	r2, [pc, #164]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 8003728:	f023 0301 	bic.w	r3, r3, #1
 800372c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800372e:	f7fe f829 	bl	8001784 <HAL_GetTick>
 8003732:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003734:	e008      	b.n	8003748 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003736:	f7fe f825 	bl	8001784 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	2b02      	cmp	r3, #2
 8003742:	d901      	bls.n	8003748 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e2dd      	b.n	8003d04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003748:	4b20      	ldr	r3, [pc, #128]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1f0      	bne.n	8003736 <HAL_RCC_OscConfig+0x1da>
 8003754:	e000      	b.n	8003758 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003756:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0301 	and.w	r3, r3, #1
 8003760:	2b00      	cmp	r3, #0
 8003762:	d074      	beq.n	800384e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	2b08      	cmp	r3, #8
 8003768:	d005      	beq.n	8003776 <HAL_RCC_OscConfig+0x21a>
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	2b0c      	cmp	r3, #12
 800376e:	d10e      	bne.n	800378e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	2b03      	cmp	r3, #3
 8003774:	d10b      	bne.n	800378e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003776:	4b15      	ldr	r3, [pc, #84]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d064      	beq.n	800384c <HAL_RCC_OscConfig+0x2f0>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d160      	bne.n	800384c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e2ba      	b.n	8003d04 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003796:	d106      	bne.n	80037a6 <HAL_RCC_OscConfig+0x24a>
 8003798:	4b0c      	ldr	r3, [pc, #48]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a0b      	ldr	r2, [pc, #44]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 800379e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037a2:	6013      	str	r3, [r2, #0]
 80037a4:	e026      	b.n	80037f4 <HAL_RCC_OscConfig+0x298>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037ae:	d115      	bne.n	80037dc <HAL_RCC_OscConfig+0x280>
 80037b0:	4b06      	ldr	r3, [pc, #24]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a05      	ldr	r2, [pc, #20]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 80037b6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037ba:	6013      	str	r3, [r2, #0]
 80037bc:	4b03      	ldr	r3, [pc, #12]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a02      	ldr	r2, [pc, #8]	@ (80037cc <HAL_RCC_OscConfig+0x270>)
 80037c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037c6:	6013      	str	r3, [r2, #0]
 80037c8:	e014      	b.n	80037f4 <HAL_RCC_OscConfig+0x298>
 80037ca:	bf00      	nop
 80037cc:	40021000 	.word	0x40021000
 80037d0:	080055a4 	.word	0x080055a4
 80037d4:	20000008 	.word	0x20000008
 80037d8:	2000000c 	.word	0x2000000c
 80037dc:	4ba0      	ldr	r3, [pc, #640]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a9f      	ldr	r2, [pc, #636]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 80037e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037e6:	6013      	str	r3, [r2, #0]
 80037e8:	4b9d      	ldr	r3, [pc, #628]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a9c      	ldr	r2, [pc, #624]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 80037ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d013      	beq.n	8003824 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fc:	f7fd ffc2 	bl	8001784 <HAL_GetTick>
 8003800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003802:	e008      	b.n	8003816 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003804:	f7fd ffbe 	bl	8001784 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b64      	cmp	r3, #100	@ 0x64
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e276      	b.n	8003d04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003816:	4b92      	ldr	r3, [pc, #584]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d0f0      	beq.n	8003804 <HAL_RCC_OscConfig+0x2a8>
 8003822:	e014      	b.n	800384e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003824:	f7fd ffae 	bl	8001784 <HAL_GetTick>
 8003828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800382a:	e008      	b.n	800383e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800382c:	f7fd ffaa 	bl	8001784 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b64      	cmp	r3, #100	@ 0x64
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e262      	b.n	8003d04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800383e:	4b88      	ldr	r3, [pc, #544]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1f0      	bne.n	800382c <HAL_RCC_OscConfig+0x2d0>
 800384a:	e000      	b.n	800384e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800384c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d060      	beq.n	800391c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	2b04      	cmp	r3, #4
 800385e:	d005      	beq.n	800386c <HAL_RCC_OscConfig+0x310>
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	2b0c      	cmp	r3, #12
 8003864:	d119      	bne.n	800389a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	2b02      	cmp	r3, #2
 800386a:	d116      	bne.n	800389a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800386c:	4b7c      	ldr	r3, [pc, #496]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003874:	2b00      	cmp	r3, #0
 8003876:	d005      	beq.n	8003884 <HAL_RCC_OscConfig+0x328>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d101      	bne.n	8003884 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e23f      	b.n	8003d04 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003884:	4b76      	ldr	r3, [pc, #472]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	061b      	lsls	r3, r3, #24
 8003892:	4973      	ldr	r1, [pc, #460]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 8003894:	4313      	orrs	r3, r2
 8003896:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003898:	e040      	b.n	800391c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d023      	beq.n	80038ea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038a2:	4b6f      	ldr	r3, [pc, #444]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a6e      	ldr	r2, [pc, #440]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 80038a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ae:	f7fd ff69 	bl	8001784 <HAL_GetTick>
 80038b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038b4:	e008      	b.n	80038c8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038b6:	f7fd ff65 	bl	8001784 <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d901      	bls.n	80038c8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e21d      	b.n	8003d04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038c8:	4b65      	ldr	r3, [pc, #404]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d0f0      	beq.n	80038b6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d4:	4b62      	ldr	r3, [pc, #392]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	061b      	lsls	r3, r3, #24
 80038e2:	495f      	ldr	r1, [pc, #380]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	604b      	str	r3, [r1, #4]
 80038e8:	e018      	b.n	800391c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038ea:	4b5d      	ldr	r3, [pc, #372]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a5c      	ldr	r2, [pc, #368]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 80038f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f6:	f7fd ff45 	bl	8001784 <HAL_GetTick>
 80038fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038fc:	e008      	b.n	8003910 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038fe:	f7fd ff41 	bl	8001784 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	2b02      	cmp	r3, #2
 800390a:	d901      	bls.n	8003910 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e1f9      	b.n	8003d04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003910:	4b53      	ldr	r3, [pc, #332]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1f0      	bne.n	80038fe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0308 	and.w	r3, r3, #8
 8003924:	2b00      	cmp	r3, #0
 8003926:	d03c      	beq.n	80039a2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	695b      	ldr	r3, [r3, #20]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d01c      	beq.n	800396a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003930:	4b4b      	ldr	r3, [pc, #300]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 8003932:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003936:	4a4a      	ldr	r2, [pc, #296]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 8003938:	f043 0301 	orr.w	r3, r3, #1
 800393c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003940:	f7fd ff20 	bl	8001784 <HAL_GetTick>
 8003944:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003948:	f7fd ff1c 	bl	8001784 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e1d4      	b.n	8003d04 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800395a:	4b41      	ldr	r3, [pc, #260]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 800395c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b00      	cmp	r3, #0
 8003966:	d0ef      	beq.n	8003948 <HAL_RCC_OscConfig+0x3ec>
 8003968:	e01b      	b.n	80039a2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800396a:	4b3d      	ldr	r3, [pc, #244]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 800396c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003970:	4a3b      	ldr	r2, [pc, #236]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 8003972:	f023 0301 	bic.w	r3, r3, #1
 8003976:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800397a:	f7fd ff03 	bl	8001784 <HAL_GetTick>
 800397e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003980:	e008      	b.n	8003994 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003982:	f7fd feff 	bl	8001784 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	2b02      	cmp	r3, #2
 800398e:	d901      	bls.n	8003994 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e1b7      	b.n	8003d04 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003994:	4b32      	ldr	r3, [pc, #200]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 8003996:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1ef      	bne.n	8003982 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0304 	and.w	r3, r3, #4
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f000 80a6 	beq.w	8003afc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039b0:	2300      	movs	r3, #0
 80039b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80039b4:	4b2a      	ldr	r3, [pc, #168]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 80039b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d10d      	bne.n	80039dc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039c0:	4b27      	ldr	r3, [pc, #156]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 80039c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039c4:	4a26      	ldr	r2, [pc, #152]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 80039c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80039cc:	4b24      	ldr	r3, [pc, #144]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 80039ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039d4:	60bb      	str	r3, [r7, #8]
 80039d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039d8:	2301      	movs	r3, #1
 80039da:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039dc:	4b21      	ldr	r3, [pc, #132]	@ (8003a64 <HAL_RCC_OscConfig+0x508>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d118      	bne.n	8003a1a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039e8:	4b1e      	ldr	r3, [pc, #120]	@ (8003a64 <HAL_RCC_OscConfig+0x508>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a1d      	ldr	r2, [pc, #116]	@ (8003a64 <HAL_RCC_OscConfig+0x508>)
 80039ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039f4:	f7fd fec6 	bl	8001784 <HAL_GetTick>
 80039f8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039fa:	e008      	b.n	8003a0e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039fc:	f7fd fec2 	bl	8001784 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e17a      	b.n	8003d04 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a0e:	4b15      	ldr	r3, [pc, #84]	@ (8003a64 <HAL_RCC_OscConfig+0x508>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d0f0      	beq.n	80039fc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d108      	bne.n	8003a34 <HAL_RCC_OscConfig+0x4d8>
 8003a22:	4b0f      	ldr	r3, [pc, #60]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 8003a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a28:	4a0d      	ldr	r2, [pc, #52]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 8003a2a:	f043 0301 	orr.w	r3, r3, #1
 8003a2e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a32:	e029      	b.n	8003a88 <HAL_RCC_OscConfig+0x52c>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	2b05      	cmp	r3, #5
 8003a3a:	d115      	bne.n	8003a68 <HAL_RCC_OscConfig+0x50c>
 8003a3c:	4b08      	ldr	r3, [pc, #32]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 8003a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a42:	4a07      	ldr	r2, [pc, #28]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 8003a44:	f043 0304 	orr.w	r3, r3, #4
 8003a48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a4c:	4b04      	ldr	r3, [pc, #16]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 8003a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a52:	4a03      	ldr	r2, [pc, #12]	@ (8003a60 <HAL_RCC_OscConfig+0x504>)
 8003a54:	f043 0301 	orr.w	r3, r3, #1
 8003a58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a5c:	e014      	b.n	8003a88 <HAL_RCC_OscConfig+0x52c>
 8003a5e:	bf00      	nop
 8003a60:	40021000 	.word	0x40021000
 8003a64:	40007000 	.word	0x40007000
 8003a68:	4b9c      	ldr	r3, [pc, #624]	@ (8003cdc <HAL_RCC_OscConfig+0x780>)
 8003a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a6e:	4a9b      	ldr	r2, [pc, #620]	@ (8003cdc <HAL_RCC_OscConfig+0x780>)
 8003a70:	f023 0301 	bic.w	r3, r3, #1
 8003a74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a78:	4b98      	ldr	r3, [pc, #608]	@ (8003cdc <HAL_RCC_OscConfig+0x780>)
 8003a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a7e:	4a97      	ldr	r2, [pc, #604]	@ (8003cdc <HAL_RCC_OscConfig+0x780>)
 8003a80:	f023 0304 	bic.w	r3, r3, #4
 8003a84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d016      	beq.n	8003abe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a90:	f7fd fe78 	bl	8001784 <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a96:	e00a      	b.n	8003aae <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a98:	f7fd fe74 	bl	8001784 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e12a      	b.n	8003d04 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003aae:	4b8b      	ldr	r3, [pc, #556]	@ (8003cdc <HAL_RCC_OscConfig+0x780>)
 8003ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d0ed      	beq.n	8003a98 <HAL_RCC_OscConfig+0x53c>
 8003abc:	e015      	b.n	8003aea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003abe:	f7fd fe61 	bl	8001784 <HAL_GetTick>
 8003ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ac4:	e00a      	b.n	8003adc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ac6:	f7fd fe5d 	bl	8001784 <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d901      	bls.n	8003adc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e113      	b.n	8003d04 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003adc:	4b7f      	ldr	r3, [pc, #508]	@ (8003cdc <HAL_RCC_OscConfig+0x780>)
 8003ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1ed      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003aea:	7ffb      	ldrb	r3, [r7, #31]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d105      	bne.n	8003afc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003af0:	4b7a      	ldr	r3, [pc, #488]	@ (8003cdc <HAL_RCC_OscConfig+0x780>)
 8003af2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003af4:	4a79      	ldr	r2, [pc, #484]	@ (8003cdc <HAL_RCC_OscConfig+0x780>)
 8003af6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003afa:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f000 80fe 	beq.w	8003d02 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	f040 80d0 	bne.w	8003cb0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003b10:	4b72      	ldr	r3, [pc, #456]	@ (8003cdc <HAL_RCC_OscConfig+0x780>)
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	f003 0203 	and.w	r2, r3, #3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d130      	bne.n	8003b86 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d127      	bne.n	8003b86 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b40:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d11f      	bne.n	8003b86 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003b50:	2a07      	cmp	r2, #7
 8003b52:	bf14      	ite	ne
 8003b54:	2201      	movne	r2, #1
 8003b56:	2200      	moveq	r2, #0
 8003b58:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d113      	bne.n	8003b86 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b68:	085b      	lsrs	r3, r3, #1
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d109      	bne.n	8003b86 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b7c:	085b      	lsrs	r3, r3, #1
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d06e      	beq.n	8003c64 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	2b0c      	cmp	r3, #12
 8003b8a:	d069      	beq.n	8003c60 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003b8c:	4b53      	ldr	r3, [pc, #332]	@ (8003cdc <HAL_RCC_OscConfig+0x780>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d105      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003b98:	4b50      	ldr	r3, [pc, #320]	@ (8003cdc <HAL_RCC_OscConfig+0x780>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e0ad      	b.n	8003d04 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003ba8:	4b4c      	ldr	r3, [pc, #304]	@ (8003cdc <HAL_RCC_OscConfig+0x780>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a4b      	ldr	r2, [pc, #300]	@ (8003cdc <HAL_RCC_OscConfig+0x780>)
 8003bae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003bb2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003bb4:	f7fd fde6 	bl	8001784 <HAL_GetTick>
 8003bb8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bbc:	f7fd fde2 	bl	8001784 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e09a      	b.n	8003d04 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bce:	4b43      	ldr	r3, [pc, #268]	@ (8003cdc <HAL_RCC_OscConfig+0x780>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1f0      	bne.n	8003bbc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bda:	4b40      	ldr	r3, [pc, #256]	@ (8003cdc <HAL_RCC_OscConfig+0x780>)
 8003bdc:	68da      	ldr	r2, [r3, #12]
 8003bde:	4b40      	ldr	r3, [pc, #256]	@ (8003ce0 <HAL_RCC_OscConfig+0x784>)
 8003be0:	4013      	ands	r3, r2
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003bea:	3a01      	subs	r2, #1
 8003bec:	0112      	lsls	r2, r2, #4
 8003bee:	4311      	orrs	r1, r2
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003bf4:	0212      	lsls	r2, r2, #8
 8003bf6:	4311      	orrs	r1, r2
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003bfc:	0852      	lsrs	r2, r2, #1
 8003bfe:	3a01      	subs	r2, #1
 8003c00:	0552      	lsls	r2, r2, #21
 8003c02:	4311      	orrs	r1, r2
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003c08:	0852      	lsrs	r2, r2, #1
 8003c0a:	3a01      	subs	r2, #1
 8003c0c:	0652      	lsls	r2, r2, #25
 8003c0e:	4311      	orrs	r1, r2
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003c14:	0912      	lsrs	r2, r2, #4
 8003c16:	0452      	lsls	r2, r2, #17
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	4930      	ldr	r1, [pc, #192]	@ (8003cdc <HAL_RCC_OscConfig+0x780>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003c20:	4b2e      	ldr	r3, [pc, #184]	@ (8003cdc <HAL_RCC_OscConfig+0x780>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a2d      	ldr	r2, [pc, #180]	@ (8003cdc <HAL_RCC_OscConfig+0x780>)
 8003c26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c2a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c2c:	4b2b      	ldr	r3, [pc, #172]	@ (8003cdc <HAL_RCC_OscConfig+0x780>)
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	4a2a      	ldr	r2, [pc, #168]	@ (8003cdc <HAL_RCC_OscConfig+0x780>)
 8003c32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c36:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c38:	f7fd fda4 	bl	8001784 <HAL_GetTick>
 8003c3c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c3e:	e008      	b.n	8003c52 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c40:	f7fd fda0 	bl	8001784 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e058      	b.n	8003d04 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c52:	4b22      	ldr	r3, [pc, #136]	@ (8003cdc <HAL_RCC_OscConfig+0x780>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d0f0      	beq.n	8003c40 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c5e:	e050      	b.n	8003d02 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e04f      	b.n	8003d04 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c64:	4b1d      	ldr	r3, [pc, #116]	@ (8003cdc <HAL_RCC_OscConfig+0x780>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d148      	bne.n	8003d02 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003c70:	4b1a      	ldr	r3, [pc, #104]	@ (8003cdc <HAL_RCC_OscConfig+0x780>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a19      	ldr	r2, [pc, #100]	@ (8003cdc <HAL_RCC_OscConfig+0x780>)
 8003c76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c7a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c7c:	4b17      	ldr	r3, [pc, #92]	@ (8003cdc <HAL_RCC_OscConfig+0x780>)
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	4a16      	ldr	r2, [pc, #88]	@ (8003cdc <HAL_RCC_OscConfig+0x780>)
 8003c82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c86:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003c88:	f7fd fd7c 	bl	8001784 <HAL_GetTick>
 8003c8c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c8e:	e008      	b.n	8003ca2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c90:	f7fd fd78 	bl	8001784 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e030      	b.n	8003d04 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ca2:	4b0e      	ldr	r3, [pc, #56]	@ (8003cdc <HAL_RCC_OscConfig+0x780>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d0f0      	beq.n	8003c90 <HAL_RCC_OscConfig+0x734>
 8003cae:	e028      	b.n	8003d02 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	2b0c      	cmp	r3, #12
 8003cb4:	d023      	beq.n	8003cfe <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cb6:	4b09      	ldr	r3, [pc, #36]	@ (8003cdc <HAL_RCC_OscConfig+0x780>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a08      	ldr	r2, [pc, #32]	@ (8003cdc <HAL_RCC_OscConfig+0x780>)
 8003cbc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003cc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc2:	f7fd fd5f 	bl	8001784 <HAL_GetTick>
 8003cc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cc8:	e00c      	b.n	8003ce4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cca:	f7fd fd5b 	bl	8001784 <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d905      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e013      	b.n	8003d04 <HAL_RCC_OscConfig+0x7a8>
 8003cdc:	40021000 	.word	0x40021000
 8003ce0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ce4:	4b09      	ldr	r3, [pc, #36]	@ (8003d0c <HAL_RCC_OscConfig+0x7b0>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1ec      	bne.n	8003cca <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003cf0:	4b06      	ldr	r3, [pc, #24]	@ (8003d0c <HAL_RCC_OscConfig+0x7b0>)
 8003cf2:	68da      	ldr	r2, [r3, #12]
 8003cf4:	4905      	ldr	r1, [pc, #20]	@ (8003d0c <HAL_RCC_OscConfig+0x7b0>)
 8003cf6:	4b06      	ldr	r3, [pc, #24]	@ (8003d10 <HAL_RCC_OscConfig+0x7b4>)
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	60cb      	str	r3, [r1, #12]
 8003cfc:	e001      	b.n	8003d02 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e000      	b.n	8003d04 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3720      	adds	r7, #32
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	40021000 	.word	0x40021000
 8003d10:	feeefffc 	.word	0xfeeefffc

08003d14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d101      	bne.n	8003d28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e0e7      	b.n	8003ef8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d28:	4b75      	ldr	r3, [pc, #468]	@ (8003f00 <HAL_RCC_ClockConfig+0x1ec>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0307 	and.w	r3, r3, #7
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d910      	bls.n	8003d58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d36:	4b72      	ldr	r3, [pc, #456]	@ (8003f00 <HAL_RCC_ClockConfig+0x1ec>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f023 0207 	bic.w	r2, r3, #7
 8003d3e:	4970      	ldr	r1, [pc, #448]	@ (8003f00 <HAL_RCC_ClockConfig+0x1ec>)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d46:	4b6e      	ldr	r3, [pc, #440]	@ (8003f00 <HAL_RCC_ClockConfig+0x1ec>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0307 	and.w	r3, r3, #7
 8003d4e:	683a      	ldr	r2, [r7, #0]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d001      	beq.n	8003d58 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e0cf      	b.n	8003ef8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d010      	beq.n	8003d86 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689a      	ldr	r2, [r3, #8]
 8003d68:	4b66      	ldr	r3, [pc, #408]	@ (8003f04 <HAL_RCC_ClockConfig+0x1f0>)
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d908      	bls.n	8003d86 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d74:	4b63      	ldr	r3, [pc, #396]	@ (8003f04 <HAL_RCC_ClockConfig+0x1f0>)
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	4960      	ldr	r1, [pc, #384]	@ (8003f04 <HAL_RCC_ClockConfig+0x1f0>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d04c      	beq.n	8003e2c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	2b03      	cmp	r3, #3
 8003d98:	d107      	bne.n	8003daa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d9a:	4b5a      	ldr	r3, [pc, #360]	@ (8003f04 <HAL_RCC_ClockConfig+0x1f0>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d121      	bne.n	8003dea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e0a6      	b.n	8003ef8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d107      	bne.n	8003dc2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003db2:	4b54      	ldr	r3, [pc, #336]	@ (8003f04 <HAL_RCC_ClockConfig+0x1f0>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d115      	bne.n	8003dea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e09a      	b.n	8003ef8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d107      	bne.n	8003dda <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003dca:	4b4e      	ldr	r3, [pc, #312]	@ (8003f04 <HAL_RCC_ClockConfig+0x1f0>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d109      	bne.n	8003dea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e08e      	b.n	8003ef8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003dda:	4b4a      	ldr	r3, [pc, #296]	@ (8003f04 <HAL_RCC_ClockConfig+0x1f0>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e086      	b.n	8003ef8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003dea:	4b46      	ldr	r3, [pc, #280]	@ (8003f04 <HAL_RCC_ClockConfig+0x1f0>)
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f023 0203 	bic.w	r2, r3, #3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	4943      	ldr	r1, [pc, #268]	@ (8003f04 <HAL_RCC_ClockConfig+0x1f0>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dfc:	f7fd fcc2 	bl	8001784 <HAL_GetTick>
 8003e00:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e02:	e00a      	b.n	8003e1a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e04:	f7fd fcbe 	bl	8001784 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e06e      	b.n	8003ef8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e1a:	4b3a      	ldr	r3, [pc, #232]	@ (8003f04 <HAL_RCC_ClockConfig+0x1f0>)
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f003 020c 	and.w	r2, r3, #12
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d1eb      	bne.n	8003e04 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0302 	and.w	r3, r3, #2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d010      	beq.n	8003e5a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689a      	ldr	r2, [r3, #8]
 8003e3c:	4b31      	ldr	r3, [pc, #196]	@ (8003f04 <HAL_RCC_ClockConfig+0x1f0>)
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d208      	bcs.n	8003e5a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e48:	4b2e      	ldr	r3, [pc, #184]	@ (8003f04 <HAL_RCC_ClockConfig+0x1f0>)
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	492b      	ldr	r1, [pc, #172]	@ (8003f04 <HAL_RCC_ClockConfig+0x1f0>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e5a:	4b29      	ldr	r3, [pc, #164]	@ (8003f00 <HAL_RCC_ClockConfig+0x1ec>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0307 	and.w	r3, r3, #7
 8003e62:	683a      	ldr	r2, [r7, #0]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d210      	bcs.n	8003e8a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e68:	4b25      	ldr	r3, [pc, #148]	@ (8003f00 <HAL_RCC_ClockConfig+0x1ec>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f023 0207 	bic.w	r2, r3, #7
 8003e70:	4923      	ldr	r1, [pc, #140]	@ (8003f00 <HAL_RCC_ClockConfig+0x1ec>)
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e78:	4b21      	ldr	r3, [pc, #132]	@ (8003f00 <HAL_RCC_ClockConfig+0x1ec>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0307 	and.w	r3, r3, #7
 8003e80:	683a      	ldr	r2, [r7, #0]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d001      	beq.n	8003e8a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e036      	b.n	8003ef8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0304 	and.w	r3, r3, #4
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d008      	beq.n	8003ea8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e96:	4b1b      	ldr	r3, [pc, #108]	@ (8003f04 <HAL_RCC_ClockConfig+0x1f0>)
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	4918      	ldr	r1, [pc, #96]	@ (8003f04 <HAL_RCC_ClockConfig+0x1f0>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0308 	and.w	r3, r3, #8
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d009      	beq.n	8003ec8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003eb4:	4b13      	ldr	r3, [pc, #76]	@ (8003f04 <HAL_RCC_ClockConfig+0x1f0>)
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	00db      	lsls	r3, r3, #3
 8003ec2:	4910      	ldr	r1, [pc, #64]	@ (8003f04 <HAL_RCC_ClockConfig+0x1f0>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ec8:	f000 f824 	bl	8003f14 <HAL_RCC_GetSysClockFreq>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	4b0d      	ldr	r3, [pc, #52]	@ (8003f04 <HAL_RCC_ClockConfig+0x1f0>)
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	091b      	lsrs	r3, r3, #4
 8003ed4:	f003 030f 	and.w	r3, r3, #15
 8003ed8:	490b      	ldr	r1, [pc, #44]	@ (8003f08 <HAL_RCC_ClockConfig+0x1f4>)
 8003eda:	5ccb      	ldrb	r3, [r1, r3]
 8003edc:	f003 031f 	and.w	r3, r3, #31
 8003ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ee4:	4a09      	ldr	r2, [pc, #36]	@ (8003f0c <HAL_RCC_ClockConfig+0x1f8>)
 8003ee6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003ee8:	4b09      	ldr	r3, [pc, #36]	@ (8003f10 <HAL_RCC_ClockConfig+0x1fc>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7fd fbf9 	bl	80016e4 <HAL_InitTick>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	72fb      	strb	r3, [r7, #11]

  return status;
 8003ef6:	7afb      	ldrb	r3, [r7, #11]
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3710      	adds	r7, #16
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	40022000 	.word	0x40022000
 8003f04:	40021000 	.word	0x40021000
 8003f08:	080055a4 	.word	0x080055a4
 8003f0c:	20000008 	.word	0x20000008
 8003f10:	2000000c 	.word	0x2000000c

08003f14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b089      	sub	sp, #36	@ 0x24
 8003f18:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	61fb      	str	r3, [r7, #28]
 8003f1e:	2300      	movs	r3, #0
 8003f20:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f22:	4b3e      	ldr	r3, [pc, #248]	@ (800401c <HAL_RCC_GetSysClockFreq+0x108>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f003 030c 	and.w	r3, r3, #12
 8003f2a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f2c:	4b3b      	ldr	r3, [pc, #236]	@ (800401c <HAL_RCC_GetSysClockFreq+0x108>)
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	f003 0303 	and.w	r3, r3, #3
 8003f34:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d005      	beq.n	8003f48 <HAL_RCC_GetSysClockFreq+0x34>
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	2b0c      	cmp	r3, #12
 8003f40:	d121      	bne.n	8003f86 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d11e      	bne.n	8003f86 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003f48:	4b34      	ldr	r3, [pc, #208]	@ (800401c <HAL_RCC_GetSysClockFreq+0x108>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0308 	and.w	r3, r3, #8
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d107      	bne.n	8003f64 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f54:	4b31      	ldr	r3, [pc, #196]	@ (800401c <HAL_RCC_GetSysClockFreq+0x108>)
 8003f56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f5a:	0a1b      	lsrs	r3, r3, #8
 8003f5c:	f003 030f 	and.w	r3, r3, #15
 8003f60:	61fb      	str	r3, [r7, #28]
 8003f62:	e005      	b.n	8003f70 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f64:	4b2d      	ldr	r3, [pc, #180]	@ (800401c <HAL_RCC_GetSysClockFreq+0x108>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	091b      	lsrs	r3, r3, #4
 8003f6a:	f003 030f 	and.w	r3, r3, #15
 8003f6e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003f70:	4a2b      	ldr	r2, [pc, #172]	@ (8004020 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f78:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d10d      	bne.n	8003f9c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f84:	e00a      	b.n	8003f9c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	2b04      	cmp	r3, #4
 8003f8a:	d102      	bne.n	8003f92 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f8c:	4b25      	ldr	r3, [pc, #148]	@ (8004024 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f8e:	61bb      	str	r3, [r7, #24]
 8003f90:	e004      	b.n	8003f9c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	2b08      	cmp	r3, #8
 8003f96:	d101      	bne.n	8003f9c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f98:	4b23      	ldr	r3, [pc, #140]	@ (8004028 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f9a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	2b0c      	cmp	r3, #12
 8003fa0:	d134      	bne.n	800400c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003fa2:	4b1e      	ldr	r3, [pc, #120]	@ (800401c <HAL_RCC_GetSysClockFreq+0x108>)
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	f003 0303 	and.w	r3, r3, #3
 8003faa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d003      	beq.n	8003fba <HAL_RCC_GetSysClockFreq+0xa6>
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	2b03      	cmp	r3, #3
 8003fb6:	d003      	beq.n	8003fc0 <HAL_RCC_GetSysClockFreq+0xac>
 8003fb8:	e005      	b.n	8003fc6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003fba:	4b1a      	ldr	r3, [pc, #104]	@ (8004024 <HAL_RCC_GetSysClockFreq+0x110>)
 8003fbc:	617b      	str	r3, [r7, #20]
      break;
 8003fbe:	e005      	b.n	8003fcc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003fc0:	4b19      	ldr	r3, [pc, #100]	@ (8004028 <HAL_RCC_GetSysClockFreq+0x114>)
 8003fc2:	617b      	str	r3, [r7, #20]
      break;
 8003fc4:	e002      	b.n	8003fcc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	617b      	str	r3, [r7, #20]
      break;
 8003fca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003fcc:	4b13      	ldr	r3, [pc, #76]	@ (800401c <HAL_RCC_GetSysClockFreq+0x108>)
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	091b      	lsrs	r3, r3, #4
 8003fd2:	f003 0307 	and.w	r3, r3, #7
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003fda:	4b10      	ldr	r3, [pc, #64]	@ (800401c <HAL_RCC_GetSysClockFreq+0x108>)
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	0a1b      	lsrs	r3, r3, #8
 8003fe0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	fb03 f202 	mul.w	r2, r3, r2
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ff0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800401c <HAL_RCC_GetSysClockFreq+0x108>)
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	0e5b      	lsrs	r3, r3, #25
 8003ff8:	f003 0303 	and.w	r3, r3, #3
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	005b      	lsls	r3, r3, #1
 8004000:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	fbb2 f3f3 	udiv	r3, r2, r3
 800400a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800400c:	69bb      	ldr	r3, [r7, #24]
}
 800400e:	4618      	mov	r0, r3
 8004010:	3724      	adds	r7, #36	@ 0x24
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	40021000 	.word	0x40021000
 8004020:	080055bc 	.word	0x080055bc
 8004024:	00f42400 	.word	0x00f42400
 8004028:	007a1200 	.word	0x007a1200

0800402c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800402c:	b480      	push	{r7}
 800402e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004030:	4b03      	ldr	r3, [pc, #12]	@ (8004040 <HAL_RCC_GetHCLKFreq+0x14>)
 8004032:	681b      	ldr	r3, [r3, #0]
}
 8004034:	4618      	mov	r0, r3
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	20000008 	.word	0x20000008

08004044 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004048:	f7ff fff0 	bl	800402c <HAL_RCC_GetHCLKFreq>
 800404c:	4602      	mov	r2, r0
 800404e:	4b06      	ldr	r3, [pc, #24]	@ (8004068 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	0a1b      	lsrs	r3, r3, #8
 8004054:	f003 0307 	and.w	r3, r3, #7
 8004058:	4904      	ldr	r1, [pc, #16]	@ (800406c <HAL_RCC_GetPCLK1Freq+0x28>)
 800405a:	5ccb      	ldrb	r3, [r1, r3]
 800405c:	f003 031f 	and.w	r3, r3, #31
 8004060:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004064:	4618      	mov	r0, r3
 8004066:	bd80      	pop	{r7, pc}
 8004068:	40021000 	.word	0x40021000
 800406c:	080055b4 	.word	0x080055b4

08004070 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004074:	f7ff ffda 	bl	800402c <HAL_RCC_GetHCLKFreq>
 8004078:	4602      	mov	r2, r0
 800407a:	4b06      	ldr	r3, [pc, #24]	@ (8004094 <HAL_RCC_GetPCLK2Freq+0x24>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	0adb      	lsrs	r3, r3, #11
 8004080:	f003 0307 	and.w	r3, r3, #7
 8004084:	4904      	ldr	r1, [pc, #16]	@ (8004098 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004086:	5ccb      	ldrb	r3, [r1, r3]
 8004088:	f003 031f 	and.w	r3, r3, #31
 800408c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004090:	4618      	mov	r0, r3
 8004092:	bd80      	pop	{r7, pc}
 8004094:	40021000 	.word	0x40021000
 8004098:	080055b4 	.word	0x080055b4

0800409c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80040a4:	2300      	movs	r3, #0
 80040a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80040a8:	4b2a      	ldr	r3, [pc, #168]	@ (8004154 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d003      	beq.n	80040bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80040b4:	f7ff f9ee 	bl	8003494 <HAL_PWREx_GetVoltageRange>
 80040b8:	6178      	str	r0, [r7, #20]
 80040ba:	e014      	b.n	80040e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80040bc:	4b25      	ldr	r3, [pc, #148]	@ (8004154 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040c0:	4a24      	ldr	r2, [pc, #144]	@ (8004154 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80040c8:	4b22      	ldr	r3, [pc, #136]	@ (8004154 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040d0:	60fb      	str	r3, [r7, #12]
 80040d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80040d4:	f7ff f9de 	bl	8003494 <HAL_PWREx_GetVoltageRange>
 80040d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80040da:	4b1e      	ldr	r3, [pc, #120]	@ (8004154 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040de:	4a1d      	ldr	r2, [pc, #116]	@ (8004154 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040e4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040ec:	d10b      	bne.n	8004106 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2b80      	cmp	r3, #128	@ 0x80
 80040f2:	d919      	bls.n	8004128 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2ba0      	cmp	r3, #160	@ 0xa0
 80040f8:	d902      	bls.n	8004100 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80040fa:	2302      	movs	r3, #2
 80040fc:	613b      	str	r3, [r7, #16]
 80040fe:	e013      	b.n	8004128 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004100:	2301      	movs	r3, #1
 8004102:	613b      	str	r3, [r7, #16]
 8004104:	e010      	b.n	8004128 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2b80      	cmp	r3, #128	@ 0x80
 800410a:	d902      	bls.n	8004112 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800410c:	2303      	movs	r3, #3
 800410e:	613b      	str	r3, [r7, #16]
 8004110:	e00a      	b.n	8004128 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2b80      	cmp	r3, #128	@ 0x80
 8004116:	d102      	bne.n	800411e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004118:	2302      	movs	r3, #2
 800411a:	613b      	str	r3, [r7, #16]
 800411c:	e004      	b.n	8004128 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2b70      	cmp	r3, #112	@ 0x70
 8004122:	d101      	bne.n	8004128 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004124:	2301      	movs	r3, #1
 8004126:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004128:	4b0b      	ldr	r3, [pc, #44]	@ (8004158 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f023 0207 	bic.w	r2, r3, #7
 8004130:	4909      	ldr	r1, [pc, #36]	@ (8004158 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	4313      	orrs	r3, r2
 8004136:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004138:	4b07      	ldr	r3, [pc, #28]	@ (8004158 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0307 	and.w	r3, r3, #7
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	429a      	cmp	r2, r3
 8004144:	d001      	beq.n	800414a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e000      	b.n	800414c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3718      	adds	r7, #24
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	40021000 	.word	0x40021000
 8004158:	40022000 	.word	0x40022000

0800415c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b086      	sub	sp, #24
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004164:	2300      	movs	r3, #0
 8004166:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004168:	2300      	movs	r3, #0
 800416a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004174:	2b00      	cmp	r3, #0
 8004176:	d041      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800417c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004180:	d02a      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004182:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004186:	d824      	bhi.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004188:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800418c:	d008      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800418e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004192:	d81e      	bhi.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00a      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004198:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800419c:	d010      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800419e:	e018      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80041a0:	4b86      	ldr	r3, [pc, #536]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	4a85      	ldr	r2, [pc, #532]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041aa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041ac:	e015      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	3304      	adds	r3, #4
 80041b2:	2100      	movs	r1, #0
 80041b4:	4618      	mov	r0, r3
 80041b6:	f000 fabb 	bl	8004730 <RCCEx_PLLSAI1_Config>
 80041ba:	4603      	mov	r3, r0
 80041bc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041be:	e00c      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	3320      	adds	r3, #32
 80041c4:	2100      	movs	r1, #0
 80041c6:	4618      	mov	r0, r3
 80041c8:	f000 fba6 	bl	8004918 <RCCEx_PLLSAI2_Config>
 80041cc:	4603      	mov	r3, r0
 80041ce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041d0:	e003      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	74fb      	strb	r3, [r7, #19]
      break;
 80041d6:	e000      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80041d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041da:	7cfb      	ldrb	r3, [r7, #19]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d10b      	bne.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041e0:	4b76      	ldr	r3, [pc, #472]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041e6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041ee:	4973      	ldr	r1, [pc, #460]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80041f6:	e001      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041f8:	7cfb      	ldrb	r3, [r7, #19]
 80041fa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d041      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800420c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004210:	d02a      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004212:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004216:	d824      	bhi.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004218:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800421c:	d008      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800421e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004222:	d81e      	bhi.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00a      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004228:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800422c:	d010      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800422e:	e018      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004230:	4b62      	ldr	r3, [pc, #392]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	4a61      	ldr	r2, [pc, #388]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004236:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800423a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800423c:	e015      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	3304      	adds	r3, #4
 8004242:	2100      	movs	r1, #0
 8004244:	4618      	mov	r0, r3
 8004246:	f000 fa73 	bl	8004730 <RCCEx_PLLSAI1_Config>
 800424a:	4603      	mov	r3, r0
 800424c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800424e:	e00c      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	3320      	adds	r3, #32
 8004254:	2100      	movs	r1, #0
 8004256:	4618      	mov	r0, r3
 8004258:	f000 fb5e 	bl	8004918 <RCCEx_PLLSAI2_Config>
 800425c:	4603      	mov	r3, r0
 800425e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004260:	e003      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	74fb      	strb	r3, [r7, #19]
      break;
 8004266:	e000      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004268:	bf00      	nop
    }

    if(ret == HAL_OK)
 800426a:	7cfb      	ldrb	r3, [r7, #19]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d10b      	bne.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004270:	4b52      	ldr	r3, [pc, #328]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004276:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800427e:	494f      	ldr	r1, [pc, #316]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004280:	4313      	orrs	r3, r2
 8004282:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004286:	e001      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004288:	7cfb      	ldrb	r3, [r7, #19]
 800428a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004294:	2b00      	cmp	r3, #0
 8004296:	f000 80a0 	beq.w	80043da <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800429a:	2300      	movs	r3, #0
 800429c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800429e:	4b47      	ldr	r3, [pc, #284]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d101      	bne.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x152>
 80042aa:	2301      	movs	r3, #1
 80042ac:	e000      	b.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80042ae:	2300      	movs	r3, #0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00d      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042b4:	4b41      	ldr	r3, [pc, #260]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042b8:	4a40      	ldr	r2, [pc, #256]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042be:	6593      	str	r3, [r2, #88]	@ 0x58
 80042c0:	4b3e      	ldr	r3, [pc, #248]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042c8:	60bb      	str	r3, [r7, #8]
 80042ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042cc:	2301      	movs	r3, #1
 80042ce:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042d0:	4b3b      	ldr	r3, [pc, #236]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a3a      	ldr	r2, [pc, #232]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80042d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042dc:	f7fd fa52 	bl	8001784 <HAL_GetTick>
 80042e0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80042e2:	e009      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042e4:	f7fd fa4e 	bl	8001784 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d902      	bls.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	74fb      	strb	r3, [r7, #19]
        break;
 80042f6:	e005      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80042f8:	4b31      	ldr	r3, [pc, #196]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004300:	2b00      	cmp	r3, #0
 8004302:	d0ef      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004304:	7cfb      	ldrb	r3, [r7, #19]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d15c      	bne.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800430a:	4b2c      	ldr	r3, [pc, #176]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800430c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004310:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004314:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d01f      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	429a      	cmp	r2, r3
 8004326:	d019      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004328:	4b24      	ldr	r3, [pc, #144]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800432a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800432e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004332:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004334:	4b21      	ldr	r3, [pc, #132]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800433a:	4a20      	ldr	r2, [pc, #128]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800433c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004340:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004344:	4b1d      	ldr	r3, [pc, #116]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004346:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800434a:	4a1c      	ldr	r2, [pc, #112]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800434c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004350:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004354:	4a19      	ldr	r2, [pc, #100]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	2b00      	cmp	r3, #0
 8004364:	d016      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004366:	f7fd fa0d 	bl	8001784 <HAL_GetTick>
 800436a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800436c:	e00b      	b.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800436e:	f7fd fa09 	bl	8001784 <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	f241 3288 	movw	r2, #5000	@ 0x1388
 800437c:	4293      	cmp	r3, r2
 800437e:	d902      	bls.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	74fb      	strb	r3, [r7, #19]
            break;
 8004384:	e006      	b.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004386:	4b0d      	ldr	r3, [pc, #52]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004388:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800438c:	f003 0302 	and.w	r3, r3, #2
 8004390:	2b00      	cmp	r3, #0
 8004392:	d0ec      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004394:	7cfb      	ldrb	r3, [r7, #19]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10c      	bne.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800439a:	4b08      	ldr	r3, [pc, #32]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800439c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043aa:	4904      	ldr	r1, [pc, #16]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80043b2:	e009      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043b4:	7cfb      	ldrb	r3, [r7, #19]
 80043b6:	74bb      	strb	r3, [r7, #18]
 80043b8:	e006      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80043ba:	bf00      	nop
 80043bc:	40021000 	.word	0x40021000
 80043c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043c4:	7cfb      	ldrb	r3, [r7, #19]
 80043c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043c8:	7c7b      	ldrb	r3, [r7, #17]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d105      	bne.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043ce:	4b9e      	ldr	r3, [pc, #632]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043d2:	4a9d      	ldr	r2, [pc, #628]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043d8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00a      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043e6:	4b98      	ldr	r3, [pc, #608]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ec:	f023 0203 	bic.w	r2, r3, #3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043f4:	4994      	ldr	r1, [pc, #592]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0302 	and.w	r3, r3, #2
 8004404:	2b00      	cmp	r3, #0
 8004406:	d00a      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004408:	4b8f      	ldr	r3, [pc, #572]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800440a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800440e:	f023 020c 	bic.w	r2, r3, #12
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004416:	498c      	ldr	r1, [pc, #560]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004418:	4313      	orrs	r3, r2
 800441a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0304 	and.w	r3, r3, #4
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00a      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800442a:	4b87      	ldr	r3, [pc, #540]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800442c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004430:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004438:	4983      	ldr	r1, [pc, #524]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800443a:	4313      	orrs	r3, r2
 800443c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0308 	and.w	r3, r3, #8
 8004448:	2b00      	cmp	r3, #0
 800444a:	d00a      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800444c:	4b7e      	ldr	r3, [pc, #504]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800444e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004452:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800445a:	497b      	ldr	r1, [pc, #492]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800445c:	4313      	orrs	r3, r2
 800445e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0310 	and.w	r3, r3, #16
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00a      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800446e:	4b76      	ldr	r3, [pc, #472]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004470:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004474:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800447c:	4972      	ldr	r1, [pc, #456]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800447e:	4313      	orrs	r3, r2
 8004480:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0320 	and.w	r3, r3, #32
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00a      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004490:	4b6d      	ldr	r3, [pc, #436]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004492:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004496:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800449e:	496a      	ldr	r1, [pc, #424]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00a      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044b2:	4b65      	ldr	r3, [pc, #404]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044b8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044c0:	4961      	ldr	r1, [pc, #388]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d00a      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044d4:	4b5c      	ldr	r3, [pc, #368]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044e2:	4959      	ldr	r1, [pc, #356]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00a      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044f6:	4b54      	ldr	r3, [pc, #336]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044fc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004504:	4950      	ldr	r1, [pc, #320]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004506:	4313      	orrs	r3, r2
 8004508:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00a      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004518:	4b4b      	ldr	r3, [pc, #300]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800451a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800451e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004526:	4948      	ldr	r1, [pc, #288]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004528:	4313      	orrs	r3, r2
 800452a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00a      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800453a:	4b43      	ldr	r3, [pc, #268]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800453c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004540:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004548:	493f      	ldr	r1, [pc, #252]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800454a:	4313      	orrs	r3, r2
 800454c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d028      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800455c:	4b3a      	ldr	r3, [pc, #232]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800455e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004562:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800456a:	4937      	ldr	r1, [pc, #220]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800456c:	4313      	orrs	r3, r2
 800456e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004576:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800457a:	d106      	bne.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800457c:	4b32      	ldr	r3, [pc, #200]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	4a31      	ldr	r2, [pc, #196]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004582:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004586:	60d3      	str	r3, [r2, #12]
 8004588:	e011      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800458e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004592:	d10c      	bne.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	3304      	adds	r3, #4
 8004598:	2101      	movs	r1, #1
 800459a:	4618      	mov	r0, r3
 800459c:	f000 f8c8 	bl	8004730 <RCCEx_PLLSAI1_Config>
 80045a0:	4603      	mov	r3, r0
 80045a2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80045a4:	7cfb      	ldrb	r3, [r7, #19]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d001      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80045aa:	7cfb      	ldrb	r3, [r7, #19]
 80045ac:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d028      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80045ba:	4b23      	ldr	r3, [pc, #140]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045c0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045c8:	491f      	ldr	r1, [pc, #124]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045d8:	d106      	bne.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045da:	4b1b      	ldr	r3, [pc, #108]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	4a1a      	ldr	r2, [pc, #104]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80045e4:	60d3      	str	r3, [r2, #12]
 80045e6:	e011      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80045f0:	d10c      	bne.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	3304      	adds	r3, #4
 80045f6:	2101      	movs	r1, #1
 80045f8:	4618      	mov	r0, r3
 80045fa:	f000 f899 	bl	8004730 <RCCEx_PLLSAI1_Config>
 80045fe:	4603      	mov	r3, r0
 8004600:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004602:	7cfb      	ldrb	r3, [r7, #19]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d001      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004608:	7cfb      	ldrb	r3, [r7, #19]
 800460a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d02b      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004618:	4b0b      	ldr	r3, [pc, #44]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800461a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800461e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004626:	4908      	ldr	r1, [pc, #32]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004628:	4313      	orrs	r3, r2
 800462a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004632:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004636:	d109      	bne.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004638:	4b03      	ldr	r3, [pc, #12]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	4a02      	ldr	r2, [pc, #8]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800463e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004642:	60d3      	str	r3, [r2, #12]
 8004644:	e014      	b.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004646:	bf00      	nop
 8004648:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004650:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004654:	d10c      	bne.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	3304      	adds	r3, #4
 800465a:	2101      	movs	r1, #1
 800465c:	4618      	mov	r0, r3
 800465e:	f000 f867 	bl	8004730 <RCCEx_PLLSAI1_Config>
 8004662:	4603      	mov	r3, r0
 8004664:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004666:	7cfb      	ldrb	r3, [r7, #19]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800466c:	7cfb      	ldrb	r3, [r7, #19]
 800466e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d02f      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800467c:	4b2b      	ldr	r3, [pc, #172]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800467e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004682:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800468a:	4928      	ldr	r1, [pc, #160]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800468c:	4313      	orrs	r3, r2
 800468e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004696:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800469a:	d10d      	bne.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	3304      	adds	r3, #4
 80046a0:	2102      	movs	r1, #2
 80046a2:	4618      	mov	r0, r3
 80046a4:	f000 f844 	bl	8004730 <RCCEx_PLLSAI1_Config>
 80046a8:	4603      	mov	r3, r0
 80046aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046ac:	7cfb      	ldrb	r3, [r7, #19]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d014      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80046b2:	7cfb      	ldrb	r3, [r7, #19]
 80046b4:	74bb      	strb	r3, [r7, #18]
 80046b6:	e011      	b.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80046bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80046c0:	d10c      	bne.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	3320      	adds	r3, #32
 80046c6:	2102      	movs	r1, #2
 80046c8:	4618      	mov	r0, r3
 80046ca:	f000 f925 	bl	8004918 <RCCEx_PLLSAI2_Config>
 80046ce:	4603      	mov	r3, r0
 80046d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046d2:	7cfb      	ldrb	r3, [r7, #19]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d001      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80046d8:	7cfb      	ldrb	r3, [r7, #19]
 80046da:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00a      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80046e8:	4b10      	ldr	r3, [pc, #64]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ee:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046f6:	490d      	ldr	r1, [pc, #52]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00b      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800470a:	4b08      	ldr	r3, [pc, #32]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800470c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004710:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800471a:	4904      	ldr	r1, [pc, #16]	@ (800472c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800471c:	4313      	orrs	r3, r2
 800471e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004722:	7cbb      	ldrb	r3, [r7, #18]
}
 8004724:	4618      	mov	r0, r3
 8004726:	3718      	adds	r7, #24
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	40021000 	.word	0x40021000

08004730 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800473a:	2300      	movs	r3, #0
 800473c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800473e:	4b75      	ldr	r3, [pc, #468]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	f003 0303 	and.w	r3, r3, #3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d018      	beq.n	800477c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800474a:	4b72      	ldr	r3, [pc, #456]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	f003 0203 	and.w	r2, r3, #3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	429a      	cmp	r2, r3
 8004758:	d10d      	bne.n	8004776 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
       ||
 800475e:	2b00      	cmp	r3, #0
 8004760:	d009      	beq.n	8004776 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004762:	4b6c      	ldr	r3, [pc, #432]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	091b      	lsrs	r3, r3, #4
 8004768:	f003 0307 	and.w	r3, r3, #7
 800476c:	1c5a      	adds	r2, r3, #1
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
       ||
 8004772:	429a      	cmp	r2, r3
 8004774:	d047      	beq.n	8004806 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	73fb      	strb	r3, [r7, #15]
 800477a:	e044      	b.n	8004806 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2b03      	cmp	r3, #3
 8004782:	d018      	beq.n	80047b6 <RCCEx_PLLSAI1_Config+0x86>
 8004784:	2b03      	cmp	r3, #3
 8004786:	d825      	bhi.n	80047d4 <RCCEx_PLLSAI1_Config+0xa4>
 8004788:	2b01      	cmp	r3, #1
 800478a:	d002      	beq.n	8004792 <RCCEx_PLLSAI1_Config+0x62>
 800478c:	2b02      	cmp	r3, #2
 800478e:	d009      	beq.n	80047a4 <RCCEx_PLLSAI1_Config+0x74>
 8004790:	e020      	b.n	80047d4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004792:	4b60      	ldr	r3, [pc, #384]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	2b00      	cmp	r3, #0
 800479c:	d11d      	bne.n	80047da <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047a2:	e01a      	b.n	80047da <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80047a4:	4b5b      	ldr	r3, [pc, #364]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d116      	bne.n	80047de <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047b4:	e013      	b.n	80047de <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80047b6:	4b57      	ldr	r3, [pc, #348]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d10f      	bne.n	80047e2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80047c2:	4b54      	ldr	r3, [pc, #336]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d109      	bne.n	80047e2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80047d2:	e006      	b.n	80047e2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	73fb      	strb	r3, [r7, #15]
      break;
 80047d8:	e004      	b.n	80047e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80047da:	bf00      	nop
 80047dc:	e002      	b.n	80047e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80047de:	bf00      	nop
 80047e0:	e000      	b.n	80047e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80047e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80047e4:	7bfb      	ldrb	r3, [r7, #15]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10d      	bne.n	8004806 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80047ea:	4b4a      	ldr	r3, [pc, #296]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6819      	ldr	r1, [r3, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	3b01      	subs	r3, #1
 80047fc:	011b      	lsls	r3, r3, #4
 80047fe:	430b      	orrs	r3, r1
 8004800:	4944      	ldr	r1, [pc, #272]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004802:	4313      	orrs	r3, r2
 8004804:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004806:	7bfb      	ldrb	r3, [r7, #15]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d17d      	bne.n	8004908 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800480c:	4b41      	ldr	r3, [pc, #260]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a40      	ldr	r2, [pc, #256]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004812:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004816:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004818:	f7fc ffb4 	bl	8001784 <HAL_GetTick>
 800481c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800481e:	e009      	b.n	8004834 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004820:	f7fc ffb0 	bl	8001784 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b02      	cmp	r3, #2
 800482c:	d902      	bls.n	8004834 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	73fb      	strb	r3, [r7, #15]
        break;
 8004832:	e005      	b.n	8004840 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004834:	4b37      	ldr	r3, [pc, #220]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1ef      	bne.n	8004820 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004840:	7bfb      	ldrb	r3, [r7, #15]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d160      	bne.n	8004908 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d111      	bne.n	8004870 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800484c:	4b31      	ldr	r3, [pc, #196]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004854:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	6892      	ldr	r2, [r2, #8]
 800485c:	0211      	lsls	r1, r2, #8
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	68d2      	ldr	r2, [r2, #12]
 8004862:	0912      	lsrs	r2, r2, #4
 8004864:	0452      	lsls	r2, r2, #17
 8004866:	430a      	orrs	r2, r1
 8004868:	492a      	ldr	r1, [pc, #168]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 800486a:	4313      	orrs	r3, r2
 800486c:	610b      	str	r3, [r1, #16]
 800486e:	e027      	b.n	80048c0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d112      	bne.n	800489c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004876:	4b27      	ldr	r3, [pc, #156]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800487e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	6892      	ldr	r2, [r2, #8]
 8004886:	0211      	lsls	r1, r2, #8
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	6912      	ldr	r2, [r2, #16]
 800488c:	0852      	lsrs	r2, r2, #1
 800488e:	3a01      	subs	r2, #1
 8004890:	0552      	lsls	r2, r2, #21
 8004892:	430a      	orrs	r2, r1
 8004894:	491f      	ldr	r1, [pc, #124]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004896:	4313      	orrs	r3, r2
 8004898:	610b      	str	r3, [r1, #16]
 800489a:	e011      	b.n	80048c0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800489c:	4b1d      	ldr	r3, [pc, #116]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80048a4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	6892      	ldr	r2, [r2, #8]
 80048ac:	0211      	lsls	r1, r2, #8
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	6952      	ldr	r2, [r2, #20]
 80048b2:	0852      	lsrs	r2, r2, #1
 80048b4:	3a01      	subs	r2, #1
 80048b6:	0652      	lsls	r2, r2, #25
 80048b8:	430a      	orrs	r2, r1
 80048ba:	4916      	ldr	r1, [pc, #88]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80048c0:	4b14      	ldr	r3, [pc, #80]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a13      	ldr	r2, [pc, #76]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048c6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80048ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048cc:	f7fc ff5a 	bl	8001784 <HAL_GetTick>
 80048d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048d2:	e009      	b.n	80048e8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048d4:	f7fc ff56 	bl	8001784 <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d902      	bls.n	80048e8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	73fb      	strb	r3, [r7, #15]
          break;
 80048e6:	e005      	b.n	80048f4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048e8:	4b0a      	ldr	r3, [pc, #40]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d0ef      	beq.n	80048d4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80048f4:	7bfb      	ldrb	r3, [r7, #15]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d106      	bne.n	8004908 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80048fa:	4b06      	ldr	r3, [pc, #24]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048fc:	691a      	ldr	r2, [r3, #16]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	4904      	ldr	r1, [pc, #16]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004904:	4313      	orrs	r3, r2
 8004906:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004908:	7bfb      	ldrb	r3, [r7, #15]
}
 800490a:	4618      	mov	r0, r3
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	40021000 	.word	0x40021000

08004918 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004922:	2300      	movs	r3, #0
 8004924:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004926:	4b6a      	ldr	r3, [pc, #424]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	f003 0303 	and.w	r3, r3, #3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d018      	beq.n	8004964 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004932:	4b67      	ldr	r3, [pc, #412]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	f003 0203 	and.w	r2, r3, #3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	429a      	cmp	r2, r3
 8004940:	d10d      	bne.n	800495e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
       ||
 8004946:	2b00      	cmp	r3, #0
 8004948:	d009      	beq.n	800495e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800494a:	4b61      	ldr	r3, [pc, #388]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	091b      	lsrs	r3, r3, #4
 8004950:	f003 0307 	and.w	r3, r3, #7
 8004954:	1c5a      	adds	r2, r3, #1
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
       ||
 800495a:	429a      	cmp	r2, r3
 800495c:	d047      	beq.n	80049ee <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	73fb      	strb	r3, [r7, #15]
 8004962:	e044      	b.n	80049ee <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2b03      	cmp	r3, #3
 800496a:	d018      	beq.n	800499e <RCCEx_PLLSAI2_Config+0x86>
 800496c:	2b03      	cmp	r3, #3
 800496e:	d825      	bhi.n	80049bc <RCCEx_PLLSAI2_Config+0xa4>
 8004970:	2b01      	cmp	r3, #1
 8004972:	d002      	beq.n	800497a <RCCEx_PLLSAI2_Config+0x62>
 8004974:	2b02      	cmp	r3, #2
 8004976:	d009      	beq.n	800498c <RCCEx_PLLSAI2_Config+0x74>
 8004978:	e020      	b.n	80049bc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800497a:	4b55      	ldr	r3, [pc, #340]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0302 	and.w	r3, r3, #2
 8004982:	2b00      	cmp	r3, #0
 8004984:	d11d      	bne.n	80049c2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800498a:	e01a      	b.n	80049c2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800498c:	4b50      	ldr	r3, [pc, #320]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004994:	2b00      	cmp	r3, #0
 8004996:	d116      	bne.n	80049c6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800499c:	e013      	b.n	80049c6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800499e:	4b4c      	ldr	r3, [pc, #304]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d10f      	bne.n	80049ca <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80049aa:	4b49      	ldr	r3, [pc, #292]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d109      	bne.n	80049ca <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80049ba:	e006      	b.n	80049ca <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	73fb      	strb	r3, [r7, #15]
      break;
 80049c0:	e004      	b.n	80049cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80049c2:	bf00      	nop
 80049c4:	e002      	b.n	80049cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80049c6:	bf00      	nop
 80049c8:	e000      	b.n	80049cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80049ca:	bf00      	nop
    }

    if(status == HAL_OK)
 80049cc:	7bfb      	ldrb	r3, [r7, #15]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d10d      	bne.n	80049ee <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80049d2:	4b3f      	ldr	r3, [pc, #252]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6819      	ldr	r1, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	3b01      	subs	r3, #1
 80049e4:	011b      	lsls	r3, r3, #4
 80049e6:	430b      	orrs	r3, r1
 80049e8:	4939      	ldr	r1, [pc, #228]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80049ee:	7bfb      	ldrb	r3, [r7, #15]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d167      	bne.n	8004ac4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80049f4:	4b36      	ldr	r3, [pc, #216]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a35      	ldr	r2, [pc, #212]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a00:	f7fc fec0 	bl	8001784 <HAL_GetTick>
 8004a04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a06:	e009      	b.n	8004a1c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a08:	f7fc febc 	bl	8001784 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d902      	bls.n	8004a1c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	73fb      	strb	r3, [r7, #15]
        break;
 8004a1a:	e005      	b.n	8004a28 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a1c:	4b2c      	ldr	r3, [pc, #176]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1ef      	bne.n	8004a08 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004a28:	7bfb      	ldrb	r3, [r7, #15]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d14a      	bne.n	8004ac4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d111      	bne.n	8004a58 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a34:	4b26      	ldr	r3, [pc, #152]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a36:	695b      	ldr	r3, [r3, #20]
 8004a38:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004a3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	6892      	ldr	r2, [r2, #8]
 8004a44:	0211      	lsls	r1, r2, #8
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	68d2      	ldr	r2, [r2, #12]
 8004a4a:	0912      	lsrs	r2, r2, #4
 8004a4c:	0452      	lsls	r2, r2, #17
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	491f      	ldr	r1, [pc, #124]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	614b      	str	r3, [r1, #20]
 8004a56:	e011      	b.n	8004a7c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a58:	4b1d      	ldr	r3, [pc, #116]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a5a:	695b      	ldr	r3, [r3, #20]
 8004a5c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004a60:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	6892      	ldr	r2, [r2, #8]
 8004a68:	0211      	lsls	r1, r2, #8
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	6912      	ldr	r2, [r2, #16]
 8004a6e:	0852      	lsrs	r2, r2, #1
 8004a70:	3a01      	subs	r2, #1
 8004a72:	0652      	lsls	r2, r2, #25
 8004a74:	430a      	orrs	r2, r1
 8004a76:	4916      	ldr	r1, [pc, #88]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004a7c:	4b14      	ldr	r3, [pc, #80]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a13      	ldr	r2, [pc, #76]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a86:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a88:	f7fc fe7c 	bl	8001784 <HAL_GetTick>
 8004a8c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a8e:	e009      	b.n	8004aa4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a90:	f7fc fe78 	bl	8001784 <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d902      	bls.n	8004aa4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	73fb      	strb	r3, [r7, #15]
          break;
 8004aa2:	e005      	b.n	8004ab0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004aa4:	4b0a      	ldr	r3, [pc, #40]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d0ef      	beq.n	8004a90 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004ab0:	7bfb      	ldrb	r3, [r7, #15]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d106      	bne.n	8004ac4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004ab6:	4b06      	ldr	r3, [pc, #24]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ab8:	695a      	ldr	r2, [r3, #20]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	4904      	ldr	r1, [pc, #16]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3710      	adds	r7, #16
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	40021000 	.word	0x40021000

08004ad4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e040      	b.n	8004b68 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d106      	bne.n	8004afc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f7fc fc36 	bl	8001368 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2224      	movs	r2, #36	@ 0x24
 8004b00:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f022 0201 	bic.w	r2, r2, #1
 8004b10:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d002      	beq.n	8004b20 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 fae0 	bl	80050e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 f825 	bl	8004b70 <UART_SetConfig>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d101      	bne.n	8004b30 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e01b      	b.n	8004b68 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	685a      	ldr	r2, [r3, #4]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	689a      	ldr	r2, [r3, #8]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f042 0201 	orr.w	r2, r2, #1
 8004b5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 fb5f 	bl	8005224 <UART_CheckIdleState>
 8004b66:	4603      	mov	r3, r0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3708      	adds	r7, #8
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b74:	b08a      	sub	sp, #40	@ 0x28
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	689a      	ldr	r2, [r3, #8]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	431a      	orrs	r2, r3
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	69db      	ldr	r3, [r3, #28]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	4ba4      	ldr	r3, [pc, #656]	@ (8004e30 <UART_SetConfig+0x2c0>)
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	6812      	ldr	r2, [r2, #0]
 8004ba6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004ba8:	430b      	orrs	r3, r1
 8004baa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	68da      	ldr	r2, [r3, #12]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a99      	ldr	r2, [pc, #612]	@ (8004e34 <UART_SetConfig+0x2c4>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d004      	beq.n	8004bdc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bec:	430a      	orrs	r2, r1
 8004bee:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a90      	ldr	r2, [pc, #576]	@ (8004e38 <UART_SetConfig+0x2c8>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d126      	bne.n	8004c48 <UART_SetConfig+0xd8>
 8004bfa:	4b90      	ldr	r3, [pc, #576]	@ (8004e3c <UART_SetConfig+0x2cc>)
 8004bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c00:	f003 0303 	and.w	r3, r3, #3
 8004c04:	2b03      	cmp	r3, #3
 8004c06:	d81b      	bhi.n	8004c40 <UART_SetConfig+0xd0>
 8004c08:	a201      	add	r2, pc, #4	@ (adr r2, 8004c10 <UART_SetConfig+0xa0>)
 8004c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c0e:	bf00      	nop
 8004c10:	08004c21 	.word	0x08004c21
 8004c14:	08004c31 	.word	0x08004c31
 8004c18:	08004c29 	.word	0x08004c29
 8004c1c:	08004c39 	.word	0x08004c39
 8004c20:	2301      	movs	r3, #1
 8004c22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c26:	e116      	b.n	8004e56 <UART_SetConfig+0x2e6>
 8004c28:	2302      	movs	r3, #2
 8004c2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c2e:	e112      	b.n	8004e56 <UART_SetConfig+0x2e6>
 8004c30:	2304      	movs	r3, #4
 8004c32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c36:	e10e      	b.n	8004e56 <UART_SetConfig+0x2e6>
 8004c38:	2308      	movs	r3, #8
 8004c3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c3e:	e10a      	b.n	8004e56 <UART_SetConfig+0x2e6>
 8004c40:	2310      	movs	r3, #16
 8004c42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c46:	e106      	b.n	8004e56 <UART_SetConfig+0x2e6>
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a7c      	ldr	r2, [pc, #496]	@ (8004e40 <UART_SetConfig+0x2d0>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d138      	bne.n	8004cc4 <UART_SetConfig+0x154>
 8004c52:	4b7a      	ldr	r3, [pc, #488]	@ (8004e3c <UART_SetConfig+0x2cc>)
 8004c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c58:	f003 030c 	and.w	r3, r3, #12
 8004c5c:	2b0c      	cmp	r3, #12
 8004c5e:	d82d      	bhi.n	8004cbc <UART_SetConfig+0x14c>
 8004c60:	a201      	add	r2, pc, #4	@ (adr r2, 8004c68 <UART_SetConfig+0xf8>)
 8004c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c66:	bf00      	nop
 8004c68:	08004c9d 	.word	0x08004c9d
 8004c6c:	08004cbd 	.word	0x08004cbd
 8004c70:	08004cbd 	.word	0x08004cbd
 8004c74:	08004cbd 	.word	0x08004cbd
 8004c78:	08004cad 	.word	0x08004cad
 8004c7c:	08004cbd 	.word	0x08004cbd
 8004c80:	08004cbd 	.word	0x08004cbd
 8004c84:	08004cbd 	.word	0x08004cbd
 8004c88:	08004ca5 	.word	0x08004ca5
 8004c8c:	08004cbd 	.word	0x08004cbd
 8004c90:	08004cbd 	.word	0x08004cbd
 8004c94:	08004cbd 	.word	0x08004cbd
 8004c98:	08004cb5 	.word	0x08004cb5
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ca2:	e0d8      	b.n	8004e56 <UART_SetConfig+0x2e6>
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004caa:	e0d4      	b.n	8004e56 <UART_SetConfig+0x2e6>
 8004cac:	2304      	movs	r3, #4
 8004cae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cb2:	e0d0      	b.n	8004e56 <UART_SetConfig+0x2e6>
 8004cb4:	2308      	movs	r3, #8
 8004cb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cba:	e0cc      	b.n	8004e56 <UART_SetConfig+0x2e6>
 8004cbc:	2310      	movs	r3, #16
 8004cbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cc2:	e0c8      	b.n	8004e56 <UART_SetConfig+0x2e6>
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a5e      	ldr	r2, [pc, #376]	@ (8004e44 <UART_SetConfig+0x2d4>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d125      	bne.n	8004d1a <UART_SetConfig+0x1aa>
 8004cce:	4b5b      	ldr	r3, [pc, #364]	@ (8004e3c <UART_SetConfig+0x2cc>)
 8004cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cd4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004cd8:	2b30      	cmp	r3, #48	@ 0x30
 8004cda:	d016      	beq.n	8004d0a <UART_SetConfig+0x19a>
 8004cdc:	2b30      	cmp	r3, #48	@ 0x30
 8004cde:	d818      	bhi.n	8004d12 <UART_SetConfig+0x1a2>
 8004ce0:	2b20      	cmp	r3, #32
 8004ce2:	d00a      	beq.n	8004cfa <UART_SetConfig+0x18a>
 8004ce4:	2b20      	cmp	r3, #32
 8004ce6:	d814      	bhi.n	8004d12 <UART_SetConfig+0x1a2>
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d002      	beq.n	8004cf2 <UART_SetConfig+0x182>
 8004cec:	2b10      	cmp	r3, #16
 8004cee:	d008      	beq.n	8004d02 <UART_SetConfig+0x192>
 8004cf0:	e00f      	b.n	8004d12 <UART_SetConfig+0x1a2>
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cf8:	e0ad      	b.n	8004e56 <UART_SetConfig+0x2e6>
 8004cfa:	2302      	movs	r3, #2
 8004cfc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d00:	e0a9      	b.n	8004e56 <UART_SetConfig+0x2e6>
 8004d02:	2304      	movs	r3, #4
 8004d04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d08:	e0a5      	b.n	8004e56 <UART_SetConfig+0x2e6>
 8004d0a:	2308      	movs	r3, #8
 8004d0c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d10:	e0a1      	b.n	8004e56 <UART_SetConfig+0x2e6>
 8004d12:	2310      	movs	r3, #16
 8004d14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d18:	e09d      	b.n	8004e56 <UART_SetConfig+0x2e6>
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a4a      	ldr	r2, [pc, #296]	@ (8004e48 <UART_SetConfig+0x2d8>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d125      	bne.n	8004d70 <UART_SetConfig+0x200>
 8004d24:	4b45      	ldr	r3, [pc, #276]	@ (8004e3c <UART_SetConfig+0x2cc>)
 8004d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d2a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004d2e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004d30:	d016      	beq.n	8004d60 <UART_SetConfig+0x1f0>
 8004d32:	2bc0      	cmp	r3, #192	@ 0xc0
 8004d34:	d818      	bhi.n	8004d68 <UART_SetConfig+0x1f8>
 8004d36:	2b80      	cmp	r3, #128	@ 0x80
 8004d38:	d00a      	beq.n	8004d50 <UART_SetConfig+0x1e0>
 8004d3a:	2b80      	cmp	r3, #128	@ 0x80
 8004d3c:	d814      	bhi.n	8004d68 <UART_SetConfig+0x1f8>
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d002      	beq.n	8004d48 <UART_SetConfig+0x1d8>
 8004d42:	2b40      	cmp	r3, #64	@ 0x40
 8004d44:	d008      	beq.n	8004d58 <UART_SetConfig+0x1e8>
 8004d46:	e00f      	b.n	8004d68 <UART_SetConfig+0x1f8>
 8004d48:	2300      	movs	r3, #0
 8004d4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d4e:	e082      	b.n	8004e56 <UART_SetConfig+0x2e6>
 8004d50:	2302      	movs	r3, #2
 8004d52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d56:	e07e      	b.n	8004e56 <UART_SetConfig+0x2e6>
 8004d58:	2304      	movs	r3, #4
 8004d5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d5e:	e07a      	b.n	8004e56 <UART_SetConfig+0x2e6>
 8004d60:	2308      	movs	r3, #8
 8004d62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d66:	e076      	b.n	8004e56 <UART_SetConfig+0x2e6>
 8004d68:	2310      	movs	r3, #16
 8004d6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d6e:	e072      	b.n	8004e56 <UART_SetConfig+0x2e6>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a35      	ldr	r2, [pc, #212]	@ (8004e4c <UART_SetConfig+0x2dc>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d12a      	bne.n	8004dd0 <UART_SetConfig+0x260>
 8004d7a:	4b30      	ldr	r3, [pc, #192]	@ (8004e3c <UART_SetConfig+0x2cc>)
 8004d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d88:	d01a      	beq.n	8004dc0 <UART_SetConfig+0x250>
 8004d8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d8e:	d81b      	bhi.n	8004dc8 <UART_SetConfig+0x258>
 8004d90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d94:	d00c      	beq.n	8004db0 <UART_SetConfig+0x240>
 8004d96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d9a:	d815      	bhi.n	8004dc8 <UART_SetConfig+0x258>
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d003      	beq.n	8004da8 <UART_SetConfig+0x238>
 8004da0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004da4:	d008      	beq.n	8004db8 <UART_SetConfig+0x248>
 8004da6:	e00f      	b.n	8004dc8 <UART_SetConfig+0x258>
 8004da8:	2300      	movs	r3, #0
 8004daa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dae:	e052      	b.n	8004e56 <UART_SetConfig+0x2e6>
 8004db0:	2302      	movs	r3, #2
 8004db2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004db6:	e04e      	b.n	8004e56 <UART_SetConfig+0x2e6>
 8004db8:	2304      	movs	r3, #4
 8004dba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dbe:	e04a      	b.n	8004e56 <UART_SetConfig+0x2e6>
 8004dc0:	2308      	movs	r3, #8
 8004dc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dc6:	e046      	b.n	8004e56 <UART_SetConfig+0x2e6>
 8004dc8:	2310      	movs	r3, #16
 8004dca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dce:	e042      	b.n	8004e56 <UART_SetConfig+0x2e6>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a17      	ldr	r2, [pc, #92]	@ (8004e34 <UART_SetConfig+0x2c4>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d13a      	bne.n	8004e50 <UART_SetConfig+0x2e0>
 8004dda:	4b18      	ldr	r3, [pc, #96]	@ (8004e3c <UART_SetConfig+0x2cc>)
 8004ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004de0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004de4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004de8:	d01a      	beq.n	8004e20 <UART_SetConfig+0x2b0>
 8004dea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004dee:	d81b      	bhi.n	8004e28 <UART_SetConfig+0x2b8>
 8004df0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004df4:	d00c      	beq.n	8004e10 <UART_SetConfig+0x2a0>
 8004df6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004dfa:	d815      	bhi.n	8004e28 <UART_SetConfig+0x2b8>
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d003      	beq.n	8004e08 <UART_SetConfig+0x298>
 8004e00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e04:	d008      	beq.n	8004e18 <UART_SetConfig+0x2a8>
 8004e06:	e00f      	b.n	8004e28 <UART_SetConfig+0x2b8>
 8004e08:	2300      	movs	r3, #0
 8004e0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e0e:	e022      	b.n	8004e56 <UART_SetConfig+0x2e6>
 8004e10:	2302      	movs	r3, #2
 8004e12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e16:	e01e      	b.n	8004e56 <UART_SetConfig+0x2e6>
 8004e18:	2304      	movs	r3, #4
 8004e1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e1e:	e01a      	b.n	8004e56 <UART_SetConfig+0x2e6>
 8004e20:	2308      	movs	r3, #8
 8004e22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e26:	e016      	b.n	8004e56 <UART_SetConfig+0x2e6>
 8004e28:	2310      	movs	r3, #16
 8004e2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e2e:	e012      	b.n	8004e56 <UART_SetConfig+0x2e6>
 8004e30:	efff69f3 	.word	0xefff69f3
 8004e34:	40008000 	.word	0x40008000
 8004e38:	40013800 	.word	0x40013800
 8004e3c:	40021000 	.word	0x40021000
 8004e40:	40004400 	.word	0x40004400
 8004e44:	40004800 	.word	0x40004800
 8004e48:	40004c00 	.word	0x40004c00
 8004e4c:	40005000 	.word	0x40005000
 8004e50:	2310      	movs	r3, #16
 8004e52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a9f      	ldr	r2, [pc, #636]	@ (80050d8 <UART_SetConfig+0x568>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d17a      	bne.n	8004f56 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e60:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004e64:	2b08      	cmp	r3, #8
 8004e66:	d824      	bhi.n	8004eb2 <UART_SetConfig+0x342>
 8004e68:	a201      	add	r2, pc, #4	@ (adr r2, 8004e70 <UART_SetConfig+0x300>)
 8004e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e6e:	bf00      	nop
 8004e70:	08004e95 	.word	0x08004e95
 8004e74:	08004eb3 	.word	0x08004eb3
 8004e78:	08004e9d 	.word	0x08004e9d
 8004e7c:	08004eb3 	.word	0x08004eb3
 8004e80:	08004ea3 	.word	0x08004ea3
 8004e84:	08004eb3 	.word	0x08004eb3
 8004e88:	08004eb3 	.word	0x08004eb3
 8004e8c:	08004eb3 	.word	0x08004eb3
 8004e90:	08004eab 	.word	0x08004eab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e94:	f7ff f8d6 	bl	8004044 <HAL_RCC_GetPCLK1Freq>
 8004e98:	61f8      	str	r0, [r7, #28]
        break;
 8004e9a:	e010      	b.n	8004ebe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e9c:	4b8f      	ldr	r3, [pc, #572]	@ (80050dc <UART_SetConfig+0x56c>)
 8004e9e:	61fb      	str	r3, [r7, #28]
        break;
 8004ea0:	e00d      	b.n	8004ebe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ea2:	f7ff f837 	bl	8003f14 <HAL_RCC_GetSysClockFreq>
 8004ea6:	61f8      	str	r0, [r7, #28]
        break;
 8004ea8:	e009      	b.n	8004ebe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eaa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004eae:	61fb      	str	r3, [r7, #28]
        break;
 8004eb0:	e005      	b.n	8004ebe <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004ebc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	f000 80fb 	beq.w	80050bc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	685a      	ldr	r2, [r3, #4]
 8004eca:	4613      	mov	r3, r2
 8004ecc:	005b      	lsls	r3, r3, #1
 8004ece:	4413      	add	r3, r2
 8004ed0:	69fa      	ldr	r2, [r7, #28]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d305      	bcc.n	8004ee2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004edc:	69fa      	ldr	r2, [r7, #28]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d903      	bls.n	8004eea <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004ee8:	e0e8      	b.n	80050bc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	2200      	movs	r2, #0
 8004eee:	461c      	mov	r4, r3
 8004ef0:	4615      	mov	r5, r2
 8004ef2:	f04f 0200 	mov.w	r2, #0
 8004ef6:	f04f 0300 	mov.w	r3, #0
 8004efa:	022b      	lsls	r3, r5, #8
 8004efc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004f00:	0222      	lsls	r2, r4, #8
 8004f02:	68f9      	ldr	r1, [r7, #12]
 8004f04:	6849      	ldr	r1, [r1, #4]
 8004f06:	0849      	lsrs	r1, r1, #1
 8004f08:	2000      	movs	r0, #0
 8004f0a:	4688      	mov	r8, r1
 8004f0c:	4681      	mov	r9, r0
 8004f0e:	eb12 0a08 	adds.w	sl, r2, r8
 8004f12:	eb43 0b09 	adc.w	fp, r3, r9
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	603b      	str	r3, [r7, #0]
 8004f1e:	607a      	str	r2, [r7, #4]
 8004f20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f24:	4650      	mov	r0, sl
 8004f26:	4659      	mov	r1, fp
 8004f28:	f7fb f94e 	bl	80001c8 <__aeabi_uldivmod>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	460b      	mov	r3, r1
 8004f30:	4613      	mov	r3, r2
 8004f32:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f3a:	d308      	bcc.n	8004f4e <UART_SetConfig+0x3de>
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f42:	d204      	bcs.n	8004f4e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	69ba      	ldr	r2, [r7, #24]
 8004f4a:	60da      	str	r2, [r3, #12]
 8004f4c:	e0b6      	b.n	80050bc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004f54:	e0b2      	b.n	80050bc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	69db      	ldr	r3, [r3, #28]
 8004f5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f5e:	d15e      	bne.n	800501e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004f60:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004f64:	2b08      	cmp	r3, #8
 8004f66:	d828      	bhi.n	8004fba <UART_SetConfig+0x44a>
 8004f68:	a201      	add	r2, pc, #4	@ (adr r2, 8004f70 <UART_SetConfig+0x400>)
 8004f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f6e:	bf00      	nop
 8004f70:	08004f95 	.word	0x08004f95
 8004f74:	08004f9d 	.word	0x08004f9d
 8004f78:	08004fa5 	.word	0x08004fa5
 8004f7c:	08004fbb 	.word	0x08004fbb
 8004f80:	08004fab 	.word	0x08004fab
 8004f84:	08004fbb 	.word	0x08004fbb
 8004f88:	08004fbb 	.word	0x08004fbb
 8004f8c:	08004fbb 	.word	0x08004fbb
 8004f90:	08004fb3 	.word	0x08004fb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f94:	f7ff f856 	bl	8004044 <HAL_RCC_GetPCLK1Freq>
 8004f98:	61f8      	str	r0, [r7, #28]
        break;
 8004f9a:	e014      	b.n	8004fc6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f9c:	f7ff f868 	bl	8004070 <HAL_RCC_GetPCLK2Freq>
 8004fa0:	61f8      	str	r0, [r7, #28]
        break;
 8004fa2:	e010      	b.n	8004fc6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fa4:	4b4d      	ldr	r3, [pc, #308]	@ (80050dc <UART_SetConfig+0x56c>)
 8004fa6:	61fb      	str	r3, [r7, #28]
        break;
 8004fa8:	e00d      	b.n	8004fc6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004faa:	f7fe ffb3 	bl	8003f14 <HAL_RCC_GetSysClockFreq>
 8004fae:	61f8      	str	r0, [r7, #28]
        break;
 8004fb0:	e009      	b.n	8004fc6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fb6:	61fb      	str	r3, [r7, #28]
        break;
 8004fb8:	e005      	b.n	8004fc6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004fc4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d077      	beq.n	80050bc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	005a      	lsls	r2, r3, #1
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	085b      	lsrs	r3, r3, #1
 8004fd6:	441a      	add	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fe0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	2b0f      	cmp	r3, #15
 8004fe6:	d916      	bls.n	8005016 <UART_SetConfig+0x4a6>
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fee:	d212      	bcs.n	8005016 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	f023 030f 	bic.w	r3, r3, #15
 8004ff8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	085b      	lsrs	r3, r3, #1
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	f003 0307 	and.w	r3, r3, #7
 8005004:	b29a      	uxth	r2, r3
 8005006:	8afb      	ldrh	r3, [r7, #22]
 8005008:	4313      	orrs	r3, r2
 800500a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	8afa      	ldrh	r2, [r7, #22]
 8005012:	60da      	str	r2, [r3, #12]
 8005014:	e052      	b.n	80050bc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800501c:	e04e      	b.n	80050bc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800501e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005022:	2b08      	cmp	r3, #8
 8005024:	d827      	bhi.n	8005076 <UART_SetConfig+0x506>
 8005026:	a201      	add	r2, pc, #4	@ (adr r2, 800502c <UART_SetConfig+0x4bc>)
 8005028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800502c:	08005051 	.word	0x08005051
 8005030:	08005059 	.word	0x08005059
 8005034:	08005061 	.word	0x08005061
 8005038:	08005077 	.word	0x08005077
 800503c:	08005067 	.word	0x08005067
 8005040:	08005077 	.word	0x08005077
 8005044:	08005077 	.word	0x08005077
 8005048:	08005077 	.word	0x08005077
 800504c:	0800506f 	.word	0x0800506f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005050:	f7fe fff8 	bl	8004044 <HAL_RCC_GetPCLK1Freq>
 8005054:	61f8      	str	r0, [r7, #28]
        break;
 8005056:	e014      	b.n	8005082 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005058:	f7ff f80a 	bl	8004070 <HAL_RCC_GetPCLK2Freq>
 800505c:	61f8      	str	r0, [r7, #28]
        break;
 800505e:	e010      	b.n	8005082 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005060:	4b1e      	ldr	r3, [pc, #120]	@ (80050dc <UART_SetConfig+0x56c>)
 8005062:	61fb      	str	r3, [r7, #28]
        break;
 8005064:	e00d      	b.n	8005082 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005066:	f7fe ff55 	bl	8003f14 <HAL_RCC_GetSysClockFreq>
 800506a:	61f8      	str	r0, [r7, #28]
        break;
 800506c:	e009      	b.n	8005082 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800506e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005072:	61fb      	str	r3, [r7, #28]
        break;
 8005074:	e005      	b.n	8005082 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005076:	2300      	movs	r3, #0
 8005078:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005080:	bf00      	nop
    }

    if (pclk != 0U)
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d019      	beq.n	80050bc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	085a      	lsrs	r2, r3, #1
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	441a      	add	r2, r3
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	fbb2 f3f3 	udiv	r3, r2, r3
 800509a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	2b0f      	cmp	r3, #15
 80050a0:	d909      	bls.n	80050b6 <UART_SetConfig+0x546>
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050a8:	d205      	bcs.n	80050b6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	b29a      	uxth	r2, r3
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	60da      	str	r2, [r3, #12]
 80050b4:	e002      	b.n	80050bc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80050c8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3728      	adds	r7, #40	@ 0x28
 80050d0:	46bd      	mov	sp, r7
 80050d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050d6:	bf00      	nop
 80050d8:	40008000 	.word	0x40008000
 80050dc:	00f42400 	.word	0x00f42400

080050e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ec:	f003 0308 	and.w	r3, r3, #8
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d00a      	beq.n	800510a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	430a      	orrs	r2, r1
 8005108:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800510e:	f003 0301 	and.w	r3, r3, #1
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00a      	beq.n	800512c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	430a      	orrs	r2, r1
 800512a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005130:	f003 0302 	and.w	r3, r3, #2
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00a      	beq.n	800514e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	430a      	orrs	r2, r1
 800514c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005152:	f003 0304 	and.w	r3, r3, #4
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00a      	beq.n	8005170 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	430a      	orrs	r2, r1
 800516e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005174:	f003 0310 	and.w	r3, r3, #16
 8005178:	2b00      	cmp	r3, #0
 800517a:	d00a      	beq.n	8005192 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	430a      	orrs	r2, r1
 8005190:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005196:	f003 0320 	and.w	r3, r3, #32
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00a      	beq.n	80051b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	430a      	orrs	r2, r1
 80051b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d01a      	beq.n	80051f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	430a      	orrs	r2, r1
 80051d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051de:	d10a      	bne.n	80051f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	430a      	orrs	r2, r1
 80051f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00a      	beq.n	8005218 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	430a      	orrs	r2, r1
 8005216:	605a      	str	r2, [r3, #4]
  }
}
 8005218:	bf00      	nop
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b098      	sub	sp, #96	@ 0x60
 8005228:	af02      	add	r7, sp, #8
 800522a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005234:	f7fc faa6 	bl	8001784 <HAL_GetTick>
 8005238:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0308 	and.w	r3, r3, #8
 8005244:	2b08      	cmp	r3, #8
 8005246:	d12e      	bne.n	80052a6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005248:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800524c:	9300      	str	r3, [sp, #0]
 800524e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005250:	2200      	movs	r2, #0
 8005252:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 f88c 	bl	8005374 <UART_WaitOnFlagUntilTimeout>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d021      	beq.n	80052a6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800526a:	e853 3f00 	ldrex	r3, [r3]
 800526e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005272:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005276:	653b      	str	r3, [r7, #80]	@ 0x50
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	461a      	mov	r2, r3
 800527e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005280:	647b      	str	r3, [r7, #68]	@ 0x44
 8005282:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005284:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005286:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005288:	e841 2300 	strex	r3, r2, [r1]
 800528c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800528e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1e6      	bne.n	8005262 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2220      	movs	r2, #32
 8005298:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e062      	b.n	800536c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0304 	and.w	r3, r3, #4
 80052b0:	2b04      	cmp	r3, #4
 80052b2:	d149      	bne.n	8005348 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052b4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80052b8:	9300      	str	r3, [sp, #0]
 80052ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052bc:	2200      	movs	r2, #0
 80052be:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f856 	bl	8005374 <UART_WaitOnFlagUntilTimeout>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d03c      	beq.n	8005348 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d6:	e853 3f00 	ldrex	r3, [r3]
 80052da:	623b      	str	r3, [r7, #32]
   return(result);
 80052dc:	6a3b      	ldr	r3, [r7, #32]
 80052de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	461a      	mov	r2, r3
 80052ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80052ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80052f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052f4:	e841 2300 	strex	r3, r2, [r1]
 80052f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80052fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d1e6      	bne.n	80052ce <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	3308      	adds	r3, #8
 8005306:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	e853 3f00 	ldrex	r3, [r3]
 800530e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f023 0301 	bic.w	r3, r3, #1
 8005316:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	3308      	adds	r3, #8
 800531e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005320:	61fa      	str	r2, [r7, #28]
 8005322:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005324:	69b9      	ldr	r1, [r7, #24]
 8005326:	69fa      	ldr	r2, [r7, #28]
 8005328:	e841 2300 	strex	r3, r2, [r1]
 800532c:	617b      	str	r3, [r7, #20]
   return(result);
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1e5      	bne.n	8005300 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2220      	movs	r2, #32
 8005338:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005344:	2303      	movs	r3, #3
 8005346:	e011      	b.n	800536c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2220      	movs	r2, #32
 800534c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2220      	movs	r2, #32
 8005352:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800536a:	2300      	movs	r3, #0
}
 800536c:	4618      	mov	r0, r3
 800536e:	3758      	adds	r7, #88	@ 0x58
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}

08005374 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	603b      	str	r3, [r7, #0]
 8005380:	4613      	mov	r3, r2
 8005382:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005384:	e04f      	b.n	8005426 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800538c:	d04b      	beq.n	8005426 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800538e:	f7fc f9f9 	bl	8001784 <HAL_GetTick>
 8005392:	4602      	mov	r2, r0
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	69ba      	ldr	r2, [r7, #24]
 800539a:	429a      	cmp	r2, r3
 800539c:	d302      	bcc.n	80053a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d101      	bne.n	80053a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80053a4:	2303      	movs	r3, #3
 80053a6:	e04e      	b.n	8005446 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0304 	and.w	r3, r3, #4
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d037      	beq.n	8005426 <UART_WaitOnFlagUntilTimeout+0xb2>
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	2b80      	cmp	r3, #128	@ 0x80
 80053ba:	d034      	beq.n	8005426 <UART_WaitOnFlagUntilTimeout+0xb2>
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	2b40      	cmp	r3, #64	@ 0x40
 80053c0:	d031      	beq.n	8005426 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	69db      	ldr	r3, [r3, #28]
 80053c8:	f003 0308 	and.w	r3, r3, #8
 80053cc:	2b08      	cmp	r3, #8
 80053ce:	d110      	bne.n	80053f2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2208      	movs	r2, #8
 80053d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053d8:	68f8      	ldr	r0, [r7, #12]
 80053da:	f000 f838 	bl	800544e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2208      	movs	r2, #8
 80053e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e029      	b.n	8005446 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	69db      	ldr	r3, [r3, #28]
 80053f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005400:	d111      	bne.n	8005426 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800540a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f000 f81e 	bl	800544e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2220      	movs	r2, #32
 8005416:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e00f      	b.n	8005446 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	69da      	ldr	r2, [r3, #28]
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	4013      	ands	r3, r2
 8005430:	68ba      	ldr	r2, [r7, #8]
 8005432:	429a      	cmp	r2, r3
 8005434:	bf0c      	ite	eq
 8005436:	2301      	moveq	r3, #1
 8005438:	2300      	movne	r3, #0
 800543a:	b2db      	uxtb	r3, r3
 800543c:	461a      	mov	r2, r3
 800543e:	79fb      	ldrb	r3, [r7, #7]
 8005440:	429a      	cmp	r2, r3
 8005442:	d0a0      	beq.n	8005386 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3710      	adds	r7, #16
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}

0800544e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800544e:	b480      	push	{r7}
 8005450:	b095      	sub	sp, #84	@ 0x54
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800545e:	e853 3f00 	ldrex	r3, [r3]
 8005462:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005466:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800546a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	461a      	mov	r2, r3
 8005472:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005474:	643b      	str	r3, [r7, #64]	@ 0x40
 8005476:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005478:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800547a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800547c:	e841 2300 	strex	r3, r2, [r1]
 8005480:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005484:	2b00      	cmp	r3, #0
 8005486:	d1e6      	bne.n	8005456 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	3308      	adds	r3, #8
 800548e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005490:	6a3b      	ldr	r3, [r7, #32]
 8005492:	e853 3f00 	ldrex	r3, [r3]
 8005496:	61fb      	str	r3, [r7, #28]
   return(result);
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	f023 0301 	bic.w	r3, r3, #1
 800549e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	3308      	adds	r3, #8
 80054a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80054aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80054ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054b0:	e841 2300 	strex	r3, r2, [r1]
 80054b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80054b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d1e5      	bne.n	8005488 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d118      	bne.n	80054f6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	e853 3f00 	ldrex	r3, [r3]
 80054d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	f023 0310 	bic.w	r3, r3, #16
 80054d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	461a      	mov	r2, r3
 80054e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054e2:	61bb      	str	r3, [r7, #24]
 80054e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e6:	6979      	ldr	r1, [r7, #20]
 80054e8:	69ba      	ldr	r2, [r7, #24]
 80054ea:	e841 2300 	strex	r3, r2, [r1]
 80054ee:	613b      	str	r3, [r7, #16]
   return(result);
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d1e6      	bne.n	80054c4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2220      	movs	r2, #32
 80054fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800550a:	bf00      	nop
 800550c:	3754      	adds	r7, #84	@ 0x54
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr

08005516 <memset>:
 8005516:	4402      	add	r2, r0
 8005518:	4603      	mov	r3, r0
 800551a:	4293      	cmp	r3, r2
 800551c:	d100      	bne.n	8005520 <memset+0xa>
 800551e:	4770      	bx	lr
 8005520:	f803 1b01 	strb.w	r1, [r3], #1
 8005524:	e7f9      	b.n	800551a <memset+0x4>
	...

08005528 <__libc_init_array>:
 8005528:	b570      	push	{r4, r5, r6, lr}
 800552a:	4d0d      	ldr	r5, [pc, #52]	@ (8005560 <__libc_init_array+0x38>)
 800552c:	4c0d      	ldr	r4, [pc, #52]	@ (8005564 <__libc_init_array+0x3c>)
 800552e:	1b64      	subs	r4, r4, r5
 8005530:	10a4      	asrs	r4, r4, #2
 8005532:	2600      	movs	r6, #0
 8005534:	42a6      	cmp	r6, r4
 8005536:	d109      	bne.n	800554c <__libc_init_array+0x24>
 8005538:	4d0b      	ldr	r5, [pc, #44]	@ (8005568 <__libc_init_array+0x40>)
 800553a:	4c0c      	ldr	r4, [pc, #48]	@ (800556c <__libc_init_array+0x44>)
 800553c:	f000 f818 	bl	8005570 <_init>
 8005540:	1b64      	subs	r4, r4, r5
 8005542:	10a4      	asrs	r4, r4, #2
 8005544:	2600      	movs	r6, #0
 8005546:	42a6      	cmp	r6, r4
 8005548:	d105      	bne.n	8005556 <__libc_init_array+0x2e>
 800554a:	bd70      	pop	{r4, r5, r6, pc}
 800554c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005550:	4798      	blx	r3
 8005552:	3601      	adds	r6, #1
 8005554:	e7ee      	b.n	8005534 <__libc_init_array+0xc>
 8005556:	f855 3b04 	ldr.w	r3, [r5], #4
 800555a:	4798      	blx	r3
 800555c:	3601      	adds	r6, #1
 800555e:	e7f2      	b.n	8005546 <__libc_init_array+0x1e>
 8005560:	080055f4 	.word	0x080055f4
 8005564:	080055f4 	.word	0x080055f4
 8005568:	080055f4 	.word	0x080055f4
 800556c:	080055f8 	.word	0x080055f8

08005570 <_init>:
 8005570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005572:	bf00      	nop
 8005574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005576:	bc08      	pop	{r3}
 8005578:	469e      	mov	lr, r3
 800557a:	4770      	bx	lr

0800557c <_fini>:
 800557c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800557e:	bf00      	nop
 8005580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005582:	bc08      	pop	{r3}
 8005584:	469e      	mov	lr, r3
 8005586:	4770      	bx	lr
