
TEST_Jim.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063b8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  08006548  08006548  00007548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066f4  080066f4  0000806c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080066f4  080066f4  000076f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066fc  080066fc  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066fc  080066fc  000076fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006700  08006700  00007700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006704  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b8  2000006c  08006770  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000524  08006770  00008524  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012e19  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002577  00000000  00000000  0001aeb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001108  00000000  00000000  0001d430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d3e  00000000  00000000  0001e538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028cbb  00000000  00000000  0001f276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013893  00000000  00000000  00047f31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ffe05  00000000  00000000  0005b7c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015b5c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005010  00000000  00000000  0015b60c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0016061c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006530 	.word	0x08006530

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08006530 	.word	0x08006530

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <HAL_GPIO_EXTI_Callback>:

    return sum / count;
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
	if(GPIO_Pin == GPIO_PIN_13){
 80005a6:	88fb      	ldrh	r3, [r7, #6]
 80005a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80005ac:	d10e      	bne.n	80005cc <HAL_GPIO_EXTI_Callback+0x30>
		ledTrigger = 1;
 80005ae:	4b09      	ldr	r3, [pc, #36]	@ (80005d4 <HAL_GPIO_EXTI_Callback+0x38>)
 80005b0:	2201      	movs	r2, #1
 80005b2:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80005b4:	2201      	movs	r2, #1
 80005b6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005ba:	4807      	ldr	r0, [pc, #28]	@ (80005d8 <HAL_GPIO_EXTI_Callback+0x3c>)
 80005bc:	f002 fe88 	bl	80032d0 <HAL_GPIO_WritePin>
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);  // 切換燈狀態
	    //HAL_Delay(200);
	    //將 PB8 Off
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80005c0:	2200      	movs	r2, #0
 80005c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005c6:	4804      	ldr	r0, [pc, #16]	@ (80005d8 <HAL_GPIO_EXTI_Callback+0x3c>)
 80005c8:	f002 fe82 	bl	80032d0 <HAL_GPIO_WritePin>
		//x = (x == 0)? 1:0;
	}
}
 80005cc:	bf00      	nop
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	200003c4 	.word	0x200003c4
 80005d8:	48000400 	.word	0x48000400

080005dc <readSingleADCValue>:

//
uint16_t readSingleADCValue(int sensorIndex)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status;
    uint16_t adcValue = 0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	82fb      	strh	r3, [r7, #22]
    ADC_HandleTypeDef* hadc = NULL;
 80005e8:	2300      	movs	r3, #0
 80005ea:	613b      	str	r3, [r7, #16]

    // 根據 sensorIndex 選擇對應 ADC
    if (sensorIndex == 1) {
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	d102      	bne.n	80005f8 <readSingleADCValue+0x1c>
        hadc = &hadc1;
 80005f2:	4b15      	ldr	r3, [pc, #84]	@ (8000648 <readSingleADCValue+0x6c>)
 80005f4:	613b      	str	r3, [r7, #16]
 80005f6:	e009      	b.n	800060c <readSingleADCValue+0x30>
    } else if (sensorIndex == 2) {
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	2b02      	cmp	r3, #2
 80005fc:	d102      	bne.n	8000604 <readSingleADCValue+0x28>
        hadc = &hadc2;
 80005fe:	4b13      	ldr	r3, [pc, #76]	@ (800064c <readSingleADCValue+0x70>)
 8000600:	613b      	str	r3, [r7, #16]
 8000602:	e003      	b.n	800060c <readSingleADCValue+0x30>
    } else {
    	Error_Handler();  // 加入錯誤處理
 8000604:	f000 fd86 	bl	8001114 <Error_Handler>
        return 0; // 無效的 index
 8000608:	2300      	movs	r3, #0
 800060a:	e018      	b.n	800063e <readSingleADCValue+0x62>
    }

    // 啟動 ADC
    status = HAL_ADC_Start(hadc);
 800060c:	6938      	ldr	r0, [r7, #16]
 800060e:	f001 fc9d 	bl	8001f4c <HAL_ADC_Start>
 8000612:	4603      	mov	r3, r0
 8000614:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) {
 8000616:	7bfb      	ldrb	r3, [r7, #15]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <readSingleADCValue+0x44>
        return 0; // 啟動失敗
 800061c:	2300      	movs	r3, #0
 800061e:	e00e      	b.n	800063e <readSingleADCValue+0x62>
    }

    // 輪詢等待轉換完成
    status = HAL_ADC_PollForConversion(hadc, 10);
 8000620:	210a      	movs	r1, #10
 8000622:	6938      	ldr	r0, [r7, #16]
 8000624:	f001 fd4c 	bl	80020c0 <HAL_ADC_PollForConversion>
 8000628:	4603      	mov	r3, r0
 800062a:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 800062c:	7bfb      	ldrb	r3, [r7, #15]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d104      	bne.n	800063c <readSingleADCValue+0x60>
        adcValue = HAL_ADC_GetValue(hadc);
 8000632:	6938      	ldr	r0, [r7, #16]
 8000634:	f001 fe1c 	bl	8002270 <HAL_ADC_GetValue>
 8000638:	4603      	mov	r3, r0
 800063a:	82fb      	strh	r3, [r7, #22]
    }

    return adcValue;
 800063c:	8afb      	ldrh	r3, [r7, #22]
}
 800063e:	4618      	mov	r0, r3
 8000640:	3718      	adds	r7, #24
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000088 	.word	0x20000088
 800064c:	200000ec 	.word	0x200000ec

08000650 <startADCRead>:



void startADCRead(ADCReadContext_t *context, int sensorIndex, uint32_t sensorPressDuration)
{
 8000650:	b480      	push	{r7}
 8000652:	b085      	sub	sp, #20
 8000654:	af00      	add	r7, sp, #0
 8000656:	60f8      	str	r0, [r7, #12]
 8000658:	60b9      	str	r1, [r7, #8]
 800065a:	607a      	str	r2, [r7, #4]
    (*context).sensorIndex = sensorIndex;
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	68ba      	ldr	r2, [r7, #8]
 8000660:	615a      	str	r2, [r3, #20]
    (*context).maxCount = sensorPressDuration / 10;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4a0d      	ldr	r2, [pc, #52]	@ (800069c <startADCRead+0x4c>)
 8000666:	fba2 2303 	umull	r2, r3, r2, r3
 800066a:	08da      	lsrs	r2, r3, #3
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	611a      	str	r2, [r3, #16]
    if ((*context).maxCount == 0) (*context).maxCount = 1; // 防除以0
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	691b      	ldr	r3, [r3, #16]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d102      	bne.n	800067e <startADCRead+0x2e>
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	2201      	movs	r2, #1
 800067c:	611a      	str	r2, [r3, #16]
    (*context).sum = 0;
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
    (*context).count = 0;
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	2200      	movs	r2, #0
 8000688:	60da      	str	r2, [r3, #12]
    (*context).state = ADC_READ_INIT;
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	2200      	movs	r2, #0
 800068e:	701a      	strb	r2, [r3, #0]
}
 8000690:	bf00      	nop
 8000692:	3714      	adds	r7, #20
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	cccccccd 	.word	0xcccccccd

080006a0 <processADCRead>:

bool processADCRead(ADCReadContext_t *context)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
    switch ((*context).state)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b02      	cmp	r3, #2
 80006ae:	d040      	beq.n	8000732 <processADCRead+0x92>
 80006b0:	2b02      	cmp	r3, #2
 80006b2:	dc40      	bgt.n	8000736 <processADCRead+0x96>
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d002      	beq.n	80006be <processADCRead+0x1e>
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d009      	beq.n	80006d0 <processADCRead+0x30>

        case ADC_READ_DONE:
            return true;  // 完成讀取了

        default:
            break;
 80006bc:	e03b      	b.n	8000736 <processADCRead+0x96>
            (*context).startTime = HAL_GetTick();
 80006be:	f001 f8e1 	bl	8001884 <HAL_GetTick>
 80006c2:	4602      	mov	r2, r0
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	605a      	str	r2, [r3, #4]
            (*context).state = ADC_READING;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2201      	movs	r2, #1
 80006cc:	701a      	strb	r2, [r3, #0]
            break;
 80006ce:	e035      	b.n	800073c <processADCRead+0x9c>
            if (HAL_GetTick() - (*context).startTime >= 10)  // 間隔10ms讀一次
 80006d0:	f001 f8d8 	bl	8001884 <HAL_GetTick>
 80006d4:	4602      	mov	r2, r0
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	685b      	ldr	r3, [r3, #4]
 80006da:	1ad3      	subs	r3, r2, r3
 80006dc:	2b09      	cmp	r3, #9
 80006de:	d92c      	bls.n	800073a <processADCRead+0x9a>
                uint16_t valueADC = readSingleADCValue((*context).sensorIndex);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	695b      	ldr	r3, [r3, #20]
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff ff79 	bl	80005dc <readSingleADCValue>
 80006ea:	4603      	mov	r3, r0
 80006ec:	81fb      	strh	r3, [r7, #14]
                (*context).sum += valueADC;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	689a      	ldr	r2, [r3, #8]
 80006f2:	89fb      	ldrh	r3, [r7, #14]
 80006f4:	441a      	add	r2, r3
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	609a      	str	r2, [r3, #8]
                (*context).count++;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	68db      	ldr	r3, [r3, #12]
 80006fe:	1c5a      	adds	r2, r3, #1
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	60da      	str	r2, [r3, #12]
                (*context).startTime = HAL_GetTick(); // 重設計時
 8000704:	f001 f8be 	bl	8001884 <HAL_GetTick>
 8000708:	4602      	mov	r2, r0
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	605a      	str	r2, [r3, #4]
                if ((*context).count >= (*context).maxCount)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	68da      	ldr	r2, [r3, #12]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	691b      	ldr	r3, [r3, #16]
 8000716:	429a      	cmp	r2, r3
 8000718:	d30f      	bcc.n	800073a <processADCRead+0x9a>
                    (*context).average = (*context).sum / (*context).count;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	689a      	ldr	r2, [r3, #8]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	68db      	ldr	r3, [r3, #12]
 8000722:	fbb2 f2f3 	udiv	r2, r2, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	619a      	str	r2, [r3, #24]
                    (*context).state = ADC_READ_DONE;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	2202      	movs	r2, #2
 800072e:	701a      	strb	r2, [r3, #0]
            break;
 8000730:	e003      	b.n	800073a <processADCRead+0x9a>
            return true;  // 完成讀取了
 8000732:	2301      	movs	r3, #1
 8000734:	e003      	b.n	800073e <processADCRead+0x9e>
            break;
 8000736:	bf00      	nop
 8000738:	e000      	b.n	800073c <processADCRead+0x9c>
            break;
 800073a:	bf00      	nop
    }
    return false;  // 尚未完成
 800073c:	2300      	movs	r3, #0
}
 800073e:	4618      	mov	r0, r3
 8000740:	3710      	adds	r7, #16
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}

08000746 <getADCReadAverage>:

uint32_t getADCReadAverage(ADCReadContext_t *context)
{
 8000746:	b480      	push	{r7}
 8000748:	b083      	sub	sp, #12
 800074a:	af00      	add	r7, sp, #0
 800074c:	6078      	str	r0, [r7, #4]
    return (*context).average;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	699b      	ldr	r3, [r3, #24]
}
 8000752:	4618      	mov	r0, r3
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr

0800075e <readAveragedFSR>:


//

uint32_t readAveragedFSR(int sensorIndex,uint32_t sensorPressDuration)
{
 800075e:	b580      	push	{r7, lr}
 8000760:	b08a      	sub	sp, #40	@ 0x28
 8000762:	af00      	add	r7, sp, #0
 8000764:	6078      	str	r0, [r7, #4]
 8000766:	6039      	str	r1, [r7, #0]
	//非阻塞

	 ADCReadContext_t adcContext = {0};
 8000768:	f107 030c 	add.w	r3, r7, #12
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]
 8000778:	615a      	str	r2, [r3, #20]
 800077a:	619a      	str	r2, [r3, #24]

	startADCRead(&adcContext, sensorIndex, sensorPressDuration);
 800077c:	f107 030c 	add.w	r3, r7, #12
 8000780:	683a      	ldr	r2, [r7, #0]
 8000782:	6879      	ldr	r1, [r7, #4]
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff ff63 	bl	8000650 <startADCRead>

	while (!processADCRead(&adcContext))
 800078a:	bf00      	nop
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff ff85 	bl	80006a0 <processADCRead>
 8000796:	4603      	mov	r3, r0
 8000798:	f083 0301 	eor.w	r3, r3, #1
 800079c:	b2db      	uxtb	r3, r3
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d1f4      	bne.n	800078c <readAveragedFSR+0x2e>
	{
		// 可在這裡執行其他任務，非阻塞
	}

	return getADCReadAverage(&adcContext);
 80007a2:	f107 030c 	add.w	r3, r7, #12
 80007a6:	4618      	mov	r0, r3
 80007a8:	f7ff ffcd 	bl	8000746 <getADCReadAverage>
 80007ac:	4603      	mov	r3, r0


    //return average;
     */

}
 80007ae:	4618      	mov	r0, r3
 80007b0:	3728      	adds	r7, #40	@ 0x28
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <getAllForceSensorState>:
////////



bool getAllForceSensorState(bool isSensor1Enabled ,bool isSensor2Enabled ,uint32_t sensorPressDuration,uint32_t pressureValueThreshold)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b088      	sub	sp, #32
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	60ba      	str	r2, [r7, #8]
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	4603      	mov	r3, r0
 80007c2:	73fb      	strb	r3, [r7, #15]
 80007c4:	460b      	mov	r3, r1
 80007c6:	73bb      	strb	r3, [r7, #14]
	bool allForceSensorStateResult=false;
 80007c8:	2300      	movs	r3, #0
 80007ca:	77fb      	strb	r3, [r7, #31]
	uint32_t forceSensor1AveragedaValue=0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61bb      	str	r3, [r7, #24]
	uint32_t forceSensor2AveragedaValue=0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]


	if (isSensor1Enabled && isSensor2Enabled)
 80007d4:	7bfb      	ldrb	r3, [r7, #15]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d017      	beq.n	800080a <getAllForceSensorState+0x54>
 80007da:	7bbb      	ldrb	r3, [r7, #14]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d014      	beq.n	800080a <getAllForceSensorState+0x54>
	{
		forceSensor1AveragedaValue=readAveragedFSR(1,sensorPressDuration);//非阻塞依序讀
 80007e0:	68b9      	ldr	r1, [r7, #8]
 80007e2:	2001      	movs	r0, #1
 80007e4:	f7ff ffbb 	bl	800075e <readAveragedFSR>
 80007e8:	61b8      	str	r0, [r7, #24]
		forceSensor2AveragedaValue=readAveragedFSR(2,sensorPressDuration);//再改成2
 80007ea:	68b9      	ldr	r1, [r7, #8]
 80007ec:	2002      	movs	r0, #2
 80007ee:	f7ff ffb6 	bl	800075e <readAveragedFSR>
 80007f2:	6178      	str	r0, [r7, #20]
		//forceSensor1AveragedaValue=0;
		//forceSensor2AveragedaValue=0;
		if(forceSensor1AveragedaValue > pressureValueThreshold ||forceSensor2AveragedaValue > pressureValueThreshold)
 80007f4:	69ba      	ldr	r2, [r7, #24]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d803      	bhi.n	8000804 <getAllForceSensorState+0x4e>
 80007fc:	697a      	ldr	r2, [r7, #20]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	429a      	cmp	r2, r3
 8000802:	d923      	bls.n	800084c <getAllForceSensorState+0x96>
		{
			allForceSensorStateResult=true;
 8000804:	2301      	movs	r3, #1
 8000806:	77fb      	strb	r3, [r7, #31]
		if(forceSensor1AveragedaValue > pressureValueThreshold ||forceSensor2AveragedaValue > pressureValueThreshold)
 8000808:	e020      	b.n	800084c <getAllForceSensorState+0x96>
		}
	     //return true; // 兩個sensor都沒啟用，回傳 false
	}
	else if(isSensor1Enabled)
 800080a:	7bfb      	ldrb	r3, [r7, #15]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d00b      	beq.n	8000828 <getAllForceSensorState+0x72>
	{
		forceSensor1AveragedaValue=readAveragedFSR(1,sensorPressDuration);
 8000810:	68b9      	ldr	r1, [r7, #8]
 8000812:	2001      	movs	r0, #1
 8000814:	f7ff ffa3 	bl	800075e <readAveragedFSR>
 8000818:	61b8      	str	r0, [r7, #24]
		if(forceSensor1AveragedaValue > pressureValueThreshold)
 800081a:	69ba      	ldr	r2, [r7, #24]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	429a      	cmp	r2, r3
 8000820:	d915      	bls.n	800084e <getAllForceSensorState+0x98>
		{
			allForceSensorStateResult=true;
 8000822:	2301      	movs	r3, #1
 8000824:	77fb      	strb	r3, [r7, #31]
 8000826:	e012      	b.n	800084e <getAllForceSensorState+0x98>
		}

	}
	else if(isSensor2Enabled)
 8000828:	7bbb      	ldrb	r3, [r7, #14]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d00b      	beq.n	8000846 <getAllForceSensorState+0x90>
	{
		forceSensor2AveragedaValue=readAveragedFSR(2,sensorPressDuration);//再改成2
 800082e:	68b9      	ldr	r1, [r7, #8]
 8000830:	2002      	movs	r0, #2
 8000832:	f7ff ff94 	bl	800075e <readAveragedFSR>
 8000836:	6178      	str	r0, [r7, #20]
				if(forceSensor2AveragedaValue > pressureValueThreshold)
 8000838:	697a      	ldr	r2, [r7, #20]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	429a      	cmp	r2, r3
 800083e:	d906      	bls.n	800084e <getAllForceSensorState+0x98>
				{
					allForceSensorStateResult=true;
 8000840:	2301      	movs	r3, #1
 8000842:	77fb      	strb	r3, [r7, #31]
 8000844:	e003      	b.n	800084e <getAllForceSensorState+0x98>
				}

	}
	else
	{
		allForceSensorStateResult=false;
 8000846:	2300      	movs	r3, #0
 8000848:	77fb      	strb	r3, [r7, #31]
 800084a:	e000      	b.n	800084e <getAllForceSensorState+0x98>
		if(forceSensor1AveragedaValue > pressureValueThreshold ||forceSensor2AveragedaValue > pressureValueThreshold)
 800084c:	bf00      	nop
	}
	return allForceSensorStateResult;
 800084e:	7ffb      	ldrb	r3, [r7, #31]
}
 8000850:	4618      	mov	r0, r3
 8000852:	3720      	adds	r7, #32
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}

08000858 <checkSwitchState>:


////////////////////

bool checkSwitchState(int sensorIndex,uint32_t switchDebounceDuration)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	6039      	str	r1, [r7, #0]
	bool isTouchSwitchPressed=false;
 8000862:	2300      	movs	r3, #0
 8000864:	73fb      	strb	r3, [r7, #15]
	uint32_t static lastDebounceTime = 0;//它只會在程式執行到該行定義時 初始化一次（第一次呼叫函數時）。
    //之後每次呼叫 checkSwitchState() 時，這個變數都會保留上一次的值，不會再被重設為 0
    static GPIO_PinState lastButtonState = GPIO_PIN_SET;//沒按下 PC8 透過電阻拉到 3.3V（邏輯高
	GPIO_PinState currentState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8);//低電位
 8000866:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800086a:	4813      	ldr	r0, [pc, #76]	@ (80008b8 <checkSwitchState+0x60>)
 800086c:	f002 fd18 	bl	80032a0 <HAL_GPIO_ReadPin>
 8000870:	4603      	mov	r3, r0
 8000872:	73bb      	strb	r3, [r7, #14]
	if (currentState != lastButtonState)
 8000874:	4b11      	ldr	r3, [pc, #68]	@ (80008bc <checkSwitchState+0x64>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	7bba      	ldrb	r2, [r7, #14]
 800087a:	429a      	cmp	r2, r3
 800087c:	d004      	beq.n	8000888 <checkSwitchState+0x30>
	{
		lastDebounceTime = HAL_GetTick();  // 有變化就重設時間
 800087e:	f001 f801 	bl	8001884 <HAL_GetTick>
 8000882:	4603      	mov	r3, r0
 8000884:	4a0e      	ldr	r2, [pc, #56]	@ (80008c0 <checkSwitchState+0x68>)
 8000886:	6013      	str	r3, [r2, #0]
	}
	uint32_t elapsed = HAL_GetTick() - lastDebounceTime;  // 算出經過了多少毫秒
 8000888:	f000 fffc 	bl	8001884 <HAL_GetTick>
 800088c:	4602      	mov	r2, r0
 800088e:	4b0c      	ldr	r3, [pc, #48]	@ (80008c0 <checkSwitchState+0x68>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	1ad3      	subs	r3, r2, r3
 8000894:	60bb      	str	r3, [r7, #8]
	if (elapsed > switchDebounceDuration)
 8000896:	68ba      	ldr	r2, [r7, #8]
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	429a      	cmp	r2, r3
 800089c:	d904      	bls.n	80008a8 <checkSwitchState+0x50>
	{
		if (currentState == GPIO_PIN_RESET)
 800089e:	7bbb      	ldrb	r3, [r7, #14]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d101      	bne.n	80008a8 <checkSwitchState+0x50>
		{
			// 按鈕已穩定按下，可以執行動作
			isTouchSwitchPressed=true;
 80008a4:	2301      	movs	r3, #1
 80008a6:	73fb      	strb	r3, [r7, #15]

		}
	}

	lastButtonState = currentState;
 80008a8:	4a04      	ldr	r2, [pc, #16]	@ (80008bc <checkSwitchState+0x64>)
 80008aa:	7bbb      	ldrb	r3, [r7, #14]
 80008ac:	7013      	strb	r3, [r2, #0]
}
 80008ae:	bf00      	nop
 80008b0:	4618      	mov	r0, r3
 80008b2:	3710      	adds	r7, #16
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	48000800 	.word	0x48000800
 80008bc:	20000000 	.word	0x20000000
 80008c0:	200003c8 	.word	0x200003c8

080008c4 <getAllTouchSwitchState>:
bool getAllTouchSwitchState(bool isSwitch1Enabled,bool isSwitch2Enabled,bool isSwitch3Enabled,bool isSwitch4Enabled,uint32_t touchSwitchDebounceDuration)
{
 80008c4:	b590      	push	{r4, r7, lr}
 80008c6:	b089      	sub	sp, #36	@ 0x24
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4604      	mov	r4, r0
 80008cc:	4608      	mov	r0, r1
 80008ce:	4611      	mov	r1, r2
 80008d0:	461a      	mov	r2, r3
 80008d2:	4623      	mov	r3, r4
 80008d4:	71fb      	strb	r3, [r7, #7]
 80008d6:	4603      	mov	r3, r0
 80008d8:	71bb      	strb	r3, [r7, #6]
 80008da:	460b      	mov	r3, r1
 80008dc:	717b      	strb	r3, [r7, #5]
 80008de:	4613      	mov	r3, r2
 80008e0:	713b      	strb	r3, [r7, #4]
	bool allTouchSwitchStateResult=false;
 80008e2:	2300      	movs	r3, #0
 80008e4:	76fb      	strb	r3, [r7, #27]
	//bool isTouchSwitch1Pressed = true;  // 開關1被按下
	bool isTouchSwitch1Pressed = false; // 開關1沒被按下
 80008e6:	2300      	movs	r3, #0
 80008e8:	76bb      	strb	r3, [r7, #26]
	bool isTouchSwitch2Pressed = false;
 80008ea:	2300      	movs	r3, #0
 80008ec:	767b      	strb	r3, [r7, #25]
	bool isTouchSwitch3Pressed = false;
 80008ee:	2300      	movs	r3, #0
 80008f0:	763b      	strb	r3, [r7, #24]
	bool isTouchSwitch4Pressed = false;
 80008f2:	2300      	movs	r3, #0
 80008f4:	75fb      	strb	r3, [r7, #23]
	uint32_t forceSensor2AveragedaValue=0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	613b      	str	r3, [r7, #16]
	int disabledCount = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61fb      	str	r3, [r7, #28]
	if (!isSwitch1Enabled) disabledCount++;
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	f083 0301 	eor.w	r3, r3, #1
 8000904:	b2db      	uxtb	r3, r3
 8000906:	2b00      	cmp	r3, #0
 8000908:	d002      	beq.n	8000910 <getAllTouchSwitchState+0x4c>
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	3301      	adds	r3, #1
 800090e:	61fb      	str	r3, [r7, #28]
	if (!isSwitch2Enabled) disabledCount++;
 8000910:	79bb      	ldrb	r3, [r7, #6]
 8000912:	f083 0301 	eor.w	r3, r3, #1
 8000916:	b2db      	uxtb	r3, r3
 8000918:	2b00      	cmp	r3, #0
 800091a:	d002      	beq.n	8000922 <getAllTouchSwitchState+0x5e>
 800091c:	69fb      	ldr	r3, [r7, #28]
 800091e:	3301      	adds	r3, #1
 8000920:	61fb      	str	r3, [r7, #28]
	if (!isSwitch3Enabled) disabledCount++;
 8000922:	797b      	ldrb	r3, [r7, #5]
 8000924:	f083 0301 	eor.w	r3, r3, #1
 8000928:	b2db      	uxtb	r3, r3
 800092a:	2b00      	cmp	r3, #0
 800092c:	d002      	beq.n	8000934 <getAllTouchSwitchState+0x70>
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	3301      	adds	r3, #1
 8000932:	61fb      	str	r3, [r7, #28]
	if (!isSwitch4Enabled) disabledCount++;
 8000934:	793b      	ldrb	r3, [r7, #4]
 8000936:	f083 0301 	eor.w	r3, r3, #1
 800093a:	b2db      	uxtb	r3, r3
 800093c:	2b00      	cmp	r3, #0
 800093e:	d002      	beq.n	8000946 <getAllTouchSwitchState+0x82>
 8000940:	69fb      	ldr	r3, [r7, #28]
 8000942:	3301      	adds	r3, #1
 8000944:	61fb      	str	r3, [r7, #28]

	if (disabledCount == 0)
 8000946:	69fb      	ldr	r3, [r7, #28]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d114      	bne.n	8000976 <getAllTouchSwitchState+0xb2>
	{   //四個開關都啟用
		isTouchSwitch1Pressed=checkSwitchState(1,touchSwitchDebounceDuration);
 800094c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800094e:	2001      	movs	r0, #1
 8000950:	f7ff ff82 	bl	8000858 <checkSwitchState>
 8000954:	4603      	mov	r3, r0
 8000956:	76bb      	strb	r3, [r7, #26]
		isTouchSwitch2Pressed=checkSwitchState(2,touchSwitchDebounceDuration);//再改成2
 8000958:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800095a:	2002      	movs	r0, #2
 800095c:	f7ff ff7c 	bl	8000858 <checkSwitchState>
 8000960:	4603      	mov	r3, r0
 8000962:	767b      	strb	r3, [r7, #25]

		int pressedCount = isTouchSwitch1Pressed + isTouchSwitch2Pressed + isTouchSwitch3Pressed + isTouchSwitch4Pressed;
 8000964:	7eba      	ldrb	r2, [r7, #26]
 8000966:	7e7b      	ldrb	r3, [r7, #25]
 8000968:	441a      	add	r2, r3
 800096a:	7e3b      	ldrb	r3, [r7, #24]
 800096c:	441a      	add	r2, r3
 800096e:	7dfb      	ldrb	r3, [r7, #23]
 8000970:	4413      	add	r3, r2
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	e05d      	b.n	8000a32 <getAllTouchSwitchState+0x16e>
			//allForceSensorStateResult=true;
		//}
		 //return true; // 兩個sensor都沒啟用，回傳 false

	}
	else if (disabledCount == 1)
 8000976:	69fb      	ldr	r3, [r7, #28]
 8000978:	2b01      	cmp	r3, #1
 800097a:	d10c      	bne.n	8000996 <getAllTouchSwitchState+0xd2>
	{
		printf("一個 switch 不啟用\n");
 800097c:	482f      	ldr	r0, [pc, #188]	@ (8000a3c <getAllTouchSwitchState+0x178>)
 800097e:	f004 ff75 	bl	800586c <puts>
		printf("啟用的 switch 有：");
 8000982:	482f      	ldr	r0, [pc, #188]	@ (8000a40 <getAllTouchSwitchState+0x17c>)
 8000984:	f004 ff0a 	bl	800579c <iprintf>
		if (isSwitch1Enabled) printf("Switch1 ");
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d051      	beq.n	8000a32 <getAllTouchSwitchState+0x16e>
 800098e:	482d      	ldr	r0, [pc, #180]	@ (8000a44 <getAllTouchSwitchState+0x180>)
 8000990:	f004 ff04 	bl	800579c <iprintf>
 8000994:	e04d      	b.n	8000a32 <getAllTouchSwitchState+0x16e>

	}
	else if (disabledCount == 2)
 8000996:	69fb      	ldr	r3, [r7, #28]
 8000998:	2b02      	cmp	r3, #2
 800099a:	d11e      	bne.n	80009da <getAllTouchSwitchState+0x116>
	{
		printf("兩個 switch 不啟用\n");
 800099c:	482a      	ldr	r0, [pc, #168]	@ (8000a48 <getAllTouchSwitchState+0x184>)
 800099e:	f004 ff65 	bl	800586c <puts>
		printf("啟用的 switch 有：");
 80009a2:	4827      	ldr	r0, [pc, #156]	@ (8000a40 <getAllTouchSwitchState+0x17c>)
 80009a4:	f004 fefa 	bl	800579c <iprintf>
		if (isSwitch1Enabled) printf("Switch1 ");
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d002      	beq.n	80009b4 <getAllTouchSwitchState+0xf0>
 80009ae:	4825      	ldr	r0, [pc, #148]	@ (8000a44 <getAllTouchSwitchState+0x180>)
 80009b0:	f004 fef4 	bl	800579c <iprintf>
		if (isSwitch2Enabled) printf("Switch2 ");
 80009b4:	79bb      	ldrb	r3, [r7, #6]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d002      	beq.n	80009c0 <getAllTouchSwitchState+0xfc>
 80009ba:	4824      	ldr	r0, [pc, #144]	@ (8000a4c <getAllTouchSwitchState+0x188>)
 80009bc:	f004 feee 	bl	800579c <iprintf>
		if (isSwitch3Enabled) printf("Switch3 ");
 80009c0:	797b      	ldrb	r3, [r7, #5]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d002      	beq.n	80009cc <getAllTouchSwitchState+0x108>
 80009c6:	4822      	ldr	r0, [pc, #136]	@ (8000a50 <getAllTouchSwitchState+0x18c>)
 80009c8:	f004 fee8 	bl	800579c <iprintf>
		if (isSwitch4Enabled) printf("Switch4 ");
 80009cc:	793b      	ldrb	r3, [r7, #4]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d02f      	beq.n	8000a32 <getAllTouchSwitchState+0x16e>
 80009d2:	4820      	ldr	r0, [pc, #128]	@ (8000a54 <getAllTouchSwitchState+0x190>)
 80009d4:	f004 fee2 	bl	800579c <iprintf>
 80009d8:	e02b      	b.n	8000a32 <getAllTouchSwitchState+0x16e>

	}
	else if (disabledCount == 3) {
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	2b03      	cmp	r3, #3
 80009de:	d11e      	bne.n	8000a1e <getAllTouchSwitchState+0x15a>
		printf("三個 switch 不啟用\n");
 80009e0:	481d      	ldr	r0, [pc, #116]	@ (8000a58 <getAllTouchSwitchState+0x194>)
 80009e2:	f004 ff43 	bl	800586c <puts>
		printf("啟用的 switch 有：");
 80009e6:	4816      	ldr	r0, [pc, #88]	@ (8000a40 <getAllTouchSwitchState+0x17c>)
 80009e8:	f004 fed8 	bl	800579c <iprintf>
		if (isSwitch1Enabled) printf("Switch1 ");
 80009ec:	79fb      	ldrb	r3, [r7, #7]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d002      	beq.n	80009f8 <getAllTouchSwitchState+0x134>
 80009f2:	4814      	ldr	r0, [pc, #80]	@ (8000a44 <getAllTouchSwitchState+0x180>)
 80009f4:	f004 fed2 	bl	800579c <iprintf>
		if (isSwitch2Enabled) printf("Switch2 ");
 80009f8:	79bb      	ldrb	r3, [r7, #6]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d002      	beq.n	8000a04 <getAllTouchSwitchState+0x140>
 80009fe:	4813      	ldr	r0, [pc, #76]	@ (8000a4c <getAllTouchSwitchState+0x188>)
 8000a00:	f004 fecc 	bl	800579c <iprintf>
		if (isSwitch3Enabled) printf("Switch3 ");
 8000a04:	797b      	ldrb	r3, [r7, #5]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d002      	beq.n	8000a10 <getAllTouchSwitchState+0x14c>
 8000a0a:	4811      	ldr	r0, [pc, #68]	@ (8000a50 <getAllTouchSwitchState+0x18c>)
 8000a0c:	f004 fec6 	bl	800579c <iprintf>
		if (isSwitch4Enabled) printf("Switch4 ");
 8000a10:	793b      	ldrb	r3, [r7, #4]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d00d      	beq.n	8000a32 <getAllTouchSwitchState+0x16e>
 8000a16:	480f      	ldr	r0, [pc, #60]	@ (8000a54 <getAllTouchSwitchState+0x190>)
 8000a18:	f004 fec0 	bl	800579c <iprintf>
 8000a1c:	e009      	b.n	8000a32 <getAllTouchSwitchState+0x16e>

	}
	else if (disabledCount == 4) {
 8000a1e:	69fb      	ldr	r3, [r7, #28]
 8000a20:	2b04      	cmp	r3, #4
 8000a22:	d103      	bne.n	8000a2c <getAllTouchSwitchState+0x168>
		printf("全部 switch 都不啟用\n");
 8000a24:	480d      	ldr	r0, [pc, #52]	@ (8000a5c <getAllTouchSwitchState+0x198>)
 8000a26:	f004 ff21 	bl	800586c <puts>
 8000a2a:	e002      	b.n	8000a32 <getAllTouchSwitchState+0x16e>
	}
	else {
		printf("狀況不明\n");
 8000a2c:	480c      	ldr	r0, [pc, #48]	@ (8000a60 <getAllTouchSwitchState+0x19c>)
 8000a2e:	f004 ff1d 	bl	800586c <puts>
	}
	return allTouchSwitchStateResult;
 8000a32:	7efb      	ldrb	r3, [r7, #27]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3724      	adds	r7, #36	@ 0x24
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd90      	pop	{r4, r7, pc}
 8000a3c:	080065b4 	.word	0x080065b4
 8000a40:	080065cc 	.word	0x080065cc
 8000a44:	080065e4 	.word	0x080065e4
 8000a48:	080065f0 	.word	0x080065f0
 8000a4c:	08006608 	.word	0x08006608
 8000a50:	08006614 	.word	0x08006614
 8000a54:	08006620 	.word	0x08006620
 8000a58:	0800662c 	.word	0x0800662c
 8000a5c:	08006644 	.word	0x08006644
 8000a60:	08006660 	.word	0x08006660

08000a64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a64:	b590      	push	{r4, r7, lr}
 8000a66:	b099      	sub	sp, #100	@ 0x64
 8000a68:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
  //char buffer[40]="";
  int arr[10] = {0};  // 全部初始化為 0
 8000a6a:	f107 0308 	add.w	r3, r7, #8
 8000a6e:	2228      	movs	r2, #40	@ 0x28
 8000a70:	2100      	movs	r1, #0
 8000a72:	4618      	mov	r0, r3
 8000a74:	f004 ffda 	bl	8005a2c <memset>
  int a=sizeof(arr);  // ✅ 這裡是陣列大小  a=40   10*4
 8000a78:	2328      	movs	r3, #40	@ 0x28
 8000a7a:	657b      	str	r3, [r7, #84]	@ 0x54
  int value=2;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	653b      	str	r3, [r7, #80]	@ 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a80:	f000 fe90 	bl	80017a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a84:	f000 f85e 	bl	8000b44 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000a88:	f000 f8ad 	bl	8000be6 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a8c:	f000 fab0 	bl	8000ff0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000a90:	f000 f8d4 	bl	8000c3c <MX_ADC1_Init>
  MX_I2C1_Init();
 8000a94:	f000 f9ac 	bl	8000df0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000a98:	f000 fa1a 	bl	8000ed0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000a9c:	f000 fa48 	bl	8000f30 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000aa0:	f000 fa76 	bl	8000f90 <MX_USART3_UART_Init>
  MX_UART4_Init();
 8000aa4:	f000 f9e4 	bl	8000e70 <MX_UART4_Init>
  MX_ADC2_Init();
 8000aa8:	f000 f93e 	bl	8000d28 <MX_ADC2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // 全部力量感測器回傳值
	  bool forceSensorFinalState=false;
 8000aac:	2300      	movs	r3, #0
 8000aae:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	  //從flash讀取力量感測器初始參數
	  uint32_t forceSensorPressDuration = 100;
 8000ab2:	2364      	movs	r3, #100	@ 0x64
 8000ab4:	64bb      	str	r3, [r7, #72]	@ 0x48
	  uint32_t forcepPressValueThreshold = 3000; //
 8000ab6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8000aba:	647b      	str	r3, [r7, #68]	@ 0x44
	  bool isforceSensor1Enabled=true;
 8000abc:	2301      	movs	r3, #1
 8000abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	  bool isforceSensor2Enabled=true;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
	  //

	  // Touch switch enabled flags
	  bool isTouchSwitch1Enabled = true;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
	  bool isTouchSwitch2Enabled = true;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
	  bool isTouchSwitch3Enabled = true;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	  bool isTouchSwitch4Enabled = true;
 8000ada:	2301      	movs	r3, #1
 8000adc:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

	  // Touch switch behavior parameters
	  uint32_t touchSwitchDebounceDuration = 100;
 8000ae0:	2364      	movs	r3, #100	@ 0x64
 8000ae2:	63bb      	str	r3, [r7, #56]	@ 0x38
	  uint32_t touchSwitchPressThreshold = 3000;
 8000ae4:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8000ae8:	637b      	str	r3, [r7, #52]	@ 0x34

	  // Final result of all switches
	  bool touchSwitchFinalState = false;
 8000aea:	2300      	movs	r3, #0
 8000aec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	  //
	  forceSensorFinalState=getAllForceSensorState(isforceSensor1Enabled,isforceSensor2Enabled,forceSensorPressDuration,forcepPressValueThreshold);
 8000af0:	f897 1042 	ldrb.w	r1, [r7, #66]	@ 0x42
 8000af4:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 8000af8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000afa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000afc:	f7ff fe5b 	bl	80007b6 <getAllForceSensorState>
 8000b00:	4603      	mov	r3, r0
 8000b02:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	  touchSwitchFinalState = getAllTouchSwitchState(
 8000b06:	f897 403e 	ldrb.w	r4, [r7, #62]	@ 0x3e
 8000b0a:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8000b0e:	f897 1040 	ldrb.w	r1, [r7, #64]	@ 0x40
 8000b12:	f897 0041 	ldrb.w	r0, [r7, #65]	@ 0x41
 8000b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000b18:	9300      	str	r3, [sp, #0]
 8000b1a:	4623      	mov	r3, r4
 8000b1c:	f7ff fed2 	bl	80008c4 <getAllTouchSwitchState>
 8000b20:	4603      	mov	r3, r0
 8000b22:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	  ///
	  //snprintf(buffer, sizeof(buffer), "%d", value);
	  //transmitDataUart(buffer);

	  //
	  char txData[] = "12345";
 8000b26:	4a06      	ldr	r2, [pc, #24]	@ (8000b40 <main+0xdc>)
 8000b28:	463b      	mov	r3, r7
 8000b2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b2e:	6018      	str	r0, [r3, #0]
 8000b30:	3304      	adds	r3, #4
 8000b32:	8019      	strh	r1, [r3, #0]
	      printf("Receive timeout or error\n");
	  }
*/
	  // 啟用力量感測器功能
	  //updateFSRState();   // 呼叫防彈跳判斷
	  HAL_Delay(100);     // 簡短延遲避免過度讀取ADC
 8000b34:	2064      	movs	r0, #100	@ 0x64
 8000b36:	f000 feb1 	bl	800189c <HAL_Delay>
  {
 8000b3a:	bf00      	nop
 8000b3c:	e7b6      	b.n	8000aac <main+0x48>
 8000b3e:	bf00      	nop
 8000b40:	08006670 	.word	0x08006670

08000b44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b096      	sub	sp, #88	@ 0x58
 8000b48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	2244      	movs	r2, #68	@ 0x44
 8000b50:	2100      	movs	r1, #0
 8000b52:	4618      	mov	r0, r3
 8000b54:	f004 ff6a 	bl	8005a2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b58:	463b      	mov	r3, r7
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	60da      	str	r2, [r3, #12]
 8000b64:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b66:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000b6a:	f002 fd21 	bl	80035b0 <HAL_PWREx_ControlVoltageScaling>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000b74:	f000 face 	bl	8001114 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b80:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b82:	2310      	movs	r3, #16
 8000b84:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b86:	2302      	movs	r3, #2
 8000b88:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000b92:	230a      	movs	r3, #10
 8000b94:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b96:	2307      	movs	r3, #7
 8000b98:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba2:	f107 0314 	add.w	r3, r7, #20
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f002 fd58 	bl	800365c <HAL_RCC_OscConfig>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000bb2:	f000 faaf 	bl	8001114 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb6:	230f      	movs	r3, #15
 8000bb8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bca:	463b      	mov	r3, r7
 8000bcc:	2104      	movs	r1, #4
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f003 f920 	bl	8003e14 <HAL_RCC_ClockConfig>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000bda:	f000 fa9b 	bl	8001114 <Error_Handler>
  }
}
 8000bde:	bf00      	nop
 8000be0:	3758      	adds	r7, #88	@ 0x58
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b0a2      	sub	sp, #136	@ 0x88
 8000bea:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bec:	463b      	mov	r3, r7
 8000bee:	2288      	movs	r2, #136	@ 0x88
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f004 ff1a 	bl	8005a2c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000bf8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000bfc:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000bfe:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000c02:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000c04:	2302      	movs	r3, #2
 8000c06:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000c0c:	2308      	movs	r3, #8
 8000c0e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000c10:	2307      	movs	r3, #7
 8000c12:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000c14:	2302      	movs	r3, #2
 8000c16:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000c1c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000c20:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c22:	463b      	mov	r3, r7
 8000c24:	4618      	mov	r0, r3
 8000c26:	f003 fb19 	bl	800425c <HAL_RCCEx_PeriphCLKConfig>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8000c30:	f000 fa70 	bl	8001114 <Error_Handler>
  }
}
 8000c34:	bf00      	nop
 8000c36:	3788      	adds	r7, #136	@ 0x88
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08a      	sub	sp, #40	@ 0x28
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c42:	f107 031c 	add.w	r3, r7, #28
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
 8000c5c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c5e:	4b2f      	ldr	r3, [pc, #188]	@ (8000d1c <MX_ADC1_Init+0xe0>)
 8000c60:	4a2f      	ldr	r2, [pc, #188]	@ (8000d20 <MX_ADC1_Init+0xe4>)
 8000c62:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c64:	4b2d      	ldr	r3, [pc, #180]	@ (8000d1c <MX_ADC1_Init+0xe0>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c6a:	4b2c      	ldr	r3, [pc, #176]	@ (8000d1c <MX_ADC1_Init+0xe0>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c70:	4b2a      	ldr	r3, [pc, #168]	@ (8000d1c <MX_ADC1_Init+0xe0>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c76:	4b29      	ldr	r3, [pc, #164]	@ (8000d1c <MX_ADC1_Init+0xe0>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c7c:	4b27      	ldr	r3, [pc, #156]	@ (8000d1c <MX_ADC1_Init+0xe0>)
 8000c7e:	2204      	movs	r2, #4
 8000c80:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c82:	4b26      	ldr	r3, [pc, #152]	@ (8000d1c <MX_ADC1_Init+0xe0>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c88:	4b24      	ldr	r3, [pc, #144]	@ (8000d1c <MX_ADC1_Init+0xe0>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000c8e:	4b23      	ldr	r3, [pc, #140]	@ (8000d1c <MX_ADC1_Init+0xe0>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c94:	4b21      	ldr	r3, [pc, #132]	@ (8000d1c <MX_ADC1_Init+0xe0>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c9c:	4b1f      	ldr	r3, [pc, #124]	@ (8000d1c <MX_ADC1_Init+0xe0>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ca2:	4b1e      	ldr	r3, [pc, #120]	@ (8000d1c <MX_ADC1_Init+0xe0>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ca8:	4b1c      	ldr	r3, [pc, #112]	@ (8000d1c <MX_ADC1_Init+0xe0>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cb0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d1c <MX_ADC1_Init+0xe0>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000cb6:	4b19      	ldr	r3, [pc, #100]	@ (8000d1c <MX_ADC1_Init+0xe0>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cbe:	4817      	ldr	r0, [pc, #92]	@ (8000d1c <MX_ADC1_Init+0xe0>)
 8000cc0:	f000 fff4 	bl	8001cac <HAL_ADC_Init>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000cca:	f000 fa23 	bl	8001114 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000cd2:	f107 031c 	add.w	r3, r7, #28
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4810      	ldr	r0, [pc, #64]	@ (8000d1c <MX_ADC1_Init+0xe0>)
 8000cda:	f001 ff75 	bl	8002bc8 <HAL_ADCEx_MultiModeConfigChannel>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000ce4:	f000 fa16 	bl	8001114 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ce8:	4b0e      	ldr	r3, [pc, #56]	@ (8000d24 <MX_ADC1_Init+0xe8>)
 8000cea:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cec:	2306      	movs	r3, #6
 8000cee:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cf4:	237f      	movs	r3, #127	@ 0x7f
 8000cf6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cf8:	2304      	movs	r3, #4
 8000cfa:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	4619      	mov	r1, r3
 8000d04:	4805      	ldr	r0, [pc, #20]	@ (8000d1c <MX_ADC1_Init+0xe0>)
 8000d06:	f001 fac1 	bl	800228c <HAL_ADC_ConfigChannel>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000d10:	f000 fa00 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d14:	bf00      	nop
 8000d16:	3728      	adds	r7, #40	@ 0x28
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	20000088 	.word	0x20000088
 8000d20:	50040000 	.word	0x50040000
 8000d24:	04300002 	.word	0x04300002

08000d28 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d2e:	463b      	mov	r3, r7
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
 8000d3c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000d3e:	4b29      	ldr	r3, [pc, #164]	@ (8000de4 <MX_ADC2_Init+0xbc>)
 8000d40:	4a29      	ldr	r2, [pc, #164]	@ (8000de8 <MX_ADC2_Init+0xc0>)
 8000d42:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d44:	4b27      	ldr	r3, [pc, #156]	@ (8000de4 <MX_ADC2_Init+0xbc>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000d4a:	4b26      	ldr	r3, [pc, #152]	@ (8000de4 <MX_ADC2_Init+0xbc>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d50:	4b24      	ldr	r3, [pc, #144]	@ (8000de4 <MX_ADC2_Init+0xbc>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d56:	4b23      	ldr	r3, [pc, #140]	@ (8000de4 <MX_ADC2_Init+0xbc>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d5c:	4b21      	ldr	r3, [pc, #132]	@ (8000de4 <MX_ADC2_Init+0xbc>)
 8000d5e:	2204      	movs	r2, #4
 8000d60:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000d62:	4b20      	ldr	r3, [pc, #128]	@ (8000de4 <MX_ADC2_Init+0xbc>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000d68:	4b1e      	ldr	r3, [pc, #120]	@ (8000de4 <MX_ADC2_Init+0xbc>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000d6e:	4b1d      	ldr	r3, [pc, #116]	@ (8000de4 <MX_ADC2_Init+0xbc>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d74:	4b1b      	ldr	r3, [pc, #108]	@ (8000de4 <MX_ADC2_Init+0xbc>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d7c:	4b19      	ldr	r3, [pc, #100]	@ (8000de4 <MX_ADC2_Init+0xbc>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d82:	4b18      	ldr	r3, [pc, #96]	@ (8000de4 <MX_ADC2_Init+0xbc>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000d88:	4b16      	ldr	r3, [pc, #88]	@ (8000de4 <MX_ADC2_Init+0xbc>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d90:	4b14      	ldr	r3, [pc, #80]	@ (8000de4 <MX_ADC2_Init+0xbc>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000d96:	4b13      	ldr	r3, [pc, #76]	@ (8000de4 <MX_ADC2_Init+0xbc>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d9e:	4811      	ldr	r0, [pc, #68]	@ (8000de4 <MX_ADC2_Init+0xbc>)
 8000da0:	f000 ff84 	bl	8001cac <HAL_ADC_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000daa:	f000 f9b3 	bl	8001114 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000dae:	4b0f      	ldr	r3, [pc, #60]	@ (8000dec <MX_ADC2_Init+0xc4>)
 8000db0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000db2:	2306      	movs	r3, #6
 8000db4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000db6:	2300      	movs	r3, #0
 8000db8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000dba:	237f      	movs	r3, #127	@ 0x7f
 8000dbc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000dbe:	2304      	movs	r3, #4
 8000dc0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000dc6:	463b      	mov	r3, r7
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4806      	ldr	r0, [pc, #24]	@ (8000de4 <MX_ADC2_Init+0xbc>)
 8000dcc:	f001 fa5e 	bl	800228c <HAL_ADC_ConfigChannel>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8000dd6:	f000 f99d 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000dda:	bf00      	nop
 8000ddc:	3718      	adds	r7, #24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	200000ec 	.word	0x200000ec
 8000de8:	50040100 	.word	0x50040100
 8000dec:	08600004 	.word	0x08600004

08000df0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000df4:	4b1b      	ldr	r3, [pc, #108]	@ (8000e64 <MX_I2C1_Init+0x74>)
 8000df6:	4a1c      	ldr	r2, [pc, #112]	@ (8000e68 <MX_I2C1_Init+0x78>)
 8000df8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8000dfa:	4b1a      	ldr	r3, [pc, #104]	@ (8000e64 <MX_I2C1_Init+0x74>)
 8000dfc:	4a1b      	ldr	r2, [pc, #108]	@ (8000e6c <MX_I2C1_Init+0x7c>)
 8000dfe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e00:	4b18      	ldr	r3, [pc, #96]	@ (8000e64 <MX_I2C1_Init+0x74>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e06:	4b17      	ldr	r3, [pc, #92]	@ (8000e64 <MX_I2C1_Init+0x74>)
 8000e08:	2201      	movs	r2, #1
 8000e0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e0c:	4b15      	ldr	r3, [pc, #84]	@ (8000e64 <MX_I2C1_Init+0x74>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e12:	4b14      	ldr	r3, [pc, #80]	@ (8000e64 <MX_I2C1_Init+0x74>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e18:	4b12      	ldr	r3, [pc, #72]	@ (8000e64 <MX_I2C1_Init+0x74>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e1e:	4b11      	ldr	r3, [pc, #68]	@ (8000e64 <MX_I2C1_Init+0x74>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e24:	4b0f      	ldr	r3, [pc, #60]	@ (8000e64 <MX_I2C1_Init+0x74>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e2a:	480e      	ldr	r0, [pc, #56]	@ (8000e64 <MX_I2C1_Init+0x74>)
 8000e2c:	f002 fa80 	bl	8003330 <HAL_I2C_Init>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e36:	f000 f96d 	bl	8001114 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	4809      	ldr	r0, [pc, #36]	@ (8000e64 <MX_I2C1_Init+0x74>)
 8000e3e:	f002 fb12 	bl	8003466 <HAL_I2CEx_ConfigAnalogFilter>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e48:	f000 f964 	bl	8001114 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	4805      	ldr	r0, [pc, #20]	@ (8000e64 <MX_I2C1_Init+0x74>)
 8000e50:	f002 fb54 	bl	80034fc <HAL_I2CEx_ConfigDigitalFilter>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e5a:	f000 f95b 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000150 	.word	0x20000150
 8000e68:	40005400 	.word	0x40005400
 8000e6c:	10d19ce4 	.word	0x10d19ce4

08000e70 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000e74:	4b14      	ldr	r3, [pc, #80]	@ (8000ec8 <MX_UART4_Init+0x58>)
 8000e76:	4a15      	ldr	r2, [pc, #84]	@ (8000ecc <MX_UART4_Init+0x5c>)
 8000e78:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000e7a:	4b13      	ldr	r3, [pc, #76]	@ (8000ec8 <MX_UART4_Init+0x58>)
 8000e7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e80:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000e82:	4b11      	ldr	r3, [pc, #68]	@ (8000ec8 <MX_UART4_Init+0x58>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000e88:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec8 <MX_UART4_Init+0x58>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec8 <MX_UART4_Init+0x58>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000e94:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec8 <MX_UART4_Init+0x58>)
 8000e96:	220c      	movs	r2, #12
 8000e98:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec8 <MX_UART4_Init+0x58>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ea0:	4b09      	ldr	r3, [pc, #36]	@ (8000ec8 <MX_UART4_Init+0x58>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ea6:	4b08      	ldr	r3, [pc, #32]	@ (8000ec8 <MX_UART4_Init+0x58>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eac:	4b06      	ldr	r3, [pc, #24]	@ (8000ec8 <MX_UART4_Init+0x58>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000eb2:	4805      	ldr	r0, [pc, #20]	@ (8000ec8 <MX_UART4_Init+0x58>)
 8000eb4:	f003 fe8e 	bl	8004bd4 <HAL_UART_Init>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000ebe:	f000 f929 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	200001a4 	.word	0x200001a4
 8000ecc:	40004c00 	.word	0x40004c00

08000ed0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ed4:	4b14      	ldr	r3, [pc, #80]	@ (8000f28 <MX_USART1_UART_Init+0x58>)
 8000ed6:	4a15      	ldr	r2, [pc, #84]	@ (8000f2c <MX_USART1_UART_Init+0x5c>)
 8000ed8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000eda:	4b13      	ldr	r3, [pc, #76]	@ (8000f28 <MX_USART1_UART_Init+0x58>)
 8000edc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ee0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ee2:	4b11      	ldr	r3, [pc, #68]	@ (8000f28 <MX_USART1_UART_Init+0x58>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8000f28 <MX_USART1_UART_Init+0x58>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000eee:	4b0e      	ldr	r3, [pc, #56]	@ (8000f28 <MX_USART1_UART_Init+0x58>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f28 <MX_USART1_UART_Init+0x58>)
 8000ef6:	220c      	movs	r2, #12
 8000ef8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000efa:	4b0b      	ldr	r3, [pc, #44]	@ (8000f28 <MX_USART1_UART_Init+0x58>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f00:	4b09      	ldr	r3, [pc, #36]	@ (8000f28 <MX_USART1_UART_Init+0x58>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f06:	4b08      	ldr	r3, [pc, #32]	@ (8000f28 <MX_USART1_UART_Init+0x58>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f0c:	4b06      	ldr	r3, [pc, #24]	@ (8000f28 <MX_USART1_UART_Init+0x58>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f12:	4805      	ldr	r0, [pc, #20]	@ (8000f28 <MX_USART1_UART_Init+0x58>)
 8000f14:	f003 fe5e 	bl	8004bd4 <HAL_UART_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000f1e:	f000 f8f9 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	2000022c 	.word	0x2000022c
 8000f2c:	40013800 	.word	0x40013800

08000f30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f34:	4b14      	ldr	r3, [pc, #80]	@ (8000f88 <MX_USART2_UART_Init+0x58>)
 8000f36:	4a15      	ldr	r2, [pc, #84]	@ (8000f8c <MX_USART2_UART_Init+0x5c>)
 8000f38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f3a:	4b13      	ldr	r3, [pc, #76]	@ (8000f88 <MX_USART2_UART_Init+0x58>)
 8000f3c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f42:	4b11      	ldr	r3, [pc, #68]	@ (8000f88 <MX_USART2_UART_Init+0x58>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f48:	4b0f      	ldr	r3, [pc, #60]	@ (8000f88 <MX_USART2_UART_Init+0x58>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f88 <MX_USART2_UART_Init+0x58>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f54:	4b0c      	ldr	r3, [pc, #48]	@ (8000f88 <MX_USART2_UART_Init+0x58>)
 8000f56:	220c      	movs	r2, #12
 8000f58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f88 <MX_USART2_UART_Init+0x58>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f60:	4b09      	ldr	r3, [pc, #36]	@ (8000f88 <MX_USART2_UART_Init+0x58>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f66:	4b08      	ldr	r3, [pc, #32]	@ (8000f88 <MX_USART2_UART_Init+0x58>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	@ (8000f88 <MX_USART2_UART_Init+0x58>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f72:	4805      	ldr	r0, [pc, #20]	@ (8000f88 <MX_USART2_UART_Init+0x58>)
 8000f74:	f003 fe2e 	bl	8004bd4 <HAL_UART_Init>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f7e:	f000 f8c9 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	200002b4 	.word	0x200002b4
 8000f8c:	40004400 	.word	0x40004400

08000f90 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f94:	4b14      	ldr	r3, [pc, #80]	@ (8000fe8 <MX_USART3_UART_Init+0x58>)
 8000f96:	4a15      	ldr	r2, [pc, #84]	@ (8000fec <MX_USART3_UART_Init+0x5c>)
 8000f98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f9a:	4b13      	ldr	r3, [pc, #76]	@ (8000fe8 <MX_USART3_UART_Init+0x58>)
 8000f9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fa0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fa2:	4b11      	ldr	r3, [pc, #68]	@ (8000fe8 <MX_USART3_UART_Init+0x58>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe8 <MX_USART3_UART_Init+0x58>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fae:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe8 <MX_USART3_UART_Init+0x58>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe8 <MX_USART3_UART_Init+0x58>)
 8000fb6:	220c      	movs	r2, #12
 8000fb8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fba:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe8 <MX_USART3_UART_Init+0x58>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fc0:	4b09      	ldr	r3, [pc, #36]	@ (8000fe8 <MX_USART3_UART_Init+0x58>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fc6:	4b08      	ldr	r3, [pc, #32]	@ (8000fe8 <MX_USART3_UART_Init+0x58>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fcc:	4b06      	ldr	r3, [pc, #24]	@ (8000fe8 <MX_USART3_UART_Init+0x58>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fd2:	4805      	ldr	r0, [pc, #20]	@ (8000fe8 <MX_USART3_UART_Init+0x58>)
 8000fd4:	f003 fdfe 	bl	8004bd4 <HAL_UART_Init>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000fde:	f000 f899 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	2000033c 	.word	0x2000033c
 8000fec:	40004800 	.word	0x40004800

08000ff0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	@ 0x28
 8000ff4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff6:	f107 0314 	add.w	r3, r7, #20
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	609a      	str	r2, [r3, #8]
 8001002:	60da      	str	r2, [r3, #12]
 8001004:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001006:	4b40      	ldr	r3, [pc, #256]	@ (8001108 <MX_GPIO_Init+0x118>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800100a:	4a3f      	ldr	r2, [pc, #252]	@ (8001108 <MX_GPIO_Init+0x118>)
 800100c:	f043 0304 	orr.w	r3, r3, #4
 8001010:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001012:	4b3d      	ldr	r3, [pc, #244]	@ (8001108 <MX_GPIO_Init+0x118>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001016:	f003 0304 	and.w	r3, r3, #4
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800101e:	4b3a      	ldr	r3, [pc, #232]	@ (8001108 <MX_GPIO_Init+0x118>)
 8001020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001022:	4a39      	ldr	r2, [pc, #228]	@ (8001108 <MX_GPIO_Init+0x118>)
 8001024:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001028:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800102a:	4b37      	ldr	r3, [pc, #220]	@ (8001108 <MX_GPIO_Init+0x118>)
 800102c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800102e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001036:	4b34      	ldr	r3, [pc, #208]	@ (8001108 <MX_GPIO_Init+0x118>)
 8001038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800103a:	4a33      	ldr	r2, [pc, #204]	@ (8001108 <MX_GPIO_Init+0x118>)
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001042:	4b31      	ldr	r3, [pc, #196]	@ (8001108 <MX_GPIO_Init+0x118>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800104e:	4b2e      	ldr	r3, [pc, #184]	@ (8001108 <MX_GPIO_Init+0x118>)
 8001050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001052:	4a2d      	ldr	r2, [pc, #180]	@ (8001108 <MX_GPIO_Init+0x118>)
 8001054:	f043 0302 	orr.w	r3, r3, #2
 8001058:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800105a:	4b2b      	ldr	r3, [pc, #172]	@ (8001108 <MX_GPIO_Init+0x118>)
 800105c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	607b      	str	r3, [r7, #4]
 8001064:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001066:	2200      	movs	r2, #0
 8001068:	2120      	movs	r1, #32
 800106a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800106e:	f002 f92f 	bl	80032d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8001072:	2200      	movs	r2, #0
 8001074:	f244 1181 	movw	r1, #16769	@ 0x4181
 8001078:	4824      	ldr	r0, [pc, #144]	@ (800110c <MX_GPIO_Init+0x11c>)
 800107a:	f002 f929 	bl	80032d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800107e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001082:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001084:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001088:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	4619      	mov	r1, r3
 8001094:	481e      	ldr	r0, [pc, #120]	@ (8001110 <MX_GPIO_Init+0x120>)
 8001096:	f001 ff59 	bl	8002f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800109a:	2320      	movs	r3, #32
 800109c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109e:	2301      	movs	r3, #1
 80010a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a6:	2300      	movs	r3, #0
 80010a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010aa:	f107 0314 	add.w	r3, r7, #20
 80010ae:	4619      	mov	r1, r3
 80010b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010b4:	f001 ff4a 	bl	8002f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_8;
 80010b8:	f244 1381 	movw	r3, #16769	@ 0x4181
 80010bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010be:	2301      	movs	r3, #1
 80010c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c6:	2300      	movs	r3, #0
 80010c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ca:	f107 0314 	add.w	r3, r7, #20
 80010ce:	4619      	mov	r1, r3
 80010d0:	480e      	ldr	r0, [pc, #56]	@ (800110c <MX_GPIO_Init+0x11c>)
 80010d2:	f001 ff3b 	bl	8002f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80010d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010dc:	2300      	movs	r3, #0
 80010de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	4619      	mov	r1, r3
 80010ea:	4809      	ldr	r0, [pc, #36]	@ (8001110 <MX_GPIO_Init+0x120>)
 80010ec:	f001 ff2e 	bl	8002f4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010f0:	2200      	movs	r2, #0
 80010f2:	2100      	movs	r1, #0
 80010f4:	2028      	movs	r0, #40	@ 0x28
 80010f6:	f001 fef2 	bl	8002ede <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010fa:	2028      	movs	r0, #40	@ 0x28
 80010fc:	f001 ff0b 	bl	8002f16 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001100:	bf00      	nop
 8001102:	3728      	adds	r7, #40	@ 0x28
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40021000 	.word	0x40021000
 800110c:	48000400 	.word	0x48000400
 8001110:	48000800 	.word	0x48000800

08001114 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001118:	b672      	cpsid	i
}
 800111a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800111c:	bf00      	nop
 800111e:	e7fd      	b.n	800111c <Error_Handler+0x8>

08001120 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001126:	4b0f      	ldr	r3, [pc, #60]	@ (8001164 <HAL_MspInit+0x44>)
 8001128:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800112a:	4a0e      	ldr	r2, [pc, #56]	@ (8001164 <HAL_MspInit+0x44>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6613      	str	r3, [r2, #96]	@ 0x60
 8001132:	4b0c      	ldr	r3, [pc, #48]	@ (8001164 <HAL_MspInit+0x44>)
 8001134:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800113e:	4b09      	ldr	r3, [pc, #36]	@ (8001164 <HAL_MspInit+0x44>)
 8001140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001142:	4a08      	ldr	r2, [pc, #32]	@ (8001164 <HAL_MspInit+0x44>)
 8001144:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001148:	6593      	str	r3, [r2, #88]	@ 0x58
 800114a:	4b06      	ldr	r3, [pc, #24]	@ (8001164 <HAL_MspInit+0x44>)
 800114c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800114e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001152:	603b      	str	r3, [r7, #0]
 8001154:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	40021000 	.word	0x40021000

08001168 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08c      	sub	sp, #48	@ 0x30
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	f107 031c 	add.w	r3, r7, #28
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a33      	ldr	r2, [pc, #204]	@ (8001254 <HAL_ADC_MspInit+0xec>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d12d      	bne.n	80011e6 <HAL_ADC_MspInit+0x7e>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 800118a:	4b33      	ldr	r3, [pc, #204]	@ (8001258 <HAL_ADC_MspInit+0xf0>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	3301      	adds	r3, #1
 8001190:	4a31      	ldr	r2, [pc, #196]	@ (8001258 <HAL_ADC_MspInit+0xf0>)
 8001192:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001194:	4b30      	ldr	r3, [pc, #192]	@ (8001258 <HAL_ADC_MspInit+0xf0>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b01      	cmp	r3, #1
 800119a:	d10b      	bne.n	80011b4 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 800119c:	4b2f      	ldr	r3, [pc, #188]	@ (800125c <HAL_ADC_MspInit+0xf4>)
 800119e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a0:	4a2e      	ldr	r2, [pc, #184]	@ (800125c <HAL_ADC_MspInit+0xf4>)
 80011a2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80011a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011a8:	4b2c      	ldr	r3, [pc, #176]	@ (800125c <HAL_ADC_MspInit+0xf4>)
 80011aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011b0:	61bb      	str	r3, [r7, #24]
 80011b2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011b4:	4b29      	ldr	r3, [pc, #164]	@ (800125c <HAL_ADC_MspInit+0xf4>)
 80011b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b8:	4a28      	ldr	r2, [pc, #160]	@ (800125c <HAL_ADC_MspInit+0xf4>)
 80011ba:	f043 0304 	orr.w	r3, r3, #4
 80011be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011c0:	4b26      	ldr	r3, [pc, #152]	@ (800125c <HAL_ADC_MspInit+0xf4>)
 80011c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c4:	f003 0304 	and.w	r3, r3, #4
 80011c8:	617b      	str	r3, [r7, #20]
 80011ca:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011cc:	2301      	movs	r3, #1
 80011ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80011d0:	230b      	movs	r3, #11
 80011d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011d8:	f107 031c 	add.w	r3, r7, #28
 80011dc:	4619      	mov	r1, r3
 80011de:	4820      	ldr	r0, [pc, #128]	@ (8001260 <HAL_ADC_MspInit+0xf8>)
 80011e0:	f001 feb4 	bl	8002f4c <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 80011e4:	e031      	b.n	800124a <HAL_ADC_MspInit+0xe2>
  else if(hadc->Instance==ADC2)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a1e      	ldr	r2, [pc, #120]	@ (8001264 <HAL_ADC_MspInit+0xfc>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d12c      	bne.n	800124a <HAL_ADC_MspInit+0xe2>
    HAL_RCC_ADC_CLK_ENABLED++;
 80011f0:	4b19      	ldr	r3, [pc, #100]	@ (8001258 <HAL_ADC_MspInit+0xf0>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	3301      	adds	r3, #1
 80011f6:	4a18      	ldr	r2, [pc, #96]	@ (8001258 <HAL_ADC_MspInit+0xf0>)
 80011f8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80011fa:	4b17      	ldr	r3, [pc, #92]	@ (8001258 <HAL_ADC_MspInit+0xf0>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d10b      	bne.n	800121a <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001202:	4b16      	ldr	r3, [pc, #88]	@ (800125c <HAL_ADC_MspInit+0xf4>)
 8001204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001206:	4a15      	ldr	r2, [pc, #84]	@ (800125c <HAL_ADC_MspInit+0xf4>)
 8001208:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800120c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800120e:	4b13      	ldr	r3, [pc, #76]	@ (800125c <HAL_ADC_MspInit+0xf4>)
 8001210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001212:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800121a:	4b10      	ldr	r3, [pc, #64]	@ (800125c <HAL_ADC_MspInit+0xf4>)
 800121c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800121e:	4a0f      	ldr	r2, [pc, #60]	@ (800125c <HAL_ADC_MspInit+0xf4>)
 8001220:	f043 0304 	orr.w	r3, r3, #4
 8001224:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001226:	4b0d      	ldr	r3, [pc, #52]	@ (800125c <HAL_ADC_MspInit+0xf4>)
 8001228:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800122a:	f003 0304 	and.w	r3, r3, #4
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001232:	2302      	movs	r3, #2
 8001234:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001236:	230b      	movs	r3, #11
 8001238:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800123e:	f107 031c 	add.w	r3, r7, #28
 8001242:	4619      	mov	r1, r3
 8001244:	4806      	ldr	r0, [pc, #24]	@ (8001260 <HAL_ADC_MspInit+0xf8>)
 8001246:	f001 fe81 	bl	8002f4c <HAL_GPIO_Init>
}
 800124a:	bf00      	nop
 800124c:	3730      	adds	r7, #48	@ 0x30
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	50040000 	.word	0x50040000
 8001258:	200003cc 	.word	0x200003cc
 800125c:	40021000 	.word	0x40021000
 8001260:	48000800 	.word	0x48000800
 8001264:	50040100 	.word	0x50040100

08001268 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b0ac      	sub	sp, #176	@ 0xb0
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001270:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	2288      	movs	r2, #136	@ 0x88
 8001286:	2100      	movs	r1, #0
 8001288:	4618      	mov	r0, r3
 800128a:	f004 fbcf 	bl	8005a2c <memset>
  if(hi2c->Instance==I2C1)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a21      	ldr	r2, [pc, #132]	@ (8001318 <HAL_I2C_MspInit+0xb0>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d13b      	bne.n	8001310 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001298:	2340      	movs	r3, #64	@ 0x40
 800129a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800129c:	2300      	movs	r3, #0
 800129e:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	4618      	mov	r0, r3
 80012a6:	f002 ffd9 	bl	800425c <HAL_RCCEx_PeriphCLKConfig>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80012b0:	f7ff ff30 	bl	8001114 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b4:	4b19      	ldr	r3, [pc, #100]	@ (800131c <HAL_I2C_MspInit+0xb4>)
 80012b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b8:	4a18      	ldr	r2, [pc, #96]	@ (800131c <HAL_I2C_MspInit+0xb4>)
 80012ba:	f043 0302 	orr.w	r3, r3, #2
 80012be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012c0:	4b16      	ldr	r3, [pc, #88]	@ (800131c <HAL_I2C_MspInit+0xb4>)
 80012c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c4:	f003 0302 	and.w	r3, r3, #2
 80012c8:	613b      	str	r3, [r7, #16]
 80012ca:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80012cc:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80012d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012d4:	2312      	movs	r3, #18
 80012d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e0:	2303      	movs	r3, #3
 80012e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012e6:	2304      	movs	r3, #4
 80012e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ec:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012f0:	4619      	mov	r1, r3
 80012f2:	480b      	ldr	r0, [pc, #44]	@ (8001320 <HAL_I2C_MspInit+0xb8>)
 80012f4:	f001 fe2a 	bl	8002f4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012f8:	4b08      	ldr	r3, [pc, #32]	@ (800131c <HAL_I2C_MspInit+0xb4>)
 80012fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012fc:	4a07      	ldr	r2, [pc, #28]	@ (800131c <HAL_I2C_MspInit+0xb4>)
 80012fe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001302:	6593      	str	r3, [r2, #88]	@ 0x58
 8001304:	4b05      	ldr	r3, [pc, #20]	@ (800131c <HAL_I2C_MspInit+0xb4>)
 8001306:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001308:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001310:	bf00      	nop
 8001312:	37b0      	adds	r7, #176	@ 0xb0
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40005400 	.word	0x40005400
 800131c:	40021000 	.word	0x40021000
 8001320:	48000400 	.word	0x48000400

08001324 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b0b2      	sub	sp, #200	@ 0xc8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132c:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800133c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001340:	2288      	movs	r2, #136	@ 0x88
 8001342:	2100      	movs	r1, #0
 8001344:	4618      	mov	r0, r3
 8001346:	f004 fb71 	bl	8005a2c <memset>
  if(huart->Instance==UART4)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a84      	ldr	r2, [pc, #528]	@ (8001560 <HAL_UART_MspInit+0x23c>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d13c      	bne.n	80013ce <HAL_UART_MspInit+0xaa>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001354:	2308      	movs	r3, #8
 8001356:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001358:	2300      	movs	r3, #0
 800135a:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800135c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001360:	4618      	mov	r0, r3
 8001362:	f002 ff7b 	bl	800425c <HAL_RCCEx_PeriphCLKConfig>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800136c:	f7ff fed2 	bl	8001114 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001370:	4b7c      	ldr	r3, [pc, #496]	@ (8001564 <HAL_UART_MspInit+0x240>)
 8001372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001374:	4a7b      	ldr	r2, [pc, #492]	@ (8001564 <HAL_UART_MspInit+0x240>)
 8001376:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800137a:	6593      	str	r3, [r2, #88]	@ 0x58
 800137c:	4b79      	ldr	r3, [pc, #484]	@ (8001564 <HAL_UART_MspInit+0x240>)
 800137e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001380:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001384:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001386:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001388:	4b76      	ldr	r3, [pc, #472]	@ (8001564 <HAL_UART_MspInit+0x240>)
 800138a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138c:	4a75      	ldr	r2, [pc, #468]	@ (8001564 <HAL_UART_MspInit+0x240>)
 800138e:	f043 0301 	orr.w	r3, r3, #1
 8001392:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001394:	4b73      	ldr	r3, [pc, #460]	@ (8001564 <HAL_UART_MspInit+0x240>)
 8001396:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	627b      	str	r3, [r7, #36]	@ 0x24
 800139e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80013a0:	2303      	movs	r3, #3
 80013a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a6:	2302      	movs	r3, #2
 80013a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b2:	2303      	movs	r3, #3
 80013b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80013b8:	2308      	movs	r3, #8
 80013ba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013be:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80013c2:	4619      	mov	r1, r3
 80013c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013c8:	f001 fdc0 	bl	8002f4c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 80013cc:	e0c4      	b.n	8001558 <HAL_UART_MspInit+0x234>
  else if(huart->Instance==USART1)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a65      	ldr	r2, [pc, #404]	@ (8001568 <HAL_UART_MspInit+0x244>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d13d      	bne.n	8001454 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80013d8:	2301      	movs	r3, #1
 80013da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80013dc:	2300      	movs	r3, #0
 80013de:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013e0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013e4:	4618      	mov	r0, r3
 80013e6:	f002 ff39 	bl	800425c <HAL_RCCEx_PeriphCLKConfig>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 80013f0:	f7ff fe90 	bl	8001114 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80013f4:	4b5b      	ldr	r3, [pc, #364]	@ (8001564 <HAL_UART_MspInit+0x240>)
 80013f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013f8:	4a5a      	ldr	r2, [pc, #360]	@ (8001564 <HAL_UART_MspInit+0x240>)
 80013fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013fe:	6613      	str	r3, [r2, #96]	@ 0x60
 8001400:	4b58      	ldr	r3, [pc, #352]	@ (8001564 <HAL_UART_MspInit+0x240>)
 8001402:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001404:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001408:	623b      	str	r3, [r7, #32]
 800140a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140c:	4b55      	ldr	r3, [pc, #340]	@ (8001564 <HAL_UART_MspInit+0x240>)
 800140e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001410:	4a54      	ldr	r2, [pc, #336]	@ (8001564 <HAL_UART_MspInit+0x240>)
 8001412:	f043 0301 	orr.w	r3, r3, #1
 8001416:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001418:	4b52      	ldr	r3, [pc, #328]	@ (8001564 <HAL_UART_MspInit+0x240>)
 800141a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800141c:	f003 0301 	and.w	r3, r3, #1
 8001420:	61fb      	str	r3, [r7, #28]
 8001422:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001424:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001428:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142c:	2302      	movs	r3, #2
 800142e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001438:	2303      	movs	r3, #3
 800143a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800143e:	2307      	movs	r3, #7
 8001440:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001444:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001448:	4619      	mov	r1, r3
 800144a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800144e:	f001 fd7d 	bl	8002f4c <HAL_GPIO_Init>
}
 8001452:	e081      	b.n	8001558 <HAL_UART_MspInit+0x234>
  else if(huart->Instance==USART2)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a44      	ldr	r2, [pc, #272]	@ (800156c <HAL_UART_MspInit+0x248>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d13c      	bne.n	80014d8 <HAL_UART_MspInit+0x1b4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800145e:	2302      	movs	r3, #2
 8001460:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001462:	2300      	movs	r3, #0
 8001464:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001466:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800146a:	4618      	mov	r0, r3
 800146c:	f002 fef6 	bl	800425c <HAL_RCCEx_PeriphCLKConfig>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <HAL_UART_MspInit+0x156>
      Error_Handler();
 8001476:	f7ff fe4d 	bl	8001114 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800147a:	4b3a      	ldr	r3, [pc, #232]	@ (8001564 <HAL_UART_MspInit+0x240>)
 800147c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800147e:	4a39      	ldr	r2, [pc, #228]	@ (8001564 <HAL_UART_MspInit+0x240>)
 8001480:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001484:	6593      	str	r3, [r2, #88]	@ 0x58
 8001486:	4b37      	ldr	r3, [pc, #220]	@ (8001564 <HAL_UART_MspInit+0x240>)
 8001488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800148a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800148e:	61bb      	str	r3, [r7, #24]
 8001490:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001492:	4b34      	ldr	r3, [pc, #208]	@ (8001564 <HAL_UART_MspInit+0x240>)
 8001494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001496:	4a33      	ldr	r2, [pc, #204]	@ (8001564 <HAL_UART_MspInit+0x240>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800149e:	4b31      	ldr	r3, [pc, #196]	@ (8001564 <HAL_UART_MspInit+0x240>)
 80014a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	617b      	str	r3, [r7, #20]
 80014a8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014aa:	230c      	movs	r3, #12
 80014ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b0:	2302      	movs	r3, #2
 80014b2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014bc:	2303      	movs	r3, #3
 80014be:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014c2:	2307      	movs	r3, #7
 80014c4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c8:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80014cc:	4619      	mov	r1, r3
 80014ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014d2:	f001 fd3b 	bl	8002f4c <HAL_GPIO_Init>
}
 80014d6:	e03f      	b.n	8001558 <HAL_UART_MspInit+0x234>
  else if(huart->Instance==USART3)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a24      	ldr	r2, [pc, #144]	@ (8001570 <HAL_UART_MspInit+0x24c>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d13a      	bne.n	8001558 <HAL_UART_MspInit+0x234>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80014e2:	2304      	movs	r3, #4
 80014e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80014e6:	2300      	movs	r3, #0
 80014e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014ee:	4618      	mov	r0, r3
 80014f0:	f002 feb4 	bl	800425c <HAL_RCCEx_PeriphCLKConfig>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <HAL_UART_MspInit+0x1da>
      Error_Handler();
 80014fa:	f7ff fe0b 	bl	8001114 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80014fe:	4b19      	ldr	r3, [pc, #100]	@ (8001564 <HAL_UART_MspInit+0x240>)
 8001500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001502:	4a18      	ldr	r2, [pc, #96]	@ (8001564 <HAL_UART_MspInit+0x240>)
 8001504:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001508:	6593      	str	r3, [r2, #88]	@ 0x58
 800150a:	4b16      	ldr	r3, [pc, #88]	@ (8001564 <HAL_UART_MspInit+0x240>)
 800150c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800150e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001512:	613b      	str	r3, [r7, #16]
 8001514:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001516:	4b13      	ldr	r3, [pc, #76]	@ (8001564 <HAL_UART_MspInit+0x240>)
 8001518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800151a:	4a12      	ldr	r2, [pc, #72]	@ (8001564 <HAL_UART_MspInit+0x240>)
 800151c:	f043 0304 	orr.w	r3, r3, #4
 8001520:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001522:	4b10      	ldr	r3, [pc, #64]	@ (8001564 <HAL_UART_MspInit+0x240>)
 8001524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001526:	f003 0304 	and.w	r3, r3, #4
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800152e:	2330      	movs	r3, #48	@ 0x30
 8001530:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001534:	2302      	movs	r3, #2
 8001536:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001540:	2303      	movs	r3, #3
 8001542:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001546:	2307      	movs	r3, #7
 8001548:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800154c:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001550:	4619      	mov	r1, r3
 8001552:	4808      	ldr	r0, [pc, #32]	@ (8001574 <HAL_UART_MspInit+0x250>)
 8001554:	f001 fcfa 	bl	8002f4c <HAL_GPIO_Init>
}
 8001558:	bf00      	nop
 800155a:	37c8      	adds	r7, #200	@ 0xc8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40004c00 	.word	0x40004c00
 8001564:	40021000 	.word	0x40021000
 8001568:	40013800 	.word	0x40013800
 800156c:	40004400 	.word	0x40004400
 8001570:	40004800 	.word	0x40004800
 8001574:	48000800 	.word	0x48000800

08001578 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800157c:	bf00      	nop
 800157e:	e7fd      	b.n	800157c <NMI_Handler+0x4>

08001580 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001584:	bf00      	nop
 8001586:	e7fd      	b.n	8001584 <HardFault_Handler+0x4>

08001588 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800158c:	bf00      	nop
 800158e:	e7fd      	b.n	800158c <MemManage_Handler+0x4>

08001590 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001594:	bf00      	nop
 8001596:	e7fd      	b.n	8001594 <BusFault_Handler+0x4>

08001598 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800159c:	bf00      	nop
 800159e:	e7fd      	b.n	800159c <UsageFault_Handler+0x4>

080015a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ae:	b480      	push	{r7}
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015ce:	f000 f945 	bl	800185c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80015da:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80015de:	f001 fe8f 	bl	8003300 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b086      	sub	sp, #24
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	60f8      	str	r0, [r7, #12]
 80015ee:	60b9      	str	r1, [r7, #8]
 80015f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f2:	2300      	movs	r3, #0
 80015f4:	617b      	str	r3, [r7, #20]
 80015f6:	e00a      	b.n	800160e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015f8:	f3af 8000 	nop.w
 80015fc:	4601      	mov	r1, r0
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	1c5a      	adds	r2, r3, #1
 8001602:	60ba      	str	r2, [r7, #8]
 8001604:	b2ca      	uxtb	r2, r1
 8001606:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	3301      	adds	r3, #1
 800160c:	617b      	str	r3, [r7, #20]
 800160e:	697a      	ldr	r2, [r7, #20]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	429a      	cmp	r2, r3
 8001614:	dbf0      	blt.n	80015f8 <_read+0x12>
  }

  return len;
 8001616:	687b      	ldr	r3, [r7, #4]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3718      	adds	r7, #24
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]
 8001630:	e009      	b.n	8001646 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	1c5a      	adds	r2, r3, #1
 8001636:	60ba      	str	r2, [r7, #8]
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	4618      	mov	r0, r3
 800163c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	3301      	adds	r3, #1
 8001644:	617b      	str	r3, [r7, #20]
 8001646:	697a      	ldr	r2, [r7, #20]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	429a      	cmp	r2, r3
 800164c:	dbf1      	blt.n	8001632 <_write+0x12>
  }
  return len;
 800164e:	687b      	ldr	r3, [r7, #4]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3718      	adds	r7, #24
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <_close>:

int _close(int file)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001660:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001664:	4618      	mov	r0, r3
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001680:	605a      	str	r2, [r3, #4]
  return 0;
 8001682:	2300      	movs	r3, #0
}
 8001684:	4618      	mov	r0, r3
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <_isatty>:

int _isatty(int file)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001698:	2301      	movs	r3, #1
}
 800169a:	4618      	mov	r0, r3
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016a6:	b480      	push	{r7}
 80016a8:	b085      	sub	sp, #20
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	60f8      	str	r0, [r7, #12]
 80016ae:	60b9      	str	r1, [r7, #8]
 80016b0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016c8:	4a14      	ldr	r2, [pc, #80]	@ (800171c <_sbrk+0x5c>)
 80016ca:	4b15      	ldr	r3, [pc, #84]	@ (8001720 <_sbrk+0x60>)
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016d4:	4b13      	ldr	r3, [pc, #76]	@ (8001724 <_sbrk+0x64>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d102      	bne.n	80016e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016dc:	4b11      	ldr	r3, [pc, #68]	@ (8001724 <_sbrk+0x64>)
 80016de:	4a12      	ldr	r2, [pc, #72]	@ (8001728 <_sbrk+0x68>)
 80016e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016e2:	4b10      	ldr	r3, [pc, #64]	@ (8001724 <_sbrk+0x64>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4413      	add	r3, r2
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d207      	bcs.n	8001700 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016f0:	f004 f9ea 	bl	8005ac8 <__errno>
 80016f4:	4603      	mov	r3, r0
 80016f6:	220c      	movs	r2, #12
 80016f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016fa:	f04f 33ff 	mov.w	r3, #4294967295
 80016fe:	e009      	b.n	8001714 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001700:	4b08      	ldr	r3, [pc, #32]	@ (8001724 <_sbrk+0x64>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001706:	4b07      	ldr	r3, [pc, #28]	@ (8001724 <_sbrk+0x64>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4413      	add	r3, r2
 800170e:	4a05      	ldr	r2, [pc, #20]	@ (8001724 <_sbrk+0x64>)
 8001710:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001712:	68fb      	ldr	r3, [r7, #12]
}
 8001714:	4618      	mov	r0, r3
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20018000 	.word	0x20018000
 8001720:	00000400 	.word	0x00000400
 8001724:	200003d0 	.word	0x200003d0
 8001728:	20000528 	.word	0x20000528

0800172c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001730:	4b06      	ldr	r3, [pc, #24]	@ (800174c <SystemInit+0x20>)
 8001732:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001736:	4a05      	ldr	r2, [pc, #20]	@ (800174c <SystemInit+0x20>)
 8001738:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800173c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001750:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001788 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001754:	f7ff ffea 	bl	800172c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001758:	480c      	ldr	r0, [pc, #48]	@ (800178c <LoopForever+0x6>)
  ldr r1, =_edata
 800175a:	490d      	ldr	r1, [pc, #52]	@ (8001790 <LoopForever+0xa>)
  ldr r2, =_sidata
 800175c:	4a0d      	ldr	r2, [pc, #52]	@ (8001794 <LoopForever+0xe>)
  movs r3, #0
 800175e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001760:	e002      	b.n	8001768 <LoopCopyDataInit>

08001762 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001762:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001764:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001766:	3304      	adds	r3, #4

08001768 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001768:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800176a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800176c:	d3f9      	bcc.n	8001762 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800176e:	4a0a      	ldr	r2, [pc, #40]	@ (8001798 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001770:	4c0a      	ldr	r4, [pc, #40]	@ (800179c <LoopForever+0x16>)
  movs r3, #0
 8001772:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001774:	e001      	b.n	800177a <LoopFillZerobss>

08001776 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001776:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001778:	3204      	adds	r2, #4

0800177a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800177a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800177c:	d3fb      	bcc.n	8001776 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800177e:	f004 f9a9 	bl	8005ad4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001782:	f7ff f96f 	bl	8000a64 <main>

08001786 <LoopForever>:

LoopForever:
    b LoopForever
 8001786:	e7fe      	b.n	8001786 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001788:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800178c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001790:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001794:	08006704 	.word	0x08006704
  ldr r2, =_sbss
 8001798:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800179c:	20000524 	.word	0x20000524

080017a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017a0:	e7fe      	b.n	80017a0 <ADC1_2_IRQHandler>
	...

080017a4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017aa:	2300      	movs	r3, #0
 80017ac:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017ae:	4b0c      	ldr	r3, [pc, #48]	@ (80017e0 <HAL_Init+0x3c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a0b      	ldr	r2, [pc, #44]	@ (80017e0 <HAL_Init+0x3c>)
 80017b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017b8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ba:	2003      	movs	r0, #3
 80017bc:	f001 fb84 	bl	8002ec8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017c0:	2000      	movs	r0, #0
 80017c2:	f000 f80f 	bl	80017e4 <HAL_InitTick>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d002      	beq.n	80017d2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	71fb      	strb	r3, [r7, #7]
 80017d0:	e001      	b.n	80017d6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017d2:	f7ff fca5 	bl	8001120 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017d6:	79fb      	ldrb	r3, [r7, #7]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40022000 	.word	0x40022000

080017e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017ec:	2300      	movs	r3, #0
 80017ee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80017f0:	4b17      	ldr	r3, [pc, #92]	@ (8001850 <HAL_InitTick+0x6c>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d023      	beq.n	8001840 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80017f8:	4b16      	ldr	r3, [pc, #88]	@ (8001854 <HAL_InitTick+0x70>)
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	4b14      	ldr	r3, [pc, #80]	@ (8001850 <HAL_InitTick+0x6c>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	4619      	mov	r1, r3
 8001802:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001806:	fbb3 f3f1 	udiv	r3, r3, r1
 800180a:	fbb2 f3f3 	udiv	r3, r2, r3
 800180e:	4618      	mov	r0, r3
 8001810:	f001 fb8f 	bl	8002f32 <HAL_SYSTICK_Config>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d10f      	bne.n	800183a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2b0f      	cmp	r3, #15
 800181e:	d809      	bhi.n	8001834 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001820:	2200      	movs	r2, #0
 8001822:	6879      	ldr	r1, [r7, #4]
 8001824:	f04f 30ff 	mov.w	r0, #4294967295
 8001828:	f001 fb59 	bl	8002ede <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800182c:	4a0a      	ldr	r2, [pc, #40]	@ (8001858 <HAL_InitTick+0x74>)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	e007      	b.n	8001844 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	73fb      	strb	r3, [r7, #15]
 8001838:	e004      	b.n	8001844 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	73fb      	strb	r3, [r7, #15]
 800183e:	e001      	b.n	8001844 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001844:	7bfb      	ldrb	r3, [r7, #15]
}
 8001846:	4618      	mov	r0, r3
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	2000000c 	.word	0x2000000c
 8001854:	20000004 	.word	0x20000004
 8001858:	20000008 	.word	0x20000008

0800185c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001860:	4b06      	ldr	r3, [pc, #24]	@ (800187c <HAL_IncTick+0x20>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	461a      	mov	r2, r3
 8001866:	4b06      	ldr	r3, [pc, #24]	@ (8001880 <HAL_IncTick+0x24>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4413      	add	r3, r2
 800186c:	4a04      	ldr	r2, [pc, #16]	@ (8001880 <HAL_IncTick+0x24>)
 800186e:	6013      	str	r3, [r2, #0]
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	2000000c 	.word	0x2000000c
 8001880:	200003d4 	.word	0x200003d4

08001884 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  return uwTick;
 8001888:	4b03      	ldr	r3, [pc, #12]	@ (8001898 <HAL_GetTick+0x14>)
 800188a:	681b      	ldr	r3, [r3, #0]
}
 800188c:	4618      	mov	r0, r3
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	200003d4 	.word	0x200003d4

0800189c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018a4:	f7ff ffee 	bl	8001884 <HAL_GetTick>
 80018a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b4:	d005      	beq.n	80018c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80018b6:	4b0a      	ldr	r3, [pc, #40]	@ (80018e0 <HAL_Delay+0x44>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	461a      	mov	r2, r3
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	4413      	add	r3, r2
 80018c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018c2:	bf00      	nop
 80018c4:	f7ff ffde 	bl	8001884 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	68fa      	ldr	r2, [r7, #12]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d8f7      	bhi.n	80018c4 <HAL_Delay+0x28>
  {
  }
}
 80018d4:	bf00      	nop
 80018d6:	bf00      	nop
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	2000000c 	.word	0x2000000c

080018e4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	431a      	orrs	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	609a      	str	r2, [r3, #8]
}
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr

0800190a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800190a:	b480      	push	{r7}
 800190c:	b083      	sub	sp, #12
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
 8001912:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	431a      	orrs	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	609a      	str	r2, [r3, #8]
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001940:	4618      	mov	r0, r3
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800194c:	b480      	push	{r7}
 800194e:	b087      	sub	sp, #28
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
 8001958:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	3360      	adds	r3, #96	@ 0x60
 800195e:	461a      	mov	r2, r3
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	4413      	add	r3, r2
 8001966:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	4b08      	ldr	r3, [pc, #32]	@ (8001990 <LL_ADC_SetOffset+0x44>)
 800196e:	4013      	ands	r3, r2
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	430a      	orrs	r2, r1
 800197a:	4313      	orrs	r3, r2
 800197c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001984:	bf00      	nop
 8001986:	371c      	adds	r7, #28
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	03fff000 	.word	0x03fff000

08001994 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	3360      	adds	r3, #96	@ 0x60
 80019a2:	461a      	mov	r2, r3
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	4413      	add	r3, r2
 80019aa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b087      	sub	sp, #28
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	3360      	adds	r3, #96	@ 0x60
 80019d0:	461a      	mov	r2, r3
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	4413      	add	r3, r2
 80019d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	431a      	orrs	r2, r3
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80019ea:	bf00      	nop
 80019ec:	371c      	adds	r7, #28
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr

080019f6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80019f6:	b480      	push	{r7}
 80019f8:	b083      	sub	sp, #12
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e000      	b.n	8001a10 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b087      	sub	sp, #28
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	3330      	adds	r3, #48	@ 0x30
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	0a1b      	lsrs	r3, r3, #8
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	f003 030c 	and.w	r3, r3, #12
 8001a38:	4413      	add	r3, r2
 8001a3a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	f003 031f 	and.w	r3, r3, #31
 8001a46:	211f      	movs	r1, #31
 8001a48:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	401a      	ands	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	0e9b      	lsrs	r3, r3, #26
 8001a54:	f003 011f 	and.w	r1, r3, #31
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	f003 031f 	and.w	r3, r3, #31
 8001a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a62:	431a      	orrs	r2, r3
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a68:	bf00      	nop
 8001a6a:	371c      	adds	r7, #28
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b087      	sub	sp, #28
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	3314      	adds	r3, #20
 8001a84:	461a      	mov	r2, r3
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	0e5b      	lsrs	r3, r3, #25
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	4413      	add	r3, r2
 8001a92:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	0d1b      	lsrs	r3, r3, #20
 8001a9c:	f003 031f 	and.w	r3, r3, #31
 8001aa0:	2107      	movs	r1, #7
 8001aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	401a      	ands	r2, r3
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	0d1b      	lsrs	r3, r3, #20
 8001aae:	f003 031f 	and.w	r3, r3, #31
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab8:	431a      	orrs	r2, r3
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001abe:	bf00      	nop
 8001ac0:	371c      	adds	r7, #28
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
	...

08001acc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	401a      	ands	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f003 0318 	and.w	r3, r3, #24
 8001aee:	4908      	ldr	r1, [pc, #32]	@ (8001b10 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001af0:	40d9      	lsrs	r1, r3
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	400b      	ands	r3, r1
 8001af6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001afa:	431a      	orrs	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001b02:	bf00      	nop
 8001b04:	3714      	adds	r7, #20
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	0007ffff 	.word	0x0007ffff

08001b14 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f003 031f 	and.w	r3, r3, #31
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001b5c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	6093      	str	r3, [r2, #8]
}
 8001b64:	bf00      	nop
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b84:	d101      	bne.n	8001b8a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b86:	2301      	movs	r3, #1
 8001b88:	e000      	b.n	8001b8c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001ba8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001bac:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bd0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001bd4:	d101      	bne.n	8001bda <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e000      	b.n	8001bdc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001bf8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001bfc:	f043 0201 	orr.w	r2, r3, #1
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f003 0301 	and.w	r3, r3, #1
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d101      	bne.n	8001c28 <LL_ADC_IsEnabled+0x18>
 8001c24:	2301      	movs	r3, #1
 8001c26:	e000      	b.n	8001c2a <LL_ADC_IsEnabled+0x1a>
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001c46:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c4a:	f043 0204 	orr.w	r2, r3, #4
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b083      	sub	sp, #12
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 0304 	and.w	r3, r3, #4
 8001c6e:	2b04      	cmp	r3, #4
 8001c70:	d101      	bne.n	8001c76 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c72:	2301      	movs	r3, #1
 8001c74:	e000      	b.n	8001c78 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f003 0308 	and.w	r3, r3, #8
 8001c94:	2b08      	cmp	r3, #8
 8001c96:	d101      	bne.n	8001c9c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e000      	b.n	8001c9e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
	...

08001cac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001cac:	b590      	push	{r4, r7, lr}
 8001cae:	b089      	sub	sp, #36	@ 0x24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d101      	bne.n	8001cc6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e130      	b.n	8001f28 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d109      	bne.n	8001ce8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f7ff fa47 	bl	8001168 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff ff3f 	bl	8001b70 <LL_ADC_IsDeepPowerDownEnabled>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d004      	beq.n	8001d02 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff ff25 	bl	8001b4c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff ff5a 	bl	8001bc0 <LL_ADC_IsInternalRegulatorEnabled>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d115      	bne.n	8001d3e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff ff3e 	bl	8001b98 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d1c:	4b84      	ldr	r3, [pc, #528]	@ (8001f30 <HAL_ADC_Init+0x284>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	099b      	lsrs	r3, r3, #6
 8001d22:	4a84      	ldr	r2, [pc, #528]	@ (8001f34 <HAL_ADC_Init+0x288>)
 8001d24:	fba2 2303 	umull	r2, r3, r2, r3
 8001d28:	099b      	lsrs	r3, r3, #6
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d30:	e002      	b.n	8001d38 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	3b01      	subs	r3, #1
 8001d36:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1f9      	bne.n	8001d32 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff ff3c 	bl	8001bc0 <LL_ADC_IsInternalRegulatorEnabled>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d10d      	bne.n	8001d6a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d52:	f043 0210 	orr.w	r2, r3, #16
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d5e:	f043 0201 	orr.w	r2, r3, #1
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff ff75 	bl	8001c5e <LL_ADC_REG_IsConversionOngoing>
 8001d74:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d7a:	f003 0310 	and.w	r3, r3, #16
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f040 80c9 	bne.w	8001f16 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f040 80c5 	bne.w	8001f16 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d90:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001d94:	f043 0202 	orr.w	r2, r3, #2
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff ff35 	bl	8001c10 <LL_ADC_IsEnabled>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d115      	bne.n	8001dd8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001dac:	4862      	ldr	r0, [pc, #392]	@ (8001f38 <HAL_ADC_Init+0x28c>)
 8001dae:	f7ff ff2f 	bl	8001c10 <LL_ADC_IsEnabled>
 8001db2:	4604      	mov	r4, r0
 8001db4:	4861      	ldr	r0, [pc, #388]	@ (8001f3c <HAL_ADC_Init+0x290>)
 8001db6:	f7ff ff2b 	bl	8001c10 <LL_ADC_IsEnabled>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	431c      	orrs	r4, r3
 8001dbe:	4860      	ldr	r0, [pc, #384]	@ (8001f40 <HAL_ADC_Init+0x294>)
 8001dc0:	f7ff ff26 	bl	8001c10 <LL_ADC_IsEnabled>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	4323      	orrs	r3, r4
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d105      	bne.n	8001dd8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	485c      	ldr	r0, [pc, #368]	@ (8001f44 <HAL_ADC_Init+0x298>)
 8001dd4:	f7ff fd86 	bl	80018e4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	7e5b      	ldrb	r3, [r3, #25]
 8001ddc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001de2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001de8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001dee:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001df6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d106      	bne.n	8001e14 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	045b      	lsls	r3, r3, #17
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d009      	beq.n	8001e30 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e20:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e28:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68da      	ldr	r2, [r3, #12]
 8001e36:	4b44      	ldr	r3, [pc, #272]	@ (8001f48 <HAL_ADC_Init+0x29c>)
 8001e38:	4013      	ands	r3, r2
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6812      	ldr	r2, [r2, #0]
 8001e3e:	69b9      	ldr	r1, [r7, #24]
 8001e40:	430b      	orrs	r3, r1
 8001e42:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff ff1b 	bl	8001c84 <LL_ADC_INJ_IsConversionOngoing>
 8001e4e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d13d      	bne.n	8001ed2 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d13a      	bne.n	8001ed2 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e60:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001e68:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001e78:	f023 0302 	bic.w	r3, r3, #2
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	6812      	ldr	r2, [r2, #0]
 8001e80:	69b9      	ldr	r1, [r7, #24]
 8001e82:	430b      	orrs	r3, r1
 8001e84:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d118      	bne.n	8001ec2 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001e9a:	f023 0304 	bic.w	r3, r3, #4
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001ea6:	4311      	orrs	r1, r2
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001eac:	4311      	orrs	r1, r2
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f042 0201 	orr.w	r2, r2, #1
 8001ebe:	611a      	str	r2, [r3, #16]
 8001ec0:	e007      	b.n	8001ed2 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	691a      	ldr	r2, [r3, #16]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f022 0201 	bic.w	r2, r2, #1
 8001ed0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d10c      	bne.n	8001ef4 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee0:	f023 010f 	bic.w	r1, r3, #15
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	69db      	ldr	r3, [r3, #28]
 8001ee8:	1e5a      	subs	r2, r3, #1
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ef2:	e007      	b.n	8001f04 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f022 020f 	bic.w	r2, r2, #15
 8001f02:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f08:	f023 0303 	bic.w	r3, r3, #3
 8001f0c:	f043 0201 	orr.w	r2, r3, #1
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	655a      	str	r2, [r3, #84]	@ 0x54
 8001f14:	e007      	b.n	8001f26 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f1a:	f043 0210 	orr.w	r2, r3, #16
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f26:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3724      	adds	r7, #36	@ 0x24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd90      	pop	{r4, r7, pc}
 8001f30:	20000004 	.word	0x20000004
 8001f34:	053e2d63 	.word	0x053e2d63
 8001f38:	50040000 	.word	0x50040000
 8001f3c:	50040100 	.word	0x50040100
 8001f40:	50040200 	.word	0x50040200
 8001f44:	50040300 	.word	0x50040300
 8001f48:	fff0c007 	.word	0xfff0c007

08001f4c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f54:	4857      	ldr	r0, [pc, #348]	@ (80020b4 <HAL_ADC_Start+0x168>)
 8001f56:	f7ff fddd 	bl	8001b14 <LL_ADC_GetMultimode>
 8001f5a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff fe7c 	bl	8001c5e <LL_ADC_REG_IsConversionOngoing>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f040 809c 	bne.w	80020a6 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d101      	bne.n	8001f7c <HAL_ADC_Start+0x30>
 8001f78:	2302      	movs	r3, #2
 8001f7a:	e097      	b.n	80020ac <HAL_ADC_Start+0x160>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f000 fd73 	bl	8002a70 <ADC_Enable>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001f8e:	7dfb      	ldrb	r3, [r7, #23]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f040 8083 	bne.w	800209c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f9a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001f9e:	f023 0301 	bic.w	r3, r3, #1
 8001fa2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a42      	ldr	r2, [pc, #264]	@ (80020b8 <HAL_ADC_Start+0x16c>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d002      	beq.n	8001fba <HAL_ADC_Start+0x6e>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	e000      	b.n	8001fbc <HAL_ADC_Start+0x70>
 8001fba:	4b40      	ldr	r3, [pc, #256]	@ (80020bc <HAL_ADC_Start+0x170>)
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	6812      	ldr	r2, [r2, #0]
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d002      	beq.n	8001fca <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d105      	bne.n	8001fd6 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fce:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001fe2:	d106      	bne.n	8001ff2 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fe8:	f023 0206 	bic.w	r2, r3, #6
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	659a      	str	r2, [r3, #88]	@ 0x58
 8001ff0:	e002      	b.n	8001ff8 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	221c      	movs	r2, #28
 8001ffe:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a2a      	ldr	r2, [pc, #168]	@ (80020b8 <HAL_ADC_Start+0x16c>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d002      	beq.n	8002018 <HAL_ADC_Start+0xcc>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	e000      	b.n	800201a <HAL_ADC_Start+0xce>
 8002018:	4b28      	ldr	r3, [pc, #160]	@ (80020bc <HAL_ADC_Start+0x170>)
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	6812      	ldr	r2, [r2, #0]
 800201e:	4293      	cmp	r3, r2
 8002020:	d008      	beq.n	8002034 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d005      	beq.n	8002034 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	2b05      	cmp	r3, #5
 800202c:	d002      	beq.n	8002034 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	2b09      	cmp	r3, #9
 8002032:	d114      	bne.n	800205e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d007      	beq.n	8002052 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002046:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800204a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff fded 	bl	8001c36 <LL_ADC_REG_StartConversion>
 800205c:	e025      	b.n	80020aa <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002062:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a12      	ldr	r2, [pc, #72]	@ (80020b8 <HAL_ADC_Start+0x16c>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d002      	beq.n	800207a <HAL_ADC_Start+0x12e>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	e000      	b.n	800207c <HAL_ADC_Start+0x130>
 800207a:	4b10      	ldr	r3, [pc, #64]	@ (80020bc <HAL_ADC_Start+0x170>)
 800207c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00f      	beq.n	80020aa <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800208e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002092:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	655a      	str	r2, [r3, #84]	@ 0x54
 800209a:	e006      	b.n	80020aa <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80020a4:	e001      	b.n	80020aa <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80020a6:	2302      	movs	r3, #2
 80020a8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80020aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3718      	adds	r7, #24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	50040300 	.word	0x50040300
 80020b8:	50040100 	.word	0x50040100
 80020bc:	50040000 	.word	0x50040000

080020c0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b088      	sub	sp, #32
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020ca:	4866      	ldr	r0, [pc, #408]	@ (8002264 <HAL_ADC_PollForConversion+0x1a4>)
 80020cc:	f7ff fd22 	bl	8001b14 <LL_ADC_GetMultimode>
 80020d0:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	2b08      	cmp	r3, #8
 80020d8:	d102      	bne.n	80020e0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80020da:	2308      	movs	r3, #8
 80020dc:	61fb      	str	r3, [r7, #28]
 80020de:	e02a      	b.n	8002136 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d005      	beq.n	80020f2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	2b05      	cmp	r3, #5
 80020ea:	d002      	beq.n	80020f2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	2b09      	cmp	r3, #9
 80020f0:	d111      	bne.n	8002116 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d007      	beq.n	8002110 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002104:	f043 0220 	orr.w	r2, r3, #32
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e0a4      	b.n	800225a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002110:	2304      	movs	r3, #4
 8002112:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002114:	e00f      	b.n	8002136 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002116:	4853      	ldr	r0, [pc, #332]	@ (8002264 <HAL_ADC_PollForConversion+0x1a4>)
 8002118:	f7ff fd0a 	bl	8001b30 <LL_ADC_GetMultiDMATransfer>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d007      	beq.n	8002132 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002126:	f043 0220 	orr.w	r2, r3, #32
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e093      	b.n	800225a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002132:	2304      	movs	r3, #4
 8002134:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002136:	f7ff fba5 	bl	8001884 <HAL_GetTick>
 800213a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800213c:	e021      	b.n	8002182 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002144:	d01d      	beq.n	8002182 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002146:	f7ff fb9d 	bl	8001884 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	683a      	ldr	r2, [r7, #0]
 8002152:	429a      	cmp	r2, r3
 8002154:	d302      	bcc.n	800215c <HAL_ADC_PollForConversion+0x9c>
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d112      	bne.n	8002182 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	4013      	ands	r3, r2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10b      	bne.n	8002182 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800216e:	f043 0204 	orr.w	r2, r3, #4
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e06b      	b.n	800225a <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	4013      	ands	r3, r2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d0d6      	beq.n	800213e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002194:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff fc28 	bl	80019f6 <LL_ADC_REG_IsTriggerSourceSWStart>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d01c      	beq.n	80021e6 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	7e5b      	ldrb	r3, [r3, #25]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d118      	bne.n	80021e6 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0308 	and.w	r3, r3, #8
 80021be:	2b08      	cmp	r3, #8
 80021c0:	d111      	bne.n	80021e6 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021c6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d105      	bne.n	80021e6 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021de:	f043 0201 	orr.w	r2, r3, #1
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a1f      	ldr	r2, [pc, #124]	@ (8002268 <HAL_ADC_PollForConversion+0x1a8>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d002      	beq.n	80021f6 <HAL_ADC_PollForConversion+0x136>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	e000      	b.n	80021f8 <HAL_ADC_PollForConversion+0x138>
 80021f6:	4b1d      	ldr	r3, [pc, #116]	@ (800226c <HAL_ADC_PollForConversion+0x1ac>)
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	6812      	ldr	r2, [r2, #0]
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d008      	beq.n	8002212 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d005      	beq.n	8002212 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	2b05      	cmp	r3, #5
 800220a:	d002      	beq.n	8002212 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	2b09      	cmp	r3, #9
 8002210:	d104      	bne.n	800221c <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	61bb      	str	r3, [r7, #24]
 800221a:	e00c      	b.n	8002236 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a11      	ldr	r2, [pc, #68]	@ (8002268 <HAL_ADC_PollForConversion+0x1a8>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d002      	beq.n	800222c <HAL_ADC_PollForConversion+0x16c>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	e000      	b.n	800222e <HAL_ADC_PollForConversion+0x16e>
 800222c:	4b0f      	ldr	r3, [pc, #60]	@ (800226c <HAL_ADC_PollForConversion+0x1ac>)
 800222e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	2b08      	cmp	r3, #8
 800223a:	d104      	bne.n	8002246 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2208      	movs	r2, #8
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	e008      	b.n	8002258 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d103      	bne.n	8002258 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	220c      	movs	r2, #12
 8002256:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3720      	adds	r7, #32
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	50040300 	.word	0x50040300
 8002268:	50040100 	.word	0x50040100
 800226c:	50040000 	.word	0x50040000

08002270 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800227e:	4618      	mov	r0, r3
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
	...

0800228c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b0b6      	sub	sp, #216	@ 0xd8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002296:	2300      	movs	r3, #0
 8002298:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800229c:	2300      	movs	r3, #0
 800229e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d101      	bne.n	80022ae <HAL_ADC_ConfigChannel+0x22>
 80022aa:	2302      	movs	r3, #2
 80022ac:	e3c9      	b.n	8002a42 <HAL_ADC_ConfigChannel+0x7b6>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2201      	movs	r2, #1
 80022b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7ff fccf 	bl	8001c5e <LL_ADC_REG_IsConversionOngoing>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f040 83aa 	bne.w	8002a1c <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	2b05      	cmp	r3, #5
 80022d6:	d824      	bhi.n	8002322 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	3b02      	subs	r3, #2
 80022de:	2b03      	cmp	r3, #3
 80022e0:	d81b      	bhi.n	800231a <HAL_ADC_ConfigChannel+0x8e>
 80022e2:	a201      	add	r2, pc, #4	@ (adr r2, 80022e8 <HAL_ADC_ConfigChannel+0x5c>)
 80022e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022e8:	080022f9 	.word	0x080022f9
 80022ec:	08002301 	.word	0x08002301
 80022f0:	08002309 	.word	0x08002309
 80022f4:	08002311 	.word	0x08002311
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80022f8:	230c      	movs	r3, #12
 80022fa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80022fe:	e010      	b.n	8002322 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002300:	2312      	movs	r3, #18
 8002302:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002306:	e00c      	b.n	8002322 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002308:	2318      	movs	r3, #24
 800230a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800230e:	e008      	b.n	8002322 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002310:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002314:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002318:	e003      	b.n	8002322 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800231a:	2306      	movs	r3, #6
 800231c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002320:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6818      	ldr	r0, [r3, #0]
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	461a      	mov	r2, r3
 800232c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002330:	f7ff fb74 	bl	8001a1c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff fc90 	bl	8001c5e <LL_ADC_REG_IsConversionOngoing>
 800233e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff fc9c 	bl	8001c84 <LL_ADC_INJ_IsConversionOngoing>
 800234c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002350:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002354:	2b00      	cmp	r3, #0
 8002356:	f040 81a4 	bne.w	80026a2 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800235a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800235e:	2b00      	cmp	r3, #0
 8002360:	f040 819f 	bne.w	80026a2 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6818      	ldr	r0, [r3, #0]
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	6819      	ldr	r1, [r3, #0]
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	461a      	mov	r2, r3
 8002372:	f7ff fb7f 	bl	8001a74 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	695a      	ldr	r2, [r3, #20]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	08db      	lsrs	r3, r3, #3
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	2b04      	cmp	r3, #4
 8002396:	d00a      	beq.n	80023ae <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6818      	ldr	r0, [r3, #0]
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	6919      	ldr	r1, [r3, #16]
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80023a8:	f7ff fad0 	bl	800194c <LL_ADC_SetOffset>
 80023ac:	e179      	b.n	80026a2 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2100      	movs	r1, #0
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff faed 	bl	8001994 <LL_ADC_GetOffsetChannel>
 80023ba:	4603      	mov	r3, r0
 80023bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d10a      	bne.n	80023da <HAL_ADC_ConfigChannel+0x14e>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2100      	movs	r1, #0
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff fae2 	bl	8001994 <LL_ADC_GetOffsetChannel>
 80023d0:	4603      	mov	r3, r0
 80023d2:	0e9b      	lsrs	r3, r3, #26
 80023d4:	f003 021f 	and.w	r2, r3, #31
 80023d8:	e01e      	b.n	8002418 <HAL_ADC_ConfigChannel+0x18c>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2100      	movs	r1, #0
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff fad7 	bl	8001994 <LL_ADC_GetOffsetChannel>
 80023e6:	4603      	mov	r3, r0
 80023e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80023f0:	fa93 f3a3 	rbit	r3, r3
 80023f4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80023fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002400:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002404:	2b00      	cmp	r3, #0
 8002406:	d101      	bne.n	800240c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002408:	2320      	movs	r3, #32
 800240a:	e004      	b.n	8002416 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800240c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002410:	fab3 f383 	clz	r3, r3
 8002414:	b2db      	uxtb	r3, r3
 8002416:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002420:	2b00      	cmp	r3, #0
 8002422:	d105      	bne.n	8002430 <HAL_ADC_ConfigChannel+0x1a4>
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	0e9b      	lsrs	r3, r3, #26
 800242a:	f003 031f 	and.w	r3, r3, #31
 800242e:	e018      	b.n	8002462 <HAL_ADC_ConfigChannel+0x1d6>
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002438:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800243c:	fa93 f3a3 	rbit	r3, r3
 8002440:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002444:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002448:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800244c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002454:	2320      	movs	r3, #32
 8002456:	e004      	b.n	8002462 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002458:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800245c:	fab3 f383 	clz	r3, r3
 8002460:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002462:	429a      	cmp	r2, r3
 8002464:	d106      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2200      	movs	r2, #0
 800246c:	2100      	movs	r1, #0
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff faa6 	bl	80019c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2101      	movs	r1, #1
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff fa8a 	bl	8001994 <LL_ADC_GetOffsetChannel>
 8002480:	4603      	mov	r3, r0
 8002482:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002486:	2b00      	cmp	r3, #0
 8002488:	d10a      	bne.n	80024a0 <HAL_ADC_ConfigChannel+0x214>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2101      	movs	r1, #1
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff fa7f 	bl	8001994 <LL_ADC_GetOffsetChannel>
 8002496:	4603      	mov	r3, r0
 8002498:	0e9b      	lsrs	r3, r3, #26
 800249a:	f003 021f 	and.w	r2, r3, #31
 800249e:	e01e      	b.n	80024de <HAL_ADC_ConfigChannel+0x252>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2101      	movs	r1, #1
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff fa74 	bl	8001994 <LL_ADC_GetOffsetChannel>
 80024ac:	4603      	mov	r3, r0
 80024ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80024b6:	fa93 f3a3 	rbit	r3, r3
 80024ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80024be:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80024c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80024c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80024ce:	2320      	movs	r3, #32
 80024d0:	e004      	b.n	80024dc <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80024d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80024d6:	fab3 f383 	clz	r3, r3
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d105      	bne.n	80024f6 <HAL_ADC_ConfigChannel+0x26a>
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	0e9b      	lsrs	r3, r3, #26
 80024f0:	f003 031f 	and.w	r3, r3, #31
 80024f4:	e018      	b.n	8002528 <HAL_ADC_ConfigChannel+0x29c>
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002502:	fa93 f3a3 	rbit	r3, r3
 8002506:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800250a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800250e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002512:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800251a:	2320      	movs	r3, #32
 800251c:	e004      	b.n	8002528 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800251e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002522:	fab3 f383 	clz	r3, r3
 8002526:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002528:	429a      	cmp	r2, r3
 800252a:	d106      	bne.n	800253a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2200      	movs	r2, #0
 8002532:	2101      	movs	r1, #1
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff fa43 	bl	80019c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2102      	movs	r1, #2
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff fa27 	bl	8001994 <LL_ADC_GetOffsetChannel>
 8002546:	4603      	mov	r3, r0
 8002548:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10a      	bne.n	8002566 <HAL_ADC_ConfigChannel+0x2da>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2102      	movs	r1, #2
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff fa1c 	bl	8001994 <LL_ADC_GetOffsetChannel>
 800255c:	4603      	mov	r3, r0
 800255e:	0e9b      	lsrs	r3, r3, #26
 8002560:	f003 021f 	and.w	r2, r3, #31
 8002564:	e01e      	b.n	80025a4 <HAL_ADC_ConfigChannel+0x318>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2102      	movs	r1, #2
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff fa11 	bl	8001994 <LL_ADC_GetOffsetChannel>
 8002572:	4603      	mov	r3, r0
 8002574:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002578:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800257c:	fa93 f3a3 	rbit	r3, r3
 8002580:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002584:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002588:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800258c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002590:	2b00      	cmp	r3, #0
 8002592:	d101      	bne.n	8002598 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002594:	2320      	movs	r3, #32
 8002596:	e004      	b.n	80025a2 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002598:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800259c:	fab3 f383 	clz	r3, r3
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d105      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x330>
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	0e9b      	lsrs	r3, r3, #26
 80025b6:	f003 031f 	and.w	r3, r3, #31
 80025ba:	e014      	b.n	80025e6 <HAL_ADC_ConfigChannel+0x35a>
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80025c4:	fa93 f3a3 	rbit	r3, r3
 80025c8:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80025ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80025cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80025d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d101      	bne.n	80025dc <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80025d8:	2320      	movs	r3, #32
 80025da:	e004      	b.n	80025e6 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80025dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80025e0:	fab3 f383 	clz	r3, r3
 80025e4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d106      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2200      	movs	r2, #0
 80025f0:	2102      	movs	r1, #2
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff f9e4 	bl	80019c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2103      	movs	r1, #3
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff f9c8 	bl	8001994 <LL_ADC_GetOffsetChannel>
 8002604:	4603      	mov	r3, r0
 8002606:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10a      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x398>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2103      	movs	r1, #3
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff f9bd 	bl	8001994 <LL_ADC_GetOffsetChannel>
 800261a:	4603      	mov	r3, r0
 800261c:	0e9b      	lsrs	r3, r3, #26
 800261e:	f003 021f 	and.w	r2, r3, #31
 8002622:	e017      	b.n	8002654 <HAL_ADC_ConfigChannel+0x3c8>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2103      	movs	r1, #3
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff f9b2 	bl	8001994 <LL_ADC_GetOffsetChannel>
 8002630:	4603      	mov	r3, r0
 8002632:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002634:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002636:	fa93 f3a3 	rbit	r3, r3
 800263a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800263c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800263e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002640:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002642:	2b00      	cmp	r3, #0
 8002644:	d101      	bne.n	800264a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002646:	2320      	movs	r3, #32
 8002648:	e003      	b.n	8002652 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800264a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800264c:	fab3 f383 	clz	r3, r3
 8002650:	b2db      	uxtb	r3, r3
 8002652:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800265c:	2b00      	cmp	r3, #0
 800265e:	d105      	bne.n	800266c <HAL_ADC_ConfigChannel+0x3e0>
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	0e9b      	lsrs	r3, r3, #26
 8002666:	f003 031f 	and.w	r3, r3, #31
 800266a:	e011      	b.n	8002690 <HAL_ADC_ConfigChannel+0x404>
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002672:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002674:	fa93 f3a3 	rbit	r3, r3
 8002678:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800267a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800267c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800267e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002680:	2b00      	cmp	r3, #0
 8002682:	d101      	bne.n	8002688 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002684:	2320      	movs	r3, #32
 8002686:	e003      	b.n	8002690 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002688:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800268a:	fab3 f383 	clz	r3, r3
 800268e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002690:	429a      	cmp	r2, r3
 8002692:	d106      	bne.n	80026a2 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2200      	movs	r2, #0
 800269a:	2103      	movs	r1, #3
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff f98f 	bl	80019c0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7ff fab2 	bl	8001c10 <LL_ADC_IsEnabled>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f040 8140 	bne.w	8002934 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6818      	ldr	r0, [r3, #0]
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	6819      	ldr	r1, [r3, #0]
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	461a      	mov	r2, r3
 80026c2:	f7ff fa03 	bl	8001acc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	4a8f      	ldr	r2, [pc, #572]	@ (8002908 <HAL_ADC_ConfigChannel+0x67c>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	f040 8131 	bne.w	8002934 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10b      	bne.n	80026fa <HAL_ADC_ConfigChannel+0x46e>
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	0e9b      	lsrs	r3, r3, #26
 80026e8:	3301      	adds	r3, #1
 80026ea:	f003 031f 	and.w	r3, r3, #31
 80026ee:	2b09      	cmp	r3, #9
 80026f0:	bf94      	ite	ls
 80026f2:	2301      	movls	r3, #1
 80026f4:	2300      	movhi	r3, #0
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	e019      	b.n	800272e <HAL_ADC_ConfigChannel+0x4a2>
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002700:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002702:	fa93 f3a3 	rbit	r3, r3
 8002706:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002708:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800270a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800270c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002712:	2320      	movs	r3, #32
 8002714:	e003      	b.n	800271e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002716:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002718:	fab3 f383 	clz	r3, r3
 800271c:	b2db      	uxtb	r3, r3
 800271e:	3301      	adds	r3, #1
 8002720:	f003 031f 	and.w	r3, r3, #31
 8002724:	2b09      	cmp	r3, #9
 8002726:	bf94      	ite	ls
 8002728:	2301      	movls	r3, #1
 800272a:	2300      	movhi	r3, #0
 800272c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800272e:	2b00      	cmp	r3, #0
 8002730:	d079      	beq.n	8002826 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800273a:	2b00      	cmp	r3, #0
 800273c:	d107      	bne.n	800274e <HAL_ADC_ConfigChannel+0x4c2>
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	0e9b      	lsrs	r3, r3, #26
 8002744:	3301      	adds	r3, #1
 8002746:	069b      	lsls	r3, r3, #26
 8002748:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800274c:	e015      	b.n	800277a <HAL_ADC_ConfigChannel+0x4ee>
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002754:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002756:	fa93 f3a3 	rbit	r3, r3
 800275a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800275c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800275e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002760:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002766:	2320      	movs	r3, #32
 8002768:	e003      	b.n	8002772 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800276a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800276c:	fab3 f383 	clz	r3, r3
 8002770:	b2db      	uxtb	r3, r3
 8002772:	3301      	adds	r3, #1
 8002774:	069b      	lsls	r3, r3, #26
 8002776:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002782:	2b00      	cmp	r3, #0
 8002784:	d109      	bne.n	800279a <HAL_ADC_ConfigChannel+0x50e>
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	0e9b      	lsrs	r3, r3, #26
 800278c:	3301      	adds	r3, #1
 800278e:	f003 031f 	and.w	r3, r3, #31
 8002792:	2101      	movs	r1, #1
 8002794:	fa01 f303 	lsl.w	r3, r1, r3
 8002798:	e017      	b.n	80027ca <HAL_ADC_ConfigChannel+0x53e>
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027a2:	fa93 f3a3 	rbit	r3, r3
 80027a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80027a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027aa:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80027ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80027b2:	2320      	movs	r3, #32
 80027b4:	e003      	b.n	80027be <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80027b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027b8:	fab3 f383 	clz	r3, r3
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	3301      	adds	r3, #1
 80027c0:	f003 031f 	and.w	r3, r3, #31
 80027c4:	2101      	movs	r1, #1
 80027c6:	fa01 f303 	lsl.w	r3, r1, r3
 80027ca:	ea42 0103 	orr.w	r1, r2, r3
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d10a      	bne.n	80027f0 <HAL_ADC_ConfigChannel+0x564>
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	0e9b      	lsrs	r3, r3, #26
 80027e0:	3301      	adds	r3, #1
 80027e2:	f003 021f 	and.w	r2, r3, #31
 80027e6:	4613      	mov	r3, r2
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	4413      	add	r3, r2
 80027ec:	051b      	lsls	r3, r3, #20
 80027ee:	e018      	b.n	8002822 <HAL_ADC_ConfigChannel+0x596>
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027f8:	fa93 f3a3 	rbit	r3, r3
 80027fc:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80027fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002800:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002804:	2b00      	cmp	r3, #0
 8002806:	d101      	bne.n	800280c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002808:	2320      	movs	r3, #32
 800280a:	e003      	b.n	8002814 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800280c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800280e:	fab3 f383 	clz	r3, r3
 8002812:	b2db      	uxtb	r3, r3
 8002814:	3301      	adds	r3, #1
 8002816:	f003 021f 	and.w	r2, r3, #31
 800281a:	4613      	mov	r3, r2
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	4413      	add	r3, r2
 8002820:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002822:	430b      	orrs	r3, r1
 8002824:	e081      	b.n	800292a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800282e:	2b00      	cmp	r3, #0
 8002830:	d107      	bne.n	8002842 <HAL_ADC_ConfigChannel+0x5b6>
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	0e9b      	lsrs	r3, r3, #26
 8002838:	3301      	adds	r3, #1
 800283a:	069b      	lsls	r3, r3, #26
 800283c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002840:	e015      	b.n	800286e <HAL_ADC_ConfigChannel+0x5e2>
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800284a:	fa93 f3a3 	rbit	r3, r3
 800284e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002852:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800285a:	2320      	movs	r3, #32
 800285c:	e003      	b.n	8002866 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800285e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002860:	fab3 f383 	clz	r3, r3
 8002864:	b2db      	uxtb	r3, r3
 8002866:	3301      	adds	r3, #1
 8002868:	069b      	lsls	r3, r3, #26
 800286a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002876:	2b00      	cmp	r3, #0
 8002878:	d109      	bne.n	800288e <HAL_ADC_ConfigChannel+0x602>
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	0e9b      	lsrs	r3, r3, #26
 8002880:	3301      	adds	r3, #1
 8002882:	f003 031f 	and.w	r3, r3, #31
 8002886:	2101      	movs	r1, #1
 8002888:	fa01 f303 	lsl.w	r3, r1, r3
 800288c:	e017      	b.n	80028be <HAL_ADC_ConfigChannel+0x632>
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	fa93 f3a3 	rbit	r3, r3
 800289a:	61bb      	str	r3, [r7, #24]
  return result;
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80028a0:	6a3b      	ldr	r3, [r7, #32]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80028a6:	2320      	movs	r3, #32
 80028a8:	e003      	b.n	80028b2 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80028aa:	6a3b      	ldr	r3, [r7, #32]
 80028ac:	fab3 f383 	clz	r3, r3
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	3301      	adds	r3, #1
 80028b4:	f003 031f 	and.w	r3, r3, #31
 80028b8:	2101      	movs	r1, #1
 80028ba:	fa01 f303 	lsl.w	r3, r1, r3
 80028be:	ea42 0103 	orr.w	r1, r2, r3
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d10d      	bne.n	80028ea <HAL_ADC_ConfigChannel+0x65e>
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	0e9b      	lsrs	r3, r3, #26
 80028d4:	3301      	adds	r3, #1
 80028d6:	f003 021f 	and.w	r2, r3, #31
 80028da:	4613      	mov	r3, r2
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	4413      	add	r3, r2
 80028e0:	3b1e      	subs	r3, #30
 80028e2:	051b      	lsls	r3, r3, #20
 80028e4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80028e8:	e01e      	b.n	8002928 <HAL_ADC_ConfigChannel+0x69c>
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	fa93 f3a3 	rbit	r3, r3
 80028f6:	60fb      	str	r3, [r7, #12]
  return result;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d104      	bne.n	800290c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002902:	2320      	movs	r3, #32
 8002904:	e006      	b.n	8002914 <HAL_ADC_ConfigChannel+0x688>
 8002906:	bf00      	nop
 8002908:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	fab3 f383 	clz	r3, r3
 8002912:	b2db      	uxtb	r3, r3
 8002914:	3301      	adds	r3, #1
 8002916:	f003 021f 	and.w	r2, r3, #31
 800291a:	4613      	mov	r3, r2
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	4413      	add	r3, r2
 8002920:	3b1e      	subs	r3, #30
 8002922:	051b      	lsls	r3, r3, #20
 8002924:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002928:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800292e:	4619      	mov	r1, r3
 8002930:	f7ff f8a0 	bl	8001a74 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	4b44      	ldr	r3, [pc, #272]	@ (8002a4c <HAL_ADC_ConfigChannel+0x7c0>)
 800293a:	4013      	ands	r3, r2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d07a      	beq.n	8002a36 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002940:	4843      	ldr	r0, [pc, #268]	@ (8002a50 <HAL_ADC_ConfigChannel+0x7c4>)
 8002942:	f7fe fff5 	bl	8001930 <LL_ADC_GetCommonPathInternalCh>
 8002946:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a41      	ldr	r2, [pc, #260]	@ (8002a54 <HAL_ADC_ConfigChannel+0x7c8>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d12c      	bne.n	80029ae <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002954:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002958:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d126      	bne.n	80029ae <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a3c      	ldr	r2, [pc, #240]	@ (8002a58 <HAL_ADC_ConfigChannel+0x7cc>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d004      	beq.n	8002974 <HAL_ADC_ConfigChannel+0x6e8>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a3b      	ldr	r2, [pc, #236]	@ (8002a5c <HAL_ADC_ConfigChannel+0x7d0>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d15d      	bne.n	8002a30 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002974:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002978:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800297c:	4619      	mov	r1, r3
 800297e:	4834      	ldr	r0, [pc, #208]	@ (8002a50 <HAL_ADC_ConfigChannel+0x7c4>)
 8002980:	f7fe ffc3 	bl	800190a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002984:	4b36      	ldr	r3, [pc, #216]	@ (8002a60 <HAL_ADC_ConfigChannel+0x7d4>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	099b      	lsrs	r3, r3, #6
 800298a:	4a36      	ldr	r2, [pc, #216]	@ (8002a64 <HAL_ADC_ConfigChannel+0x7d8>)
 800298c:	fba2 2303 	umull	r2, r3, r2, r3
 8002990:	099b      	lsrs	r3, r3, #6
 8002992:	1c5a      	adds	r2, r3, #1
 8002994:	4613      	mov	r3, r2
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	4413      	add	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800299e:	e002      	b.n	80029a6 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	3b01      	subs	r3, #1
 80029a4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1f9      	bne.n	80029a0 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029ac:	e040      	b.n	8002a30 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a2d      	ldr	r2, [pc, #180]	@ (8002a68 <HAL_ADC_ConfigChannel+0x7dc>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d118      	bne.n	80029ea <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80029b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d112      	bne.n	80029ea <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a23      	ldr	r2, [pc, #140]	@ (8002a58 <HAL_ADC_ConfigChannel+0x7cc>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d004      	beq.n	80029d8 <HAL_ADC_ConfigChannel+0x74c>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a22      	ldr	r2, [pc, #136]	@ (8002a5c <HAL_ADC_ConfigChannel+0x7d0>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d12d      	bne.n	8002a34 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029dc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029e0:	4619      	mov	r1, r3
 80029e2:	481b      	ldr	r0, [pc, #108]	@ (8002a50 <HAL_ADC_ConfigChannel+0x7c4>)
 80029e4:	f7fe ff91 	bl	800190a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029e8:	e024      	b.n	8002a34 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a1f      	ldr	r2, [pc, #124]	@ (8002a6c <HAL_ADC_ConfigChannel+0x7e0>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d120      	bne.n	8002a36 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80029f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d11a      	bne.n	8002a36 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a14      	ldr	r2, [pc, #80]	@ (8002a58 <HAL_ADC_ConfigChannel+0x7cc>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d115      	bne.n	8002a36 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a0e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002a12:	4619      	mov	r1, r3
 8002a14:	480e      	ldr	r0, [pc, #56]	@ (8002a50 <HAL_ADC_ConfigChannel+0x7c4>)
 8002a16:	f7fe ff78 	bl	800190a <LL_ADC_SetCommonPathInternalCh>
 8002a1a:	e00c      	b.n	8002a36 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a20:	f043 0220 	orr.w	r2, r3, #32
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002a2e:	e002      	b.n	8002a36 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a30:	bf00      	nop
 8002a32:	e000      	b.n	8002a36 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a34:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002a3e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	37d8      	adds	r7, #216	@ 0xd8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	80080000 	.word	0x80080000
 8002a50:	50040300 	.word	0x50040300
 8002a54:	c7520000 	.word	0xc7520000
 8002a58:	50040000 	.word	0x50040000
 8002a5c:	50040200 	.word	0x50040200
 8002a60:	20000004 	.word	0x20000004
 8002a64:	053e2d63 	.word	0x053e2d63
 8002a68:	cb840000 	.word	0xcb840000
 8002a6c:	80000001 	.word	0x80000001

08002a70 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff f8c5 	bl	8001c10 <LL_ADC_IsEnabled>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d169      	bne.n	8002b60 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	689a      	ldr	r2, [r3, #8]
 8002a92:	4b36      	ldr	r3, [pc, #216]	@ (8002b6c <ADC_Enable+0xfc>)
 8002a94:	4013      	ands	r3, r2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00d      	beq.n	8002ab6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a9e:	f043 0210 	orr.w	r2, r3, #16
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aaa:	f043 0201 	orr.w	r2, r3, #1
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e055      	b.n	8002b62 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff f894 	bl	8001be8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002ac0:	482b      	ldr	r0, [pc, #172]	@ (8002b70 <ADC_Enable+0x100>)
 8002ac2:	f7fe ff35 	bl	8001930 <LL_ADC_GetCommonPathInternalCh>
 8002ac6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002ac8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d013      	beq.n	8002af8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ad0:	4b28      	ldr	r3, [pc, #160]	@ (8002b74 <ADC_Enable+0x104>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	099b      	lsrs	r3, r3, #6
 8002ad6:	4a28      	ldr	r2, [pc, #160]	@ (8002b78 <ADC_Enable+0x108>)
 8002ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8002adc:	099b      	lsrs	r3, r3, #6
 8002ade:	1c5a      	adds	r2, r3, #1
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	4413      	add	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002aea:	e002      	b.n	8002af2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	3b01      	subs	r3, #1
 8002af0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d1f9      	bne.n	8002aec <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002af8:	f7fe fec4 	bl	8001884 <HAL_GetTick>
 8002afc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002afe:	e028      	b.n	8002b52 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7ff f883 	bl	8001c10 <LL_ADC_IsEnabled>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d104      	bne.n	8002b1a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff f867 	bl	8001be8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b1a:	f7fe feb3 	bl	8001884 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d914      	bls.n	8002b52 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d00d      	beq.n	8002b52 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b3a:	f043 0210 	orr.w	r2, r3, #16
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b46:	f043 0201 	orr.w	r2, r3, #1
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e007      	b.n	8002b62 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d1cf      	bne.n	8002b00 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3710      	adds	r7, #16
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	8000003f 	.word	0x8000003f
 8002b70:	50040300 	.word	0x50040300
 8002b74:	20000004 	.word	0x20000004
 8002b78:	053e2d63 	.word	0x053e2d63

08002b7c <LL_ADC_IsEnabled>:
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d101      	bne.n	8002b94 <LL_ADC_IsEnabled+0x18>
 8002b90:	2301      	movs	r3, #1
 8002b92:	e000      	b.n	8002b96 <LL_ADC_IsEnabled+0x1a>
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr

08002ba2 <LL_ADC_REG_IsConversionOngoing>:
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	b083      	sub	sp, #12
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 0304 	and.w	r3, r3, #4
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	d101      	bne.n	8002bba <LL_ADC_REG_IsConversionOngoing+0x18>
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e000      	b.n	8002bbc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002bc8:	b590      	push	{r4, r7, lr}
 8002bca:	b09f      	sub	sp, #124	@ 0x7c
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d101      	bne.n	8002be6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002be2:	2302      	movs	r3, #2
 8002be4:	e093      	b.n	8002d0e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002bee:	2300      	movs	r3, #0
 8002bf0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a47      	ldr	r2, [pc, #284]	@ (8002d18 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d102      	bne.n	8002c06 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002c00:	4b46      	ldr	r3, [pc, #280]	@ (8002d1c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002c02:	60bb      	str	r3, [r7, #8]
 8002c04:	e001      	b.n	8002c0a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002c06:	2300      	movs	r3, #0
 8002c08:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d10b      	bne.n	8002c28 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c14:	f043 0220 	orr.w	r2, r3, #32
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e072      	b.n	8002d0e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7ff ffb9 	bl	8002ba2 <LL_ADC_REG_IsConversionOngoing>
 8002c30:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7ff ffb3 	bl	8002ba2 <LL_ADC_REG_IsConversionOngoing>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d154      	bne.n	8002cec <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002c42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d151      	bne.n	8002cec <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002c48:	4b35      	ldr	r3, [pc, #212]	@ (8002d20 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002c4a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d02c      	beq.n	8002cae <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002c54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	6859      	ldr	r1, [r3, #4]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002c66:	035b      	lsls	r3, r3, #13
 8002c68:	430b      	orrs	r3, r1
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c6e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c70:	4829      	ldr	r0, [pc, #164]	@ (8002d18 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002c72:	f7ff ff83 	bl	8002b7c <LL_ADC_IsEnabled>
 8002c76:	4604      	mov	r4, r0
 8002c78:	4828      	ldr	r0, [pc, #160]	@ (8002d1c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002c7a:	f7ff ff7f 	bl	8002b7c <LL_ADC_IsEnabled>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	431c      	orrs	r4, r3
 8002c82:	4828      	ldr	r0, [pc, #160]	@ (8002d24 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002c84:	f7ff ff7a 	bl	8002b7c <LL_ADC_IsEnabled>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	4323      	orrs	r3, r4
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d137      	bne.n	8002d00 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002c90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002c98:	f023 030f 	bic.w	r3, r3, #15
 8002c9c:	683a      	ldr	r2, [r7, #0]
 8002c9e:	6811      	ldr	r1, [r2, #0]
 8002ca0:	683a      	ldr	r2, [r7, #0]
 8002ca2:	6892      	ldr	r2, [r2, #8]
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	431a      	orrs	r2, r3
 8002ca8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002caa:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002cac:	e028      	b.n	8002d00 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002cae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002cb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cb8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002cba:	4817      	ldr	r0, [pc, #92]	@ (8002d18 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002cbc:	f7ff ff5e 	bl	8002b7c <LL_ADC_IsEnabled>
 8002cc0:	4604      	mov	r4, r0
 8002cc2:	4816      	ldr	r0, [pc, #88]	@ (8002d1c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002cc4:	f7ff ff5a 	bl	8002b7c <LL_ADC_IsEnabled>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	431c      	orrs	r4, r3
 8002ccc:	4815      	ldr	r0, [pc, #84]	@ (8002d24 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002cce:	f7ff ff55 	bl	8002b7c <LL_ADC_IsEnabled>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	4323      	orrs	r3, r4
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d112      	bne.n	8002d00 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002cda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002ce2:	f023 030f 	bic.w	r3, r3, #15
 8002ce6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002ce8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002cea:	e009      	b.n	8002d00 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cf0:	f043 0220 	orr.w	r2, r3, #32
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002cfe:	e000      	b.n	8002d02 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d00:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d0a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	377c      	adds	r7, #124	@ 0x7c
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd90      	pop	{r4, r7, pc}
 8002d16:	bf00      	nop
 8002d18:	50040000 	.word	0x50040000
 8002d1c:	50040100 	.word	0x50040100
 8002d20:	50040300 	.word	0x50040300
 8002d24:	50040200 	.word	0x50040200

08002d28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f003 0307 	and.w	r3, r3, #7
 8002d36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d38:	4b0c      	ldr	r3, [pc, #48]	@ (8002d6c <__NVIC_SetPriorityGrouping+0x44>)
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d3e:	68ba      	ldr	r2, [r7, #8]
 8002d40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d44:	4013      	ands	r3, r2
 8002d46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d5a:	4a04      	ldr	r2, [pc, #16]	@ (8002d6c <__NVIC_SetPriorityGrouping+0x44>)
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	60d3      	str	r3, [r2, #12]
}
 8002d60:	bf00      	nop
 8002d62:	3714      	adds	r7, #20
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr
 8002d6c:	e000ed00 	.word	0xe000ed00

08002d70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d74:	4b04      	ldr	r3, [pc, #16]	@ (8002d88 <__NVIC_GetPriorityGrouping+0x18>)
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	0a1b      	lsrs	r3, r3, #8
 8002d7a:	f003 0307 	and.w	r3, r3, #7
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr
 8002d88:	e000ed00 	.word	0xe000ed00

08002d8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	4603      	mov	r3, r0
 8002d94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	db0b      	blt.n	8002db6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d9e:	79fb      	ldrb	r3, [r7, #7]
 8002da0:	f003 021f 	and.w	r2, r3, #31
 8002da4:	4907      	ldr	r1, [pc, #28]	@ (8002dc4 <__NVIC_EnableIRQ+0x38>)
 8002da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002daa:	095b      	lsrs	r3, r3, #5
 8002dac:	2001      	movs	r0, #1
 8002dae:	fa00 f202 	lsl.w	r2, r0, r2
 8002db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002db6:	bf00      	nop
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	e000e100 	.word	0xe000e100

08002dc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	4603      	mov	r3, r0
 8002dd0:	6039      	str	r1, [r7, #0]
 8002dd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	db0a      	blt.n	8002df2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	b2da      	uxtb	r2, r3
 8002de0:	490c      	ldr	r1, [pc, #48]	@ (8002e14 <__NVIC_SetPriority+0x4c>)
 8002de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de6:	0112      	lsls	r2, r2, #4
 8002de8:	b2d2      	uxtb	r2, r2
 8002dea:	440b      	add	r3, r1
 8002dec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002df0:	e00a      	b.n	8002e08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	b2da      	uxtb	r2, r3
 8002df6:	4908      	ldr	r1, [pc, #32]	@ (8002e18 <__NVIC_SetPriority+0x50>)
 8002df8:	79fb      	ldrb	r3, [r7, #7]
 8002dfa:	f003 030f 	and.w	r3, r3, #15
 8002dfe:	3b04      	subs	r3, #4
 8002e00:	0112      	lsls	r2, r2, #4
 8002e02:	b2d2      	uxtb	r2, r2
 8002e04:	440b      	add	r3, r1
 8002e06:	761a      	strb	r2, [r3, #24]
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr
 8002e14:	e000e100 	.word	0xe000e100
 8002e18:	e000ed00 	.word	0xe000ed00

08002e1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b089      	sub	sp, #36	@ 0x24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f003 0307 	and.w	r3, r3, #7
 8002e2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	f1c3 0307 	rsb	r3, r3, #7
 8002e36:	2b04      	cmp	r3, #4
 8002e38:	bf28      	it	cs
 8002e3a:	2304      	movcs	r3, #4
 8002e3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	3304      	adds	r3, #4
 8002e42:	2b06      	cmp	r3, #6
 8002e44:	d902      	bls.n	8002e4c <NVIC_EncodePriority+0x30>
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	3b03      	subs	r3, #3
 8002e4a:	e000      	b.n	8002e4e <NVIC_EncodePriority+0x32>
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e50:	f04f 32ff 	mov.w	r2, #4294967295
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5a:	43da      	mvns	r2, r3
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	401a      	ands	r2, r3
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e64:	f04f 31ff 	mov.w	r1, #4294967295
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e6e:	43d9      	mvns	r1, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e74:	4313      	orrs	r3, r2
         );
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3724      	adds	r7, #36	@ 0x24
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
	...

08002e84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e94:	d301      	bcc.n	8002e9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e96:	2301      	movs	r3, #1
 8002e98:	e00f      	b.n	8002eba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e9a:	4a0a      	ldr	r2, [pc, #40]	@ (8002ec4 <SysTick_Config+0x40>)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ea2:	210f      	movs	r1, #15
 8002ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ea8:	f7ff ff8e 	bl	8002dc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002eac:	4b05      	ldr	r3, [pc, #20]	@ (8002ec4 <SysTick_Config+0x40>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eb2:	4b04      	ldr	r3, [pc, #16]	@ (8002ec4 <SysTick_Config+0x40>)
 8002eb4:	2207      	movs	r2, #7
 8002eb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	e000e010 	.word	0xe000e010

08002ec8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f7ff ff29 	bl	8002d28 <__NVIC_SetPriorityGrouping>
}
 8002ed6:	bf00      	nop
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b086      	sub	sp, #24
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	60b9      	str	r1, [r7, #8]
 8002ee8:	607a      	str	r2, [r7, #4]
 8002eea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002eec:	2300      	movs	r3, #0
 8002eee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ef0:	f7ff ff3e 	bl	8002d70 <__NVIC_GetPriorityGrouping>
 8002ef4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	68b9      	ldr	r1, [r7, #8]
 8002efa:	6978      	ldr	r0, [r7, #20]
 8002efc:	f7ff ff8e 	bl	8002e1c <NVIC_EncodePriority>
 8002f00:	4602      	mov	r2, r0
 8002f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f06:	4611      	mov	r1, r2
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7ff ff5d 	bl	8002dc8 <__NVIC_SetPriority>
}
 8002f0e:	bf00      	nop
 8002f10:	3718      	adds	r7, #24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b082      	sub	sp, #8
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7ff ff31 	bl	8002d8c <__NVIC_EnableIRQ>
}
 8002f2a:	bf00      	nop
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b082      	sub	sp, #8
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f7ff ffa2 	bl	8002e84 <SysTick_Config>
 8002f40:	4603      	mov	r3, r0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
	...

08002f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b087      	sub	sp, #28
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f56:	2300      	movs	r3, #0
 8002f58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f5a:	e17f      	b.n	800325c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	2101      	movs	r1, #1
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	fa01 f303 	lsl.w	r3, r1, r3
 8002f68:	4013      	ands	r3, r2
 8002f6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f000 8171 	beq.w	8003256 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f003 0303 	and.w	r3, r3, #3
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d005      	beq.n	8002f8c <HAL_GPIO_Init+0x40>
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f003 0303 	and.w	r3, r3, #3
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d130      	bne.n	8002fee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	2203      	movs	r2, #3
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	43db      	mvns	r3, r3
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	68da      	ldr	r2, [r3, #12]
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fca:	43db      	mvns	r3, r3
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	091b      	lsrs	r3, r3, #4
 8002fd8:	f003 0201 	and.w	r2, r3, #1
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f003 0303 	and.w	r3, r3, #3
 8002ff6:	2b03      	cmp	r3, #3
 8002ff8:	d118      	bne.n	800302c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ffe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003000:	2201      	movs	r2, #1
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	43db      	mvns	r3, r3
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	4013      	ands	r3, r2
 800300e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	08db      	lsrs	r3, r3, #3
 8003016:	f003 0201 	and.w	r2, r3, #1
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	4313      	orrs	r3, r2
 8003024:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f003 0303 	and.w	r3, r3, #3
 8003034:	2b03      	cmp	r3, #3
 8003036:	d017      	beq.n	8003068 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	2203      	movs	r2, #3
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	43db      	mvns	r3, r3
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	4013      	ands	r3, r2
 800304e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	4313      	orrs	r3, r2
 8003060:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f003 0303 	and.w	r3, r3, #3
 8003070:	2b02      	cmp	r3, #2
 8003072:	d123      	bne.n	80030bc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	08da      	lsrs	r2, r3, #3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	3208      	adds	r2, #8
 800307c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003080:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	f003 0307 	and.w	r3, r3, #7
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	220f      	movs	r2, #15
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	43db      	mvns	r3, r3
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	4013      	ands	r3, r2
 8003096:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	691a      	ldr	r2, [r3, #16]
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	08da      	lsrs	r2, r3, #3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	3208      	adds	r2, #8
 80030b6:	6939      	ldr	r1, [r7, #16]
 80030b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	2203      	movs	r2, #3
 80030c8:	fa02 f303 	lsl.w	r3, r2, r3
 80030cc:	43db      	mvns	r3, r3
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	4013      	ands	r3, r2
 80030d2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f003 0203 	and.w	r2, r3, #3
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 80ac 	beq.w	8003256 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030fe:	4b5f      	ldr	r3, [pc, #380]	@ (800327c <HAL_GPIO_Init+0x330>)
 8003100:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003102:	4a5e      	ldr	r2, [pc, #376]	@ (800327c <HAL_GPIO_Init+0x330>)
 8003104:	f043 0301 	orr.w	r3, r3, #1
 8003108:	6613      	str	r3, [r2, #96]	@ 0x60
 800310a:	4b5c      	ldr	r3, [pc, #368]	@ (800327c <HAL_GPIO_Init+0x330>)
 800310c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	60bb      	str	r3, [r7, #8]
 8003114:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003116:	4a5a      	ldr	r2, [pc, #360]	@ (8003280 <HAL_GPIO_Init+0x334>)
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	089b      	lsrs	r3, r3, #2
 800311c:	3302      	adds	r3, #2
 800311e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003122:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	f003 0303 	and.w	r3, r3, #3
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	220f      	movs	r2, #15
 800312e:	fa02 f303 	lsl.w	r3, r2, r3
 8003132:	43db      	mvns	r3, r3
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	4013      	ands	r3, r2
 8003138:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003140:	d025      	beq.n	800318e <HAL_GPIO_Init+0x242>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a4f      	ldr	r2, [pc, #316]	@ (8003284 <HAL_GPIO_Init+0x338>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d01f      	beq.n	800318a <HAL_GPIO_Init+0x23e>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a4e      	ldr	r2, [pc, #312]	@ (8003288 <HAL_GPIO_Init+0x33c>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d019      	beq.n	8003186 <HAL_GPIO_Init+0x23a>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a4d      	ldr	r2, [pc, #308]	@ (800328c <HAL_GPIO_Init+0x340>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d013      	beq.n	8003182 <HAL_GPIO_Init+0x236>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a4c      	ldr	r2, [pc, #304]	@ (8003290 <HAL_GPIO_Init+0x344>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d00d      	beq.n	800317e <HAL_GPIO_Init+0x232>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a4b      	ldr	r2, [pc, #300]	@ (8003294 <HAL_GPIO_Init+0x348>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d007      	beq.n	800317a <HAL_GPIO_Init+0x22e>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a4a      	ldr	r2, [pc, #296]	@ (8003298 <HAL_GPIO_Init+0x34c>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d101      	bne.n	8003176 <HAL_GPIO_Init+0x22a>
 8003172:	2306      	movs	r3, #6
 8003174:	e00c      	b.n	8003190 <HAL_GPIO_Init+0x244>
 8003176:	2307      	movs	r3, #7
 8003178:	e00a      	b.n	8003190 <HAL_GPIO_Init+0x244>
 800317a:	2305      	movs	r3, #5
 800317c:	e008      	b.n	8003190 <HAL_GPIO_Init+0x244>
 800317e:	2304      	movs	r3, #4
 8003180:	e006      	b.n	8003190 <HAL_GPIO_Init+0x244>
 8003182:	2303      	movs	r3, #3
 8003184:	e004      	b.n	8003190 <HAL_GPIO_Init+0x244>
 8003186:	2302      	movs	r3, #2
 8003188:	e002      	b.n	8003190 <HAL_GPIO_Init+0x244>
 800318a:	2301      	movs	r3, #1
 800318c:	e000      	b.n	8003190 <HAL_GPIO_Init+0x244>
 800318e:	2300      	movs	r3, #0
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	f002 0203 	and.w	r2, r2, #3
 8003196:	0092      	lsls	r2, r2, #2
 8003198:	4093      	lsls	r3, r2
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	4313      	orrs	r3, r2
 800319e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80031a0:	4937      	ldr	r1, [pc, #220]	@ (8003280 <HAL_GPIO_Init+0x334>)
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	089b      	lsrs	r3, r3, #2
 80031a6:	3302      	adds	r3, #2
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80031ae:	4b3b      	ldr	r3, [pc, #236]	@ (800329c <HAL_GPIO_Init+0x350>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	43db      	mvns	r3, r3
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	4013      	ands	r3, r2
 80031bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d003      	beq.n	80031d2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80031d2:	4a32      	ldr	r2, [pc, #200]	@ (800329c <HAL_GPIO_Init+0x350>)
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80031d8:	4b30      	ldr	r3, [pc, #192]	@ (800329c <HAL_GPIO_Init+0x350>)
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	43db      	mvns	r3, r3
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	4013      	ands	r3, r2
 80031e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d003      	beq.n	80031fc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80031fc:	4a27      	ldr	r2, [pc, #156]	@ (800329c <HAL_GPIO_Init+0x350>)
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003202:	4b26      	ldr	r3, [pc, #152]	@ (800329c <HAL_GPIO_Init+0x350>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	43db      	mvns	r3, r3
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	4013      	ands	r3, r2
 8003210:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	4313      	orrs	r3, r2
 8003224:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003226:	4a1d      	ldr	r2, [pc, #116]	@ (800329c <HAL_GPIO_Init+0x350>)
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800322c:	4b1b      	ldr	r3, [pc, #108]	@ (800329c <HAL_GPIO_Init+0x350>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	43db      	mvns	r3, r3
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	4013      	ands	r3, r2
 800323a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d003      	beq.n	8003250 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	4313      	orrs	r3, r2
 800324e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003250:	4a12      	ldr	r2, [pc, #72]	@ (800329c <HAL_GPIO_Init+0x350>)
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	3301      	adds	r3, #1
 800325a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	fa22 f303 	lsr.w	r3, r2, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	f47f ae78 	bne.w	8002f5c <HAL_GPIO_Init+0x10>
  }
}
 800326c:	bf00      	nop
 800326e:	bf00      	nop
 8003270:	371c      	adds	r7, #28
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	40021000 	.word	0x40021000
 8003280:	40010000 	.word	0x40010000
 8003284:	48000400 	.word	0x48000400
 8003288:	48000800 	.word	0x48000800
 800328c:	48000c00 	.word	0x48000c00
 8003290:	48001000 	.word	0x48001000
 8003294:	48001400 	.word	0x48001400
 8003298:	48001800 	.word	0x48001800
 800329c:	40010400 	.word	0x40010400

080032a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	460b      	mov	r3, r1
 80032aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	691a      	ldr	r2, [r3, #16]
 80032b0:	887b      	ldrh	r3, [r7, #2]
 80032b2:	4013      	ands	r3, r2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d002      	beq.n	80032be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80032b8:	2301      	movs	r3, #1
 80032ba:	73fb      	strb	r3, [r7, #15]
 80032bc:	e001      	b.n	80032c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032be:	2300      	movs	r3, #0
 80032c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80032c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3714      	adds	r7, #20
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	460b      	mov	r3, r1
 80032da:	807b      	strh	r3, [r7, #2]
 80032dc:	4613      	mov	r3, r2
 80032de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032e0:	787b      	ldrb	r3, [r7, #1]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d003      	beq.n	80032ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80032e6:	887a      	ldrh	r2, [r7, #2]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80032ec:	e002      	b.n	80032f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80032ee:	887a      	ldrh	r2, [r7, #2]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	4603      	mov	r3, r0
 8003308:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800330a:	4b08      	ldr	r3, [pc, #32]	@ (800332c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800330c:	695a      	ldr	r2, [r3, #20]
 800330e:	88fb      	ldrh	r3, [r7, #6]
 8003310:	4013      	ands	r3, r2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d006      	beq.n	8003324 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003316:	4a05      	ldr	r2, [pc, #20]	@ (800332c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003318:	88fb      	ldrh	r3, [r7, #6]
 800331a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800331c:	88fb      	ldrh	r3, [r7, #6]
 800331e:	4618      	mov	r0, r3
 8003320:	f7fd f93c 	bl	800059c <HAL_GPIO_EXTI_Callback>
  }
}
 8003324:	bf00      	nop
 8003326:	3708      	adds	r7, #8
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	40010400 	.word	0x40010400

08003330 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e08d      	b.n	800345e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d106      	bne.n	800335c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f7fd ff86 	bl	8001268 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2224      	movs	r2, #36	@ 0x24
 8003360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f022 0201 	bic.w	r2, r2, #1
 8003372:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685a      	ldr	r2, [r3, #4]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003380:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003390:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d107      	bne.n	80033aa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	689a      	ldr	r2, [r3, #8]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80033a6:	609a      	str	r2, [r3, #8]
 80033a8:	e006      	b.n	80033b8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	689a      	ldr	r2, [r3, #8]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80033b6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d108      	bne.n	80033d2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	685a      	ldr	r2, [r3, #4]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033ce:	605a      	str	r2, [r3, #4]
 80033d0:	e007      	b.n	80033e2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	6812      	ldr	r2, [r2, #0]
 80033ec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80033f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80033f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68da      	ldr	r2, [r3, #12]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003404:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	691a      	ldr	r2, [r3, #16]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	430a      	orrs	r2, r1
 800341e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	69d9      	ldr	r1, [r3, #28]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a1a      	ldr	r2, [r3, #32]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	430a      	orrs	r2, r1
 800342e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f042 0201 	orr.w	r2, r2, #1
 800343e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2220      	movs	r2, #32
 800344a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003466:	b480      	push	{r7}
 8003468:	b083      	sub	sp, #12
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
 800346e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2b20      	cmp	r3, #32
 800347a:	d138      	bne.n	80034ee <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003482:	2b01      	cmp	r3, #1
 8003484:	d101      	bne.n	800348a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003486:	2302      	movs	r3, #2
 8003488:	e032      	b.n	80034f0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2201      	movs	r2, #1
 800348e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2224      	movs	r2, #36	@ 0x24
 8003496:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f022 0201 	bic.w	r2, r2, #1
 80034a8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80034b8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	6819      	ldr	r1, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f042 0201 	orr.w	r2, r2, #1
 80034d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2220      	movs	r2, #32
 80034de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80034ea:	2300      	movs	r3, #0
 80034ec:	e000      	b.n	80034f0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80034ee:	2302      	movs	r3, #2
  }
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b20      	cmp	r3, #32
 8003510:	d139      	bne.n	8003586 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003518:	2b01      	cmp	r3, #1
 800351a:	d101      	bne.n	8003520 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800351c:	2302      	movs	r3, #2
 800351e:	e033      	b.n	8003588 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2224      	movs	r2, #36	@ 0x24
 800352c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f022 0201 	bic.w	r2, r2, #1
 800353e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800354e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	021b      	lsls	r3, r3, #8
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	4313      	orrs	r3, r2
 8003558:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f042 0201 	orr.w	r2, r2, #1
 8003570:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2220      	movs	r2, #32
 8003576:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003582:	2300      	movs	r3, #0
 8003584:	e000      	b.n	8003588 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003586:	2302      	movs	r3, #2
  }
}
 8003588:	4618      	mov	r0, r3
 800358a:	3714      	adds	r7, #20
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003594:	b480      	push	{r7}
 8003596:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003598:	4b04      	ldr	r3, [pc, #16]	@ (80035ac <HAL_PWREx_GetVoltageRange+0x18>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	40007000 	.word	0x40007000

080035b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035be:	d130      	bne.n	8003622 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80035c0:	4b23      	ldr	r3, [pc, #140]	@ (8003650 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80035c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035cc:	d038      	beq.n	8003640 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80035ce:	4b20      	ldr	r3, [pc, #128]	@ (8003650 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80035d6:	4a1e      	ldr	r2, [pc, #120]	@ (8003650 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035d8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80035dc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80035de:	4b1d      	ldr	r3, [pc, #116]	@ (8003654 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2232      	movs	r2, #50	@ 0x32
 80035e4:	fb02 f303 	mul.w	r3, r2, r3
 80035e8:	4a1b      	ldr	r2, [pc, #108]	@ (8003658 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80035ea:	fba2 2303 	umull	r2, r3, r2, r3
 80035ee:	0c9b      	lsrs	r3, r3, #18
 80035f0:	3301      	adds	r3, #1
 80035f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035f4:	e002      	b.n	80035fc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	3b01      	subs	r3, #1
 80035fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035fc:	4b14      	ldr	r3, [pc, #80]	@ (8003650 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035fe:	695b      	ldr	r3, [r3, #20]
 8003600:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003604:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003608:	d102      	bne.n	8003610 <HAL_PWREx_ControlVoltageScaling+0x60>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1f2      	bne.n	80035f6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003610:	4b0f      	ldr	r3, [pc, #60]	@ (8003650 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003612:	695b      	ldr	r3, [r3, #20]
 8003614:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003618:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800361c:	d110      	bne.n	8003640 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e00f      	b.n	8003642 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003622:	4b0b      	ldr	r3, [pc, #44]	@ (8003650 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800362a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800362e:	d007      	beq.n	8003640 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003630:	4b07      	ldr	r3, [pc, #28]	@ (8003650 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003638:	4a05      	ldr	r2, [pc, #20]	@ (8003650 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800363a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800363e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3714      	adds	r7, #20
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	40007000 	.word	0x40007000
 8003654:	20000004 	.word	0x20000004
 8003658:	431bde83 	.word	0x431bde83

0800365c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b088      	sub	sp, #32
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e3ca      	b.n	8003e04 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800366e:	4b97      	ldr	r3, [pc, #604]	@ (80038cc <HAL_RCC_OscConfig+0x270>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f003 030c 	and.w	r3, r3, #12
 8003676:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003678:	4b94      	ldr	r3, [pc, #592]	@ (80038cc <HAL_RCC_OscConfig+0x270>)
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	f003 0303 	and.w	r3, r3, #3
 8003680:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0310 	and.w	r3, r3, #16
 800368a:	2b00      	cmp	r3, #0
 800368c:	f000 80e4 	beq.w	8003858 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d007      	beq.n	80036a6 <HAL_RCC_OscConfig+0x4a>
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	2b0c      	cmp	r3, #12
 800369a:	f040 808b 	bne.w	80037b4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	f040 8087 	bne.w	80037b4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80036a6:	4b89      	ldr	r3, [pc, #548]	@ (80038cc <HAL_RCC_OscConfig+0x270>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d005      	beq.n	80036be <HAL_RCC_OscConfig+0x62>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d101      	bne.n	80036be <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e3a2      	b.n	8003e04 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a1a      	ldr	r2, [r3, #32]
 80036c2:	4b82      	ldr	r3, [pc, #520]	@ (80038cc <HAL_RCC_OscConfig+0x270>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0308 	and.w	r3, r3, #8
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d004      	beq.n	80036d8 <HAL_RCC_OscConfig+0x7c>
 80036ce:	4b7f      	ldr	r3, [pc, #508]	@ (80038cc <HAL_RCC_OscConfig+0x270>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036d6:	e005      	b.n	80036e4 <HAL_RCC_OscConfig+0x88>
 80036d8:	4b7c      	ldr	r3, [pc, #496]	@ (80038cc <HAL_RCC_OscConfig+0x270>)
 80036da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036de:	091b      	lsrs	r3, r3, #4
 80036e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d223      	bcs.n	8003730 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f000 fd55 	bl	800419c <RCC_SetFlashLatencyFromMSIRange>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d001      	beq.n	80036fc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e383      	b.n	8003e04 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036fc:	4b73      	ldr	r3, [pc, #460]	@ (80038cc <HAL_RCC_OscConfig+0x270>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a72      	ldr	r2, [pc, #456]	@ (80038cc <HAL_RCC_OscConfig+0x270>)
 8003702:	f043 0308 	orr.w	r3, r3, #8
 8003706:	6013      	str	r3, [r2, #0]
 8003708:	4b70      	ldr	r3, [pc, #448]	@ (80038cc <HAL_RCC_OscConfig+0x270>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	496d      	ldr	r1, [pc, #436]	@ (80038cc <HAL_RCC_OscConfig+0x270>)
 8003716:	4313      	orrs	r3, r2
 8003718:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800371a:	4b6c      	ldr	r3, [pc, #432]	@ (80038cc <HAL_RCC_OscConfig+0x270>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	021b      	lsls	r3, r3, #8
 8003728:	4968      	ldr	r1, [pc, #416]	@ (80038cc <HAL_RCC_OscConfig+0x270>)
 800372a:	4313      	orrs	r3, r2
 800372c:	604b      	str	r3, [r1, #4]
 800372e:	e025      	b.n	800377c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003730:	4b66      	ldr	r3, [pc, #408]	@ (80038cc <HAL_RCC_OscConfig+0x270>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a65      	ldr	r2, [pc, #404]	@ (80038cc <HAL_RCC_OscConfig+0x270>)
 8003736:	f043 0308 	orr.w	r3, r3, #8
 800373a:	6013      	str	r3, [r2, #0]
 800373c:	4b63      	ldr	r3, [pc, #396]	@ (80038cc <HAL_RCC_OscConfig+0x270>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a1b      	ldr	r3, [r3, #32]
 8003748:	4960      	ldr	r1, [pc, #384]	@ (80038cc <HAL_RCC_OscConfig+0x270>)
 800374a:	4313      	orrs	r3, r2
 800374c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800374e:	4b5f      	ldr	r3, [pc, #380]	@ (80038cc <HAL_RCC_OscConfig+0x270>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	69db      	ldr	r3, [r3, #28]
 800375a:	021b      	lsls	r3, r3, #8
 800375c:	495b      	ldr	r1, [pc, #364]	@ (80038cc <HAL_RCC_OscConfig+0x270>)
 800375e:	4313      	orrs	r3, r2
 8003760:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d109      	bne.n	800377c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a1b      	ldr	r3, [r3, #32]
 800376c:	4618      	mov	r0, r3
 800376e:	f000 fd15 	bl	800419c <RCC_SetFlashLatencyFromMSIRange>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d001      	beq.n	800377c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e343      	b.n	8003e04 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800377c:	f000 fc4a 	bl	8004014 <HAL_RCC_GetSysClockFreq>
 8003780:	4602      	mov	r2, r0
 8003782:	4b52      	ldr	r3, [pc, #328]	@ (80038cc <HAL_RCC_OscConfig+0x270>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	091b      	lsrs	r3, r3, #4
 8003788:	f003 030f 	and.w	r3, r3, #15
 800378c:	4950      	ldr	r1, [pc, #320]	@ (80038d0 <HAL_RCC_OscConfig+0x274>)
 800378e:	5ccb      	ldrb	r3, [r1, r3]
 8003790:	f003 031f 	and.w	r3, r3, #31
 8003794:	fa22 f303 	lsr.w	r3, r2, r3
 8003798:	4a4e      	ldr	r2, [pc, #312]	@ (80038d4 <HAL_RCC_OscConfig+0x278>)
 800379a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800379c:	4b4e      	ldr	r3, [pc, #312]	@ (80038d8 <HAL_RCC_OscConfig+0x27c>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7fe f81f 	bl	80017e4 <HAL_InitTick>
 80037a6:	4603      	mov	r3, r0
 80037a8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80037aa:	7bfb      	ldrb	r3, [r7, #15]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d052      	beq.n	8003856 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80037b0:	7bfb      	ldrb	r3, [r7, #15]
 80037b2:	e327      	b.n	8003e04 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d032      	beq.n	8003822 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80037bc:	4b43      	ldr	r3, [pc, #268]	@ (80038cc <HAL_RCC_OscConfig+0x270>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a42      	ldr	r2, [pc, #264]	@ (80038cc <HAL_RCC_OscConfig+0x270>)
 80037c2:	f043 0301 	orr.w	r3, r3, #1
 80037c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80037c8:	f7fe f85c 	bl	8001884 <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80037d0:	f7fe f858 	bl	8001884 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e310      	b.n	8003e04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037e2:	4b3a      	ldr	r3, [pc, #232]	@ (80038cc <HAL_RCC_OscConfig+0x270>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d0f0      	beq.n	80037d0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037ee:	4b37      	ldr	r3, [pc, #220]	@ (80038cc <HAL_RCC_OscConfig+0x270>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a36      	ldr	r2, [pc, #216]	@ (80038cc <HAL_RCC_OscConfig+0x270>)
 80037f4:	f043 0308 	orr.w	r3, r3, #8
 80037f8:	6013      	str	r3, [r2, #0]
 80037fa:	4b34      	ldr	r3, [pc, #208]	@ (80038cc <HAL_RCC_OscConfig+0x270>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	4931      	ldr	r1, [pc, #196]	@ (80038cc <HAL_RCC_OscConfig+0x270>)
 8003808:	4313      	orrs	r3, r2
 800380a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800380c:	4b2f      	ldr	r3, [pc, #188]	@ (80038cc <HAL_RCC_OscConfig+0x270>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	69db      	ldr	r3, [r3, #28]
 8003818:	021b      	lsls	r3, r3, #8
 800381a:	492c      	ldr	r1, [pc, #176]	@ (80038cc <HAL_RCC_OscConfig+0x270>)
 800381c:	4313      	orrs	r3, r2
 800381e:	604b      	str	r3, [r1, #4]
 8003820:	e01a      	b.n	8003858 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003822:	4b2a      	ldr	r3, [pc, #168]	@ (80038cc <HAL_RCC_OscConfig+0x270>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a29      	ldr	r2, [pc, #164]	@ (80038cc <HAL_RCC_OscConfig+0x270>)
 8003828:	f023 0301 	bic.w	r3, r3, #1
 800382c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800382e:	f7fe f829 	bl	8001884 <HAL_GetTick>
 8003832:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003834:	e008      	b.n	8003848 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003836:	f7fe f825 	bl	8001884 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	2b02      	cmp	r3, #2
 8003842:	d901      	bls.n	8003848 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e2dd      	b.n	8003e04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003848:	4b20      	ldr	r3, [pc, #128]	@ (80038cc <HAL_RCC_OscConfig+0x270>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d1f0      	bne.n	8003836 <HAL_RCC_OscConfig+0x1da>
 8003854:	e000      	b.n	8003858 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003856:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0301 	and.w	r3, r3, #1
 8003860:	2b00      	cmp	r3, #0
 8003862:	d074      	beq.n	800394e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	2b08      	cmp	r3, #8
 8003868:	d005      	beq.n	8003876 <HAL_RCC_OscConfig+0x21a>
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	2b0c      	cmp	r3, #12
 800386e:	d10e      	bne.n	800388e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	2b03      	cmp	r3, #3
 8003874:	d10b      	bne.n	800388e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003876:	4b15      	ldr	r3, [pc, #84]	@ (80038cc <HAL_RCC_OscConfig+0x270>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d064      	beq.n	800394c <HAL_RCC_OscConfig+0x2f0>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d160      	bne.n	800394c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e2ba      	b.n	8003e04 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003896:	d106      	bne.n	80038a6 <HAL_RCC_OscConfig+0x24a>
 8003898:	4b0c      	ldr	r3, [pc, #48]	@ (80038cc <HAL_RCC_OscConfig+0x270>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a0b      	ldr	r2, [pc, #44]	@ (80038cc <HAL_RCC_OscConfig+0x270>)
 800389e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038a2:	6013      	str	r3, [r2, #0]
 80038a4:	e026      	b.n	80038f4 <HAL_RCC_OscConfig+0x298>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038ae:	d115      	bne.n	80038dc <HAL_RCC_OscConfig+0x280>
 80038b0:	4b06      	ldr	r3, [pc, #24]	@ (80038cc <HAL_RCC_OscConfig+0x270>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a05      	ldr	r2, [pc, #20]	@ (80038cc <HAL_RCC_OscConfig+0x270>)
 80038b6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038ba:	6013      	str	r3, [r2, #0]
 80038bc:	4b03      	ldr	r3, [pc, #12]	@ (80038cc <HAL_RCC_OscConfig+0x270>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a02      	ldr	r2, [pc, #8]	@ (80038cc <HAL_RCC_OscConfig+0x270>)
 80038c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038c6:	6013      	str	r3, [r2, #0]
 80038c8:	e014      	b.n	80038f4 <HAL_RCC_OscConfig+0x298>
 80038ca:	bf00      	nop
 80038cc:	40021000 	.word	0x40021000
 80038d0:	08006678 	.word	0x08006678
 80038d4:	20000004 	.word	0x20000004
 80038d8:	20000008 	.word	0x20000008
 80038dc:	4ba0      	ldr	r3, [pc, #640]	@ (8003b60 <HAL_RCC_OscConfig+0x504>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a9f      	ldr	r2, [pc, #636]	@ (8003b60 <HAL_RCC_OscConfig+0x504>)
 80038e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038e6:	6013      	str	r3, [r2, #0]
 80038e8:	4b9d      	ldr	r3, [pc, #628]	@ (8003b60 <HAL_RCC_OscConfig+0x504>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a9c      	ldr	r2, [pc, #624]	@ (8003b60 <HAL_RCC_OscConfig+0x504>)
 80038ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d013      	beq.n	8003924 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fc:	f7fd ffc2 	bl	8001884 <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003904:	f7fd ffbe 	bl	8001884 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b64      	cmp	r3, #100	@ 0x64
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e276      	b.n	8003e04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003916:	4b92      	ldr	r3, [pc, #584]	@ (8003b60 <HAL_RCC_OscConfig+0x504>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d0f0      	beq.n	8003904 <HAL_RCC_OscConfig+0x2a8>
 8003922:	e014      	b.n	800394e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003924:	f7fd ffae 	bl	8001884 <HAL_GetTick>
 8003928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800392a:	e008      	b.n	800393e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800392c:	f7fd ffaa 	bl	8001884 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b64      	cmp	r3, #100	@ 0x64
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e262      	b.n	8003e04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800393e:	4b88      	ldr	r3, [pc, #544]	@ (8003b60 <HAL_RCC_OscConfig+0x504>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1f0      	bne.n	800392c <HAL_RCC_OscConfig+0x2d0>
 800394a:	e000      	b.n	800394e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800394c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0302 	and.w	r3, r3, #2
 8003956:	2b00      	cmp	r3, #0
 8003958:	d060      	beq.n	8003a1c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	2b04      	cmp	r3, #4
 800395e:	d005      	beq.n	800396c <HAL_RCC_OscConfig+0x310>
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	2b0c      	cmp	r3, #12
 8003964:	d119      	bne.n	800399a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	2b02      	cmp	r3, #2
 800396a:	d116      	bne.n	800399a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800396c:	4b7c      	ldr	r3, [pc, #496]	@ (8003b60 <HAL_RCC_OscConfig+0x504>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003974:	2b00      	cmp	r3, #0
 8003976:	d005      	beq.n	8003984 <HAL_RCC_OscConfig+0x328>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d101      	bne.n	8003984 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e23f      	b.n	8003e04 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003984:	4b76      	ldr	r3, [pc, #472]	@ (8003b60 <HAL_RCC_OscConfig+0x504>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	061b      	lsls	r3, r3, #24
 8003992:	4973      	ldr	r1, [pc, #460]	@ (8003b60 <HAL_RCC_OscConfig+0x504>)
 8003994:	4313      	orrs	r3, r2
 8003996:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003998:	e040      	b.n	8003a1c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d023      	beq.n	80039ea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039a2:	4b6f      	ldr	r3, [pc, #444]	@ (8003b60 <HAL_RCC_OscConfig+0x504>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a6e      	ldr	r2, [pc, #440]	@ (8003b60 <HAL_RCC_OscConfig+0x504>)
 80039a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ae:	f7fd ff69 	bl	8001884 <HAL_GetTick>
 80039b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039b4:	e008      	b.n	80039c8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039b6:	f7fd ff65 	bl	8001884 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d901      	bls.n	80039c8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e21d      	b.n	8003e04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039c8:	4b65      	ldr	r3, [pc, #404]	@ (8003b60 <HAL_RCC_OscConfig+0x504>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d0f0      	beq.n	80039b6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039d4:	4b62      	ldr	r3, [pc, #392]	@ (8003b60 <HAL_RCC_OscConfig+0x504>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	061b      	lsls	r3, r3, #24
 80039e2:	495f      	ldr	r1, [pc, #380]	@ (8003b60 <HAL_RCC_OscConfig+0x504>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	604b      	str	r3, [r1, #4]
 80039e8:	e018      	b.n	8003a1c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039ea:	4b5d      	ldr	r3, [pc, #372]	@ (8003b60 <HAL_RCC_OscConfig+0x504>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a5c      	ldr	r2, [pc, #368]	@ (8003b60 <HAL_RCC_OscConfig+0x504>)
 80039f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f6:	f7fd ff45 	bl	8001884 <HAL_GetTick>
 80039fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039fc:	e008      	b.n	8003a10 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039fe:	f7fd ff41 	bl	8001884 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d901      	bls.n	8003a10 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e1f9      	b.n	8003e04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a10:	4b53      	ldr	r3, [pc, #332]	@ (8003b60 <HAL_RCC_OscConfig+0x504>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1f0      	bne.n	80039fe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0308 	and.w	r3, r3, #8
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d03c      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d01c      	beq.n	8003a6a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a30:	4b4b      	ldr	r3, [pc, #300]	@ (8003b60 <HAL_RCC_OscConfig+0x504>)
 8003a32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a36:	4a4a      	ldr	r2, [pc, #296]	@ (8003b60 <HAL_RCC_OscConfig+0x504>)
 8003a38:	f043 0301 	orr.w	r3, r3, #1
 8003a3c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a40:	f7fd ff20 	bl	8001884 <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a46:	e008      	b.n	8003a5a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a48:	f7fd ff1c 	bl	8001884 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e1d4      	b.n	8003e04 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a5a:	4b41      	ldr	r3, [pc, #260]	@ (8003b60 <HAL_RCC_OscConfig+0x504>)
 8003a5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d0ef      	beq.n	8003a48 <HAL_RCC_OscConfig+0x3ec>
 8003a68:	e01b      	b.n	8003aa2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a6a:	4b3d      	ldr	r3, [pc, #244]	@ (8003b60 <HAL_RCC_OscConfig+0x504>)
 8003a6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a70:	4a3b      	ldr	r2, [pc, #236]	@ (8003b60 <HAL_RCC_OscConfig+0x504>)
 8003a72:	f023 0301 	bic.w	r3, r3, #1
 8003a76:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a7a:	f7fd ff03 	bl	8001884 <HAL_GetTick>
 8003a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a80:	e008      	b.n	8003a94 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a82:	f7fd feff 	bl	8001884 <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d901      	bls.n	8003a94 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e1b7      	b.n	8003e04 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a94:	4b32      	ldr	r3, [pc, #200]	@ (8003b60 <HAL_RCC_OscConfig+0x504>)
 8003a96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1ef      	bne.n	8003a82 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0304 	and.w	r3, r3, #4
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	f000 80a6 	beq.w	8003bfc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003ab4:	4b2a      	ldr	r3, [pc, #168]	@ (8003b60 <HAL_RCC_OscConfig+0x504>)
 8003ab6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ab8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d10d      	bne.n	8003adc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ac0:	4b27      	ldr	r3, [pc, #156]	@ (8003b60 <HAL_RCC_OscConfig+0x504>)
 8003ac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ac4:	4a26      	ldr	r2, [pc, #152]	@ (8003b60 <HAL_RCC_OscConfig+0x504>)
 8003ac6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003aca:	6593      	str	r3, [r2, #88]	@ 0x58
 8003acc:	4b24      	ldr	r3, [pc, #144]	@ (8003b60 <HAL_RCC_OscConfig+0x504>)
 8003ace:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ad0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ad4:	60bb      	str	r3, [r7, #8]
 8003ad6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003adc:	4b21      	ldr	r3, [pc, #132]	@ (8003b64 <HAL_RCC_OscConfig+0x508>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d118      	bne.n	8003b1a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ae8:	4b1e      	ldr	r3, [pc, #120]	@ (8003b64 <HAL_RCC_OscConfig+0x508>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a1d      	ldr	r2, [pc, #116]	@ (8003b64 <HAL_RCC_OscConfig+0x508>)
 8003aee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003af2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003af4:	f7fd fec6 	bl	8001884 <HAL_GetTick>
 8003af8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003afa:	e008      	b.n	8003b0e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003afc:	f7fd fec2 	bl	8001884 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e17a      	b.n	8003e04 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b0e:	4b15      	ldr	r3, [pc, #84]	@ (8003b64 <HAL_RCC_OscConfig+0x508>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d0f0      	beq.n	8003afc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d108      	bne.n	8003b34 <HAL_RCC_OscConfig+0x4d8>
 8003b22:	4b0f      	ldr	r3, [pc, #60]	@ (8003b60 <HAL_RCC_OscConfig+0x504>)
 8003b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b28:	4a0d      	ldr	r2, [pc, #52]	@ (8003b60 <HAL_RCC_OscConfig+0x504>)
 8003b2a:	f043 0301 	orr.w	r3, r3, #1
 8003b2e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b32:	e029      	b.n	8003b88 <HAL_RCC_OscConfig+0x52c>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	2b05      	cmp	r3, #5
 8003b3a:	d115      	bne.n	8003b68 <HAL_RCC_OscConfig+0x50c>
 8003b3c:	4b08      	ldr	r3, [pc, #32]	@ (8003b60 <HAL_RCC_OscConfig+0x504>)
 8003b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b42:	4a07      	ldr	r2, [pc, #28]	@ (8003b60 <HAL_RCC_OscConfig+0x504>)
 8003b44:	f043 0304 	orr.w	r3, r3, #4
 8003b48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b4c:	4b04      	ldr	r3, [pc, #16]	@ (8003b60 <HAL_RCC_OscConfig+0x504>)
 8003b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b52:	4a03      	ldr	r2, [pc, #12]	@ (8003b60 <HAL_RCC_OscConfig+0x504>)
 8003b54:	f043 0301 	orr.w	r3, r3, #1
 8003b58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b5c:	e014      	b.n	8003b88 <HAL_RCC_OscConfig+0x52c>
 8003b5e:	bf00      	nop
 8003b60:	40021000 	.word	0x40021000
 8003b64:	40007000 	.word	0x40007000
 8003b68:	4b9c      	ldr	r3, [pc, #624]	@ (8003ddc <HAL_RCC_OscConfig+0x780>)
 8003b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b6e:	4a9b      	ldr	r2, [pc, #620]	@ (8003ddc <HAL_RCC_OscConfig+0x780>)
 8003b70:	f023 0301 	bic.w	r3, r3, #1
 8003b74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b78:	4b98      	ldr	r3, [pc, #608]	@ (8003ddc <HAL_RCC_OscConfig+0x780>)
 8003b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b7e:	4a97      	ldr	r2, [pc, #604]	@ (8003ddc <HAL_RCC_OscConfig+0x780>)
 8003b80:	f023 0304 	bic.w	r3, r3, #4
 8003b84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d016      	beq.n	8003bbe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b90:	f7fd fe78 	bl	8001884 <HAL_GetTick>
 8003b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b96:	e00a      	b.n	8003bae <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b98:	f7fd fe74 	bl	8001884 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e12a      	b.n	8003e04 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bae:	4b8b      	ldr	r3, [pc, #556]	@ (8003ddc <HAL_RCC_OscConfig+0x780>)
 8003bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bb4:	f003 0302 	and.w	r3, r3, #2
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d0ed      	beq.n	8003b98 <HAL_RCC_OscConfig+0x53c>
 8003bbc:	e015      	b.n	8003bea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bbe:	f7fd fe61 	bl	8001884 <HAL_GetTick>
 8003bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bc4:	e00a      	b.n	8003bdc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bc6:	f7fd fe5d 	bl	8001884 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d901      	bls.n	8003bdc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e113      	b.n	8003e04 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bdc:	4b7f      	ldr	r3, [pc, #508]	@ (8003ddc <HAL_RCC_OscConfig+0x780>)
 8003bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1ed      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bea:	7ffb      	ldrb	r3, [r7, #31]
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d105      	bne.n	8003bfc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bf0:	4b7a      	ldr	r3, [pc, #488]	@ (8003ddc <HAL_RCC_OscConfig+0x780>)
 8003bf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bf4:	4a79      	ldr	r2, [pc, #484]	@ (8003ddc <HAL_RCC_OscConfig+0x780>)
 8003bf6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bfa:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f000 80fe 	beq.w	8003e02 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	f040 80d0 	bne.w	8003db0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003c10:	4b72      	ldr	r3, [pc, #456]	@ (8003ddc <HAL_RCC_OscConfig+0x780>)
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	f003 0203 	and.w	r2, r3, #3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d130      	bne.n	8003c86 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d127      	bne.n	8003c86 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c40:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d11f      	bne.n	8003c86 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003c50:	2a07      	cmp	r2, #7
 8003c52:	bf14      	ite	ne
 8003c54:	2201      	movne	r2, #1
 8003c56:	2200      	moveq	r2, #0
 8003c58:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d113      	bne.n	8003c86 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c68:	085b      	lsrs	r3, r3, #1
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d109      	bne.n	8003c86 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c7c:	085b      	lsrs	r3, r3, #1
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d06e      	beq.n	8003d64 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	2b0c      	cmp	r3, #12
 8003c8a:	d069      	beq.n	8003d60 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003c8c:	4b53      	ldr	r3, [pc, #332]	@ (8003ddc <HAL_RCC_OscConfig+0x780>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d105      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003c98:	4b50      	ldr	r3, [pc, #320]	@ (8003ddc <HAL_RCC_OscConfig+0x780>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d001      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e0ad      	b.n	8003e04 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003ca8:	4b4c      	ldr	r3, [pc, #304]	@ (8003ddc <HAL_RCC_OscConfig+0x780>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a4b      	ldr	r2, [pc, #300]	@ (8003ddc <HAL_RCC_OscConfig+0x780>)
 8003cae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003cb2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003cb4:	f7fd fde6 	bl	8001884 <HAL_GetTick>
 8003cb8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cba:	e008      	b.n	8003cce <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cbc:	f7fd fde2 	bl	8001884 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e09a      	b.n	8003e04 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cce:	4b43      	ldr	r3, [pc, #268]	@ (8003ddc <HAL_RCC_OscConfig+0x780>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1f0      	bne.n	8003cbc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cda:	4b40      	ldr	r3, [pc, #256]	@ (8003ddc <HAL_RCC_OscConfig+0x780>)
 8003cdc:	68da      	ldr	r2, [r3, #12]
 8003cde:	4b40      	ldr	r3, [pc, #256]	@ (8003de0 <HAL_RCC_OscConfig+0x784>)
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003cea:	3a01      	subs	r2, #1
 8003cec:	0112      	lsls	r2, r2, #4
 8003cee:	4311      	orrs	r1, r2
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003cf4:	0212      	lsls	r2, r2, #8
 8003cf6:	4311      	orrs	r1, r2
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003cfc:	0852      	lsrs	r2, r2, #1
 8003cfe:	3a01      	subs	r2, #1
 8003d00:	0552      	lsls	r2, r2, #21
 8003d02:	4311      	orrs	r1, r2
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003d08:	0852      	lsrs	r2, r2, #1
 8003d0a:	3a01      	subs	r2, #1
 8003d0c:	0652      	lsls	r2, r2, #25
 8003d0e:	4311      	orrs	r1, r2
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003d14:	0912      	lsrs	r2, r2, #4
 8003d16:	0452      	lsls	r2, r2, #17
 8003d18:	430a      	orrs	r2, r1
 8003d1a:	4930      	ldr	r1, [pc, #192]	@ (8003ddc <HAL_RCC_OscConfig+0x780>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003d20:	4b2e      	ldr	r3, [pc, #184]	@ (8003ddc <HAL_RCC_OscConfig+0x780>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a2d      	ldr	r2, [pc, #180]	@ (8003ddc <HAL_RCC_OscConfig+0x780>)
 8003d26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d2a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d2c:	4b2b      	ldr	r3, [pc, #172]	@ (8003ddc <HAL_RCC_OscConfig+0x780>)
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	4a2a      	ldr	r2, [pc, #168]	@ (8003ddc <HAL_RCC_OscConfig+0x780>)
 8003d32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d36:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d38:	f7fd fda4 	bl	8001884 <HAL_GetTick>
 8003d3c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d3e:	e008      	b.n	8003d52 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d40:	f7fd fda0 	bl	8001884 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e058      	b.n	8003e04 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d52:	4b22      	ldr	r3, [pc, #136]	@ (8003ddc <HAL_RCC_OscConfig+0x780>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d0f0      	beq.n	8003d40 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d5e:	e050      	b.n	8003e02 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e04f      	b.n	8003e04 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d64:	4b1d      	ldr	r3, [pc, #116]	@ (8003ddc <HAL_RCC_OscConfig+0x780>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d148      	bne.n	8003e02 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003d70:	4b1a      	ldr	r3, [pc, #104]	@ (8003ddc <HAL_RCC_OscConfig+0x780>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a19      	ldr	r2, [pc, #100]	@ (8003ddc <HAL_RCC_OscConfig+0x780>)
 8003d76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d7a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d7c:	4b17      	ldr	r3, [pc, #92]	@ (8003ddc <HAL_RCC_OscConfig+0x780>)
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	4a16      	ldr	r2, [pc, #88]	@ (8003ddc <HAL_RCC_OscConfig+0x780>)
 8003d82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d86:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d88:	f7fd fd7c 	bl	8001884 <HAL_GetTick>
 8003d8c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d8e:	e008      	b.n	8003da2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d90:	f7fd fd78 	bl	8001884 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e030      	b.n	8003e04 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003da2:	4b0e      	ldr	r3, [pc, #56]	@ (8003ddc <HAL_RCC_OscConfig+0x780>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d0f0      	beq.n	8003d90 <HAL_RCC_OscConfig+0x734>
 8003dae:	e028      	b.n	8003e02 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	2b0c      	cmp	r3, #12
 8003db4:	d023      	beq.n	8003dfe <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003db6:	4b09      	ldr	r3, [pc, #36]	@ (8003ddc <HAL_RCC_OscConfig+0x780>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a08      	ldr	r2, [pc, #32]	@ (8003ddc <HAL_RCC_OscConfig+0x780>)
 8003dbc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003dc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc2:	f7fd fd5f 	bl	8001884 <HAL_GetTick>
 8003dc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dc8:	e00c      	b.n	8003de4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dca:	f7fd fd5b 	bl	8001884 <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d905      	bls.n	8003de4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e013      	b.n	8003e04 <HAL_RCC_OscConfig+0x7a8>
 8003ddc:	40021000 	.word	0x40021000
 8003de0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003de4:	4b09      	ldr	r3, [pc, #36]	@ (8003e0c <HAL_RCC_OscConfig+0x7b0>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1ec      	bne.n	8003dca <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003df0:	4b06      	ldr	r3, [pc, #24]	@ (8003e0c <HAL_RCC_OscConfig+0x7b0>)
 8003df2:	68da      	ldr	r2, [r3, #12]
 8003df4:	4905      	ldr	r1, [pc, #20]	@ (8003e0c <HAL_RCC_OscConfig+0x7b0>)
 8003df6:	4b06      	ldr	r3, [pc, #24]	@ (8003e10 <HAL_RCC_OscConfig+0x7b4>)
 8003df8:	4013      	ands	r3, r2
 8003dfa:	60cb      	str	r3, [r1, #12]
 8003dfc:	e001      	b.n	8003e02 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e000      	b.n	8003e04 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3720      	adds	r7, #32
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	40021000 	.word	0x40021000
 8003e10:	feeefffc 	.word	0xfeeefffc

08003e14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d101      	bne.n	8003e28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e0e7      	b.n	8003ff8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e28:	4b75      	ldr	r3, [pc, #468]	@ (8004000 <HAL_RCC_ClockConfig+0x1ec>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0307 	and.w	r3, r3, #7
 8003e30:	683a      	ldr	r2, [r7, #0]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d910      	bls.n	8003e58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e36:	4b72      	ldr	r3, [pc, #456]	@ (8004000 <HAL_RCC_ClockConfig+0x1ec>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f023 0207 	bic.w	r2, r3, #7
 8003e3e:	4970      	ldr	r1, [pc, #448]	@ (8004000 <HAL_RCC_ClockConfig+0x1ec>)
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e46:	4b6e      	ldr	r3, [pc, #440]	@ (8004000 <HAL_RCC_ClockConfig+0x1ec>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0307 	and.w	r3, r3, #7
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d001      	beq.n	8003e58 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e0cf      	b.n	8003ff8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0302 	and.w	r3, r3, #2
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d010      	beq.n	8003e86 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689a      	ldr	r2, [r3, #8]
 8003e68:	4b66      	ldr	r3, [pc, #408]	@ (8004004 <HAL_RCC_ClockConfig+0x1f0>)
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d908      	bls.n	8003e86 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e74:	4b63      	ldr	r3, [pc, #396]	@ (8004004 <HAL_RCC_ClockConfig+0x1f0>)
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	4960      	ldr	r1, [pc, #384]	@ (8004004 <HAL_RCC_ClockConfig+0x1f0>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d04c      	beq.n	8003f2c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	2b03      	cmp	r3, #3
 8003e98:	d107      	bne.n	8003eaa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e9a:	4b5a      	ldr	r3, [pc, #360]	@ (8004004 <HAL_RCC_ClockConfig+0x1f0>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d121      	bne.n	8003eea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e0a6      	b.n	8003ff8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d107      	bne.n	8003ec2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003eb2:	4b54      	ldr	r3, [pc, #336]	@ (8004004 <HAL_RCC_ClockConfig+0x1f0>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d115      	bne.n	8003eea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e09a      	b.n	8003ff8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d107      	bne.n	8003eda <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003eca:	4b4e      	ldr	r3, [pc, #312]	@ (8004004 <HAL_RCC_ClockConfig+0x1f0>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d109      	bne.n	8003eea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e08e      	b.n	8003ff8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003eda:	4b4a      	ldr	r3, [pc, #296]	@ (8004004 <HAL_RCC_ClockConfig+0x1f0>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e086      	b.n	8003ff8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003eea:	4b46      	ldr	r3, [pc, #280]	@ (8004004 <HAL_RCC_ClockConfig+0x1f0>)
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f023 0203 	bic.w	r2, r3, #3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	4943      	ldr	r1, [pc, #268]	@ (8004004 <HAL_RCC_ClockConfig+0x1f0>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003efc:	f7fd fcc2 	bl	8001884 <HAL_GetTick>
 8003f00:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f02:	e00a      	b.n	8003f1a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f04:	f7fd fcbe 	bl	8001884 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e06e      	b.n	8003ff8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f1a:	4b3a      	ldr	r3, [pc, #232]	@ (8004004 <HAL_RCC_ClockConfig+0x1f0>)
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f003 020c 	and.w	r2, r3, #12
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d1eb      	bne.n	8003f04 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d010      	beq.n	8003f5a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689a      	ldr	r2, [r3, #8]
 8003f3c:	4b31      	ldr	r3, [pc, #196]	@ (8004004 <HAL_RCC_ClockConfig+0x1f0>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d208      	bcs.n	8003f5a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f48:	4b2e      	ldr	r3, [pc, #184]	@ (8004004 <HAL_RCC_ClockConfig+0x1f0>)
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	492b      	ldr	r1, [pc, #172]	@ (8004004 <HAL_RCC_ClockConfig+0x1f0>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f5a:	4b29      	ldr	r3, [pc, #164]	@ (8004000 <HAL_RCC_ClockConfig+0x1ec>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0307 	and.w	r3, r3, #7
 8003f62:	683a      	ldr	r2, [r7, #0]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d210      	bcs.n	8003f8a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f68:	4b25      	ldr	r3, [pc, #148]	@ (8004000 <HAL_RCC_ClockConfig+0x1ec>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f023 0207 	bic.w	r2, r3, #7
 8003f70:	4923      	ldr	r1, [pc, #140]	@ (8004000 <HAL_RCC_ClockConfig+0x1ec>)
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f78:	4b21      	ldr	r3, [pc, #132]	@ (8004000 <HAL_RCC_ClockConfig+0x1ec>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0307 	and.w	r3, r3, #7
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d001      	beq.n	8003f8a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e036      	b.n	8003ff8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0304 	and.w	r3, r3, #4
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d008      	beq.n	8003fa8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f96:	4b1b      	ldr	r3, [pc, #108]	@ (8004004 <HAL_RCC_ClockConfig+0x1f0>)
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	4918      	ldr	r1, [pc, #96]	@ (8004004 <HAL_RCC_ClockConfig+0x1f0>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0308 	and.w	r3, r3, #8
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d009      	beq.n	8003fc8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fb4:	4b13      	ldr	r3, [pc, #76]	@ (8004004 <HAL_RCC_ClockConfig+0x1f0>)
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	00db      	lsls	r3, r3, #3
 8003fc2:	4910      	ldr	r1, [pc, #64]	@ (8004004 <HAL_RCC_ClockConfig+0x1f0>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003fc8:	f000 f824 	bl	8004014 <HAL_RCC_GetSysClockFreq>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	4b0d      	ldr	r3, [pc, #52]	@ (8004004 <HAL_RCC_ClockConfig+0x1f0>)
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	091b      	lsrs	r3, r3, #4
 8003fd4:	f003 030f 	and.w	r3, r3, #15
 8003fd8:	490b      	ldr	r1, [pc, #44]	@ (8004008 <HAL_RCC_ClockConfig+0x1f4>)
 8003fda:	5ccb      	ldrb	r3, [r1, r3]
 8003fdc:	f003 031f 	and.w	r3, r3, #31
 8003fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8003fe4:	4a09      	ldr	r2, [pc, #36]	@ (800400c <HAL_RCC_ClockConfig+0x1f8>)
 8003fe6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003fe8:	4b09      	ldr	r3, [pc, #36]	@ (8004010 <HAL_RCC_ClockConfig+0x1fc>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7fd fbf9 	bl	80017e4 <HAL_InitTick>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	72fb      	strb	r3, [r7, #11]

  return status;
 8003ff6:	7afb      	ldrb	r3, [r7, #11]
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3710      	adds	r7, #16
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	40022000 	.word	0x40022000
 8004004:	40021000 	.word	0x40021000
 8004008:	08006678 	.word	0x08006678
 800400c:	20000004 	.word	0x20000004
 8004010:	20000008 	.word	0x20000008

08004014 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004014:	b480      	push	{r7}
 8004016:	b089      	sub	sp, #36	@ 0x24
 8004018:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800401a:	2300      	movs	r3, #0
 800401c:	61fb      	str	r3, [r7, #28]
 800401e:	2300      	movs	r3, #0
 8004020:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004022:	4b3e      	ldr	r3, [pc, #248]	@ (800411c <HAL_RCC_GetSysClockFreq+0x108>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f003 030c 	and.w	r3, r3, #12
 800402a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800402c:	4b3b      	ldr	r3, [pc, #236]	@ (800411c <HAL_RCC_GetSysClockFreq+0x108>)
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	f003 0303 	and.w	r3, r3, #3
 8004034:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d005      	beq.n	8004048 <HAL_RCC_GetSysClockFreq+0x34>
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	2b0c      	cmp	r3, #12
 8004040:	d121      	bne.n	8004086 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d11e      	bne.n	8004086 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004048:	4b34      	ldr	r3, [pc, #208]	@ (800411c <HAL_RCC_GetSysClockFreq+0x108>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0308 	and.w	r3, r3, #8
 8004050:	2b00      	cmp	r3, #0
 8004052:	d107      	bne.n	8004064 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004054:	4b31      	ldr	r3, [pc, #196]	@ (800411c <HAL_RCC_GetSysClockFreq+0x108>)
 8004056:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800405a:	0a1b      	lsrs	r3, r3, #8
 800405c:	f003 030f 	and.w	r3, r3, #15
 8004060:	61fb      	str	r3, [r7, #28]
 8004062:	e005      	b.n	8004070 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004064:	4b2d      	ldr	r3, [pc, #180]	@ (800411c <HAL_RCC_GetSysClockFreq+0x108>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	091b      	lsrs	r3, r3, #4
 800406a:	f003 030f 	and.w	r3, r3, #15
 800406e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004070:	4a2b      	ldr	r2, [pc, #172]	@ (8004120 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004078:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d10d      	bne.n	800409c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004084:	e00a      	b.n	800409c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	2b04      	cmp	r3, #4
 800408a:	d102      	bne.n	8004092 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800408c:	4b25      	ldr	r3, [pc, #148]	@ (8004124 <HAL_RCC_GetSysClockFreq+0x110>)
 800408e:	61bb      	str	r3, [r7, #24]
 8004090:	e004      	b.n	800409c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	2b08      	cmp	r3, #8
 8004096:	d101      	bne.n	800409c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004098:	4b23      	ldr	r3, [pc, #140]	@ (8004128 <HAL_RCC_GetSysClockFreq+0x114>)
 800409a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	2b0c      	cmp	r3, #12
 80040a0:	d134      	bne.n	800410c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80040a2:	4b1e      	ldr	r3, [pc, #120]	@ (800411c <HAL_RCC_GetSysClockFreq+0x108>)
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	f003 0303 	and.w	r3, r3, #3
 80040aa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d003      	beq.n	80040ba <HAL_RCC_GetSysClockFreq+0xa6>
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	2b03      	cmp	r3, #3
 80040b6:	d003      	beq.n	80040c0 <HAL_RCC_GetSysClockFreq+0xac>
 80040b8:	e005      	b.n	80040c6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80040ba:	4b1a      	ldr	r3, [pc, #104]	@ (8004124 <HAL_RCC_GetSysClockFreq+0x110>)
 80040bc:	617b      	str	r3, [r7, #20]
      break;
 80040be:	e005      	b.n	80040cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80040c0:	4b19      	ldr	r3, [pc, #100]	@ (8004128 <HAL_RCC_GetSysClockFreq+0x114>)
 80040c2:	617b      	str	r3, [r7, #20]
      break;
 80040c4:	e002      	b.n	80040cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	617b      	str	r3, [r7, #20]
      break;
 80040ca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040cc:	4b13      	ldr	r3, [pc, #76]	@ (800411c <HAL_RCC_GetSysClockFreq+0x108>)
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	091b      	lsrs	r3, r3, #4
 80040d2:	f003 0307 	and.w	r3, r3, #7
 80040d6:	3301      	adds	r3, #1
 80040d8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80040da:	4b10      	ldr	r3, [pc, #64]	@ (800411c <HAL_RCC_GetSysClockFreq+0x108>)
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	0a1b      	lsrs	r3, r3, #8
 80040e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040e4:	697a      	ldr	r2, [r7, #20]
 80040e6:	fb03 f202 	mul.w	r2, r3, r2
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040f2:	4b0a      	ldr	r3, [pc, #40]	@ (800411c <HAL_RCC_GetSysClockFreq+0x108>)
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	0e5b      	lsrs	r3, r3, #25
 80040f8:	f003 0303 	and.w	r3, r3, #3
 80040fc:	3301      	adds	r3, #1
 80040fe:	005b      	lsls	r3, r3, #1
 8004100:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	fbb2 f3f3 	udiv	r3, r2, r3
 800410a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800410c:	69bb      	ldr	r3, [r7, #24]
}
 800410e:	4618      	mov	r0, r3
 8004110:	3724      	adds	r7, #36	@ 0x24
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	40021000 	.word	0x40021000
 8004120:	08006690 	.word	0x08006690
 8004124:	00f42400 	.word	0x00f42400
 8004128:	007a1200 	.word	0x007a1200

0800412c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800412c:	b480      	push	{r7}
 800412e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004130:	4b03      	ldr	r3, [pc, #12]	@ (8004140 <HAL_RCC_GetHCLKFreq+0x14>)
 8004132:	681b      	ldr	r3, [r3, #0]
}
 8004134:	4618      	mov	r0, r3
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	20000004 	.word	0x20000004

08004144 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004148:	f7ff fff0 	bl	800412c <HAL_RCC_GetHCLKFreq>
 800414c:	4602      	mov	r2, r0
 800414e:	4b06      	ldr	r3, [pc, #24]	@ (8004168 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	0a1b      	lsrs	r3, r3, #8
 8004154:	f003 0307 	and.w	r3, r3, #7
 8004158:	4904      	ldr	r1, [pc, #16]	@ (800416c <HAL_RCC_GetPCLK1Freq+0x28>)
 800415a:	5ccb      	ldrb	r3, [r1, r3]
 800415c:	f003 031f 	and.w	r3, r3, #31
 8004160:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004164:	4618      	mov	r0, r3
 8004166:	bd80      	pop	{r7, pc}
 8004168:	40021000 	.word	0x40021000
 800416c:	08006688 	.word	0x08006688

08004170 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004174:	f7ff ffda 	bl	800412c <HAL_RCC_GetHCLKFreq>
 8004178:	4602      	mov	r2, r0
 800417a:	4b06      	ldr	r3, [pc, #24]	@ (8004194 <HAL_RCC_GetPCLK2Freq+0x24>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	0adb      	lsrs	r3, r3, #11
 8004180:	f003 0307 	and.w	r3, r3, #7
 8004184:	4904      	ldr	r1, [pc, #16]	@ (8004198 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004186:	5ccb      	ldrb	r3, [r1, r3]
 8004188:	f003 031f 	and.w	r3, r3, #31
 800418c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004190:	4618      	mov	r0, r3
 8004192:	bd80      	pop	{r7, pc}
 8004194:	40021000 	.word	0x40021000
 8004198:	08006688 	.word	0x08006688

0800419c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80041a4:	2300      	movs	r3, #0
 80041a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80041a8:	4b2a      	ldr	r3, [pc, #168]	@ (8004254 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d003      	beq.n	80041bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80041b4:	f7ff f9ee 	bl	8003594 <HAL_PWREx_GetVoltageRange>
 80041b8:	6178      	str	r0, [r7, #20]
 80041ba:	e014      	b.n	80041e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80041bc:	4b25      	ldr	r3, [pc, #148]	@ (8004254 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041c0:	4a24      	ldr	r2, [pc, #144]	@ (8004254 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80041c8:	4b22      	ldr	r3, [pc, #136]	@ (8004254 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041d0:	60fb      	str	r3, [r7, #12]
 80041d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80041d4:	f7ff f9de 	bl	8003594 <HAL_PWREx_GetVoltageRange>
 80041d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80041da:	4b1e      	ldr	r3, [pc, #120]	@ (8004254 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041de:	4a1d      	ldr	r2, [pc, #116]	@ (8004254 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041e4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041ec:	d10b      	bne.n	8004206 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2b80      	cmp	r3, #128	@ 0x80
 80041f2:	d919      	bls.n	8004228 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2ba0      	cmp	r3, #160	@ 0xa0
 80041f8:	d902      	bls.n	8004200 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80041fa:	2302      	movs	r3, #2
 80041fc:	613b      	str	r3, [r7, #16]
 80041fe:	e013      	b.n	8004228 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004200:	2301      	movs	r3, #1
 8004202:	613b      	str	r3, [r7, #16]
 8004204:	e010      	b.n	8004228 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2b80      	cmp	r3, #128	@ 0x80
 800420a:	d902      	bls.n	8004212 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800420c:	2303      	movs	r3, #3
 800420e:	613b      	str	r3, [r7, #16]
 8004210:	e00a      	b.n	8004228 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2b80      	cmp	r3, #128	@ 0x80
 8004216:	d102      	bne.n	800421e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004218:	2302      	movs	r3, #2
 800421a:	613b      	str	r3, [r7, #16]
 800421c:	e004      	b.n	8004228 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2b70      	cmp	r3, #112	@ 0x70
 8004222:	d101      	bne.n	8004228 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004224:	2301      	movs	r3, #1
 8004226:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004228:	4b0b      	ldr	r3, [pc, #44]	@ (8004258 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f023 0207 	bic.w	r2, r3, #7
 8004230:	4909      	ldr	r1, [pc, #36]	@ (8004258 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	4313      	orrs	r3, r2
 8004236:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004238:	4b07      	ldr	r3, [pc, #28]	@ (8004258 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0307 	and.w	r3, r3, #7
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	429a      	cmp	r2, r3
 8004244:	d001      	beq.n	800424a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e000      	b.n	800424c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800424a:	2300      	movs	r3, #0
}
 800424c:	4618      	mov	r0, r3
 800424e:	3718      	adds	r7, #24
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	40021000 	.word	0x40021000
 8004258:	40022000 	.word	0x40022000

0800425c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004264:	2300      	movs	r3, #0
 8004266:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004268:	2300      	movs	r3, #0
 800426a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004274:	2b00      	cmp	r3, #0
 8004276:	d041      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800427c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004280:	d02a      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004282:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004286:	d824      	bhi.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004288:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800428c:	d008      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800428e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004292:	d81e      	bhi.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00a      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004298:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800429c:	d010      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800429e:	e018      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80042a0:	4b86      	ldr	r3, [pc, #536]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	4a85      	ldr	r2, [pc, #532]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042aa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042ac:	e015      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	3304      	adds	r3, #4
 80042b2:	2100      	movs	r1, #0
 80042b4:	4618      	mov	r0, r3
 80042b6:	f000 fabb 	bl	8004830 <RCCEx_PLLSAI1_Config>
 80042ba:	4603      	mov	r3, r0
 80042bc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042be:	e00c      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	3320      	adds	r3, #32
 80042c4:	2100      	movs	r1, #0
 80042c6:	4618      	mov	r0, r3
 80042c8:	f000 fba6 	bl	8004a18 <RCCEx_PLLSAI2_Config>
 80042cc:	4603      	mov	r3, r0
 80042ce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042d0:	e003      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	74fb      	strb	r3, [r7, #19]
      break;
 80042d6:	e000      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80042d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042da:	7cfb      	ldrb	r3, [r7, #19]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d10b      	bne.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042e0:	4b76      	ldr	r3, [pc, #472]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042e6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042ee:	4973      	ldr	r1, [pc, #460]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80042f6:	e001      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042f8:	7cfb      	ldrb	r3, [r7, #19]
 80042fa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d041      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800430c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004310:	d02a      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004312:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004316:	d824      	bhi.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004318:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800431c:	d008      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800431e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004322:	d81e      	bhi.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004324:	2b00      	cmp	r3, #0
 8004326:	d00a      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004328:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800432c:	d010      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800432e:	e018      	b.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004330:	4b62      	ldr	r3, [pc, #392]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	4a61      	ldr	r2, [pc, #388]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004336:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800433a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800433c:	e015      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	3304      	adds	r3, #4
 8004342:	2100      	movs	r1, #0
 8004344:	4618      	mov	r0, r3
 8004346:	f000 fa73 	bl	8004830 <RCCEx_PLLSAI1_Config>
 800434a:	4603      	mov	r3, r0
 800434c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800434e:	e00c      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	3320      	adds	r3, #32
 8004354:	2100      	movs	r1, #0
 8004356:	4618      	mov	r0, r3
 8004358:	f000 fb5e 	bl	8004a18 <RCCEx_PLLSAI2_Config>
 800435c:	4603      	mov	r3, r0
 800435e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004360:	e003      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	74fb      	strb	r3, [r7, #19]
      break;
 8004366:	e000      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004368:	bf00      	nop
    }

    if(ret == HAL_OK)
 800436a:	7cfb      	ldrb	r3, [r7, #19]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d10b      	bne.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004370:	4b52      	ldr	r3, [pc, #328]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004372:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004376:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800437e:	494f      	ldr	r1, [pc, #316]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004380:	4313      	orrs	r3, r2
 8004382:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004386:	e001      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004388:	7cfb      	ldrb	r3, [r7, #19]
 800438a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004394:	2b00      	cmp	r3, #0
 8004396:	f000 80a0 	beq.w	80044da <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800439a:	2300      	movs	r3, #0
 800439c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800439e:	4b47      	ldr	r3, [pc, #284]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d101      	bne.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x152>
 80043aa:	2301      	movs	r3, #1
 80043ac:	e000      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80043ae:	2300      	movs	r3, #0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00d      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043b4:	4b41      	ldr	r3, [pc, #260]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043b8:	4a40      	ldr	r2, [pc, #256]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043be:	6593      	str	r3, [r2, #88]	@ 0x58
 80043c0:	4b3e      	ldr	r3, [pc, #248]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043c8:	60bb      	str	r3, [r7, #8]
 80043ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043cc:	2301      	movs	r3, #1
 80043ce:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043d0:	4b3b      	ldr	r3, [pc, #236]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a3a      	ldr	r2, [pc, #232]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80043d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043dc:	f7fd fa52 	bl	8001884 <HAL_GetTick>
 80043e0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043e2:	e009      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043e4:	f7fd fa4e 	bl	8001884 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d902      	bls.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	74fb      	strb	r3, [r7, #19]
        break;
 80043f6:	e005      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043f8:	4b31      	ldr	r3, [pc, #196]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004400:	2b00      	cmp	r3, #0
 8004402:	d0ef      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004404:	7cfb      	ldrb	r3, [r7, #19]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d15c      	bne.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800440a:	4b2c      	ldr	r3, [pc, #176]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800440c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004410:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004414:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d01f      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	429a      	cmp	r2, r3
 8004426:	d019      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004428:	4b24      	ldr	r3, [pc, #144]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800442a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800442e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004432:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004434:	4b21      	ldr	r3, [pc, #132]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004436:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800443a:	4a20      	ldr	r2, [pc, #128]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800443c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004440:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004444:	4b1d      	ldr	r3, [pc, #116]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004446:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800444a:	4a1c      	ldr	r2, [pc, #112]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800444c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004450:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004454:	4a19      	ldr	r2, [pc, #100]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	2b00      	cmp	r3, #0
 8004464:	d016      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004466:	f7fd fa0d 	bl	8001884 <HAL_GetTick>
 800446a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800446c:	e00b      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800446e:	f7fd fa09 	bl	8001884 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	f241 3288 	movw	r2, #5000	@ 0x1388
 800447c:	4293      	cmp	r3, r2
 800447e:	d902      	bls.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	74fb      	strb	r3, [r7, #19]
            break;
 8004484:	e006      	b.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004486:	4b0d      	ldr	r3, [pc, #52]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004488:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800448c:	f003 0302 	and.w	r3, r3, #2
 8004490:	2b00      	cmp	r3, #0
 8004492:	d0ec      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004494:	7cfb      	ldrb	r3, [r7, #19]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d10c      	bne.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800449a:	4b08      	ldr	r3, [pc, #32]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800449c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044aa:	4904      	ldr	r1, [pc, #16]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80044b2:	e009      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044b4:	7cfb      	ldrb	r3, [r7, #19]
 80044b6:	74bb      	strb	r3, [r7, #18]
 80044b8:	e006      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80044ba:	bf00      	nop
 80044bc:	40021000 	.word	0x40021000
 80044c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044c4:	7cfb      	ldrb	r3, [r7, #19]
 80044c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044c8:	7c7b      	ldrb	r3, [r7, #17]
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d105      	bne.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044ce:	4b9e      	ldr	r3, [pc, #632]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044d2:	4a9d      	ldr	r2, [pc, #628]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044d8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0301 	and.w	r3, r3, #1
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00a      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044e6:	4b98      	ldr	r3, [pc, #608]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ec:	f023 0203 	bic.w	r2, r3, #3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044f4:	4994      	ldr	r1, [pc, #592]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0302 	and.w	r3, r3, #2
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00a      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004508:	4b8f      	ldr	r3, [pc, #572]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800450a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800450e:	f023 020c 	bic.w	r2, r3, #12
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004516:	498c      	ldr	r1, [pc, #560]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004518:	4313      	orrs	r3, r2
 800451a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0304 	and.w	r3, r3, #4
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00a      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800452a:	4b87      	ldr	r3, [pc, #540]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800452c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004530:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004538:	4983      	ldr	r1, [pc, #524]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800453a:	4313      	orrs	r3, r2
 800453c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0308 	and.w	r3, r3, #8
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00a      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800454c:	4b7e      	ldr	r3, [pc, #504]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800454e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004552:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800455a:	497b      	ldr	r1, [pc, #492]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800455c:	4313      	orrs	r3, r2
 800455e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0310 	and.w	r3, r3, #16
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00a      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800456e:	4b76      	ldr	r3, [pc, #472]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004570:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004574:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800457c:	4972      	ldr	r1, [pc, #456]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800457e:	4313      	orrs	r3, r2
 8004580:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0320 	and.w	r3, r3, #32
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00a      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004590:	4b6d      	ldr	r3, [pc, #436]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004592:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004596:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800459e:	496a      	ldr	r1, [pc, #424]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00a      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045b2:	4b65      	ldr	r3, [pc, #404]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045b8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045c0:	4961      	ldr	r1, [pc, #388]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00a      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80045d4:	4b5c      	ldr	r3, [pc, #368]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045e2:	4959      	ldr	r1, [pc, #356]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00a      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045f6:	4b54      	ldr	r3, [pc, #336]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045fc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004604:	4950      	ldr	r1, [pc, #320]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004606:	4313      	orrs	r3, r2
 8004608:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00a      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004618:	4b4b      	ldr	r3, [pc, #300]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800461a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800461e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004626:	4948      	ldr	r1, [pc, #288]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004628:	4313      	orrs	r3, r2
 800462a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00a      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800463a:	4b43      	ldr	r3, [pc, #268]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800463c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004640:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004648:	493f      	ldr	r1, [pc, #252]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800464a:	4313      	orrs	r3, r2
 800464c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d028      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800465c:	4b3a      	ldr	r3, [pc, #232]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800465e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004662:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800466a:	4937      	ldr	r1, [pc, #220]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800466c:	4313      	orrs	r3, r2
 800466e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004676:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800467a:	d106      	bne.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800467c:	4b32      	ldr	r3, [pc, #200]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	4a31      	ldr	r2, [pc, #196]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004682:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004686:	60d3      	str	r3, [r2, #12]
 8004688:	e011      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800468e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004692:	d10c      	bne.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	3304      	adds	r3, #4
 8004698:	2101      	movs	r1, #1
 800469a:	4618      	mov	r0, r3
 800469c:	f000 f8c8 	bl	8004830 <RCCEx_PLLSAI1_Config>
 80046a0:	4603      	mov	r3, r0
 80046a2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80046a4:	7cfb      	ldrb	r3, [r7, #19]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d001      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80046aa:	7cfb      	ldrb	r3, [r7, #19]
 80046ac:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d028      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80046ba:	4b23      	ldr	r3, [pc, #140]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046c0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046c8:	491f      	ldr	r1, [pc, #124]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046d8:	d106      	bne.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046da:	4b1b      	ldr	r3, [pc, #108]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	4a1a      	ldr	r2, [pc, #104]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80046e4:	60d3      	str	r3, [r2, #12]
 80046e6:	e011      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80046f0:	d10c      	bne.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	3304      	adds	r3, #4
 80046f6:	2101      	movs	r1, #1
 80046f8:	4618      	mov	r0, r3
 80046fa:	f000 f899 	bl	8004830 <RCCEx_PLLSAI1_Config>
 80046fe:	4603      	mov	r3, r0
 8004700:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004702:	7cfb      	ldrb	r3, [r7, #19]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d001      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004708:	7cfb      	ldrb	r3, [r7, #19]
 800470a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d02b      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004718:	4b0b      	ldr	r3, [pc, #44]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800471a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800471e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004726:	4908      	ldr	r1, [pc, #32]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004728:	4313      	orrs	r3, r2
 800472a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004732:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004736:	d109      	bne.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004738:	4b03      	ldr	r3, [pc, #12]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	4a02      	ldr	r2, [pc, #8]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800473e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004742:	60d3      	str	r3, [r2, #12]
 8004744:	e014      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004746:	bf00      	nop
 8004748:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004750:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004754:	d10c      	bne.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	3304      	adds	r3, #4
 800475a:	2101      	movs	r1, #1
 800475c:	4618      	mov	r0, r3
 800475e:	f000 f867 	bl	8004830 <RCCEx_PLLSAI1_Config>
 8004762:	4603      	mov	r3, r0
 8004764:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004766:	7cfb      	ldrb	r3, [r7, #19]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d001      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800476c:	7cfb      	ldrb	r3, [r7, #19]
 800476e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d02f      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800477c:	4b2b      	ldr	r3, [pc, #172]	@ (800482c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800477e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004782:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800478a:	4928      	ldr	r1, [pc, #160]	@ (800482c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800478c:	4313      	orrs	r3, r2
 800478e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004796:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800479a:	d10d      	bne.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	3304      	adds	r3, #4
 80047a0:	2102      	movs	r1, #2
 80047a2:	4618      	mov	r0, r3
 80047a4:	f000 f844 	bl	8004830 <RCCEx_PLLSAI1_Config>
 80047a8:	4603      	mov	r3, r0
 80047aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047ac:	7cfb      	ldrb	r3, [r7, #19]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d014      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80047b2:	7cfb      	ldrb	r3, [r7, #19]
 80047b4:	74bb      	strb	r3, [r7, #18]
 80047b6:	e011      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80047c0:	d10c      	bne.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	3320      	adds	r3, #32
 80047c6:	2102      	movs	r1, #2
 80047c8:	4618      	mov	r0, r3
 80047ca:	f000 f925 	bl	8004a18 <RCCEx_PLLSAI2_Config>
 80047ce:	4603      	mov	r3, r0
 80047d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047d2:	7cfb      	ldrb	r3, [r7, #19]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d001      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80047d8:	7cfb      	ldrb	r3, [r7, #19]
 80047da:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00a      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80047e8:	4b10      	ldr	r3, [pc, #64]	@ (800482c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ee:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047f6:	490d      	ldr	r1, [pc, #52]	@ (800482c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00b      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800480a:	4b08      	ldr	r3, [pc, #32]	@ (800482c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800480c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004810:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800481a:	4904      	ldr	r1, [pc, #16]	@ (800482c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800481c:	4313      	orrs	r3, r2
 800481e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004822:	7cbb      	ldrb	r3, [r7, #18]
}
 8004824:	4618      	mov	r0, r3
 8004826:	3718      	adds	r7, #24
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	40021000 	.word	0x40021000

08004830 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800483a:	2300      	movs	r3, #0
 800483c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800483e:	4b75      	ldr	r3, [pc, #468]	@ (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	f003 0303 	and.w	r3, r3, #3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d018      	beq.n	800487c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800484a:	4b72      	ldr	r3, [pc, #456]	@ (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	f003 0203 	and.w	r2, r3, #3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	429a      	cmp	r2, r3
 8004858:	d10d      	bne.n	8004876 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
       ||
 800485e:	2b00      	cmp	r3, #0
 8004860:	d009      	beq.n	8004876 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004862:	4b6c      	ldr	r3, [pc, #432]	@ (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	091b      	lsrs	r3, r3, #4
 8004868:	f003 0307 	and.w	r3, r3, #7
 800486c:	1c5a      	adds	r2, r3, #1
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
       ||
 8004872:	429a      	cmp	r2, r3
 8004874:	d047      	beq.n	8004906 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	73fb      	strb	r3, [r7, #15]
 800487a:	e044      	b.n	8004906 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2b03      	cmp	r3, #3
 8004882:	d018      	beq.n	80048b6 <RCCEx_PLLSAI1_Config+0x86>
 8004884:	2b03      	cmp	r3, #3
 8004886:	d825      	bhi.n	80048d4 <RCCEx_PLLSAI1_Config+0xa4>
 8004888:	2b01      	cmp	r3, #1
 800488a:	d002      	beq.n	8004892 <RCCEx_PLLSAI1_Config+0x62>
 800488c:	2b02      	cmp	r3, #2
 800488e:	d009      	beq.n	80048a4 <RCCEx_PLLSAI1_Config+0x74>
 8004890:	e020      	b.n	80048d4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004892:	4b60      	ldr	r3, [pc, #384]	@ (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0302 	and.w	r3, r3, #2
 800489a:	2b00      	cmp	r3, #0
 800489c:	d11d      	bne.n	80048da <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048a2:	e01a      	b.n	80048da <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80048a4:	4b5b      	ldr	r3, [pc, #364]	@ (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d116      	bne.n	80048de <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048b4:	e013      	b.n	80048de <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80048b6:	4b57      	ldr	r3, [pc, #348]	@ (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d10f      	bne.n	80048e2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80048c2:	4b54      	ldr	r3, [pc, #336]	@ (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d109      	bne.n	80048e2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80048d2:	e006      	b.n	80048e2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	73fb      	strb	r3, [r7, #15]
      break;
 80048d8:	e004      	b.n	80048e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048da:	bf00      	nop
 80048dc:	e002      	b.n	80048e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048de:	bf00      	nop
 80048e0:	e000      	b.n	80048e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80048e4:	7bfb      	ldrb	r3, [r7, #15]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d10d      	bne.n	8004906 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80048ea:	4b4a      	ldr	r3, [pc, #296]	@ (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6819      	ldr	r1, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	3b01      	subs	r3, #1
 80048fc:	011b      	lsls	r3, r3, #4
 80048fe:	430b      	orrs	r3, r1
 8004900:	4944      	ldr	r1, [pc, #272]	@ (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004902:	4313      	orrs	r3, r2
 8004904:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004906:	7bfb      	ldrb	r3, [r7, #15]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d17d      	bne.n	8004a08 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800490c:	4b41      	ldr	r3, [pc, #260]	@ (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a40      	ldr	r2, [pc, #256]	@ (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004912:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004916:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004918:	f7fc ffb4 	bl	8001884 <HAL_GetTick>
 800491c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800491e:	e009      	b.n	8004934 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004920:	f7fc ffb0 	bl	8001884 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b02      	cmp	r3, #2
 800492c:	d902      	bls.n	8004934 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	73fb      	strb	r3, [r7, #15]
        break;
 8004932:	e005      	b.n	8004940 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004934:	4b37      	ldr	r3, [pc, #220]	@ (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1ef      	bne.n	8004920 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004940:	7bfb      	ldrb	r3, [r7, #15]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d160      	bne.n	8004a08 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d111      	bne.n	8004970 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800494c:	4b31      	ldr	r3, [pc, #196]	@ (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004954:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	6892      	ldr	r2, [r2, #8]
 800495c:	0211      	lsls	r1, r2, #8
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	68d2      	ldr	r2, [r2, #12]
 8004962:	0912      	lsrs	r2, r2, #4
 8004964:	0452      	lsls	r2, r2, #17
 8004966:	430a      	orrs	r2, r1
 8004968:	492a      	ldr	r1, [pc, #168]	@ (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 800496a:	4313      	orrs	r3, r2
 800496c:	610b      	str	r3, [r1, #16]
 800496e:	e027      	b.n	80049c0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d112      	bne.n	800499c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004976:	4b27      	ldr	r3, [pc, #156]	@ (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800497e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	6892      	ldr	r2, [r2, #8]
 8004986:	0211      	lsls	r1, r2, #8
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	6912      	ldr	r2, [r2, #16]
 800498c:	0852      	lsrs	r2, r2, #1
 800498e:	3a01      	subs	r2, #1
 8004990:	0552      	lsls	r2, r2, #21
 8004992:	430a      	orrs	r2, r1
 8004994:	491f      	ldr	r1, [pc, #124]	@ (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004996:	4313      	orrs	r3, r2
 8004998:	610b      	str	r3, [r1, #16]
 800499a:	e011      	b.n	80049c0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800499c:	4b1d      	ldr	r3, [pc, #116]	@ (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80049a4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	6892      	ldr	r2, [r2, #8]
 80049ac:	0211      	lsls	r1, r2, #8
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	6952      	ldr	r2, [r2, #20]
 80049b2:	0852      	lsrs	r2, r2, #1
 80049b4:	3a01      	subs	r2, #1
 80049b6:	0652      	lsls	r2, r2, #25
 80049b8:	430a      	orrs	r2, r1
 80049ba:	4916      	ldr	r1, [pc, #88]	@ (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80049c0:	4b14      	ldr	r3, [pc, #80]	@ (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a13      	ldr	r2, [pc, #76]	@ (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049c6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80049ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049cc:	f7fc ff5a 	bl	8001884 <HAL_GetTick>
 80049d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049d2:	e009      	b.n	80049e8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049d4:	f7fc ff56 	bl	8001884 <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d902      	bls.n	80049e8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	73fb      	strb	r3, [r7, #15]
          break;
 80049e6:	e005      	b.n	80049f4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049e8:	4b0a      	ldr	r3, [pc, #40]	@ (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d0ef      	beq.n	80049d4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80049f4:	7bfb      	ldrb	r3, [r7, #15]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d106      	bne.n	8004a08 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80049fa:	4b06      	ldr	r3, [pc, #24]	@ (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049fc:	691a      	ldr	r2, [r3, #16]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	4904      	ldr	r1, [pc, #16]	@ (8004a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	40021000 	.word	0x40021000

08004a18 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a22:	2300      	movs	r3, #0
 8004a24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a26:	4b6a      	ldr	r3, [pc, #424]	@ (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	f003 0303 	and.w	r3, r3, #3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d018      	beq.n	8004a64 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004a32:	4b67      	ldr	r3, [pc, #412]	@ (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	f003 0203 	and.w	r2, r3, #3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d10d      	bne.n	8004a5e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
       ||
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d009      	beq.n	8004a5e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004a4a:	4b61      	ldr	r3, [pc, #388]	@ (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	091b      	lsrs	r3, r3, #4
 8004a50:	f003 0307 	and.w	r3, r3, #7
 8004a54:	1c5a      	adds	r2, r3, #1
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
       ||
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d047      	beq.n	8004aee <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	73fb      	strb	r3, [r7, #15]
 8004a62:	e044      	b.n	8004aee <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2b03      	cmp	r3, #3
 8004a6a:	d018      	beq.n	8004a9e <RCCEx_PLLSAI2_Config+0x86>
 8004a6c:	2b03      	cmp	r3, #3
 8004a6e:	d825      	bhi.n	8004abc <RCCEx_PLLSAI2_Config+0xa4>
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d002      	beq.n	8004a7a <RCCEx_PLLSAI2_Config+0x62>
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d009      	beq.n	8004a8c <RCCEx_PLLSAI2_Config+0x74>
 8004a78:	e020      	b.n	8004abc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a7a:	4b55      	ldr	r3, [pc, #340]	@ (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0302 	and.w	r3, r3, #2
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d11d      	bne.n	8004ac2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a8a:	e01a      	b.n	8004ac2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a8c:	4b50      	ldr	r3, [pc, #320]	@ (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d116      	bne.n	8004ac6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a9c:	e013      	b.n	8004ac6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a9e:	4b4c      	ldr	r3, [pc, #304]	@ (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d10f      	bne.n	8004aca <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004aaa:	4b49      	ldr	r3, [pc, #292]	@ (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d109      	bne.n	8004aca <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004aba:	e006      	b.n	8004aca <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	73fb      	strb	r3, [r7, #15]
      break;
 8004ac0:	e004      	b.n	8004acc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004ac2:	bf00      	nop
 8004ac4:	e002      	b.n	8004acc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004ac6:	bf00      	nop
 8004ac8:	e000      	b.n	8004acc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004aca:	bf00      	nop
    }

    if(status == HAL_OK)
 8004acc:	7bfb      	ldrb	r3, [r7, #15]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d10d      	bne.n	8004aee <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004ad2:	4b3f      	ldr	r3, [pc, #252]	@ (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6819      	ldr	r1, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	011b      	lsls	r3, r3, #4
 8004ae6:	430b      	orrs	r3, r1
 8004ae8:	4939      	ldr	r1, [pc, #228]	@ (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004aee:	7bfb      	ldrb	r3, [r7, #15]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d167      	bne.n	8004bc4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004af4:	4b36      	ldr	r3, [pc, #216]	@ (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a35      	ldr	r2, [pc, #212]	@ (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004afa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004afe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b00:	f7fc fec0 	bl	8001884 <HAL_GetTick>
 8004b04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b06:	e009      	b.n	8004b1c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b08:	f7fc febc 	bl	8001884 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d902      	bls.n	8004b1c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	73fb      	strb	r3, [r7, #15]
        break;
 8004b1a:	e005      	b.n	8004b28 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b1c:	4b2c      	ldr	r3, [pc, #176]	@ (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1ef      	bne.n	8004b08 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004b28:	7bfb      	ldrb	r3, [r7, #15]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d14a      	bne.n	8004bc4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d111      	bne.n	8004b58 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b34:	4b26      	ldr	r3, [pc, #152]	@ (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b36:	695b      	ldr	r3, [r3, #20]
 8004b38:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004b3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	6892      	ldr	r2, [r2, #8]
 8004b44:	0211      	lsls	r1, r2, #8
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	68d2      	ldr	r2, [r2, #12]
 8004b4a:	0912      	lsrs	r2, r2, #4
 8004b4c:	0452      	lsls	r2, r2, #17
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	491f      	ldr	r1, [pc, #124]	@ (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	614b      	str	r3, [r1, #20]
 8004b56:	e011      	b.n	8004b7c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b58:	4b1d      	ldr	r3, [pc, #116]	@ (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b5a:	695b      	ldr	r3, [r3, #20]
 8004b5c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004b60:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	6892      	ldr	r2, [r2, #8]
 8004b68:	0211      	lsls	r1, r2, #8
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	6912      	ldr	r2, [r2, #16]
 8004b6e:	0852      	lsrs	r2, r2, #1
 8004b70:	3a01      	subs	r2, #1
 8004b72:	0652      	lsls	r2, r2, #25
 8004b74:	430a      	orrs	r2, r1
 8004b76:	4916      	ldr	r1, [pc, #88]	@ (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004b7c:	4b14      	ldr	r3, [pc, #80]	@ (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a13      	ldr	r2, [pc, #76]	@ (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b86:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b88:	f7fc fe7c 	bl	8001884 <HAL_GetTick>
 8004b8c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b8e:	e009      	b.n	8004ba4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b90:	f7fc fe78 	bl	8001884 <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d902      	bls.n	8004ba4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	73fb      	strb	r3, [r7, #15]
          break;
 8004ba2:	e005      	b.n	8004bb0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ba4:	4b0a      	ldr	r3, [pc, #40]	@ (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d0ef      	beq.n	8004b90 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004bb0:	7bfb      	ldrb	r3, [r7, #15]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d106      	bne.n	8004bc4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004bb6:	4b06      	ldr	r3, [pc, #24]	@ (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bb8:	695a      	ldr	r2, [r3, #20]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	4904      	ldr	r1, [pc, #16]	@ (8004bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3710      	adds	r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	40021000 	.word	0x40021000

08004bd4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d101      	bne.n	8004be6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e040      	b.n	8004c68 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d106      	bne.n	8004bfc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f7fc fb94 	bl	8001324 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2224      	movs	r2, #36	@ 0x24
 8004c00:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f022 0201 	bic.w	r2, r2, #1
 8004c10:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d002      	beq.n	8004c20 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 fae0 	bl	80051e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 f825 	bl	8004c70 <UART_SetConfig>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d101      	bne.n	8004c30 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e01b      	b.n	8004c68 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	685a      	ldr	r2, [r3, #4]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	689a      	ldr	r2, [r3, #8]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f042 0201 	orr.w	r2, r2, #1
 8004c5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 fb5f 	bl	8005324 <UART_CheckIdleState>
 8004c66:	4603      	mov	r3, r0
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3708      	adds	r7, #8
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c74:	b08a      	sub	sp, #40	@ 0x28
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	689a      	ldr	r2, [r3, #8]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	431a      	orrs	r2, r3
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	431a      	orrs	r2, r3
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	69db      	ldr	r3, [r3, #28]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	4ba4      	ldr	r3, [pc, #656]	@ (8004f30 <UART_SetConfig+0x2c0>)
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	6812      	ldr	r2, [r2, #0]
 8004ca6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004ca8:	430b      	orrs	r3, r1
 8004caa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	68da      	ldr	r2, [r3, #12]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a99      	ldr	r2, [pc, #612]	@ (8004f34 <UART_SetConfig+0x2c4>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d004      	beq.n	8004cdc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cec:	430a      	orrs	r2, r1
 8004cee:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a90      	ldr	r2, [pc, #576]	@ (8004f38 <UART_SetConfig+0x2c8>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d126      	bne.n	8004d48 <UART_SetConfig+0xd8>
 8004cfa:	4b90      	ldr	r3, [pc, #576]	@ (8004f3c <UART_SetConfig+0x2cc>)
 8004cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d00:	f003 0303 	and.w	r3, r3, #3
 8004d04:	2b03      	cmp	r3, #3
 8004d06:	d81b      	bhi.n	8004d40 <UART_SetConfig+0xd0>
 8004d08:	a201      	add	r2, pc, #4	@ (adr r2, 8004d10 <UART_SetConfig+0xa0>)
 8004d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d0e:	bf00      	nop
 8004d10:	08004d21 	.word	0x08004d21
 8004d14:	08004d31 	.word	0x08004d31
 8004d18:	08004d29 	.word	0x08004d29
 8004d1c:	08004d39 	.word	0x08004d39
 8004d20:	2301      	movs	r3, #1
 8004d22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d26:	e116      	b.n	8004f56 <UART_SetConfig+0x2e6>
 8004d28:	2302      	movs	r3, #2
 8004d2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d2e:	e112      	b.n	8004f56 <UART_SetConfig+0x2e6>
 8004d30:	2304      	movs	r3, #4
 8004d32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d36:	e10e      	b.n	8004f56 <UART_SetConfig+0x2e6>
 8004d38:	2308      	movs	r3, #8
 8004d3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d3e:	e10a      	b.n	8004f56 <UART_SetConfig+0x2e6>
 8004d40:	2310      	movs	r3, #16
 8004d42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d46:	e106      	b.n	8004f56 <UART_SetConfig+0x2e6>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a7c      	ldr	r2, [pc, #496]	@ (8004f40 <UART_SetConfig+0x2d0>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d138      	bne.n	8004dc4 <UART_SetConfig+0x154>
 8004d52:	4b7a      	ldr	r3, [pc, #488]	@ (8004f3c <UART_SetConfig+0x2cc>)
 8004d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d58:	f003 030c 	and.w	r3, r3, #12
 8004d5c:	2b0c      	cmp	r3, #12
 8004d5e:	d82d      	bhi.n	8004dbc <UART_SetConfig+0x14c>
 8004d60:	a201      	add	r2, pc, #4	@ (adr r2, 8004d68 <UART_SetConfig+0xf8>)
 8004d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d66:	bf00      	nop
 8004d68:	08004d9d 	.word	0x08004d9d
 8004d6c:	08004dbd 	.word	0x08004dbd
 8004d70:	08004dbd 	.word	0x08004dbd
 8004d74:	08004dbd 	.word	0x08004dbd
 8004d78:	08004dad 	.word	0x08004dad
 8004d7c:	08004dbd 	.word	0x08004dbd
 8004d80:	08004dbd 	.word	0x08004dbd
 8004d84:	08004dbd 	.word	0x08004dbd
 8004d88:	08004da5 	.word	0x08004da5
 8004d8c:	08004dbd 	.word	0x08004dbd
 8004d90:	08004dbd 	.word	0x08004dbd
 8004d94:	08004dbd 	.word	0x08004dbd
 8004d98:	08004db5 	.word	0x08004db5
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004da2:	e0d8      	b.n	8004f56 <UART_SetConfig+0x2e6>
 8004da4:	2302      	movs	r3, #2
 8004da6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004daa:	e0d4      	b.n	8004f56 <UART_SetConfig+0x2e6>
 8004dac:	2304      	movs	r3, #4
 8004dae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004db2:	e0d0      	b.n	8004f56 <UART_SetConfig+0x2e6>
 8004db4:	2308      	movs	r3, #8
 8004db6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dba:	e0cc      	b.n	8004f56 <UART_SetConfig+0x2e6>
 8004dbc:	2310      	movs	r3, #16
 8004dbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dc2:	e0c8      	b.n	8004f56 <UART_SetConfig+0x2e6>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a5e      	ldr	r2, [pc, #376]	@ (8004f44 <UART_SetConfig+0x2d4>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d125      	bne.n	8004e1a <UART_SetConfig+0x1aa>
 8004dce:	4b5b      	ldr	r3, [pc, #364]	@ (8004f3c <UART_SetConfig+0x2cc>)
 8004dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dd4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004dd8:	2b30      	cmp	r3, #48	@ 0x30
 8004dda:	d016      	beq.n	8004e0a <UART_SetConfig+0x19a>
 8004ddc:	2b30      	cmp	r3, #48	@ 0x30
 8004dde:	d818      	bhi.n	8004e12 <UART_SetConfig+0x1a2>
 8004de0:	2b20      	cmp	r3, #32
 8004de2:	d00a      	beq.n	8004dfa <UART_SetConfig+0x18a>
 8004de4:	2b20      	cmp	r3, #32
 8004de6:	d814      	bhi.n	8004e12 <UART_SetConfig+0x1a2>
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d002      	beq.n	8004df2 <UART_SetConfig+0x182>
 8004dec:	2b10      	cmp	r3, #16
 8004dee:	d008      	beq.n	8004e02 <UART_SetConfig+0x192>
 8004df0:	e00f      	b.n	8004e12 <UART_SetConfig+0x1a2>
 8004df2:	2300      	movs	r3, #0
 8004df4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004df8:	e0ad      	b.n	8004f56 <UART_SetConfig+0x2e6>
 8004dfa:	2302      	movs	r3, #2
 8004dfc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e00:	e0a9      	b.n	8004f56 <UART_SetConfig+0x2e6>
 8004e02:	2304      	movs	r3, #4
 8004e04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e08:	e0a5      	b.n	8004f56 <UART_SetConfig+0x2e6>
 8004e0a:	2308      	movs	r3, #8
 8004e0c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e10:	e0a1      	b.n	8004f56 <UART_SetConfig+0x2e6>
 8004e12:	2310      	movs	r3, #16
 8004e14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e18:	e09d      	b.n	8004f56 <UART_SetConfig+0x2e6>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a4a      	ldr	r2, [pc, #296]	@ (8004f48 <UART_SetConfig+0x2d8>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d125      	bne.n	8004e70 <UART_SetConfig+0x200>
 8004e24:	4b45      	ldr	r3, [pc, #276]	@ (8004f3c <UART_SetConfig+0x2cc>)
 8004e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e2a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004e2e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e30:	d016      	beq.n	8004e60 <UART_SetConfig+0x1f0>
 8004e32:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e34:	d818      	bhi.n	8004e68 <UART_SetConfig+0x1f8>
 8004e36:	2b80      	cmp	r3, #128	@ 0x80
 8004e38:	d00a      	beq.n	8004e50 <UART_SetConfig+0x1e0>
 8004e3a:	2b80      	cmp	r3, #128	@ 0x80
 8004e3c:	d814      	bhi.n	8004e68 <UART_SetConfig+0x1f8>
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d002      	beq.n	8004e48 <UART_SetConfig+0x1d8>
 8004e42:	2b40      	cmp	r3, #64	@ 0x40
 8004e44:	d008      	beq.n	8004e58 <UART_SetConfig+0x1e8>
 8004e46:	e00f      	b.n	8004e68 <UART_SetConfig+0x1f8>
 8004e48:	2300      	movs	r3, #0
 8004e4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e4e:	e082      	b.n	8004f56 <UART_SetConfig+0x2e6>
 8004e50:	2302      	movs	r3, #2
 8004e52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e56:	e07e      	b.n	8004f56 <UART_SetConfig+0x2e6>
 8004e58:	2304      	movs	r3, #4
 8004e5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e5e:	e07a      	b.n	8004f56 <UART_SetConfig+0x2e6>
 8004e60:	2308      	movs	r3, #8
 8004e62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e66:	e076      	b.n	8004f56 <UART_SetConfig+0x2e6>
 8004e68:	2310      	movs	r3, #16
 8004e6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e6e:	e072      	b.n	8004f56 <UART_SetConfig+0x2e6>
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a35      	ldr	r2, [pc, #212]	@ (8004f4c <UART_SetConfig+0x2dc>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d12a      	bne.n	8004ed0 <UART_SetConfig+0x260>
 8004e7a:	4b30      	ldr	r3, [pc, #192]	@ (8004f3c <UART_SetConfig+0x2cc>)
 8004e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e88:	d01a      	beq.n	8004ec0 <UART_SetConfig+0x250>
 8004e8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e8e:	d81b      	bhi.n	8004ec8 <UART_SetConfig+0x258>
 8004e90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e94:	d00c      	beq.n	8004eb0 <UART_SetConfig+0x240>
 8004e96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e9a:	d815      	bhi.n	8004ec8 <UART_SetConfig+0x258>
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d003      	beq.n	8004ea8 <UART_SetConfig+0x238>
 8004ea0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ea4:	d008      	beq.n	8004eb8 <UART_SetConfig+0x248>
 8004ea6:	e00f      	b.n	8004ec8 <UART_SetConfig+0x258>
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004eae:	e052      	b.n	8004f56 <UART_SetConfig+0x2e6>
 8004eb0:	2302      	movs	r3, #2
 8004eb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004eb6:	e04e      	b.n	8004f56 <UART_SetConfig+0x2e6>
 8004eb8:	2304      	movs	r3, #4
 8004eba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ebe:	e04a      	b.n	8004f56 <UART_SetConfig+0x2e6>
 8004ec0:	2308      	movs	r3, #8
 8004ec2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ec6:	e046      	b.n	8004f56 <UART_SetConfig+0x2e6>
 8004ec8:	2310      	movs	r3, #16
 8004eca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ece:	e042      	b.n	8004f56 <UART_SetConfig+0x2e6>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a17      	ldr	r2, [pc, #92]	@ (8004f34 <UART_SetConfig+0x2c4>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d13a      	bne.n	8004f50 <UART_SetConfig+0x2e0>
 8004eda:	4b18      	ldr	r3, [pc, #96]	@ (8004f3c <UART_SetConfig+0x2cc>)
 8004edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ee0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004ee4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ee8:	d01a      	beq.n	8004f20 <UART_SetConfig+0x2b0>
 8004eea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004eee:	d81b      	bhi.n	8004f28 <UART_SetConfig+0x2b8>
 8004ef0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ef4:	d00c      	beq.n	8004f10 <UART_SetConfig+0x2a0>
 8004ef6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004efa:	d815      	bhi.n	8004f28 <UART_SetConfig+0x2b8>
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d003      	beq.n	8004f08 <UART_SetConfig+0x298>
 8004f00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f04:	d008      	beq.n	8004f18 <UART_SetConfig+0x2a8>
 8004f06:	e00f      	b.n	8004f28 <UART_SetConfig+0x2b8>
 8004f08:	2300      	movs	r3, #0
 8004f0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f0e:	e022      	b.n	8004f56 <UART_SetConfig+0x2e6>
 8004f10:	2302      	movs	r3, #2
 8004f12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f16:	e01e      	b.n	8004f56 <UART_SetConfig+0x2e6>
 8004f18:	2304      	movs	r3, #4
 8004f1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f1e:	e01a      	b.n	8004f56 <UART_SetConfig+0x2e6>
 8004f20:	2308      	movs	r3, #8
 8004f22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f26:	e016      	b.n	8004f56 <UART_SetConfig+0x2e6>
 8004f28:	2310      	movs	r3, #16
 8004f2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f2e:	e012      	b.n	8004f56 <UART_SetConfig+0x2e6>
 8004f30:	efff69f3 	.word	0xefff69f3
 8004f34:	40008000 	.word	0x40008000
 8004f38:	40013800 	.word	0x40013800
 8004f3c:	40021000 	.word	0x40021000
 8004f40:	40004400 	.word	0x40004400
 8004f44:	40004800 	.word	0x40004800
 8004f48:	40004c00 	.word	0x40004c00
 8004f4c:	40005000 	.word	0x40005000
 8004f50:	2310      	movs	r3, #16
 8004f52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a9f      	ldr	r2, [pc, #636]	@ (80051d8 <UART_SetConfig+0x568>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d17a      	bne.n	8005056 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f60:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004f64:	2b08      	cmp	r3, #8
 8004f66:	d824      	bhi.n	8004fb2 <UART_SetConfig+0x342>
 8004f68:	a201      	add	r2, pc, #4	@ (adr r2, 8004f70 <UART_SetConfig+0x300>)
 8004f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f6e:	bf00      	nop
 8004f70:	08004f95 	.word	0x08004f95
 8004f74:	08004fb3 	.word	0x08004fb3
 8004f78:	08004f9d 	.word	0x08004f9d
 8004f7c:	08004fb3 	.word	0x08004fb3
 8004f80:	08004fa3 	.word	0x08004fa3
 8004f84:	08004fb3 	.word	0x08004fb3
 8004f88:	08004fb3 	.word	0x08004fb3
 8004f8c:	08004fb3 	.word	0x08004fb3
 8004f90:	08004fab 	.word	0x08004fab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f94:	f7ff f8d6 	bl	8004144 <HAL_RCC_GetPCLK1Freq>
 8004f98:	61f8      	str	r0, [r7, #28]
        break;
 8004f9a:	e010      	b.n	8004fbe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f9c:	4b8f      	ldr	r3, [pc, #572]	@ (80051dc <UART_SetConfig+0x56c>)
 8004f9e:	61fb      	str	r3, [r7, #28]
        break;
 8004fa0:	e00d      	b.n	8004fbe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fa2:	f7ff f837 	bl	8004014 <HAL_RCC_GetSysClockFreq>
 8004fa6:	61f8      	str	r0, [r7, #28]
        break;
 8004fa8:	e009      	b.n	8004fbe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004faa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fae:	61fb      	str	r3, [r7, #28]
        break;
 8004fb0:	e005      	b.n	8004fbe <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004fbc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	f000 80fb 	beq.w	80051bc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	685a      	ldr	r2, [r3, #4]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	005b      	lsls	r3, r3, #1
 8004fce:	4413      	add	r3, r2
 8004fd0:	69fa      	ldr	r2, [r7, #28]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d305      	bcc.n	8004fe2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004fdc:	69fa      	ldr	r2, [r7, #28]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d903      	bls.n	8004fea <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004fe8:	e0e8      	b.n	80051bc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	2200      	movs	r2, #0
 8004fee:	461c      	mov	r4, r3
 8004ff0:	4615      	mov	r5, r2
 8004ff2:	f04f 0200 	mov.w	r2, #0
 8004ff6:	f04f 0300 	mov.w	r3, #0
 8004ffa:	022b      	lsls	r3, r5, #8
 8004ffc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005000:	0222      	lsls	r2, r4, #8
 8005002:	68f9      	ldr	r1, [r7, #12]
 8005004:	6849      	ldr	r1, [r1, #4]
 8005006:	0849      	lsrs	r1, r1, #1
 8005008:	2000      	movs	r0, #0
 800500a:	4688      	mov	r8, r1
 800500c:	4681      	mov	r9, r0
 800500e:	eb12 0a08 	adds.w	sl, r2, r8
 8005012:	eb43 0b09 	adc.w	fp, r3, r9
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	603b      	str	r3, [r7, #0]
 800501e:	607a      	str	r2, [r7, #4]
 8005020:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005024:	4650      	mov	r0, sl
 8005026:	4659      	mov	r1, fp
 8005028:	f7fb f922 	bl	8000270 <__aeabi_uldivmod>
 800502c:	4602      	mov	r2, r0
 800502e:	460b      	mov	r3, r1
 8005030:	4613      	mov	r3, r2
 8005032:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800503a:	d308      	bcc.n	800504e <UART_SetConfig+0x3de>
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005042:	d204      	bcs.n	800504e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	69ba      	ldr	r2, [r7, #24]
 800504a:	60da      	str	r2, [r3, #12]
 800504c:	e0b6      	b.n	80051bc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005054:	e0b2      	b.n	80051bc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	69db      	ldr	r3, [r3, #28]
 800505a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800505e:	d15e      	bne.n	800511e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005060:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005064:	2b08      	cmp	r3, #8
 8005066:	d828      	bhi.n	80050ba <UART_SetConfig+0x44a>
 8005068:	a201      	add	r2, pc, #4	@ (adr r2, 8005070 <UART_SetConfig+0x400>)
 800506a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800506e:	bf00      	nop
 8005070:	08005095 	.word	0x08005095
 8005074:	0800509d 	.word	0x0800509d
 8005078:	080050a5 	.word	0x080050a5
 800507c:	080050bb 	.word	0x080050bb
 8005080:	080050ab 	.word	0x080050ab
 8005084:	080050bb 	.word	0x080050bb
 8005088:	080050bb 	.word	0x080050bb
 800508c:	080050bb 	.word	0x080050bb
 8005090:	080050b3 	.word	0x080050b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005094:	f7ff f856 	bl	8004144 <HAL_RCC_GetPCLK1Freq>
 8005098:	61f8      	str	r0, [r7, #28]
        break;
 800509a:	e014      	b.n	80050c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800509c:	f7ff f868 	bl	8004170 <HAL_RCC_GetPCLK2Freq>
 80050a0:	61f8      	str	r0, [r7, #28]
        break;
 80050a2:	e010      	b.n	80050c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050a4:	4b4d      	ldr	r3, [pc, #308]	@ (80051dc <UART_SetConfig+0x56c>)
 80050a6:	61fb      	str	r3, [r7, #28]
        break;
 80050a8:	e00d      	b.n	80050c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050aa:	f7fe ffb3 	bl	8004014 <HAL_RCC_GetSysClockFreq>
 80050ae:	61f8      	str	r0, [r7, #28]
        break;
 80050b0:	e009      	b.n	80050c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050b6:	61fb      	str	r3, [r7, #28]
        break;
 80050b8:	e005      	b.n	80050c6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80050ba:	2300      	movs	r3, #0
 80050bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80050c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d077      	beq.n	80051bc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	005a      	lsls	r2, r3, #1
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	085b      	lsrs	r3, r3, #1
 80050d6:	441a      	add	r2, r3
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	2b0f      	cmp	r3, #15
 80050e6:	d916      	bls.n	8005116 <UART_SetConfig+0x4a6>
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050ee:	d212      	bcs.n	8005116 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	f023 030f 	bic.w	r3, r3, #15
 80050f8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	085b      	lsrs	r3, r3, #1
 80050fe:	b29b      	uxth	r3, r3
 8005100:	f003 0307 	and.w	r3, r3, #7
 8005104:	b29a      	uxth	r2, r3
 8005106:	8afb      	ldrh	r3, [r7, #22]
 8005108:	4313      	orrs	r3, r2
 800510a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	8afa      	ldrh	r2, [r7, #22]
 8005112:	60da      	str	r2, [r3, #12]
 8005114:	e052      	b.n	80051bc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800511c:	e04e      	b.n	80051bc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800511e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005122:	2b08      	cmp	r3, #8
 8005124:	d827      	bhi.n	8005176 <UART_SetConfig+0x506>
 8005126:	a201      	add	r2, pc, #4	@ (adr r2, 800512c <UART_SetConfig+0x4bc>)
 8005128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800512c:	08005151 	.word	0x08005151
 8005130:	08005159 	.word	0x08005159
 8005134:	08005161 	.word	0x08005161
 8005138:	08005177 	.word	0x08005177
 800513c:	08005167 	.word	0x08005167
 8005140:	08005177 	.word	0x08005177
 8005144:	08005177 	.word	0x08005177
 8005148:	08005177 	.word	0x08005177
 800514c:	0800516f 	.word	0x0800516f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005150:	f7fe fff8 	bl	8004144 <HAL_RCC_GetPCLK1Freq>
 8005154:	61f8      	str	r0, [r7, #28]
        break;
 8005156:	e014      	b.n	8005182 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005158:	f7ff f80a 	bl	8004170 <HAL_RCC_GetPCLK2Freq>
 800515c:	61f8      	str	r0, [r7, #28]
        break;
 800515e:	e010      	b.n	8005182 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005160:	4b1e      	ldr	r3, [pc, #120]	@ (80051dc <UART_SetConfig+0x56c>)
 8005162:	61fb      	str	r3, [r7, #28]
        break;
 8005164:	e00d      	b.n	8005182 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005166:	f7fe ff55 	bl	8004014 <HAL_RCC_GetSysClockFreq>
 800516a:	61f8      	str	r0, [r7, #28]
        break;
 800516c:	e009      	b.n	8005182 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800516e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005172:	61fb      	str	r3, [r7, #28]
        break;
 8005174:	e005      	b.n	8005182 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005176:	2300      	movs	r3, #0
 8005178:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005180:	bf00      	nop
    }

    if (pclk != 0U)
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d019      	beq.n	80051bc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	085a      	lsrs	r2, r3, #1
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	441a      	add	r2, r3
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	fbb2 f3f3 	udiv	r3, r2, r3
 800519a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	2b0f      	cmp	r3, #15
 80051a0:	d909      	bls.n	80051b6 <UART_SetConfig+0x546>
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051a8:	d205      	bcs.n	80051b6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	b29a      	uxth	r2, r3
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	60da      	str	r2, [r3, #12]
 80051b4:	e002      	b.n	80051bc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2200      	movs	r2, #0
 80051c0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80051c8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3728      	adds	r7, #40	@ 0x28
 80051d0:	46bd      	mov	sp, r7
 80051d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051d6:	bf00      	nop
 80051d8:	40008000 	.word	0x40008000
 80051dc:	00f42400 	.word	0x00f42400

080051e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ec:	f003 0308 	and.w	r3, r3, #8
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d00a      	beq.n	800520a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	430a      	orrs	r2, r1
 8005208:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00a      	beq.n	800522c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	430a      	orrs	r2, r1
 800522a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005230:	f003 0302 	and.w	r3, r3, #2
 8005234:	2b00      	cmp	r3, #0
 8005236:	d00a      	beq.n	800524e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	430a      	orrs	r2, r1
 800524c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005252:	f003 0304 	and.w	r3, r3, #4
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00a      	beq.n	8005270 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	430a      	orrs	r2, r1
 800526e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005274:	f003 0310 	and.w	r3, r3, #16
 8005278:	2b00      	cmp	r3, #0
 800527a:	d00a      	beq.n	8005292 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	430a      	orrs	r2, r1
 8005290:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005296:	f003 0320 	and.w	r3, r3, #32
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00a      	beq.n	80052b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	430a      	orrs	r2, r1
 80052b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d01a      	beq.n	80052f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	430a      	orrs	r2, r1
 80052d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052de:	d10a      	bne.n	80052f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	430a      	orrs	r2, r1
 80052f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00a      	beq.n	8005318 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	430a      	orrs	r2, r1
 8005316:	605a      	str	r2, [r3, #4]
  }
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b098      	sub	sp, #96	@ 0x60
 8005328:	af02      	add	r7, sp, #8
 800532a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005334:	f7fc faa6 	bl	8001884 <HAL_GetTick>
 8005338:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0308 	and.w	r3, r3, #8
 8005344:	2b08      	cmp	r3, #8
 8005346:	d12e      	bne.n	80053a6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005348:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800534c:	9300      	str	r3, [sp, #0]
 800534e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005350:	2200      	movs	r2, #0
 8005352:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 f88c 	bl	8005474 <UART_WaitOnFlagUntilTimeout>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d021      	beq.n	80053a6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800536a:	e853 3f00 	ldrex	r3, [r3]
 800536e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005370:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005372:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005376:	653b      	str	r3, [r7, #80]	@ 0x50
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	461a      	mov	r2, r3
 800537e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005380:	647b      	str	r3, [r7, #68]	@ 0x44
 8005382:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005384:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005386:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005388:	e841 2300 	strex	r3, r2, [r1]
 800538c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800538e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005390:	2b00      	cmp	r3, #0
 8005392:	d1e6      	bne.n	8005362 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2220      	movs	r2, #32
 8005398:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e062      	b.n	800546c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0304 	and.w	r3, r3, #4
 80053b0:	2b04      	cmp	r3, #4
 80053b2:	d149      	bne.n	8005448 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053b4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80053b8:	9300      	str	r3, [sp, #0]
 80053ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053bc:	2200      	movs	r2, #0
 80053be:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 f856 	bl	8005474 <UART_WaitOnFlagUntilTimeout>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d03c      	beq.n	8005448 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d6:	e853 3f00 	ldrex	r3, [r3]
 80053da:	623b      	str	r3, [r7, #32]
   return(result);
 80053dc:	6a3b      	ldr	r3, [r7, #32]
 80053de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	461a      	mov	r2, r3
 80053ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80053ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053f4:	e841 2300 	strex	r3, r2, [r1]
 80053f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80053fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1e6      	bne.n	80053ce <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	3308      	adds	r3, #8
 8005406:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	e853 3f00 	ldrex	r3, [r3]
 800540e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f023 0301 	bic.w	r3, r3, #1
 8005416:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	3308      	adds	r3, #8
 800541e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005420:	61fa      	str	r2, [r7, #28]
 8005422:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005424:	69b9      	ldr	r1, [r7, #24]
 8005426:	69fa      	ldr	r2, [r7, #28]
 8005428:	e841 2300 	strex	r3, r2, [r1]
 800542c:	617b      	str	r3, [r7, #20]
   return(result);
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d1e5      	bne.n	8005400 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2220      	movs	r2, #32
 8005438:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e011      	b.n	800546c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2220      	movs	r2, #32
 800544c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2220      	movs	r2, #32
 8005452:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3758      	adds	r7, #88	@ 0x58
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	603b      	str	r3, [r7, #0]
 8005480:	4613      	mov	r3, r2
 8005482:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005484:	e04f      	b.n	8005526 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800548c:	d04b      	beq.n	8005526 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800548e:	f7fc f9f9 	bl	8001884 <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	69ba      	ldr	r2, [r7, #24]
 800549a:	429a      	cmp	r2, r3
 800549c:	d302      	bcc.n	80054a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d101      	bne.n	80054a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80054a4:	2303      	movs	r3, #3
 80054a6:	e04e      	b.n	8005546 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0304 	and.w	r3, r3, #4
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d037      	beq.n	8005526 <UART_WaitOnFlagUntilTimeout+0xb2>
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	2b80      	cmp	r3, #128	@ 0x80
 80054ba:	d034      	beq.n	8005526 <UART_WaitOnFlagUntilTimeout+0xb2>
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	2b40      	cmp	r3, #64	@ 0x40
 80054c0:	d031      	beq.n	8005526 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	69db      	ldr	r3, [r3, #28]
 80054c8:	f003 0308 	and.w	r3, r3, #8
 80054cc:	2b08      	cmp	r3, #8
 80054ce:	d110      	bne.n	80054f2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2208      	movs	r2, #8
 80054d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054d8:	68f8      	ldr	r0, [r7, #12]
 80054da:	f000 f838 	bl	800554e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2208      	movs	r2, #8
 80054e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e029      	b.n	8005546 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	69db      	ldr	r3, [r3, #28]
 80054f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005500:	d111      	bne.n	8005526 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800550a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800550c:	68f8      	ldr	r0, [r7, #12]
 800550e:	f000 f81e 	bl	800554e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2220      	movs	r2, #32
 8005516:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e00f      	b.n	8005546 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	69da      	ldr	r2, [r3, #28]
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	4013      	ands	r3, r2
 8005530:	68ba      	ldr	r2, [r7, #8]
 8005532:	429a      	cmp	r2, r3
 8005534:	bf0c      	ite	eq
 8005536:	2301      	moveq	r3, #1
 8005538:	2300      	movne	r3, #0
 800553a:	b2db      	uxtb	r3, r3
 800553c:	461a      	mov	r2, r3
 800553e:	79fb      	ldrb	r3, [r7, #7]
 8005540:	429a      	cmp	r2, r3
 8005542:	d0a0      	beq.n	8005486 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}

0800554e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800554e:	b480      	push	{r7}
 8005550:	b095      	sub	sp, #84	@ 0x54
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800555e:	e853 3f00 	ldrex	r3, [r3]
 8005562:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005566:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800556a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	461a      	mov	r2, r3
 8005572:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005574:	643b      	str	r3, [r7, #64]	@ 0x40
 8005576:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005578:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800557a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800557c:	e841 2300 	strex	r3, r2, [r1]
 8005580:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005584:	2b00      	cmp	r3, #0
 8005586:	d1e6      	bne.n	8005556 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	3308      	adds	r3, #8
 800558e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005590:	6a3b      	ldr	r3, [r7, #32]
 8005592:	e853 3f00 	ldrex	r3, [r3]
 8005596:	61fb      	str	r3, [r7, #28]
   return(result);
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	f023 0301 	bic.w	r3, r3, #1
 800559e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	3308      	adds	r3, #8
 80055a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80055aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055b0:	e841 2300 	strex	r3, r2, [r1]
 80055b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80055b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1e5      	bne.n	8005588 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d118      	bne.n	80055f6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	e853 3f00 	ldrex	r3, [r3]
 80055d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	f023 0310 	bic.w	r3, r3, #16
 80055d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	461a      	mov	r2, r3
 80055e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055e2:	61bb      	str	r3, [r7, #24]
 80055e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e6:	6979      	ldr	r1, [r7, #20]
 80055e8:	69ba      	ldr	r2, [r7, #24]
 80055ea:	e841 2300 	strex	r3, r2, [r1]
 80055ee:	613b      	str	r3, [r7, #16]
   return(result);
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1e6      	bne.n	80055c4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2220      	movs	r2, #32
 80055fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800560a:	bf00      	nop
 800560c:	3754      	adds	r7, #84	@ 0x54
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr
	...

08005618 <std>:
 8005618:	2300      	movs	r3, #0
 800561a:	b510      	push	{r4, lr}
 800561c:	4604      	mov	r4, r0
 800561e:	e9c0 3300 	strd	r3, r3, [r0]
 8005622:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005626:	6083      	str	r3, [r0, #8]
 8005628:	8181      	strh	r1, [r0, #12]
 800562a:	6643      	str	r3, [r0, #100]	@ 0x64
 800562c:	81c2      	strh	r2, [r0, #14]
 800562e:	6183      	str	r3, [r0, #24]
 8005630:	4619      	mov	r1, r3
 8005632:	2208      	movs	r2, #8
 8005634:	305c      	adds	r0, #92	@ 0x5c
 8005636:	f000 f9f9 	bl	8005a2c <memset>
 800563a:	4b0d      	ldr	r3, [pc, #52]	@ (8005670 <std+0x58>)
 800563c:	6263      	str	r3, [r4, #36]	@ 0x24
 800563e:	4b0d      	ldr	r3, [pc, #52]	@ (8005674 <std+0x5c>)
 8005640:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005642:	4b0d      	ldr	r3, [pc, #52]	@ (8005678 <std+0x60>)
 8005644:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005646:	4b0d      	ldr	r3, [pc, #52]	@ (800567c <std+0x64>)
 8005648:	6323      	str	r3, [r4, #48]	@ 0x30
 800564a:	4b0d      	ldr	r3, [pc, #52]	@ (8005680 <std+0x68>)
 800564c:	6224      	str	r4, [r4, #32]
 800564e:	429c      	cmp	r4, r3
 8005650:	d006      	beq.n	8005660 <std+0x48>
 8005652:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005656:	4294      	cmp	r4, r2
 8005658:	d002      	beq.n	8005660 <std+0x48>
 800565a:	33d0      	adds	r3, #208	@ 0xd0
 800565c:	429c      	cmp	r4, r3
 800565e:	d105      	bne.n	800566c <std+0x54>
 8005660:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005668:	f000 ba58 	b.w	8005b1c <__retarget_lock_init_recursive>
 800566c:	bd10      	pop	{r4, pc}
 800566e:	bf00      	nop
 8005670:	0800587d 	.word	0x0800587d
 8005674:	0800589f 	.word	0x0800589f
 8005678:	080058d7 	.word	0x080058d7
 800567c:	080058fb 	.word	0x080058fb
 8005680:	200003d8 	.word	0x200003d8

08005684 <stdio_exit_handler>:
 8005684:	4a02      	ldr	r2, [pc, #8]	@ (8005690 <stdio_exit_handler+0xc>)
 8005686:	4903      	ldr	r1, [pc, #12]	@ (8005694 <stdio_exit_handler+0x10>)
 8005688:	4803      	ldr	r0, [pc, #12]	@ (8005698 <stdio_exit_handler+0x14>)
 800568a:	f000 b869 	b.w	8005760 <_fwalk_sglue>
 800568e:	bf00      	nop
 8005690:	20000010 	.word	0x20000010
 8005694:	080063b9 	.word	0x080063b9
 8005698:	20000020 	.word	0x20000020

0800569c <cleanup_stdio>:
 800569c:	6841      	ldr	r1, [r0, #4]
 800569e:	4b0c      	ldr	r3, [pc, #48]	@ (80056d0 <cleanup_stdio+0x34>)
 80056a0:	4299      	cmp	r1, r3
 80056a2:	b510      	push	{r4, lr}
 80056a4:	4604      	mov	r4, r0
 80056a6:	d001      	beq.n	80056ac <cleanup_stdio+0x10>
 80056a8:	f000 fe86 	bl	80063b8 <_fflush_r>
 80056ac:	68a1      	ldr	r1, [r4, #8]
 80056ae:	4b09      	ldr	r3, [pc, #36]	@ (80056d4 <cleanup_stdio+0x38>)
 80056b0:	4299      	cmp	r1, r3
 80056b2:	d002      	beq.n	80056ba <cleanup_stdio+0x1e>
 80056b4:	4620      	mov	r0, r4
 80056b6:	f000 fe7f 	bl	80063b8 <_fflush_r>
 80056ba:	68e1      	ldr	r1, [r4, #12]
 80056bc:	4b06      	ldr	r3, [pc, #24]	@ (80056d8 <cleanup_stdio+0x3c>)
 80056be:	4299      	cmp	r1, r3
 80056c0:	d004      	beq.n	80056cc <cleanup_stdio+0x30>
 80056c2:	4620      	mov	r0, r4
 80056c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056c8:	f000 be76 	b.w	80063b8 <_fflush_r>
 80056cc:	bd10      	pop	{r4, pc}
 80056ce:	bf00      	nop
 80056d0:	200003d8 	.word	0x200003d8
 80056d4:	20000440 	.word	0x20000440
 80056d8:	200004a8 	.word	0x200004a8

080056dc <global_stdio_init.part.0>:
 80056dc:	b510      	push	{r4, lr}
 80056de:	4b0b      	ldr	r3, [pc, #44]	@ (800570c <global_stdio_init.part.0+0x30>)
 80056e0:	4c0b      	ldr	r4, [pc, #44]	@ (8005710 <global_stdio_init.part.0+0x34>)
 80056e2:	4a0c      	ldr	r2, [pc, #48]	@ (8005714 <global_stdio_init.part.0+0x38>)
 80056e4:	601a      	str	r2, [r3, #0]
 80056e6:	4620      	mov	r0, r4
 80056e8:	2200      	movs	r2, #0
 80056ea:	2104      	movs	r1, #4
 80056ec:	f7ff ff94 	bl	8005618 <std>
 80056f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80056f4:	2201      	movs	r2, #1
 80056f6:	2109      	movs	r1, #9
 80056f8:	f7ff ff8e 	bl	8005618 <std>
 80056fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005700:	2202      	movs	r2, #2
 8005702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005706:	2112      	movs	r1, #18
 8005708:	f7ff bf86 	b.w	8005618 <std>
 800570c:	20000510 	.word	0x20000510
 8005710:	200003d8 	.word	0x200003d8
 8005714:	08005685 	.word	0x08005685

08005718 <__sfp_lock_acquire>:
 8005718:	4801      	ldr	r0, [pc, #4]	@ (8005720 <__sfp_lock_acquire+0x8>)
 800571a:	f000 ba00 	b.w	8005b1e <__retarget_lock_acquire_recursive>
 800571e:	bf00      	nop
 8005720:	20000519 	.word	0x20000519

08005724 <__sfp_lock_release>:
 8005724:	4801      	ldr	r0, [pc, #4]	@ (800572c <__sfp_lock_release+0x8>)
 8005726:	f000 b9fb 	b.w	8005b20 <__retarget_lock_release_recursive>
 800572a:	bf00      	nop
 800572c:	20000519 	.word	0x20000519

08005730 <__sinit>:
 8005730:	b510      	push	{r4, lr}
 8005732:	4604      	mov	r4, r0
 8005734:	f7ff fff0 	bl	8005718 <__sfp_lock_acquire>
 8005738:	6a23      	ldr	r3, [r4, #32]
 800573a:	b11b      	cbz	r3, 8005744 <__sinit+0x14>
 800573c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005740:	f7ff bff0 	b.w	8005724 <__sfp_lock_release>
 8005744:	4b04      	ldr	r3, [pc, #16]	@ (8005758 <__sinit+0x28>)
 8005746:	6223      	str	r3, [r4, #32]
 8005748:	4b04      	ldr	r3, [pc, #16]	@ (800575c <__sinit+0x2c>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d1f5      	bne.n	800573c <__sinit+0xc>
 8005750:	f7ff ffc4 	bl	80056dc <global_stdio_init.part.0>
 8005754:	e7f2      	b.n	800573c <__sinit+0xc>
 8005756:	bf00      	nop
 8005758:	0800569d 	.word	0x0800569d
 800575c:	20000510 	.word	0x20000510

08005760 <_fwalk_sglue>:
 8005760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005764:	4607      	mov	r7, r0
 8005766:	4688      	mov	r8, r1
 8005768:	4614      	mov	r4, r2
 800576a:	2600      	movs	r6, #0
 800576c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005770:	f1b9 0901 	subs.w	r9, r9, #1
 8005774:	d505      	bpl.n	8005782 <_fwalk_sglue+0x22>
 8005776:	6824      	ldr	r4, [r4, #0]
 8005778:	2c00      	cmp	r4, #0
 800577a:	d1f7      	bne.n	800576c <_fwalk_sglue+0xc>
 800577c:	4630      	mov	r0, r6
 800577e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005782:	89ab      	ldrh	r3, [r5, #12]
 8005784:	2b01      	cmp	r3, #1
 8005786:	d907      	bls.n	8005798 <_fwalk_sglue+0x38>
 8005788:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800578c:	3301      	adds	r3, #1
 800578e:	d003      	beq.n	8005798 <_fwalk_sglue+0x38>
 8005790:	4629      	mov	r1, r5
 8005792:	4638      	mov	r0, r7
 8005794:	47c0      	blx	r8
 8005796:	4306      	orrs	r6, r0
 8005798:	3568      	adds	r5, #104	@ 0x68
 800579a:	e7e9      	b.n	8005770 <_fwalk_sglue+0x10>

0800579c <iprintf>:
 800579c:	b40f      	push	{r0, r1, r2, r3}
 800579e:	b507      	push	{r0, r1, r2, lr}
 80057a0:	4906      	ldr	r1, [pc, #24]	@ (80057bc <iprintf+0x20>)
 80057a2:	ab04      	add	r3, sp, #16
 80057a4:	6808      	ldr	r0, [r1, #0]
 80057a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80057aa:	6881      	ldr	r1, [r0, #8]
 80057ac:	9301      	str	r3, [sp, #4]
 80057ae:	f000 fadb 	bl	8005d68 <_vfiprintf_r>
 80057b2:	b003      	add	sp, #12
 80057b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80057b8:	b004      	add	sp, #16
 80057ba:	4770      	bx	lr
 80057bc:	2000001c 	.word	0x2000001c

080057c0 <_puts_r>:
 80057c0:	6a03      	ldr	r3, [r0, #32]
 80057c2:	b570      	push	{r4, r5, r6, lr}
 80057c4:	6884      	ldr	r4, [r0, #8]
 80057c6:	4605      	mov	r5, r0
 80057c8:	460e      	mov	r6, r1
 80057ca:	b90b      	cbnz	r3, 80057d0 <_puts_r+0x10>
 80057cc:	f7ff ffb0 	bl	8005730 <__sinit>
 80057d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80057d2:	07db      	lsls	r3, r3, #31
 80057d4:	d405      	bmi.n	80057e2 <_puts_r+0x22>
 80057d6:	89a3      	ldrh	r3, [r4, #12]
 80057d8:	0598      	lsls	r0, r3, #22
 80057da:	d402      	bmi.n	80057e2 <_puts_r+0x22>
 80057dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80057de:	f000 f99e 	bl	8005b1e <__retarget_lock_acquire_recursive>
 80057e2:	89a3      	ldrh	r3, [r4, #12]
 80057e4:	0719      	lsls	r1, r3, #28
 80057e6:	d502      	bpl.n	80057ee <_puts_r+0x2e>
 80057e8:	6923      	ldr	r3, [r4, #16]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d135      	bne.n	800585a <_puts_r+0x9a>
 80057ee:	4621      	mov	r1, r4
 80057f0:	4628      	mov	r0, r5
 80057f2:	f000 f8c5 	bl	8005980 <__swsetup_r>
 80057f6:	b380      	cbz	r0, 800585a <_puts_r+0x9a>
 80057f8:	f04f 35ff 	mov.w	r5, #4294967295
 80057fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80057fe:	07da      	lsls	r2, r3, #31
 8005800:	d405      	bmi.n	800580e <_puts_r+0x4e>
 8005802:	89a3      	ldrh	r3, [r4, #12]
 8005804:	059b      	lsls	r3, r3, #22
 8005806:	d402      	bmi.n	800580e <_puts_r+0x4e>
 8005808:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800580a:	f000 f989 	bl	8005b20 <__retarget_lock_release_recursive>
 800580e:	4628      	mov	r0, r5
 8005810:	bd70      	pop	{r4, r5, r6, pc}
 8005812:	2b00      	cmp	r3, #0
 8005814:	da04      	bge.n	8005820 <_puts_r+0x60>
 8005816:	69a2      	ldr	r2, [r4, #24]
 8005818:	429a      	cmp	r2, r3
 800581a:	dc17      	bgt.n	800584c <_puts_r+0x8c>
 800581c:	290a      	cmp	r1, #10
 800581e:	d015      	beq.n	800584c <_puts_r+0x8c>
 8005820:	6823      	ldr	r3, [r4, #0]
 8005822:	1c5a      	adds	r2, r3, #1
 8005824:	6022      	str	r2, [r4, #0]
 8005826:	7019      	strb	r1, [r3, #0]
 8005828:	68a3      	ldr	r3, [r4, #8]
 800582a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800582e:	3b01      	subs	r3, #1
 8005830:	60a3      	str	r3, [r4, #8]
 8005832:	2900      	cmp	r1, #0
 8005834:	d1ed      	bne.n	8005812 <_puts_r+0x52>
 8005836:	2b00      	cmp	r3, #0
 8005838:	da11      	bge.n	800585e <_puts_r+0x9e>
 800583a:	4622      	mov	r2, r4
 800583c:	210a      	movs	r1, #10
 800583e:	4628      	mov	r0, r5
 8005840:	f000 f85f 	bl	8005902 <__swbuf_r>
 8005844:	3001      	adds	r0, #1
 8005846:	d0d7      	beq.n	80057f8 <_puts_r+0x38>
 8005848:	250a      	movs	r5, #10
 800584a:	e7d7      	b.n	80057fc <_puts_r+0x3c>
 800584c:	4622      	mov	r2, r4
 800584e:	4628      	mov	r0, r5
 8005850:	f000 f857 	bl	8005902 <__swbuf_r>
 8005854:	3001      	adds	r0, #1
 8005856:	d1e7      	bne.n	8005828 <_puts_r+0x68>
 8005858:	e7ce      	b.n	80057f8 <_puts_r+0x38>
 800585a:	3e01      	subs	r6, #1
 800585c:	e7e4      	b.n	8005828 <_puts_r+0x68>
 800585e:	6823      	ldr	r3, [r4, #0]
 8005860:	1c5a      	adds	r2, r3, #1
 8005862:	6022      	str	r2, [r4, #0]
 8005864:	220a      	movs	r2, #10
 8005866:	701a      	strb	r2, [r3, #0]
 8005868:	e7ee      	b.n	8005848 <_puts_r+0x88>
	...

0800586c <puts>:
 800586c:	4b02      	ldr	r3, [pc, #8]	@ (8005878 <puts+0xc>)
 800586e:	4601      	mov	r1, r0
 8005870:	6818      	ldr	r0, [r3, #0]
 8005872:	f7ff bfa5 	b.w	80057c0 <_puts_r>
 8005876:	bf00      	nop
 8005878:	2000001c 	.word	0x2000001c

0800587c <__sread>:
 800587c:	b510      	push	{r4, lr}
 800587e:	460c      	mov	r4, r1
 8005880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005884:	f000 f8fc 	bl	8005a80 <_read_r>
 8005888:	2800      	cmp	r0, #0
 800588a:	bfab      	itete	ge
 800588c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800588e:	89a3      	ldrhlt	r3, [r4, #12]
 8005890:	181b      	addge	r3, r3, r0
 8005892:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005896:	bfac      	ite	ge
 8005898:	6563      	strge	r3, [r4, #84]	@ 0x54
 800589a:	81a3      	strhlt	r3, [r4, #12]
 800589c:	bd10      	pop	{r4, pc}

0800589e <__swrite>:
 800589e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058a2:	461f      	mov	r7, r3
 80058a4:	898b      	ldrh	r3, [r1, #12]
 80058a6:	05db      	lsls	r3, r3, #23
 80058a8:	4605      	mov	r5, r0
 80058aa:	460c      	mov	r4, r1
 80058ac:	4616      	mov	r6, r2
 80058ae:	d505      	bpl.n	80058bc <__swrite+0x1e>
 80058b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058b4:	2302      	movs	r3, #2
 80058b6:	2200      	movs	r2, #0
 80058b8:	f000 f8d0 	bl	8005a5c <_lseek_r>
 80058bc:	89a3      	ldrh	r3, [r4, #12]
 80058be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80058c6:	81a3      	strh	r3, [r4, #12]
 80058c8:	4632      	mov	r2, r6
 80058ca:	463b      	mov	r3, r7
 80058cc:	4628      	mov	r0, r5
 80058ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058d2:	f000 b8e7 	b.w	8005aa4 <_write_r>

080058d6 <__sseek>:
 80058d6:	b510      	push	{r4, lr}
 80058d8:	460c      	mov	r4, r1
 80058da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058de:	f000 f8bd 	bl	8005a5c <_lseek_r>
 80058e2:	1c43      	adds	r3, r0, #1
 80058e4:	89a3      	ldrh	r3, [r4, #12]
 80058e6:	bf15      	itete	ne
 80058e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80058ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80058ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80058f2:	81a3      	strheq	r3, [r4, #12]
 80058f4:	bf18      	it	ne
 80058f6:	81a3      	strhne	r3, [r4, #12]
 80058f8:	bd10      	pop	{r4, pc}

080058fa <__sclose>:
 80058fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058fe:	f000 b89d 	b.w	8005a3c <_close_r>

08005902 <__swbuf_r>:
 8005902:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005904:	460e      	mov	r6, r1
 8005906:	4614      	mov	r4, r2
 8005908:	4605      	mov	r5, r0
 800590a:	b118      	cbz	r0, 8005914 <__swbuf_r+0x12>
 800590c:	6a03      	ldr	r3, [r0, #32]
 800590e:	b90b      	cbnz	r3, 8005914 <__swbuf_r+0x12>
 8005910:	f7ff ff0e 	bl	8005730 <__sinit>
 8005914:	69a3      	ldr	r3, [r4, #24]
 8005916:	60a3      	str	r3, [r4, #8]
 8005918:	89a3      	ldrh	r3, [r4, #12]
 800591a:	071a      	lsls	r2, r3, #28
 800591c:	d501      	bpl.n	8005922 <__swbuf_r+0x20>
 800591e:	6923      	ldr	r3, [r4, #16]
 8005920:	b943      	cbnz	r3, 8005934 <__swbuf_r+0x32>
 8005922:	4621      	mov	r1, r4
 8005924:	4628      	mov	r0, r5
 8005926:	f000 f82b 	bl	8005980 <__swsetup_r>
 800592a:	b118      	cbz	r0, 8005934 <__swbuf_r+0x32>
 800592c:	f04f 37ff 	mov.w	r7, #4294967295
 8005930:	4638      	mov	r0, r7
 8005932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005934:	6823      	ldr	r3, [r4, #0]
 8005936:	6922      	ldr	r2, [r4, #16]
 8005938:	1a98      	subs	r0, r3, r2
 800593a:	6963      	ldr	r3, [r4, #20]
 800593c:	b2f6      	uxtb	r6, r6
 800593e:	4283      	cmp	r3, r0
 8005940:	4637      	mov	r7, r6
 8005942:	dc05      	bgt.n	8005950 <__swbuf_r+0x4e>
 8005944:	4621      	mov	r1, r4
 8005946:	4628      	mov	r0, r5
 8005948:	f000 fd36 	bl	80063b8 <_fflush_r>
 800594c:	2800      	cmp	r0, #0
 800594e:	d1ed      	bne.n	800592c <__swbuf_r+0x2a>
 8005950:	68a3      	ldr	r3, [r4, #8]
 8005952:	3b01      	subs	r3, #1
 8005954:	60a3      	str	r3, [r4, #8]
 8005956:	6823      	ldr	r3, [r4, #0]
 8005958:	1c5a      	adds	r2, r3, #1
 800595a:	6022      	str	r2, [r4, #0]
 800595c:	701e      	strb	r6, [r3, #0]
 800595e:	6962      	ldr	r2, [r4, #20]
 8005960:	1c43      	adds	r3, r0, #1
 8005962:	429a      	cmp	r2, r3
 8005964:	d004      	beq.n	8005970 <__swbuf_r+0x6e>
 8005966:	89a3      	ldrh	r3, [r4, #12]
 8005968:	07db      	lsls	r3, r3, #31
 800596a:	d5e1      	bpl.n	8005930 <__swbuf_r+0x2e>
 800596c:	2e0a      	cmp	r6, #10
 800596e:	d1df      	bne.n	8005930 <__swbuf_r+0x2e>
 8005970:	4621      	mov	r1, r4
 8005972:	4628      	mov	r0, r5
 8005974:	f000 fd20 	bl	80063b8 <_fflush_r>
 8005978:	2800      	cmp	r0, #0
 800597a:	d0d9      	beq.n	8005930 <__swbuf_r+0x2e>
 800597c:	e7d6      	b.n	800592c <__swbuf_r+0x2a>
	...

08005980 <__swsetup_r>:
 8005980:	b538      	push	{r3, r4, r5, lr}
 8005982:	4b29      	ldr	r3, [pc, #164]	@ (8005a28 <__swsetup_r+0xa8>)
 8005984:	4605      	mov	r5, r0
 8005986:	6818      	ldr	r0, [r3, #0]
 8005988:	460c      	mov	r4, r1
 800598a:	b118      	cbz	r0, 8005994 <__swsetup_r+0x14>
 800598c:	6a03      	ldr	r3, [r0, #32]
 800598e:	b90b      	cbnz	r3, 8005994 <__swsetup_r+0x14>
 8005990:	f7ff fece 	bl	8005730 <__sinit>
 8005994:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005998:	0719      	lsls	r1, r3, #28
 800599a:	d422      	bmi.n	80059e2 <__swsetup_r+0x62>
 800599c:	06da      	lsls	r2, r3, #27
 800599e:	d407      	bmi.n	80059b0 <__swsetup_r+0x30>
 80059a0:	2209      	movs	r2, #9
 80059a2:	602a      	str	r2, [r5, #0]
 80059a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059a8:	81a3      	strh	r3, [r4, #12]
 80059aa:	f04f 30ff 	mov.w	r0, #4294967295
 80059ae:	e033      	b.n	8005a18 <__swsetup_r+0x98>
 80059b0:	0758      	lsls	r0, r3, #29
 80059b2:	d512      	bpl.n	80059da <__swsetup_r+0x5a>
 80059b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80059b6:	b141      	cbz	r1, 80059ca <__swsetup_r+0x4a>
 80059b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80059bc:	4299      	cmp	r1, r3
 80059be:	d002      	beq.n	80059c6 <__swsetup_r+0x46>
 80059c0:	4628      	mov	r0, r5
 80059c2:	f000 f8af 	bl	8005b24 <_free_r>
 80059c6:	2300      	movs	r3, #0
 80059c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80059ca:	89a3      	ldrh	r3, [r4, #12]
 80059cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80059d0:	81a3      	strh	r3, [r4, #12]
 80059d2:	2300      	movs	r3, #0
 80059d4:	6063      	str	r3, [r4, #4]
 80059d6:	6923      	ldr	r3, [r4, #16]
 80059d8:	6023      	str	r3, [r4, #0]
 80059da:	89a3      	ldrh	r3, [r4, #12]
 80059dc:	f043 0308 	orr.w	r3, r3, #8
 80059e0:	81a3      	strh	r3, [r4, #12]
 80059e2:	6923      	ldr	r3, [r4, #16]
 80059e4:	b94b      	cbnz	r3, 80059fa <__swsetup_r+0x7a>
 80059e6:	89a3      	ldrh	r3, [r4, #12]
 80059e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80059ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059f0:	d003      	beq.n	80059fa <__swsetup_r+0x7a>
 80059f2:	4621      	mov	r1, r4
 80059f4:	4628      	mov	r0, r5
 80059f6:	f000 fd2d 	bl	8006454 <__smakebuf_r>
 80059fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059fe:	f013 0201 	ands.w	r2, r3, #1
 8005a02:	d00a      	beq.n	8005a1a <__swsetup_r+0x9a>
 8005a04:	2200      	movs	r2, #0
 8005a06:	60a2      	str	r2, [r4, #8]
 8005a08:	6962      	ldr	r2, [r4, #20]
 8005a0a:	4252      	negs	r2, r2
 8005a0c:	61a2      	str	r2, [r4, #24]
 8005a0e:	6922      	ldr	r2, [r4, #16]
 8005a10:	b942      	cbnz	r2, 8005a24 <__swsetup_r+0xa4>
 8005a12:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005a16:	d1c5      	bne.n	80059a4 <__swsetup_r+0x24>
 8005a18:	bd38      	pop	{r3, r4, r5, pc}
 8005a1a:	0799      	lsls	r1, r3, #30
 8005a1c:	bf58      	it	pl
 8005a1e:	6962      	ldrpl	r2, [r4, #20]
 8005a20:	60a2      	str	r2, [r4, #8]
 8005a22:	e7f4      	b.n	8005a0e <__swsetup_r+0x8e>
 8005a24:	2000      	movs	r0, #0
 8005a26:	e7f7      	b.n	8005a18 <__swsetup_r+0x98>
 8005a28:	2000001c 	.word	0x2000001c

08005a2c <memset>:
 8005a2c:	4402      	add	r2, r0
 8005a2e:	4603      	mov	r3, r0
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d100      	bne.n	8005a36 <memset+0xa>
 8005a34:	4770      	bx	lr
 8005a36:	f803 1b01 	strb.w	r1, [r3], #1
 8005a3a:	e7f9      	b.n	8005a30 <memset+0x4>

08005a3c <_close_r>:
 8005a3c:	b538      	push	{r3, r4, r5, lr}
 8005a3e:	4d06      	ldr	r5, [pc, #24]	@ (8005a58 <_close_r+0x1c>)
 8005a40:	2300      	movs	r3, #0
 8005a42:	4604      	mov	r4, r0
 8005a44:	4608      	mov	r0, r1
 8005a46:	602b      	str	r3, [r5, #0]
 8005a48:	f7fb fe06 	bl	8001658 <_close>
 8005a4c:	1c43      	adds	r3, r0, #1
 8005a4e:	d102      	bne.n	8005a56 <_close_r+0x1a>
 8005a50:	682b      	ldr	r3, [r5, #0]
 8005a52:	b103      	cbz	r3, 8005a56 <_close_r+0x1a>
 8005a54:	6023      	str	r3, [r4, #0]
 8005a56:	bd38      	pop	{r3, r4, r5, pc}
 8005a58:	20000514 	.word	0x20000514

08005a5c <_lseek_r>:
 8005a5c:	b538      	push	{r3, r4, r5, lr}
 8005a5e:	4d07      	ldr	r5, [pc, #28]	@ (8005a7c <_lseek_r+0x20>)
 8005a60:	4604      	mov	r4, r0
 8005a62:	4608      	mov	r0, r1
 8005a64:	4611      	mov	r1, r2
 8005a66:	2200      	movs	r2, #0
 8005a68:	602a      	str	r2, [r5, #0]
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	f7fb fe1b 	bl	80016a6 <_lseek>
 8005a70:	1c43      	adds	r3, r0, #1
 8005a72:	d102      	bne.n	8005a7a <_lseek_r+0x1e>
 8005a74:	682b      	ldr	r3, [r5, #0]
 8005a76:	b103      	cbz	r3, 8005a7a <_lseek_r+0x1e>
 8005a78:	6023      	str	r3, [r4, #0]
 8005a7a:	bd38      	pop	{r3, r4, r5, pc}
 8005a7c:	20000514 	.word	0x20000514

08005a80 <_read_r>:
 8005a80:	b538      	push	{r3, r4, r5, lr}
 8005a82:	4d07      	ldr	r5, [pc, #28]	@ (8005aa0 <_read_r+0x20>)
 8005a84:	4604      	mov	r4, r0
 8005a86:	4608      	mov	r0, r1
 8005a88:	4611      	mov	r1, r2
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	602a      	str	r2, [r5, #0]
 8005a8e:	461a      	mov	r2, r3
 8005a90:	f7fb fda9 	bl	80015e6 <_read>
 8005a94:	1c43      	adds	r3, r0, #1
 8005a96:	d102      	bne.n	8005a9e <_read_r+0x1e>
 8005a98:	682b      	ldr	r3, [r5, #0]
 8005a9a:	b103      	cbz	r3, 8005a9e <_read_r+0x1e>
 8005a9c:	6023      	str	r3, [r4, #0]
 8005a9e:	bd38      	pop	{r3, r4, r5, pc}
 8005aa0:	20000514 	.word	0x20000514

08005aa4 <_write_r>:
 8005aa4:	b538      	push	{r3, r4, r5, lr}
 8005aa6:	4d07      	ldr	r5, [pc, #28]	@ (8005ac4 <_write_r+0x20>)
 8005aa8:	4604      	mov	r4, r0
 8005aaa:	4608      	mov	r0, r1
 8005aac:	4611      	mov	r1, r2
 8005aae:	2200      	movs	r2, #0
 8005ab0:	602a      	str	r2, [r5, #0]
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	f7fb fdb4 	bl	8001620 <_write>
 8005ab8:	1c43      	adds	r3, r0, #1
 8005aba:	d102      	bne.n	8005ac2 <_write_r+0x1e>
 8005abc:	682b      	ldr	r3, [r5, #0]
 8005abe:	b103      	cbz	r3, 8005ac2 <_write_r+0x1e>
 8005ac0:	6023      	str	r3, [r4, #0]
 8005ac2:	bd38      	pop	{r3, r4, r5, pc}
 8005ac4:	20000514 	.word	0x20000514

08005ac8 <__errno>:
 8005ac8:	4b01      	ldr	r3, [pc, #4]	@ (8005ad0 <__errno+0x8>)
 8005aca:	6818      	ldr	r0, [r3, #0]
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	2000001c 	.word	0x2000001c

08005ad4 <__libc_init_array>:
 8005ad4:	b570      	push	{r4, r5, r6, lr}
 8005ad6:	4d0d      	ldr	r5, [pc, #52]	@ (8005b0c <__libc_init_array+0x38>)
 8005ad8:	4c0d      	ldr	r4, [pc, #52]	@ (8005b10 <__libc_init_array+0x3c>)
 8005ada:	1b64      	subs	r4, r4, r5
 8005adc:	10a4      	asrs	r4, r4, #2
 8005ade:	2600      	movs	r6, #0
 8005ae0:	42a6      	cmp	r6, r4
 8005ae2:	d109      	bne.n	8005af8 <__libc_init_array+0x24>
 8005ae4:	4d0b      	ldr	r5, [pc, #44]	@ (8005b14 <__libc_init_array+0x40>)
 8005ae6:	4c0c      	ldr	r4, [pc, #48]	@ (8005b18 <__libc_init_array+0x44>)
 8005ae8:	f000 fd22 	bl	8006530 <_init>
 8005aec:	1b64      	subs	r4, r4, r5
 8005aee:	10a4      	asrs	r4, r4, #2
 8005af0:	2600      	movs	r6, #0
 8005af2:	42a6      	cmp	r6, r4
 8005af4:	d105      	bne.n	8005b02 <__libc_init_array+0x2e>
 8005af6:	bd70      	pop	{r4, r5, r6, pc}
 8005af8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005afc:	4798      	blx	r3
 8005afe:	3601      	adds	r6, #1
 8005b00:	e7ee      	b.n	8005ae0 <__libc_init_array+0xc>
 8005b02:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b06:	4798      	blx	r3
 8005b08:	3601      	adds	r6, #1
 8005b0a:	e7f2      	b.n	8005af2 <__libc_init_array+0x1e>
 8005b0c:	080066fc 	.word	0x080066fc
 8005b10:	080066fc 	.word	0x080066fc
 8005b14:	080066fc 	.word	0x080066fc
 8005b18:	08006700 	.word	0x08006700

08005b1c <__retarget_lock_init_recursive>:
 8005b1c:	4770      	bx	lr

08005b1e <__retarget_lock_acquire_recursive>:
 8005b1e:	4770      	bx	lr

08005b20 <__retarget_lock_release_recursive>:
 8005b20:	4770      	bx	lr
	...

08005b24 <_free_r>:
 8005b24:	b538      	push	{r3, r4, r5, lr}
 8005b26:	4605      	mov	r5, r0
 8005b28:	2900      	cmp	r1, #0
 8005b2a:	d041      	beq.n	8005bb0 <_free_r+0x8c>
 8005b2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b30:	1f0c      	subs	r4, r1, #4
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	bfb8      	it	lt
 8005b36:	18e4      	addlt	r4, r4, r3
 8005b38:	f000 f8e0 	bl	8005cfc <__malloc_lock>
 8005b3c:	4a1d      	ldr	r2, [pc, #116]	@ (8005bb4 <_free_r+0x90>)
 8005b3e:	6813      	ldr	r3, [r2, #0]
 8005b40:	b933      	cbnz	r3, 8005b50 <_free_r+0x2c>
 8005b42:	6063      	str	r3, [r4, #4]
 8005b44:	6014      	str	r4, [r2, #0]
 8005b46:	4628      	mov	r0, r5
 8005b48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b4c:	f000 b8dc 	b.w	8005d08 <__malloc_unlock>
 8005b50:	42a3      	cmp	r3, r4
 8005b52:	d908      	bls.n	8005b66 <_free_r+0x42>
 8005b54:	6820      	ldr	r0, [r4, #0]
 8005b56:	1821      	adds	r1, r4, r0
 8005b58:	428b      	cmp	r3, r1
 8005b5a:	bf01      	itttt	eq
 8005b5c:	6819      	ldreq	r1, [r3, #0]
 8005b5e:	685b      	ldreq	r3, [r3, #4]
 8005b60:	1809      	addeq	r1, r1, r0
 8005b62:	6021      	streq	r1, [r4, #0]
 8005b64:	e7ed      	b.n	8005b42 <_free_r+0x1e>
 8005b66:	461a      	mov	r2, r3
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	b10b      	cbz	r3, 8005b70 <_free_r+0x4c>
 8005b6c:	42a3      	cmp	r3, r4
 8005b6e:	d9fa      	bls.n	8005b66 <_free_r+0x42>
 8005b70:	6811      	ldr	r1, [r2, #0]
 8005b72:	1850      	adds	r0, r2, r1
 8005b74:	42a0      	cmp	r0, r4
 8005b76:	d10b      	bne.n	8005b90 <_free_r+0x6c>
 8005b78:	6820      	ldr	r0, [r4, #0]
 8005b7a:	4401      	add	r1, r0
 8005b7c:	1850      	adds	r0, r2, r1
 8005b7e:	4283      	cmp	r3, r0
 8005b80:	6011      	str	r1, [r2, #0]
 8005b82:	d1e0      	bne.n	8005b46 <_free_r+0x22>
 8005b84:	6818      	ldr	r0, [r3, #0]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	6053      	str	r3, [r2, #4]
 8005b8a:	4408      	add	r0, r1
 8005b8c:	6010      	str	r0, [r2, #0]
 8005b8e:	e7da      	b.n	8005b46 <_free_r+0x22>
 8005b90:	d902      	bls.n	8005b98 <_free_r+0x74>
 8005b92:	230c      	movs	r3, #12
 8005b94:	602b      	str	r3, [r5, #0]
 8005b96:	e7d6      	b.n	8005b46 <_free_r+0x22>
 8005b98:	6820      	ldr	r0, [r4, #0]
 8005b9a:	1821      	adds	r1, r4, r0
 8005b9c:	428b      	cmp	r3, r1
 8005b9e:	bf04      	itt	eq
 8005ba0:	6819      	ldreq	r1, [r3, #0]
 8005ba2:	685b      	ldreq	r3, [r3, #4]
 8005ba4:	6063      	str	r3, [r4, #4]
 8005ba6:	bf04      	itt	eq
 8005ba8:	1809      	addeq	r1, r1, r0
 8005baa:	6021      	streq	r1, [r4, #0]
 8005bac:	6054      	str	r4, [r2, #4]
 8005bae:	e7ca      	b.n	8005b46 <_free_r+0x22>
 8005bb0:	bd38      	pop	{r3, r4, r5, pc}
 8005bb2:	bf00      	nop
 8005bb4:	20000520 	.word	0x20000520

08005bb8 <sbrk_aligned>:
 8005bb8:	b570      	push	{r4, r5, r6, lr}
 8005bba:	4e0f      	ldr	r6, [pc, #60]	@ (8005bf8 <sbrk_aligned+0x40>)
 8005bbc:	460c      	mov	r4, r1
 8005bbe:	6831      	ldr	r1, [r6, #0]
 8005bc0:	4605      	mov	r5, r0
 8005bc2:	b911      	cbnz	r1, 8005bca <sbrk_aligned+0x12>
 8005bc4:	f000 fca4 	bl	8006510 <_sbrk_r>
 8005bc8:	6030      	str	r0, [r6, #0]
 8005bca:	4621      	mov	r1, r4
 8005bcc:	4628      	mov	r0, r5
 8005bce:	f000 fc9f 	bl	8006510 <_sbrk_r>
 8005bd2:	1c43      	adds	r3, r0, #1
 8005bd4:	d103      	bne.n	8005bde <sbrk_aligned+0x26>
 8005bd6:	f04f 34ff 	mov.w	r4, #4294967295
 8005bda:	4620      	mov	r0, r4
 8005bdc:	bd70      	pop	{r4, r5, r6, pc}
 8005bde:	1cc4      	adds	r4, r0, #3
 8005be0:	f024 0403 	bic.w	r4, r4, #3
 8005be4:	42a0      	cmp	r0, r4
 8005be6:	d0f8      	beq.n	8005bda <sbrk_aligned+0x22>
 8005be8:	1a21      	subs	r1, r4, r0
 8005bea:	4628      	mov	r0, r5
 8005bec:	f000 fc90 	bl	8006510 <_sbrk_r>
 8005bf0:	3001      	adds	r0, #1
 8005bf2:	d1f2      	bne.n	8005bda <sbrk_aligned+0x22>
 8005bf4:	e7ef      	b.n	8005bd6 <sbrk_aligned+0x1e>
 8005bf6:	bf00      	nop
 8005bf8:	2000051c 	.word	0x2000051c

08005bfc <_malloc_r>:
 8005bfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c00:	1ccd      	adds	r5, r1, #3
 8005c02:	f025 0503 	bic.w	r5, r5, #3
 8005c06:	3508      	adds	r5, #8
 8005c08:	2d0c      	cmp	r5, #12
 8005c0a:	bf38      	it	cc
 8005c0c:	250c      	movcc	r5, #12
 8005c0e:	2d00      	cmp	r5, #0
 8005c10:	4606      	mov	r6, r0
 8005c12:	db01      	blt.n	8005c18 <_malloc_r+0x1c>
 8005c14:	42a9      	cmp	r1, r5
 8005c16:	d904      	bls.n	8005c22 <_malloc_r+0x26>
 8005c18:	230c      	movs	r3, #12
 8005c1a:	6033      	str	r3, [r6, #0]
 8005c1c:	2000      	movs	r0, #0
 8005c1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005cf8 <_malloc_r+0xfc>
 8005c26:	f000 f869 	bl	8005cfc <__malloc_lock>
 8005c2a:	f8d8 3000 	ldr.w	r3, [r8]
 8005c2e:	461c      	mov	r4, r3
 8005c30:	bb44      	cbnz	r4, 8005c84 <_malloc_r+0x88>
 8005c32:	4629      	mov	r1, r5
 8005c34:	4630      	mov	r0, r6
 8005c36:	f7ff ffbf 	bl	8005bb8 <sbrk_aligned>
 8005c3a:	1c43      	adds	r3, r0, #1
 8005c3c:	4604      	mov	r4, r0
 8005c3e:	d158      	bne.n	8005cf2 <_malloc_r+0xf6>
 8005c40:	f8d8 4000 	ldr.w	r4, [r8]
 8005c44:	4627      	mov	r7, r4
 8005c46:	2f00      	cmp	r7, #0
 8005c48:	d143      	bne.n	8005cd2 <_malloc_r+0xd6>
 8005c4a:	2c00      	cmp	r4, #0
 8005c4c:	d04b      	beq.n	8005ce6 <_malloc_r+0xea>
 8005c4e:	6823      	ldr	r3, [r4, #0]
 8005c50:	4639      	mov	r1, r7
 8005c52:	4630      	mov	r0, r6
 8005c54:	eb04 0903 	add.w	r9, r4, r3
 8005c58:	f000 fc5a 	bl	8006510 <_sbrk_r>
 8005c5c:	4581      	cmp	r9, r0
 8005c5e:	d142      	bne.n	8005ce6 <_malloc_r+0xea>
 8005c60:	6821      	ldr	r1, [r4, #0]
 8005c62:	1a6d      	subs	r5, r5, r1
 8005c64:	4629      	mov	r1, r5
 8005c66:	4630      	mov	r0, r6
 8005c68:	f7ff ffa6 	bl	8005bb8 <sbrk_aligned>
 8005c6c:	3001      	adds	r0, #1
 8005c6e:	d03a      	beq.n	8005ce6 <_malloc_r+0xea>
 8005c70:	6823      	ldr	r3, [r4, #0]
 8005c72:	442b      	add	r3, r5
 8005c74:	6023      	str	r3, [r4, #0]
 8005c76:	f8d8 3000 	ldr.w	r3, [r8]
 8005c7a:	685a      	ldr	r2, [r3, #4]
 8005c7c:	bb62      	cbnz	r2, 8005cd8 <_malloc_r+0xdc>
 8005c7e:	f8c8 7000 	str.w	r7, [r8]
 8005c82:	e00f      	b.n	8005ca4 <_malloc_r+0xa8>
 8005c84:	6822      	ldr	r2, [r4, #0]
 8005c86:	1b52      	subs	r2, r2, r5
 8005c88:	d420      	bmi.n	8005ccc <_malloc_r+0xd0>
 8005c8a:	2a0b      	cmp	r2, #11
 8005c8c:	d917      	bls.n	8005cbe <_malloc_r+0xc2>
 8005c8e:	1961      	adds	r1, r4, r5
 8005c90:	42a3      	cmp	r3, r4
 8005c92:	6025      	str	r5, [r4, #0]
 8005c94:	bf18      	it	ne
 8005c96:	6059      	strne	r1, [r3, #4]
 8005c98:	6863      	ldr	r3, [r4, #4]
 8005c9a:	bf08      	it	eq
 8005c9c:	f8c8 1000 	streq.w	r1, [r8]
 8005ca0:	5162      	str	r2, [r4, r5]
 8005ca2:	604b      	str	r3, [r1, #4]
 8005ca4:	4630      	mov	r0, r6
 8005ca6:	f000 f82f 	bl	8005d08 <__malloc_unlock>
 8005caa:	f104 000b 	add.w	r0, r4, #11
 8005cae:	1d23      	adds	r3, r4, #4
 8005cb0:	f020 0007 	bic.w	r0, r0, #7
 8005cb4:	1ac2      	subs	r2, r0, r3
 8005cb6:	bf1c      	itt	ne
 8005cb8:	1a1b      	subne	r3, r3, r0
 8005cba:	50a3      	strne	r3, [r4, r2]
 8005cbc:	e7af      	b.n	8005c1e <_malloc_r+0x22>
 8005cbe:	6862      	ldr	r2, [r4, #4]
 8005cc0:	42a3      	cmp	r3, r4
 8005cc2:	bf0c      	ite	eq
 8005cc4:	f8c8 2000 	streq.w	r2, [r8]
 8005cc8:	605a      	strne	r2, [r3, #4]
 8005cca:	e7eb      	b.n	8005ca4 <_malloc_r+0xa8>
 8005ccc:	4623      	mov	r3, r4
 8005cce:	6864      	ldr	r4, [r4, #4]
 8005cd0:	e7ae      	b.n	8005c30 <_malloc_r+0x34>
 8005cd2:	463c      	mov	r4, r7
 8005cd4:	687f      	ldr	r7, [r7, #4]
 8005cd6:	e7b6      	b.n	8005c46 <_malloc_r+0x4a>
 8005cd8:	461a      	mov	r2, r3
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	42a3      	cmp	r3, r4
 8005cde:	d1fb      	bne.n	8005cd8 <_malloc_r+0xdc>
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	6053      	str	r3, [r2, #4]
 8005ce4:	e7de      	b.n	8005ca4 <_malloc_r+0xa8>
 8005ce6:	230c      	movs	r3, #12
 8005ce8:	6033      	str	r3, [r6, #0]
 8005cea:	4630      	mov	r0, r6
 8005cec:	f000 f80c 	bl	8005d08 <__malloc_unlock>
 8005cf0:	e794      	b.n	8005c1c <_malloc_r+0x20>
 8005cf2:	6005      	str	r5, [r0, #0]
 8005cf4:	e7d6      	b.n	8005ca4 <_malloc_r+0xa8>
 8005cf6:	bf00      	nop
 8005cf8:	20000520 	.word	0x20000520

08005cfc <__malloc_lock>:
 8005cfc:	4801      	ldr	r0, [pc, #4]	@ (8005d04 <__malloc_lock+0x8>)
 8005cfe:	f7ff bf0e 	b.w	8005b1e <__retarget_lock_acquire_recursive>
 8005d02:	bf00      	nop
 8005d04:	20000518 	.word	0x20000518

08005d08 <__malloc_unlock>:
 8005d08:	4801      	ldr	r0, [pc, #4]	@ (8005d10 <__malloc_unlock+0x8>)
 8005d0a:	f7ff bf09 	b.w	8005b20 <__retarget_lock_release_recursive>
 8005d0e:	bf00      	nop
 8005d10:	20000518 	.word	0x20000518

08005d14 <__sfputc_r>:
 8005d14:	6893      	ldr	r3, [r2, #8]
 8005d16:	3b01      	subs	r3, #1
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	b410      	push	{r4}
 8005d1c:	6093      	str	r3, [r2, #8]
 8005d1e:	da08      	bge.n	8005d32 <__sfputc_r+0x1e>
 8005d20:	6994      	ldr	r4, [r2, #24]
 8005d22:	42a3      	cmp	r3, r4
 8005d24:	db01      	blt.n	8005d2a <__sfputc_r+0x16>
 8005d26:	290a      	cmp	r1, #10
 8005d28:	d103      	bne.n	8005d32 <__sfputc_r+0x1e>
 8005d2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d2e:	f7ff bde8 	b.w	8005902 <__swbuf_r>
 8005d32:	6813      	ldr	r3, [r2, #0]
 8005d34:	1c58      	adds	r0, r3, #1
 8005d36:	6010      	str	r0, [r2, #0]
 8005d38:	7019      	strb	r1, [r3, #0]
 8005d3a:	4608      	mov	r0, r1
 8005d3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d40:	4770      	bx	lr

08005d42 <__sfputs_r>:
 8005d42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d44:	4606      	mov	r6, r0
 8005d46:	460f      	mov	r7, r1
 8005d48:	4614      	mov	r4, r2
 8005d4a:	18d5      	adds	r5, r2, r3
 8005d4c:	42ac      	cmp	r4, r5
 8005d4e:	d101      	bne.n	8005d54 <__sfputs_r+0x12>
 8005d50:	2000      	movs	r0, #0
 8005d52:	e007      	b.n	8005d64 <__sfputs_r+0x22>
 8005d54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d58:	463a      	mov	r2, r7
 8005d5a:	4630      	mov	r0, r6
 8005d5c:	f7ff ffda 	bl	8005d14 <__sfputc_r>
 8005d60:	1c43      	adds	r3, r0, #1
 8005d62:	d1f3      	bne.n	8005d4c <__sfputs_r+0xa>
 8005d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005d68 <_vfiprintf_r>:
 8005d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d6c:	460d      	mov	r5, r1
 8005d6e:	b09d      	sub	sp, #116	@ 0x74
 8005d70:	4614      	mov	r4, r2
 8005d72:	4698      	mov	r8, r3
 8005d74:	4606      	mov	r6, r0
 8005d76:	b118      	cbz	r0, 8005d80 <_vfiprintf_r+0x18>
 8005d78:	6a03      	ldr	r3, [r0, #32]
 8005d7a:	b90b      	cbnz	r3, 8005d80 <_vfiprintf_r+0x18>
 8005d7c:	f7ff fcd8 	bl	8005730 <__sinit>
 8005d80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005d82:	07d9      	lsls	r1, r3, #31
 8005d84:	d405      	bmi.n	8005d92 <_vfiprintf_r+0x2a>
 8005d86:	89ab      	ldrh	r3, [r5, #12]
 8005d88:	059a      	lsls	r2, r3, #22
 8005d8a:	d402      	bmi.n	8005d92 <_vfiprintf_r+0x2a>
 8005d8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005d8e:	f7ff fec6 	bl	8005b1e <__retarget_lock_acquire_recursive>
 8005d92:	89ab      	ldrh	r3, [r5, #12]
 8005d94:	071b      	lsls	r3, r3, #28
 8005d96:	d501      	bpl.n	8005d9c <_vfiprintf_r+0x34>
 8005d98:	692b      	ldr	r3, [r5, #16]
 8005d9a:	b99b      	cbnz	r3, 8005dc4 <_vfiprintf_r+0x5c>
 8005d9c:	4629      	mov	r1, r5
 8005d9e:	4630      	mov	r0, r6
 8005da0:	f7ff fdee 	bl	8005980 <__swsetup_r>
 8005da4:	b170      	cbz	r0, 8005dc4 <_vfiprintf_r+0x5c>
 8005da6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005da8:	07dc      	lsls	r4, r3, #31
 8005daa:	d504      	bpl.n	8005db6 <_vfiprintf_r+0x4e>
 8005dac:	f04f 30ff 	mov.w	r0, #4294967295
 8005db0:	b01d      	add	sp, #116	@ 0x74
 8005db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005db6:	89ab      	ldrh	r3, [r5, #12]
 8005db8:	0598      	lsls	r0, r3, #22
 8005dba:	d4f7      	bmi.n	8005dac <_vfiprintf_r+0x44>
 8005dbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005dbe:	f7ff feaf 	bl	8005b20 <__retarget_lock_release_recursive>
 8005dc2:	e7f3      	b.n	8005dac <_vfiprintf_r+0x44>
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	9309      	str	r3, [sp, #36]	@ 0x24
 8005dc8:	2320      	movs	r3, #32
 8005dca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005dce:	f8cd 800c 	str.w	r8, [sp, #12]
 8005dd2:	2330      	movs	r3, #48	@ 0x30
 8005dd4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005f84 <_vfiprintf_r+0x21c>
 8005dd8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005ddc:	f04f 0901 	mov.w	r9, #1
 8005de0:	4623      	mov	r3, r4
 8005de2:	469a      	mov	sl, r3
 8005de4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005de8:	b10a      	cbz	r2, 8005dee <_vfiprintf_r+0x86>
 8005dea:	2a25      	cmp	r2, #37	@ 0x25
 8005dec:	d1f9      	bne.n	8005de2 <_vfiprintf_r+0x7a>
 8005dee:	ebba 0b04 	subs.w	fp, sl, r4
 8005df2:	d00b      	beq.n	8005e0c <_vfiprintf_r+0xa4>
 8005df4:	465b      	mov	r3, fp
 8005df6:	4622      	mov	r2, r4
 8005df8:	4629      	mov	r1, r5
 8005dfa:	4630      	mov	r0, r6
 8005dfc:	f7ff ffa1 	bl	8005d42 <__sfputs_r>
 8005e00:	3001      	adds	r0, #1
 8005e02:	f000 80a7 	beq.w	8005f54 <_vfiprintf_r+0x1ec>
 8005e06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e08:	445a      	add	r2, fp
 8005e0a:	9209      	str	r2, [sp, #36]	@ 0x24
 8005e0c:	f89a 3000 	ldrb.w	r3, [sl]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	f000 809f 	beq.w	8005f54 <_vfiprintf_r+0x1ec>
 8005e16:	2300      	movs	r3, #0
 8005e18:	f04f 32ff 	mov.w	r2, #4294967295
 8005e1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e20:	f10a 0a01 	add.w	sl, sl, #1
 8005e24:	9304      	str	r3, [sp, #16]
 8005e26:	9307      	str	r3, [sp, #28]
 8005e28:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005e2c:	931a      	str	r3, [sp, #104]	@ 0x68
 8005e2e:	4654      	mov	r4, sl
 8005e30:	2205      	movs	r2, #5
 8005e32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e36:	4853      	ldr	r0, [pc, #332]	@ (8005f84 <_vfiprintf_r+0x21c>)
 8005e38:	f7fa f9ca 	bl	80001d0 <memchr>
 8005e3c:	9a04      	ldr	r2, [sp, #16]
 8005e3e:	b9d8      	cbnz	r0, 8005e78 <_vfiprintf_r+0x110>
 8005e40:	06d1      	lsls	r1, r2, #27
 8005e42:	bf44      	itt	mi
 8005e44:	2320      	movmi	r3, #32
 8005e46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e4a:	0713      	lsls	r3, r2, #28
 8005e4c:	bf44      	itt	mi
 8005e4e:	232b      	movmi	r3, #43	@ 0x2b
 8005e50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e54:	f89a 3000 	ldrb.w	r3, [sl]
 8005e58:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e5a:	d015      	beq.n	8005e88 <_vfiprintf_r+0x120>
 8005e5c:	9a07      	ldr	r2, [sp, #28]
 8005e5e:	4654      	mov	r4, sl
 8005e60:	2000      	movs	r0, #0
 8005e62:	f04f 0c0a 	mov.w	ip, #10
 8005e66:	4621      	mov	r1, r4
 8005e68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e6c:	3b30      	subs	r3, #48	@ 0x30
 8005e6e:	2b09      	cmp	r3, #9
 8005e70:	d94b      	bls.n	8005f0a <_vfiprintf_r+0x1a2>
 8005e72:	b1b0      	cbz	r0, 8005ea2 <_vfiprintf_r+0x13a>
 8005e74:	9207      	str	r2, [sp, #28]
 8005e76:	e014      	b.n	8005ea2 <_vfiprintf_r+0x13a>
 8005e78:	eba0 0308 	sub.w	r3, r0, r8
 8005e7c:	fa09 f303 	lsl.w	r3, r9, r3
 8005e80:	4313      	orrs	r3, r2
 8005e82:	9304      	str	r3, [sp, #16]
 8005e84:	46a2      	mov	sl, r4
 8005e86:	e7d2      	b.n	8005e2e <_vfiprintf_r+0xc6>
 8005e88:	9b03      	ldr	r3, [sp, #12]
 8005e8a:	1d19      	adds	r1, r3, #4
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	9103      	str	r1, [sp, #12]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	bfbb      	ittet	lt
 8005e94:	425b      	neglt	r3, r3
 8005e96:	f042 0202 	orrlt.w	r2, r2, #2
 8005e9a:	9307      	strge	r3, [sp, #28]
 8005e9c:	9307      	strlt	r3, [sp, #28]
 8005e9e:	bfb8      	it	lt
 8005ea0:	9204      	strlt	r2, [sp, #16]
 8005ea2:	7823      	ldrb	r3, [r4, #0]
 8005ea4:	2b2e      	cmp	r3, #46	@ 0x2e
 8005ea6:	d10a      	bne.n	8005ebe <_vfiprintf_r+0x156>
 8005ea8:	7863      	ldrb	r3, [r4, #1]
 8005eaa:	2b2a      	cmp	r3, #42	@ 0x2a
 8005eac:	d132      	bne.n	8005f14 <_vfiprintf_r+0x1ac>
 8005eae:	9b03      	ldr	r3, [sp, #12]
 8005eb0:	1d1a      	adds	r2, r3, #4
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	9203      	str	r2, [sp, #12]
 8005eb6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005eba:	3402      	adds	r4, #2
 8005ebc:	9305      	str	r3, [sp, #20]
 8005ebe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005f94 <_vfiprintf_r+0x22c>
 8005ec2:	7821      	ldrb	r1, [r4, #0]
 8005ec4:	2203      	movs	r2, #3
 8005ec6:	4650      	mov	r0, sl
 8005ec8:	f7fa f982 	bl	80001d0 <memchr>
 8005ecc:	b138      	cbz	r0, 8005ede <_vfiprintf_r+0x176>
 8005ece:	9b04      	ldr	r3, [sp, #16]
 8005ed0:	eba0 000a 	sub.w	r0, r0, sl
 8005ed4:	2240      	movs	r2, #64	@ 0x40
 8005ed6:	4082      	lsls	r2, r0
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	3401      	adds	r4, #1
 8005edc:	9304      	str	r3, [sp, #16]
 8005ede:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ee2:	4829      	ldr	r0, [pc, #164]	@ (8005f88 <_vfiprintf_r+0x220>)
 8005ee4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005ee8:	2206      	movs	r2, #6
 8005eea:	f7fa f971 	bl	80001d0 <memchr>
 8005eee:	2800      	cmp	r0, #0
 8005ef0:	d03f      	beq.n	8005f72 <_vfiprintf_r+0x20a>
 8005ef2:	4b26      	ldr	r3, [pc, #152]	@ (8005f8c <_vfiprintf_r+0x224>)
 8005ef4:	bb1b      	cbnz	r3, 8005f3e <_vfiprintf_r+0x1d6>
 8005ef6:	9b03      	ldr	r3, [sp, #12]
 8005ef8:	3307      	adds	r3, #7
 8005efa:	f023 0307 	bic.w	r3, r3, #7
 8005efe:	3308      	adds	r3, #8
 8005f00:	9303      	str	r3, [sp, #12]
 8005f02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f04:	443b      	add	r3, r7
 8005f06:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f08:	e76a      	b.n	8005de0 <_vfiprintf_r+0x78>
 8005f0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f0e:	460c      	mov	r4, r1
 8005f10:	2001      	movs	r0, #1
 8005f12:	e7a8      	b.n	8005e66 <_vfiprintf_r+0xfe>
 8005f14:	2300      	movs	r3, #0
 8005f16:	3401      	adds	r4, #1
 8005f18:	9305      	str	r3, [sp, #20]
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	f04f 0c0a 	mov.w	ip, #10
 8005f20:	4620      	mov	r0, r4
 8005f22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f26:	3a30      	subs	r2, #48	@ 0x30
 8005f28:	2a09      	cmp	r2, #9
 8005f2a:	d903      	bls.n	8005f34 <_vfiprintf_r+0x1cc>
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d0c6      	beq.n	8005ebe <_vfiprintf_r+0x156>
 8005f30:	9105      	str	r1, [sp, #20]
 8005f32:	e7c4      	b.n	8005ebe <_vfiprintf_r+0x156>
 8005f34:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f38:	4604      	mov	r4, r0
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e7f0      	b.n	8005f20 <_vfiprintf_r+0x1b8>
 8005f3e:	ab03      	add	r3, sp, #12
 8005f40:	9300      	str	r3, [sp, #0]
 8005f42:	462a      	mov	r2, r5
 8005f44:	4b12      	ldr	r3, [pc, #72]	@ (8005f90 <_vfiprintf_r+0x228>)
 8005f46:	a904      	add	r1, sp, #16
 8005f48:	4630      	mov	r0, r6
 8005f4a:	f3af 8000 	nop.w
 8005f4e:	4607      	mov	r7, r0
 8005f50:	1c78      	adds	r0, r7, #1
 8005f52:	d1d6      	bne.n	8005f02 <_vfiprintf_r+0x19a>
 8005f54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f56:	07d9      	lsls	r1, r3, #31
 8005f58:	d405      	bmi.n	8005f66 <_vfiprintf_r+0x1fe>
 8005f5a:	89ab      	ldrh	r3, [r5, #12]
 8005f5c:	059a      	lsls	r2, r3, #22
 8005f5e:	d402      	bmi.n	8005f66 <_vfiprintf_r+0x1fe>
 8005f60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f62:	f7ff fddd 	bl	8005b20 <__retarget_lock_release_recursive>
 8005f66:	89ab      	ldrh	r3, [r5, #12]
 8005f68:	065b      	lsls	r3, r3, #25
 8005f6a:	f53f af1f 	bmi.w	8005dac <_vfiprintf_r+0x44>
 8005f6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005f70:	e71e      	b.n	8005db0 <_vfiprintf_r+0x48>
 8005f72:	ab03      	add	r3, sp, #12
 8005f74:	9300      	str	r3, [sp, #0]
 8005f76:	462a      	mov	r2, r5
 8005f78:	4b05      	ldr	r3, [pc, #20]	@ (8005f90 <_vfiprintf_r+0x228>)
 8005f7a:	a904      	add	r1, sp, #16
 8005f7c:	4630      	mov	r0, r6
 8005f7e:	f000 f879 	bl	8006074 <_printf_i>
 8005f82:	e7e4      	b.n	8005f4e <_vfiprintf_r+0x1e6>
 8005f84:	080066c0 	.word	0x080066c0
 8005f88:	080066ca 	.word	0x080066ca
 8005f8c:	00000000 	.word	0x00000000
 8005f90:	08005d43 	.word	0x08005d43
 8005f94:	080066c6 	.word	0x080066c6

08005f98 <_printf_common>:
 8005f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f9c:	4616      	mov	r6, r2
 8005f9e:	4698      	mov	r8, r3
 8005fa0:	688a      	ldr	r2, [r1, #8]
 8005fa2:	690b      	ldr	r3, [r1, #16]
 8005fa4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	bfb8      	it	lt
 8005fac:	4613      	movlt	r3, r2
 8005fae:	6033      	str	r3, [r6, #0]
 8005fb0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005fb4:	4607      	mov	r7, r0
 8005fb6:	460c      	mov	r4, r1
 8005fb8:	b10a      	cbz	r2, 8005fbe <_printf_common+0x26>
 8005fba:	3301      	adds	r3, #1
 8005fbc:	6033      	str	r3, [r6, #0]
 8005fbe:	6823      	ldr	r3, [r4, #0]
 8005fc0:	0699      	lsls	r1, r3, #26
 8005fc2:	bf42      	ittt	mi
 8005fc4:	6833      	ldrmi	r3, [r6, #0]
 8005fc6:	3302      	addmi	r3, #2
 8005fc8:	6033      	strmi	r3, [r6, #0]
 8005fca:	6825      	ldr	r5, [r4, #0]
 8005fcc:	f015 0506 	ands.w	r5, r5, #6
 8005fd0:	d106      	bne.n	8005fe0 <_printf_common+0x48>
 8005fd2:	f104 0a19 	add.w	sl, r4, #25
 8005fd6:	68e3      	ldr	r3, [r4, #12]
 8005fd8:	6832      	ldr	r2, [r6, #0]
 8005fda:	1a9b      	subs	r3, r3, r2
 8005fdc:	42ab      	cmp	r3, r5
 8005fde:	dc26      	bgt.n	800602e <_printf_common+0x96>
 8005fe0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005fe4:	6822      	ldr	r2, [r4, #0]
 8005fe6:	3b00      	subs	r3, #0
 8005fe8:	bf18      	it	ne
 8005fea:	2301      	movne	r3, #1
 8005fec:	0692      	lsls	r2, r2, #26
 8005fee:	d42b      	bmi.n	8006048 <_printf_common+0xb0>
 8005ff0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005ff4:	4641      	mov	r1, r8
 8005ff6:	4638      	mov	r0, r7
 8005ff8:	47c8      	blx	r9
 8005ffa:	3001      	adds	r0, #1
 8005ffc:	d01e      	beq.n	800603c <_printf_common+0xa4>
 8005ffe:	6823      	ldr	r3, [r4, #0]
 8006000:	6922      	ldr	r2, [r4, #16]
 8006002:	f003 0306 	and.w	r3, r3, #6
 8006006:	2b04      	cmp	r3, #4
 8006008:	bf02      	ittt	eq
 800600a:	68e5      	ldreq	r5, [r4, #12]
 800600c:	6833      	ldreq	r3, [r6, #0]
 800600e:	1aed      	subeq	r5, r5, r3
 8006010:	68a3      	ldr	r3, [r4, #8]
 8006012:	bf0c      	ite	eq
 8006014:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006018:	2500      	movne	r5, #0
 800601a:	4293      	cmp	r3, r2
 800601c:	bfc4      	itt	gt
 800601e:	1a9b      	subgt	r3, r3, r2
 8006020:	18ed      	addgt	r5, r5, r3
 8006022:	2600      	movs	r6, #0
 8006024:	341a      	adds	r4, #26
 8006026:	42b5      	cmp	r5, r6
 8006028:	d11a      	bne.n	8006060 <_printf_common+0xc8>
 800602a:	2000      	movs	r0, #0
 800602c:	e008      	b.n	8006040 <_printf_common+0xa8>
 800602e:	2301      	movs	r3, #1
 8006030:	4652      	mov	r2, sl
 8006032:	4641      	mov	r1, r8
 8006034:	4638      	mov	r0, r7
 8006036:	47c8      	blx	r9
 8006038:	3001      	adds	r0, #1
 800603a:	d103      	bne.n	8006044 <_printf_common+0xac>
 800603c:	f04f 30ff 	mov.w	r0, #4294967295
 8006040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006044:	3501      	adds	r5, #1
 8006046:	e7c6      	b.n	8005fd6 <_printf_common+0x3e>
 8006048:	18e1      	adds	r1, r4, r3
 800604a:	1c5a      	adds	r2, r3, #1
 800604c:	2030      	movs	r0, #48	@ 0x30
 800604e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006052:	4422      	add	r2, r4
 8006054:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006058:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800605c:	3302      	adds	r3, #2
 800605e:	e7c7      	b.n	8005ff0 <_printf_common+0x58>
 8006060:	2301      	movs	r3, #1
 8006062:	4622      	mov	r2, r4
 8006064:	4641      	mov	r1, r8
 8006066:	4638      	mov	r0, r7
 8006068:	47c8      	blx	r9
 800606a:	3001      	adds	r0, #1
 800606c:	d0e6      	beq.n	800603c <_printf_common+0xa4>
 800606e:	3601      	adds	r6, #1
 8006070:	e7d9      	b.n	8006026 <_printf_common+0x8e>
	...

08006074 <_printf_i>:
 8006074:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006078:	7e0f      	ldrb	r7, [r1, #24]
 800607a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800607c:	2f78      	cmp	r7, #120	@ 0x78
 800607e:	4691      	mov	r9, r2
 8006080:	4680      	mov	r8, r0
 8006082:	460c      	mov	r4, r1
 8006084:	469a      	mov	sl, r3
 8006086:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800608a:	d807      	bhi.n	800609c <_printf_i+0x28>
 800608c:	2f62      	cmp	r7, #98	@ 0x62
 800608e:	d80a      	bhi.n	80060a6 <_printf_i+0x32>
 8006090:	2f00      	cmp	r7, #0
 8006092:	f000 80d1 	beq.w	8006238 <_printf_i+0x1c4>
 8006096:	2f58      	cmp	r7, #88	@ 0x58
 8006098:	f000 80b8 	beq.w	800620c <_printf_i+0x198>
 800609c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80060a4:	e03a      	b.n	800611c <_printf_i+0xa8>
 80060a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80060aa:	2b15      	cmp	r3, #21
 80060ac:	d8f6      	bhi.n	800609c <_printf_i+0x28>
 80060ae:	a101      	add	r1, pc, #4	@ (adr r1, 80060b4 <_printf_i+0x40>)
 80060b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060b4:	0800610d 	.word	0x0800610d
 80060b8:	08006121 	.word	0x08006121
 80060bc:	0800609d 	.word	0x0800609d
 80060c0:	0800609d 	.word	0x0800609d
 80060c4:	0800609d 	.word	0x0800609d
 80060c8:	0800609d 	.word	0x0800609d
 80060cc:	08006121 	.word	0x08006121
 80060d0:	0800609d 	.word	0x0800609d
 80060d4:	0800609d 	.word	0x0800609d
 80060d8:	0800609d 	.word	0x0800609d
 80060dc:	0800609d 	.word	0x0800609d
 80060e0:	0800621f 	.word	0x0800621f
 80060e4:	0800614b 	.word	0x0800614b
 80060e8:	080061d9 	.word	0x080061d9
 80060ec:	0800609d 	.word	0x0800609d
 80060f0:	0800609d 	.word	0x0800609d
 80060f4:	08006241 	.word	0x08006241
 80060f8:	0800609d 	.word	0x0800609d
 80060fc:	0800614b 	.word	0x0800614b
 8006100:	0800609d 	.word	0x0800609d
 8006104:	0800609d 	.word	0x0800609d
 8006108:	080061e1 	.word	0x080061e1
 800610c:	6833      	ldr	r3, [r6, #0]
 800610e:	1d1a      	adds	r2, r3, #4
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	6032      	str	r2, [r6, #0]
 8006114:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006118:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800611c:	2301      	movs	r3, #1
 800611e:	e09c      	b.n	800625a <_printf_i+0x1e6>
 8006120:	6833      	ldr	r3, [r6, #0]
 8006122:	6820      	ldr	r0, [r4, #0]
 8006124:	1d19      	adds	r1, r3, #4
 8006126:	6031      	str	r1, [r6, #0]
 8006128:	0606      	lsls	r6, r0, #24
 800612a:	d501      	bpl.n	8006130 <_printf_i+0xbc>
 800612c:	681d      	ldr	r5, [r3, #0]
 800612e:	e003      	b.n	8006138 <_printf_i+0xc4>
 8006130:	0645      	lsls	r5, r0, #25
 8006132:	d5fb      	bpl.n	800612c <_printf_i+0xb8>
 8006134:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006138:	2d00      	cmp	r5, #0
 800613a:	da03      	bge.n	8006144 <_printf_i+0xd0>
 800613c:	232d      	movs	r3, #45	@ 0x2d
 800613e:	426d      	negs	r5, r5
 8006140:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006144:	4858      	ldr	r0, [pc, #352]	@ (80062a8 <_printf_i+0x234>)
 8006146:	230a      	movs	r3, #10
 8006148:	e011      	b.n	800616e <_printf_i+0xfa>
 800614a:	6821      	ldr	r1, [r4, #0]
 800614c:	6833      	ldr	r3, [r6, #0]
 800614e:	0608      	lsls	r0, r1, #24
 8006150:	f853 5b04 	ldr.w	r5, [r3], #4
 8006154:	d402      	bmi.n	800615c <_printf_i+0xe8>
 8006156:	0649      	lsls	r1, r1, #25
 8006158:	bf48      	it	mi
 800615a:	b2ad      	uxthmi	r5, r5
 800615c:	2f6f      	cmp	r7, #111	@ 0x6f
 800615e:	4852      	ldr	r0, [pc, #328]	@ (80062a8 <_printf_i+0x234>)
 8006160:	6033      	str	r3, [r6, #0]
 8006162:	bf14      	ite	ne
 8006164:	230a      	movne	r3, #10
 8006166:	2308      	moveq	r3, #8
 8006168:	2100      	movs	r1, #0
 800616a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800616e:	6866      	ldr	r6, [r4, #4]
 8006170:	60a6      	str	r6, [r4, #8]
 8006172:	2e00      	cmp	r6, #0
 8006174:	db05      	blt.n	8006182 <_printf_i+0x10e>
 8006176:	6821      	ldr	r1, [r4, #0]
 8006178:	432e      	orrs	r6, r5
 800617a:	f021 0104 	bic.w	r1, r1, #4
 800617e:	6021      	str	r1, [r4, #0]
 8006180:	d04b      	beq.n	800621a <_printf_i+0x1a6>
 8006182:	4616      	mov	r6, r2
 8006184:	fbb5 f1f3 	udiv	r1, r5, r3
 8006188:	fb03 5711 	mls	r7, r3, r1, r5
 800618c:	5dc7      	ldrb	r7, [r0, r7]
 800618e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006192:	462f      	mov	r7, r5
 8006194:	42bb      	cmp	r3, r7
 8006196:	460d      	mov	r5, r1
 8006198:	d9f4      	bls.n	8006184 <_printf_i+0x110>
 800619a:	2b08      	cmp	r3, #8
 800619c:	d10b      	bne.n	80061b6 <_printf_i+0x142>
 800619e:	6823      	ldr	r3, [r4, #0]
 80061a0:	07df      	lsls	r7, r3, #31
 80061a2:	d508      	bpl.n	80061b6 <_printf_i+0x142>
 80061a4:	6923      	ldr	r3, [r4, #16]
 80061a6:	6861      	ldr	r1, [r4, #4]
 80061a8:	4299      	cmp	r1, r3
 80061aa:	bfde      	ittt	le
 80061ac:	2330      	movle	r3, #48	@ 0x30
 80061ae:	f806 3c01 	strble.w	r3, [r6, #-1]
 80061b2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80061b6:	1b92      	subs	r2, r2, r6
 80061b8:	6122      	str	r2, [r4, #16]
 80061ba:	f8cd a000 	str.w	sl, [sp]
 80061be:	464b      	mov	r3, r9
 80061c0:	aa03      	add	r2, sp, #12
 80061c2:	4621      	mov	r1, r4
 80061c4:	4640      	mov	r0, r8
 80061c6:	f7ff fee7 	bl	8005f98 <_printf_common>
 80061ca:	3001      	adds	r0, #1
 80061cc:	d14a      	bne.n	8006264 <_printf_i+0x1f0>
 80061ce:	f04f 30ff 	mov.w	r0, #4294967295
 80061d2:	b004      	add	sp, #16
 80061d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061d8:	6823      	ldr	r3, [r4, #0]
 80061da:	f043 0320 	orr.w	r3, r3, #32
 80061de:	6023      	str	r3, [r4, #0]
 80061e0:	4832      	ldr	r0, [pc, #200]	@ (80062ac <_printf_i+0x238>)
 80061e2:	2778      	movs	r7, #120	@ 0x78
 80061e4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80061e8:	6823      	ldr	r3, [r4, #0]
 80061ea:	6831      	ldr	r1, [r6, #0]
 80061ec:	061f      	lsls	r7, r3, #24
 80061ee:	f851 5b04 	ldr.w	r5, [r1], #4
 80061f2:	d402      	bmi.n	80061fa <_printf_i+0x186>
 80061f4:	065f      	lsls	r7, r3, #25
 80061f6:	bf48      	it	mi
 80061f8:	b2ad      	uxthmi	r5, r5
 80061fa:	6031      	str	r1, [r6, #0]
 80061fc:	07d9      	lsls	r1, r3, #31
 80061fe:	bf44      	itt	mi
 8006200:	f043 0320 	orrmi.w	r3, r3, #32
 8006204:	6023      	strmi	r3, [r4, #0]
 8006206:	b11d      	cbz	r5, 8006210 <_printf_i+0x19c>
 8006208:	2310      	movs	r3, #16
 800620a:	e7ad      	b.n	8006168 <_printf_i+0xf4>
 800620c:	4826      	ldr	r0, [pc, #152]	@ (80062a8 <_printf_i+0x234>)
 800620e:	e7e9      	b.n	80061e4 <_printf_i+0x170>
 8006210:	6823      	ldr	r3, [r4, #0]
 8006212:	f023 0320 	bic.w	r3, r3, #32
 8006216:	6023      	str	r3, [r4, #0]
 8006218:	e7f6      	b.n	8006208 <_printf_i+0x194>
 800621a:	4616      	mov	r6, r2
 800621c:	e7bd      	b.n	800619a <_printf_i+0x126>
 800621e:	6833      	ldr	r3, [r6, #0]
 8006220:	6825      	ldr	r5, [r4, #0]
 8006222:	6961      	ldr	r1, [r4, #20]
 8006224:	1d18      	adds	r0, r3, #4
 8006226:	6030      	str	r0, [r6, #0]
 8006228:	062e      	lsls	r6, r5, #24
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	d501      	bpl.n	8006232 <_printf_i+0x1be>
 800622e:	6019      	str	r1, [r3, #0]
 8006230:	e002      	b.n	8006238 <_printf_i+0x1c4>
 8006232:	0668      	lsls	r0, r5, #25
 8006234:	d5fb      	bpl.n	800622e <_printf_i+0x1ba>
 8006236:	8019      	strh	r1, [r3, #0]
 8006238:	2300      	movs	r3, #0
 800623a:	6123      	str	r3, [r4, #16]
 800623c:	4616      	mov	r6, r2
 800623e:	e7bc      	b.n	80061ba <_printf_i+0x146>
 8006240:	6833      	ldr	r3, [r6, #0]
 8006242:	1d1a      	adds	r2, r3, #4
 8006244:	6032      	str	r2, [r6, #0]
 8006246:	681e      	ldr	r6, [r3, #0]
 8006248:	6862      	ldr	r2, [r4, #4]
 800624a:	2100      	movs	r1, #0
 800624c:	4630      	mov	r0, r6
 800624e:	f7f9 ffbf 	bl	80001d0 <memchr>
 8006252:	b108      	cbz	r0, 8006258 <_printf_i+0x1e4>
 8006254:	1b80      	subs	r0, r0, r6
 8006256:	6060      	str	r0, [r4, #4]
 8006258:	6863      	ldr	r3, [r4, #4]
 800625a:	6123      	str	r3, [r4, #16]
 800625c:	2300      	movs	r3, #0
 800625e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006262:	e7aa      	b.n	80061ba <_printf_i+0x146>
 8006264:	6923      	ldr	r3, [r4, #16]
 8006266:	4632      	mov	r2, r6
 8006268:	4649      	mov	r1, r9
 800626a:	4640      	mov	r0, r8
 800626c:	47d0      	blx	sl
 800626e:	3001      	adds	r0, #1
 8006270:	d0ad      	beq.n	80061ce <_printf_i+0x15a>
 8006272:	6823      	ldr	r3, [r4, #0]
 8006274:	079b      	lsls	r3, r3, #30
 8006276:	d413      	bmi.n	80062a0 <_printf_i+0x22c>
 8006278:	68e0      	ldr	r0, [r4, #12]
 800627a:	9b03      	ldr	r3, [sp, #12]
 800627c:	4298      	cmp	r0, r3
 800627e:	bfb8      	it	lt
 8006280:	4618      	movlt	r0, r3
 8006282:	e7a6      	b.n	80061d2 <_printf_i+0x15e>
 8006284:	2301      	movs	r3, #1
 8006286:	4632      	mov	r2, r6
 8006288:	4649      	mov	r1, r9
 800628a:	4640      	mov	r0, r8
 800628c:	47d0      	blx	sl
 800628e:	3001      	adds	r0, #1
 8006290:	d09d      	beq.n	80061ce <_printf_i+0x15a>
 8006292:	3501      	adds	r5, #1
 8006294:	68e3      	ldr	r3, [r4, #12]
 8006296:	9903      	ldr	r1, [sp, #12]
 8006298:	1a5b      	subs	r3, r3, r1
 800629a:	42ab      	cmp	r3, r5
 800629c:	dcf2      	bgt.n	8006284 <_printf_i+0x210>
 800629e:	e7eb      	b.n	8006278 <_printf_i+0x204>
 80062a0:	2500      	movs	r5, #0
 80062a2:	f104 0619 	add.w	r6, r4, #25
 80062a6:	e7f5      	b.n	8006294 <_printf_i+0x220>
 80062a8:	080066d1 	.word	0x080066d1
 80062ac:	080066e2 	.word	0x080066e2

080062b0 <__sflush_r>:
 80062b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80062b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062b8:	0716      	lsls	r6, r2, #28
 80062ba:	4605      	mov	r5, r0
 80062bc:	460c      	mov	r4, r1
 80062be:	d454      	bmi.n	800636a <__sflush_r+0xba>
 80062c0:	684b      	ldr	r3, [r1, #4]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	dc02      	bgt.n	80062cc <__sflush_r+0x1c>
 80062c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	dd48      	ble.n	800635e <__sflush_r+0xae>
 80062cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80062ce:	2e00      	cmp	r6, #0
 80062d0:	d045      	beq.n	800635e <__sflush_r+0xae>
 80062d2:	2300      	movs	r3, #0
 80062d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80062d8:	682f      	ldr	r7, [r5, #0]
 80062da:	6a21      	ldr	r1, [r4, #32]
 80062dc:	602b      	str	r3, [r5, #0]
 80062de:	d030      	beq.n	8006342 <__sflush_r+0x92>
 80062e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80062e2:	89a3      	ldrh	r3, [r4, #12]
 80062e4:	0759      	lsls	r1, r3, #29
 80062e6:	d505      	bpl.n	80062f4 <__sflush_r+0x44>
 80062e8:	6863      	ldr	r3, [r4, #4]
 80062ea:	1ad2      	subs	r2, r2, r3
 80062ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80062ee:	b10b      	cbz	r3, 80062f4 <__sflush_r+0x44>
 80062f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80062f2:	1ad2      	subs	r2, r2, r3
 80062f4:	2300      	movs	r3, #0
 80062f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80062f8:	6a21      	ldr	r1, [r4, #32]
 80062fa:	4628      	mov	r0, r5
 80062fc:	47b0      	blx	r6
 80062fe:	1c43      	adds	r3, r0, #1
 8006300:	89a3      	ldrh	r3, [r4, #12]
 8006302:	d106      	bne.n	8006312 <__sflush_r+0x62>
 8006304:	6829      	ldr	r1, [r5, #0]
 8006306:	291d      	cmp	r1, #29
 8006308:	d82b      	bhi.n	8006362 <__sflush_r+0xb2>
 800630a:	4a2a      	ldr	r2, [pc, #168]	@ (80063b4 <__sflush_r+0x104>)
 800630c:	40ca      	lsrs	r2, r1
 800630e:	07d6      	lsls	r6, r2, #31
 8006310:	d527      	bpl.n	8006362 <__sflush_r+0xb2>
 8006312:	2200      	movs	r2, #0
 8006314:	6062      	str	r2, [r4, #4]
 8006316:	04d9      	lsls	r1, r3, #19
 8006318:	6922      	ldr	r2, [r4, #16]
 800631a:	6022      	str	r2, [r4, #0]
 800631c:	d504      	bpl.n	8006328 <__sflush_r+0x78>
 800631e:	1c42      	adds	r2, r0, #1
 8006320:	d101      	bne.n	8006326 <__sflush_r+0x76>
 8006322:	682b      	ldr	r3, [r5, #0]
 8006324:	b903      	cbnz	r3, 8006328 <__sflush_r+0x78>
 8006326:	6560      	str	r0, [r4, #84]	@ 0x54
 8006328:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800632a:	602f      	str	r7, [r5, #0]
 800632c:	b1b9      	cbz	r1, 800635e <__sflush_r+0xae>
 800632e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006332:	4299      	cmp	r1, r3
 8006334:	d002      	beq.n	800633c <__sflush_r+0x8c>
 8006336:	4628      	mov	r0, r5
 8006338:	f7ff fbf4 	bl	8005b24 <_free_r>
 800633c:	2300      	movs	r3, #0
 800633e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006340:	e00d      	b.n	800635e <__sflush_r+0xae>
 8006342:	2301      	movs	r3, #1
 8006344:	4628      	mov	r0, r5
 8006346:	47b0      	blx	r6
 8006348:	4602      	mov	r2, r0
 800634a:	1c50      	adds	r0, r2, #1
 800634c:	d1c9      	bne.n	80062e2 <__sflush_r+0x32>
 800634e:	682b      	ldr	r3, [r5, #0]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d0c6      	beq.n	80062e2 <__sflush_r+0x32>
 8006354:	2b1d      	cmp	r3, #29
 8006356:	d001      	beq.n	800635c <__sflush_r+0xac>
 8006358:	2b16      	cmp	r3, #22
 800635a:	d11e      	bne.n	800639a <__sflush_r+0xea>
 800635c:	602f      	str	r7, [r5, #0]
 800635e:	2000      	movs	r0, #0
 8006360:	e022      	b.n	80063a8 <__sflush_r+0xf8>
 8006362:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006366:	b21b      	sxth	r3, r3
 8006368:	e01b      	b.n	80063a2 <__sflush_r+0xf2>
 800636a:	690f      	ldr	r7, [r1, #16]
 800636c:	2f00      	cmp	r7, #0
 800636e:	d0f6      	beq.n	800635e <__sflush_r+0xae>
 8006370:	0793      	lsls	r3, r2, #30
 8006372:	680e      	ldr	r6, [r1, #0]
 8006374:	bf08      	it	eq
 8006376:	694b      	ldreq	r3, [r1, #20]
 8006378:	600f      	str	r7, [r1, #0]
 800637a:	bf18      	it	ne
 800637c:	2300      	movne	r3, #0
 800637e:	eba6 0807 	sub.w	r8, r6, r7
 8006382:	608b      	str	r3, [r1, #8]
 8006384:	f1b8 0f00 	cmp.w	r8, #0
 8006388:	dde9      	ble.n	800635e <__sflush_r+0xae>
 800638a:	6a21      	ldr	r1, [r4, #32]
 800638c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800638e:	4643      	mov	r3, r8
 8006390:	463a      	mov	r2, r7
 8006392:	4628      	mov	r0, r5
 8006394:	47b0      	blx	r6
 8006396:	2800      	cmp	r0, #0
 8006398:	dc08      	bgt.n	80063ac <__sflush_r+0xfc>
 800639a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800639e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063a2:	81a3      	strh	r3, [r4, #12]
 80063a4:	f04f 30ff 	mov.w	r0, #4294967295
 80063a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063ac:	4407      	add	r7, r0
 80063ae:	eba8 0800 	sub.w	r8, r8, r0
 80063b2:	e7e7      	b.n	8006384 <__sflush_r+0xd4>
 80063b4:	20400001 	.word	0x20400001

080063b8 <_fflush_r>:
 80063b8:	b538      	push	{r3, r4, r5, lr}
 80063ba:	690b      	ldr	r3, [r1, #16]
 80063bc:	4605      	mov	r5, r0
 80063be:	460c      	mov	r4, r1
 80063c0:	b913      	cbnz	r3, 80063c8 <_fflush_r+0x10>
 80063c2:	2500      	movs	r5, #0
 80063c4:	4628      	mov	r0, r5
 80063c6:	bd38      	pop	{r3, r4, r5, pc}
 80063c8:	b118      	cbz	r0, 80063d2 <_fflush_r+0x1a>
 80063ca:	6a03      	ldr	r3, [r0, #32]
 80063cc:	b90b      	cbnz	r3, 80063d2 <_fflush_r+0x1a>
 80063ce:	f7ff f9af 	bl	8005730 <__sinit>
 80063d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d0f3      	beq.n	80063c2 <_fflush_r+0xa>
 80063da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80063dc:	07d0      	lsls	r0, r2, #31
 80063de:	d404      	bmi.n	80063ea <_fflush_r+0x32>
 80063e0:	0599      	lsls	r1, r3, #22
 80063e2:	d402      	bmi.n	80063ea <_fflush_r+0x32>
 80063e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80063e6:	f7ff fb9a 	bl	8005b1e <__retarget_lock_acquire_recursive>
 80063ea:	4628      	mov	r0, r5
 80063ec:	4621      	mov	r1, r4
 80063ee:	f7ff ff5f 	bl	80062b0 <__sflush_r>
 80063f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80063f4:	07da      	lsls	r2, r3, #31
 80063f6:	4605      	mov	r5, r0
 80063f8:	d4e4      	bmi.n	80063c4 <_fflush_r+0xc>
 80063fa:	89a3      	ldrh	r3, [r4, #12]
 80063fc:	059b      	lsls	r3, r3, #22
 80063fe:	d4e1      	bmi.n	80063c4 <_fflush_r+0xc>
 8006400:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006402:	f7ff fb8d 	bl	8005b20 <__retarget_lock_release_recursive>
 8006406:	e7dd      	b.n	80063c4 <_fflush_r+0xc>

08006408 <__swhatbuf_r>:
 8006408:	b570      	push	{r4, r5, r6, lr}
 800640a:	460c      	mov	r4, r1
 800640c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006410:	2900      	cmp	r1, #0
 8006412:	b096      	sub	sp, #88	@ 0x58
 8006414:	4615      	mov	r5, r2
 8006416:	461e      	mov	r6, r3
 8006418:	da0d      	bge.n	8006436 <__swhatbuf_r+0x2e>
 800641a:	89a3      	ldrh	r3, [r4, #12]
 800641c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006420:	f04f 0100 	mov.w	r1, #0
 8006424:	bf14      	ite	ne
 8006426:	2340      	movne	r3, #64	@ 0x40
 8006428:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800642c:	2000      	movs	r0, #0
 800642e:	6031      	str	r1, [r6, #0]
 8006430:	602b      	str	r3, [r5, #0]
 8006432:	b016      	add	sp, #88	@ 0x58
 8006434:	bd70      	pop	{r4, r5, r6, pc}
 8006436:	466a      	mov	r2, sp
 8006438:	f000 f848 	bl	80064cc <_fstat_r>
 800643c:	2800      	cmp	r0, #0
 800643e:	dbec      	blt.n	800641a <__swhatbuf_r+0x12>
 8006440:	9901      	ldr	r1, [sp, #4]
 8006442:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006446:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800644a:	4259      	negs	r1, r3
 800644c:	4159      	adcs	r1, r3
 800644e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006452:	e7eb      	b.n	800642c <__swhatbuf_r+0x24>

08006454 <__smakebuf_r>:
 8006454:	898b      	ldrh	r3, [r1, #12]
 8006456:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006458:	079d      	lsls	r5, r3, #30
 800645a:	4606      	mov	r6, r0
 800645c:	460c      	mov	r4, r1
 800645e:	d507      	bpl.n	8006470 <__smakebuf_r+0x1c>
 8006460:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006464:	6023      	str	r3, [r4, #0]
 8006466:	6123      	str	r3, [r4, #16]
 8006468:	2301      	movs	r3, #1
 800646a:	6163      	str	r3, [r4, #20]
 800646c:	b003      	add	sp, #12
 800646e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006470:	ab01      	add	r3, sp, #4
 8006472:	466a      	mov	r2, sp
 8006474:	f7ff ffc8 	bl	8006408 <__swhatbuf_r>
 8006478:	9f00      	ldr	r7, [sp, #0]
 800647a:	4605      	mov	r5, r0
 800647c:	4639      	mov	r1, r7
 800647e:	4630      	mov	r0, r6
 8006480:	f7ff fbbc 	bl	8005bfc <_malloc_r>
 8006484:	b948      	cbnz	r0, 800649a <__smakebuf_r+0x46>
 8006486:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800648a:	059a      	lsls	r2, r3, #22
 800648c:	d4ee      	bmi.n	800646c <__smakebuf_r+0x18>
 800648e:	f023 0303 	bic.w	r3, r3, #3
 8006492:	f043 0302 	orr.w	r3, r3, #2
 8006496:	81a3      	strh	r3, [r4, #12]
 8006498:	e7e2      	b.n	8006460 <__smakebuf_r+0xc>
 800649a:	89a3      	ldrh	r3, [r4, #12]
 800649c:	6020      	str	r0, [r4, #0]
 800649e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064a2:	81a3      	strh	r3, [r4, #12]
 80064a4:	9b01      	ldr	r3, [sp, #4]
 80064a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80064aa:	b15b      	cbz	r3, 80064c4 <__smakebuf_r+0x70>
 80064ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064b0:	4630      	mov	r0, r6
 80064b2:	f000 f81d 	bl	80064f0 <_isatty_r>
 80064b6:	b128      	cbz	r0, 80064c4 <__smakebuf_r+0x70>
 80064b8:	89a3      	ldrh	r3, [r4, #12]
 80064ba:	f023 0303 	bic.w	r3, r3, #3
 80064be:	f043 0301 	orr.w	r3, r3, #1
 80064c2:	81a3      	strh	r3, [r4, #12]
 80064c4:	89a3      	ldrh	r3, [r4, #12]
 80064c6:	431d      	orrs	r5, r3
 80064c8:	81a5      	strh	r5, [r4, #12]
 80064ca:	e7cf      	b.n	800646c <__smakebuf_r+0x18>

080064cc <_fstat_r>:
 80064cc:	b538      	push	{r3, r4, r5, lr}
 80064ce:	4d07      	ldr	r5, [pc, #28]	@ (80064ec <_fstat_r+0x20>)
 80064d0:	2300      	movs	r3, #0
 80064d2:	4604      	mov	r4, r0
 80064d4:	4608      	mov	r0, r1
 80064d6:	4611      	mov	r1, r2
 80064d8:	602b      	str	r3, [r5, #0]
 80064da:	f7fb f8c9 	bl	8001670 <_fstat>
 80064de:	1c43      	adds	r3, r0, #1
 80064e0:	d102      	bne.n	80064e8 <_fstat_r+0x1c>
 80064e2:	682b      	ldr	r3, [r5, #0]
 80064e4:	b103      	cbz	r3, 80064e8 <_fstat_r+0x1c>
 80064e6:	6023      	str	r3, [r4, #0]
 80064e8:	bd38      	pop	{r3, r4, r5, pc}
 80064ea:	bf00      	nop
 80064ec:	20000514 	.word	0x20000514

080064f0 <_isatty_r>:
 80064f0:	b538      	push	{r3, r4, r5, lr}
 80064f2:	4d06      	ldr	r5, [pc, #24]	@ (800650c <_isatty_r+0x1c>)
 80064f4:	2300      	movs	r3, #0
 80064f6:	4604      	mov	r4, r0
 80064f8:	4608      	mov	r0, r1
 80064fa:	602b      	str	r3, [r5, #0]
 80064fc:	f7fb f8c8 	bl	8001690 <_isatty>
 8006500:	1c43      	adds	r3, r0, #1
 8006502:	d102      	bne.n	800650a <_isatty_r+0x1a>
 8006504:	682b      	ldr	r3, [r5, #0]
 8006506:	b103      	cbz	r3, 800650a <_isatty_r+0x1a>
 8006508:	6023      	str	r3, [r4, #0]
 800650a:	bd38      	pop	{r3, r4, r5, pc}
 800650c:	20000514 	.word	0x20000514

08006510 <_sbrk_r>:
 8006510:	b538      	push	{r3, r4, r5, lr}
 8006512:	4d06      	ldr	r5, [pc, #24]	@ (800652c <_sbrk_r+0x1c>)
 8006514:	2300      	movs	r3, #0
 8006516:	4604      	mov	r4, r0
 8006518:	4608      	mov	r0, r1
 800651a:	602b      	str	r3, [r5, #0]
 800651c:	f7fb f8d0 	bl	80016c0 <_sbrk>
 8006520:	1c43      	adds	r3, r0, #1
 8006522:	d102      	bne.n	800652a <_sbrk_r+0x1a>
 8006524:	682b      	ldr	r3, [r5, #0]
 8006526:	b103      	cbz	r3, 800652a <_sbrk_r+0x1a>
 8006528:	6023      	str	r3, [r4, #0]
 800652a:	bd38      	pop	{r3, r4, r5, pc}
 800652c:	20000514 	.word	0x20000514

08006530 <_init>:
 8006530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006532:	bf00      	nop
 8006534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006536:	bc08      	pop	{r3}
 8006538:	469e      	mov	lr, r3
 800653a:	4770      	bx	lr

0800653c <_fini>:
 800653c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800653e:	bf00      	nop
 8006540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006542:	bc08      	pop	{r3}
 8006544:	469e      	mov	lr, r3
 8006546:	4770      	bx	lr
