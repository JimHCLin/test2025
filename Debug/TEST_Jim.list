
TEST_Jim.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f7c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08006104  08006104  00007104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800619c  0800619c  000080a0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800619c  0800619c  0000719c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061a4  080061a4  000080a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061a4  080061a4  000071a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080061a8  080061a8  000071a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a0  20000000  080061ac  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f8  200000a0  0800624c  000080a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000598  0800624c  00008598  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000080a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013abb  00000000  00000000  000080d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002803  00000000  00000000  0001bb8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001128  00000000  00000000  0001e390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d5f  00000000  00000000  0001f4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029396  00000000  00000000  00020217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001445c  00000000  00000000  000495ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001001a1  00000000  00000000  0005da09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015dbaa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ed8  00000000  00000000  0015dbf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00162ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000a0 	.word	0x200000a0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080060ec 	.word	0x080060ec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000a4 	.word	0x200000a4
 80001c4:	080060ec 	.word	0x080060ec

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <lightOnLED>:
//欄位依序是：GPIO port (GPIOA, GPIOB...),GPIO pin (GPIO_PIN_0, GPIO_PIN_1...),初始狀態（TOUCH_IDLE）,lastChangeTime（0）,pressStartTime（0）,lastTapTime（0）,tapCount（0）
//longPressDetected（false）

//////////////////////////////////
void lightOnLED(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	//int count=0;
	//int statusLED=0;
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80004f8:	2201      	movs	r2, #1
 80004fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80004fe:	4802      	ldr	r0, [pc, #8]	@ (8000508 <lightOnLED+0x14>)
 8000500:	f002 ffa4 	bl	800344c <HAL_GPIO_WritePin>
    //state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8);
    //HAL_Delay(100);
}
 8000504:	bf00      	nop
 8000506:	bd80      	pop	{r7, pc}
 8000508:	48000400 	.word	0x48000400

0800050c <lightOffLED>:
void lightOffLED(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
	//int count=0;
	//int statusLED=0;

    //將 PB8 Off
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000510:	2200      	movs	r2, #0
 8000512:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000516:	4802      	ldr	r0, [pc, #8]	@ (8000520 <lightOffLED+0x14>)
 8000518:	f002 ff98 	bl	800344c <HAL_GPIO_WritePin>
    //state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8);
    //receive_data_uart();
    //HAL_Delay(100);
    //i++;
}
 800051c:	bf00      	nop
 800051e:	bd80      	pop	{r7, pc}
 8000520:	48000400 	.word	0x48000400

08000524 <readSingleForceSensorADCValue>:
uint16_t readSingleForceSensorADCValue(int sensorIndex)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b086      	sub	sp, #24
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status;
    uint16_t adcValue = 0;
 800052c:	2300      	movs	r3, #0
 800052e:	82fb      	strh	r3, [r7, #22]
    ADC_HandleTypeDef* hadc = NULL;
 8000530:	2300      	movs	r3, #0
 8000532:	613b      	str	r3, [r7, #16]

    // 根據 sensorIndex 選擇對應 ADC
    if (sensorIndex == 1) {
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2b01      	cmp	r3, #1
 8000538:	d102      	bne.n	8000540 <readSingleForceSensorADCValue+0x1c>
        hadc = &hadc1;
 800053a:	4b15      	ldr	r3, [pc, #84]	@ (8000590 <readSingleForceSensorADCValue+0x6c>)
 800053c:	613b      	str	r3, [r7, #16]
 800053e:	e009      	b.n	8000554 <readSingleForceSensorADCValue+0x30>
    } else if (sensorIndex == 2) {
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	2b02      	cmp	r3, #2
 8000544:	d102      	bne.n	800054c <readSingleForceSensorADCValue+0x28>
        hadc = &hadc2;
 8000546:	4b13      	ldr	r3, [pc, #76]	@ (8000594 <readSingleForceSensorADCValue+0x70>)
 8000548:	613b      	str	r3, [r7, #16]
 800054a:	e003      	b.n	8000554 <readSingleForceSensorADCValue+0x30>
    } else {
    	Error_Handler();  // 加入錯誤處理
 800054c:	f000 fea0 	bl	8001290 <Error_Handler>
        return 0; // 無效的 index
 8000550:	2300      	movs	r3, #0
 8000552:	e018      	b.n	8000586 <readSingleForceSensorADCValue+0x62>
    }

    // 啟動 ADC
    status = HAL_ADC_Start(hadc);
 8000554:	6938      	ldr	r0, [r7, #16]
 8000556:	f001 fdb7 	bl	80020c8 <HAL_ADC_Start>
 800055a:	4603      	mov	r3, r0
 800055c:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) {
 800055e:	7bfb      	ldrb	r3, [r7, #15]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <readSingleForceSensorADCValue+0x44>
        return 0; // 啟動失敗
 8000564:	2300      	movs	r3, #0
 8000566:	e00e      	b.n	8000586 <readSingleForceSensorADCValue+0x62>
    }

    // 輪詢等待轉換完成
    status = HAL_ADC_PollForConversion(hadc, 10);
 8000568:	210a      	movs	r1, #10
 800056a:	6938      	ldr	r0, [r7, #16]
 800056c:	f001 fe66 	bl	800223c <HAL_ADC_PollForConversion>
 8000570:	4603      	mov	r3, r0
 8000572:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 8000574:	7bfb      	ldrb	r3, [r7, #15]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d104      	bne.n	8000584 <readSingleForceSensorADCValue+0x60>
        adcValue = HAL_ADC_GetValue(hadc);
 800057a:	6938      	ldr	r0, [r7, #16]
 800057c:	f001 ff36 	bl	80023ec <HAL_ADC_GetValue>
 8000580:	4603      	mov	r3, r0
 8000582:	82fb      	strh	r3, [r7, #22]
    }

    return adcValue;
 8000584:	8afb      	ldrh	r3, [r7, #22]
}
 8000586:	4618      	mov	r0, r3
 8000588:	3718      	adds	r7, #24
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	20000100 	.word	0x20000100
 8000594:	20000164 	.word	0x20000164

08000598 <startForceSensorADCRead>:

void startForceSensorADCRead(ForceSensorADCReadContext_t *context, int sensorIndex, uint32_t sensorPressDuration)
{
 8000598:	b480      	push	{r7}
 800059a:	b085      	sub	sp, #20
 800059c:	af00      	add	r7, sp, #0
 800059e:	60f8      	str	r0, [r7, #12]
 80005a0:	60b9      	str	r1, [r7, #8]
 80005a2:	607a      	str	r2, [r7, #4]
    (*context).sensorIndex = sensorIndex;
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	68ba      	ldr	r2, [r7, #8]
 80005a8:	619a      	str	r2, [r3, #24]
    (*context).maxCount = sensorPressDuration / 10;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4a0d      	ldr	r2, [pc, #52]	@ (80005e4 <startForceSensorADCRead+0x4c>)
 80005ae:	fba2 2303 	umull	r2, r3, r2, r3
 80005b2:	08da      	lsrs	r2, r3, #3
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	615a      	str	r2, [r3, #20]
    if ((*context).maxCount == 0) (*context).maxCount = 1; // 防除以0
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	695b      	ldr	r3, [r3, #20]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d102      	bne.n	80005c6 <startForceSensorADCRead+0x2e>
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	2201      	movs	r2, #1
 80005c4:	615a      	str	r2, [r3, #20]
    (*context).sum = 0;
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	2200      	movs	r2, #0
 80005ca:	60da      	str	r2, [r3, #12]
    (*context).count = 0;
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	2200      	movs	r2, #0
 80005d0:	611a      	str	r2, [r3, #16]
    (*context).state = FORCE_ADC_READ_INIT;
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	2200      	movs	r2, #0
 80005d6:	701a      	strb	r2, [r3, #0]
}
 80005d8:	bf00      	nop
 80005da:	3714      	adds	r7, #20
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr
 80005e4:	cccccccd 	.word	0xcccccccd

080005e8 <processForceSensorADCRead>:

bool processForceSensorADCRead(ForceSensorADCReadContext_t *context)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
    switch ((*context).state)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b02      	cmp	r3, #2
 80005f6:	d06f      	beq.n	80006d8 <processForceSensorADCRead+0xf0>
 80005f8:	2b02      	cmp	r3, #2
 80005fa:	dc6f      	bgt.n	80006dc <processForceSensorADCRead+0xf4>
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d002      	beq.n	8000606 <processForceSensorADCRead+0x1e>
 8000600:	2b01      	cmp	r3, #1
 8000602:	d013      	beq.n	800062c <processForceSensorADCRead+0x44>

        case FORCE_ADC_READ_DONE:
            return true;  // 完成讀取了

        default:
            break;
 8000604:	e06a      	b.n	80006dc <processForceSensorADCRead+0xf4>
        	(*context).firstStartTime = HAL_GetTick();
 8000606:	f001 f9fb 	bl	8001a00 <HAL_GetTick>
 800060a:	4602      	mov	r2, r0
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	609a      	str	r2, [r3, #8]
			(*context).startTime = (*context).firstStartTime;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	689a      	ldr	r2, [r3, #8]
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	605a      	str	r2, [r3, #4]
			(*context).sum = 0;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2200      	movs	r2, #0
 800061c:	60da      	str	r2, [r3, #12]
			(*context).count = 0;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	2200      	movs	r2, #0
 8000622:	611a      	str	r2, [r3, #16]
			(*context).state = FORCE_ADC_READING;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2201      	movs	r2, #1
 8000628:	701a      	strb	r2, [r3, #0]
            break;
 800062a:	e05a      	b.n	80006e2 <processForceSensorADCRead+0xfa>
        	int a=HAL_GetTick();
 800062c:	f001 f9e8 	bl	8001a00 <HAL_GetTick>
 8000630:	4603      	mov	r3, r0
 8000632:	60fb      	str	r3, [r7, #12]
            if (HAL_GetTick() - (*context).startTime >= 10)  // 間隔10ms讀一次
 8000634:	f001 f9e4 	bl	8001a00 <HAL_GetTick>
 8000638:	4602      	mov	r2, r0
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	685b      	ldr	r3, [r3, #4]
 800063e:	1ad3      	subs	r3, r2, r3
 8000640:	2b09      	cmp	r3, #9
 8000642:	d927      	bls.n	8000694 <processForceSensorADCRead+0xac>
                uint16_t valueADC = readSingleForceSensorADCValue((*context).sensorIndex);
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	4618      	mov	r0, r3
 800064a:	f7ff ff6b 	bl	8000524 <readSingleForceSensorADCValue>
 800064e:	4603      	mov	r3, r0
 8000650:	817b      	strh	r3, [r7, #10]
                (*context).sum += valueADC;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	68da      	ldr	r2, [r3, #12]
 8000656:	897b      	ldrh	r3, [r7, #10]
 8000658:	441a      	add	r2, r3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	60da      	str	r2, [r3, #12]
                (*context).count++;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	691b      	ldr	r3, [r3, #16]
 8000662:	1c5a      	adds	r2, r3, #1
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	611a      	str	r2, [r3, #16]
                (*context).startTime = HAL_GetTick(); // 重設計時
 8000668:	f001 f9ca 	bl	8001a00 <HAL_GetTick>
 800066c:	4602      	mov	r2, r0
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	605a      	str	r2, [r3, #4]
                if ((*context).count >= (*context).maxCount)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	691a      	ldr	r2, [r3, #16]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	695b      	ldr	r3, [r3, #20]
 800067a:	429a      	cmp	r2, r3
 800067c:	d30a      	bcc.n	8000694 <processForceSensorADCRead+0xac>
                    (*context).average = (*context).sum / (*context).count;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	68da      	ldr	r2, [r3, #12]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	691b      	ldr	r3, [r3, #16]
 8000686:	fbb2 f2f3 	udiv	r2, r2, r3
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	61da      	str	r2, [r3, #28]
                    (*context).state = FORCE_ADC_READ_DONE;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2202      	movs	r2, #2
 8000692:	701a      	strb	r2, [r3, #0]
			if (HAL_GetTick() - (*context).firstStartTime >= (*context).maxCount * 10)
 8000694:	f001 f9b4 	bl	8001a00 <HAL_GetTick>
 8000698:	4602      	mov	r2, r0
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	689b      	ldr	r3, [r3, #8]
 800069e:	1ad1      	subs	r1, r2, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	695a      	ldr	r2, [r3, #20]
 80006a4:	4613      	mov	r3, r2
 80006a6:	009b      	lsls	r3, r3, #2
 80006a8:	4413      	add	r3, r2
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	4299      	cmp	r1, r3
 80006ae:	d317      	bcc.n	80006e0 <processForceSensorADCRead+0xf8>
				if ((*context).count > 0) {
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	691b      	ldr	r3, [r3, #16]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d008      	beq.n	80006ca <processForceSensorADCRead+0xe2>
					(*context).average = (*context).sum / (*context).count;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	68da      	ldr	r2, [r3, #12]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	691b      	ldr	r3, [r3, #16]
 80006c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	61da      	str	r2, [r3, #28]
 80006c8:	e002      	b.n	80006d0 <processForceSensorADCRead+0xe8>
					(*context).average = 0;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	2200      	movs	r2, #0
 80006ce:	61da      	str	r2, [r3, #28]
				(*context).state = FORCE_ADC_READ_DONE;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2202      	movs	r2, #2
 80006d4:	701a      	strb	r2, [r3, #0]
            break;
 80006d6:	e003      	b.n	80006e0 <processForceSensorADCRead+0xf8>
            return true;  // 完成讀取了
 80006d8:	2301      	movs	r3, #1
 80006da:	e003      	b.n	80006e4 <processForceSensorADCRead+0xfc>
            break;
 80006dc:	bf00      	nop
 80006de:	e000      	b.n	80006e2 <processForceSensorADCRead+0xfa>
            break;
 80006e0:	bf00      	nop
    }
    return false;  // 尚未完成
 80006e2:	2300      	movs	r3, #0
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	3710      	adds	r7, #16
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <getForceSensorADCReadAverage>:

uint32_t getForceSensorADCReadAverage(ForceSensorADCReadContext_t *context)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
    return (*context).average;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	69db      	ldr	r3, [r3, #28]
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	370c      	adds	r7, #12
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr

08000704 <getAllForceSensorState>:

//


bool getAllForceSensorState(bool isSensor1Enabled ,bool isSensor2Enabled ,uint32_t sensorPressDuration,uint32_t pressureValueThreshold)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b094      	sub	sp, #80	@ 0x50
 8000708:	af02      	add	r7, sp, #8
 800070a:	60ba      	str	r2, [r7, #8]
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	4603      	mov	r3, r0
 8000710:	73fb      	strb	r3, [r7, #15]
 8000712:	460b      	mov	r3, r1
 8000714:	73bb      	strb	r3, [r7, #14]

	/////////// 這個函式只執行一次,他會用阻塞式的方式等兩個sensor 都做完後 才會跳出去///
	// 但是這兩個sensor在讀資料時,是用非阻塞的方式
	//所以每個 sensor 要讀100ms ,但這個函式執行完成,整體時間只有100ms
	bool allForceSensorStateResult = false;
 8000716:	2300      	movs	r3, #0
 8000718:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	uint32_t forceSensor1AveragedValue = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	643b      	str	r3, [r7, #64]	@ 0x40
	uint32_t forceSensor2AveragedValue = 0;
 8000720:	2300      	movs	r3, #0
 8000722:	63fb      	str	r3, [r7, #60]	@ 0x3c
	bool fsr1Done = false;
 8000724:	2300      	movs	r3, #0
 8000726:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	bool fsr2Done = false;
 800072a:	2300      	movs	r3, #0
 800072c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
	uint32_t startTime = HAL_GetTick();
 8000730:	f001 f966 	bl	8001a00 <HAL_GetTick>
 8000734:	6378      	str	r0, [r7, #52]	@ 0x34
	////////
	uint8_t countGetAllForceSensorState=0;
 8000736:	2300      	movs	r3, #0
 8000738:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
	int b=0;
 800073c:	2300      	movs	r3, #0
 800073e:	633b      	str	r3, [r7, #48]	@ 0x30
	int A=0;
 8000740:	2300      	movs	r3, #0
 8000742:	62fb      	str	r3, [r7, #44]	@ 0x2c
	///
	// 啟動需要的感測器
	if (isSensor1Enabled) {
 8000744:	7bfb      	ldrb	r3, [r7, #15]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d008      	beq.n	800075c <getAllForceSensorState+0x58>
		startForceSensorADCRead(&fsr1Context, 1, sensorPressDuration);
 800074a:	68ba      	ldr	r2, [r7, #8]
 800074c:	2101      	movs	r1, #1
 800074e:	4846      	ldr	r0, [pc, #280]	@ (8000868 <getAllForceSensorState+0x164>)
 8000750:	f7ff ff22 	bl	8000598 <startForceSensorADCRead>
		fsr1Done = false;
 8000754:	2300      	movs	r3, #0
 8000756:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 800075a:	e002      	b.n	8000762 <getAllForceSensorState+0x5e>
	} else {
		fsr1Done = true;  // 不啟用就視為已完成
 800075c:	2301      	movs	r3, #1
 800075e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	}

	if (isSensor2Enabled) {
 8000762:	7bbb      	ldrb	r3, [r7, #14]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d008      	beq.n	800077a <getAllForceSensorState+0x76>
		startForceSensorADCRead(&fsr2Context, 2, sensorPressDuration);
 8000768:	68ba      	ldr	r2, [r7, #8]
 800076a:	2102      	movs	r1, #2
 800076c:	483f      	ldr	r0, [pc, #252]	@ (800086c <getAllForceSensorState+0x168>)
 800076e:	f7ff ff13 	bl	8000598 <startForceSensorADCRead>
		fsr2Done = false;
 8000772:	2300      	movs	r3, #0
 8000774:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 8000778:	e046      	b.n	8000808 <getAllForceSensorState+0x104>
	} else {
		fsr2Done = true;  // 不啟用就視為已完成
 800077a:	2301      	movs	r3, #1
 800077c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
	}

	// 非阻塞等待兩個感測器都完成
	while (!fsr1Done || !fsr2Done)
 8000780:	e042      	b.n	8000808 <getAllForceSensorState+0x104>
	{
		//////////先暫時加入計算時間
		uint32_t touchSwitchStartTime = HAL_GetTick();
 8000782:	f001 f93d 	bl	8001a00 <HAL_GetTick>
 8000786:	6238      	str	r0, [r7, #32]
		//////////////////////////
		if (!fsr1Done && processForceSensorADCRead(&fsr1Context)) {
 8000788:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800078c:	f083 0301 	eor.w	r3, r3, #1
 8000790:	b2db      	uxtb	r3, r3
 8000792:	2b00      	cmp	r3, #0
 8000794:	d00c      	beq.n	80007b0 <getAllForceSensorState+0xac>
 8000796:	4834      	ldr	r0, [pc, #208]	@ (8000868 <getAllForceSensorState+0x164>)
 8000798:	f7ff ff26 	bl	80005e8 <processForceSensorADCRead>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d006      	beq.n	80007b0 <getAllForceSensorState+0xac>
			forceSensor1AveragedValue = getForceSensorADCReadAverage(&fsr1Context);
 80007a2:	4831      	ldr	r0, [pc, #196]	@ (8000868 <getAllForceSensorState+0x164>)
 80007a4:	f7ff ffa2 	bl	80006ec <getForceSensorADCReadAverage>
 80007a8:	6438      	str	r0, [r7, #64]	@ 0x40
			fsr1Done = true;
 80007aa:	2301      	movs	r3, #1
 80007ac:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
		}

		if (!fsr2Done && processForceSensorADCRead(&fsr2Context)) {
 80007b0:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80007b4:	f083 0301 	eor.w	r3, r3, #1
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d00c      	beq.n	80007d8 <getAllForceSensorState+0xd4>
 80007be:	482b      	ldr	r0, [pc, #172]	@ (800086c <getAllForceSensorState+0x168>)
 80007c0:	f7ff ff12 	bl	80005e8 <processForceSensorADCRead>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d006      	beq.n	80007d8 <getAllForceSensorState+0xd4>
			forceSensor2AveragedValue = getForceSensorADCReadAverage(&fsr2Context);
 80007ca:	4828      	ldr	r0, [pc, #160]	@ (800086c <getAllForceSensorState+0x168>)
 80007cc:	f7ff ff8e 	bl	80006ec <getForceSensorADCReadAverage>
 80007d0:	63f8      	str	r0, [r7, #60]	@ 0x3c
			fsr2Done = true;
 80007d2:	2301      	movs	r3, #1
 80007d4:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
		}

		//////////////////先暫時加入計算時間
		uint32_t touchSwitchEndTime = HAL_GetTick();
 80007d8:	f001 f912 	bl	8001a00 <HAL_GetTick>
 80007dc:	61f8      	str	r0, [r7, #28]
		uint32_t touchSwitchDuration = touchSwitchEndTime - touchSwitchStartTime;
 80007de:	69fa      	ldr	r2, [r7, #28]
 80007e0:	6a3b      	ldr	r3, [r7, #32]
 80007e2:	1ad3      	subs	r3, r2, r3
 80007e4:	61bb      	str	r3, [r7, #24]

		///
		// ✅ 可插入其他非阻塞任務
		//////////////先暫時加入 touch switch
		bool touchSwitchFinalState = false;
 80007e6:	2300      	movs	r3, #0
 80007e8:	75fb      	strb	r3, [r7, #23]
		touchSwitchFinalState = getAllTouchSwitchState(true,true,false,false,sensorPressDuration);
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	9300      	str	r3, [sp, #0]
 80007ee:	2300      	movs	r3, #0
 80007f0:	2200      	movs	r2, #0
 80007f2:	2101      	movs	r1, #1
 80007f4:	2001      	movs	r0, #1
 80007f6:	f000 f925 	bl	8000a44 <getAllTouchSwitchState>
 80007fa:	4603      	mov	r3, r0
 80007fc:	75fb      	strb	r3, [r7, #23]
		countGetAllForceSensorState++;
 80007fe:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8000802:	3301      	adds	r3, #1
 8000804:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
	while (!fsr1Done || !fsr2Done)
 8000808:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800080c:	f083 0301 	eor.w	r3, r3, #1
 8000810:	b2db      	uxtb	r3, r3
 8000812:	2b00      	cmp	r3, #0
 8000814:	d1b5      	bne.n	8000782 <getAllForceSensorState+0x7e>
 8000816:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800081a:	f083 0301 	eor.w	r3, r3, #1
 800081e:	b2db      	uxtb	r3, r3
 8000820:	2b00      	cmp	r3, #0
 8000822:	d1ae      	bne.n	8000782 <getAllForceSensorState+0x7e>
		//////////////////////////////////
	}

	// 比較是否有達到閾值
	if ((isSensor1Enabled && forceSensor1AveragedValue > pressureValueThreshold) ||
 8000824:	7bfb      	ldrb	r3, [r7, #15]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d003      	beq.n	8000832 <getAllForceSensorState+0x12e>
 800082a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	429a      	cmp	r2, r3
 8000830:	d806      	bhi.n	8000840 <getAllForceSensorState+0x13c>
 8000832:	7bbb      	ldrb	r3, [r7, #14]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d00c      	beq.n	8000852 <getAllForceSensorState+0x14e>
		(isSensor2Enabled && forceSensor2AveragedValue > pressureValueThreshold)) {
 8000838:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	429a      	cmp	r2, r3
 800083e:	d908      	bls.n	8000852 <getAllForceSensorState+0x14e>
		allForceSensorStateResult = true;
 8000840:	2301      	movs	r3, #1
 8000842:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		//lightOnLED();

		//HAL_Delay(200);
		//lightOffLED();
		////////
		A=countGetAllForceSensorState;
 8000846:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800084a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		int dd=0;
 800084c:	2300      	movs	r3, #0
 800084e:	627b      	str	r3, [r7, #36]	@ 0x24
		(isSensor2Enabled && forceSensor2AveragedValue > pressureValueThreshold)) {
 8000850:	e004      	b.n	800085c <getAllForceSensorState+0x158>
		////////////////
	}
	else
	{
		//lightOffLED();
		b=countGetAllForceSensorState;
 8000852:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8000856:	633b      	str	r3, [r7, #48]	@ 0x30
		int d=0;
 8000858:	2300      	movs	r3, #0
 800085a:	62bb      	str	r3, [r7, #40]	@ 0x28
	}
	return allForceSensorStateResult;
 800085c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8000860:	4618      	mov	r0, r3
 8000862:	3748      	adds	r7, #72	@ 0x48
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	200000bc 	.word	0x200000bc
 800086c:	200000dc 	.word	0x200000dc

08000870 <updateTouchSwitchState>:

    return isTouchSwitchPressed;
}

void updateTouchSwitchState(TouchSwitchContext* sw, uint32_t debounceTime)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	6039      	str	r1, [r7, #0]
	//FSM 非堵塞方法
    GPIO_PinState pinState = HAL_GPIO_ReadPin((*sw).port, (*sw).pin);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	889b      	ldrh	r3, [r3, #4]
 8000882:	4619      	mov	r1, r3
 8000884:	4610      	mov	r0, r2
 8000886:	f002 fdc9 	bl	800341c <HAL_GPIO_ReadPin>
 800088a:	4603      	mov	r3, r0
 800088c:	75fb      	strb	r3, [r7, #23]
    uint32_t now = HAL_GetTick();
 800088e:	f001 f8b7 	bl	8001a00 <HAL_GetTick>
 8000892:	6138      	str	r0, [r7, #16]

    switch ((*sw).state)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	799b      	ldrb	r3, [r3, #6]
 8000898:	2b04      	cmp	r3, #4
 800089a:	f200 8088 	bhi.w	80009ae <updateTouchSwitchState+0x13e>
 800089e:	a201      	add	r2, pc, #4	@ (adr r2, 80008a4 <updateTouchSwitchState+0x34>)
 80008a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008a4:	080008b9 	.word	0x080008b9
 80008a8:	080008cd 	.word	0x080008cd
 80008ac:	080008fd 	.word	0x080008fd
 80008b0:	0800098b 	.word	0x0800098b
 80008b4:	08000999 	.word	0x08000999
    {
        case TOUCH_IDLE:
            if (pinState == GPIO_PIN_RESET) {
 80008b8:	7dfb      	ldrb	r3, [r7, #23]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d170      	bne.n	80009a0 <updateTouchSwitchState+0x130>
                (*sw).state = TOUCH_DEBOUNCE;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2201      	movs	r2, #1
 80008c2:	719a      	strb	r2, [r3, #6]
                (*sw).lastChangeTime = now;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	693a      	ldr	r2, [r7, #16]
 80008c8:	609a      	str	r2, [r3, #8]
            }
            break;
 80008ca:	e069      	b.n	80009a0 <updateTouchSwitchState+0x130>

        case TOUCH_DEBOUNCE:
            if ((now - (*sw).lastChangeTime) >= debounceTime) {
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	689b      	ldr	r3, [r3, #8]
 80008d0:	693a      	ldr	r2, [r7, #16]
 80008d2:	1ad3      	subs	r3, r2, r3
 80008d4:	683a      	ldr	r2, [r7, #0]
 80008d6:	429a      	cmp	r2, r3
 80008d8:	d864      	bhi.n	80009a4 <updateTouchSwitchState+0x134>
                if (pinState == GPIO_PIN_RESET) {
 80008da:	7dfb      	ldrb	r3, [r7, #23]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d109      	bne.n	80008f4 <updateTouchSwitchState+0x84>
                    (*sw).state = TOUCH_PRESSED;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2202      	movs	r2, #2
 80008e4:	719a      	strb	r2, [r3, #6]
                    (*sw).pressStartTime = now;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	693a      	ldr	r2, [r7, #16]
 80008ea:	60da      	str	r2, [r3, #12]
                    (*sw).longPressDetected = false;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2200      	movs	r2, #0
 80008f0:	761a      	strb	r2, [r3, #24]
                } else {
                    (*sw).state = TOUCH_IDLE;
                }
            }
            break;
 80008f2:	e057      	b.n	80009a4 <updateTouchSwitchState+0x134>
                    (*sw).state = TOUCH_IDLE;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2200      	movs	r2, #0
 80008f8:	719a      	strb	r2, [r3, #6]
            break;
 80008fa:	e053      	b.n	80009a4 <updateTouchSwitchState+0x134>

        case TOUCH_PRESSED:
            if (pinState == GPIO_PIN_SET)
 80008fc:	7dfb      	ldrb	r3, [r7, #23]
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d12b      	bne.n	800095a <updateTouchSwitchState+0xea>
            {
            	//SET代表按鈕已經放開
                (*sw).state = TOUCH_RELEASED;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2204      	movs	r2, #4
 8000906:	719a      	strb	r2, [r3, #6]
                uint32_t pressDuration = now - (*sw).pressStartTime;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	68db      	ldr	r3, [r3, #12]
 800090c:	693a      	ldr	r2, [r7, #16]
 800090e:	1ad3      	subs	r3, r2, r3
 8000910:	60fb      	str	r3, [r7, #12]

                if ((now - (*sw).lastTapTime) < MULTI_TAP_WINDOW)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	695b      	ldr	r3, [r3, #20]
 8000916:	693a      	ldr	r2, [r7, #16]
 8000918:	1ad3      	subs	r3, r2, r3
 800091a:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800091e:	d206      	bcs.n	800092e <updateTouchSwitchState+0xbe>
                {
                	///處理快速連按
                    (*sw).tapCount++;//快速連按計數加1
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	7c1b      	ldrb	r3, [r3, #16]
 8000924:	3301      	adds	r3, #1
 8000926:	b2da      	uxtb	r2, r3
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	741a      	strb	r2, [r3, #16]
 800092c:	e002      	b.n	8000934 <updateTouchSwitchState+0xc4>
                }
                else
                {
                    (*sw).tapCount = 1;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2201      	movs	r2, #1
 8000932:	741a      	strb	r2, [r3, #16]
                }
                (*sw).lastTapTime = now;//把當下的時間記錄在lastTapTime
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	693a      	ldr	r2, [r7, #16]
 8000938:	615a      	str	r2, [r3, #20]

                if (pressDuration < SHORT_PRESS_THRESHOLD)
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000940:	d203      	bcs.n	800094a <updateTouchSwitchState+0xda>
                {
                	//處理短按情況
                    printf("短按\n");
 8000942:	481d      	ldr	r0, [pc, #116]	@ (80009b8 <updateTouchSwitchState+0x148>)
 8000944:	f005 f83e 	bl	80059c4 <puts>
                (*sw).longPressDetected = true;
                printf("長按觸發\n");
                //按鈕還按著
                (*sw).state = TOUCH_LONG_PRESSED;
            }
            break;
 8000948:	e02e      	b.n	80009a8 <updateTouchSwitchState+0x138>
                else if (pressDuration >= LONG_PRESS_THRESHOLD)
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000950:	d32a      	bcc.n	80009a8 <updateTouchSwitchState+0x138>
                    printf("長按（釋放時判斷）\n");
 8000952:	481a      	ldr	r0, [pc, #104]	@ (80009bc <updateTouchSwitchState+0x14c>)
 8000954:	f005 f836 	bl	80059c4 <puts>
            break;
 8000958:	e026      	b.n	80009a8 <updateTouchSwitchState+0x138>
            else if ((now - (*sw).pressStartTime) >= LONG_PRESS_THRESHOLD && !(*sw).longPressDetected)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	68db      	ldr	r3, [r3, #12]
 800095e:	693a      	ldr	r2, [r7, #16]
 8000960:	1ad3      	subs	r3, r2, r3
 8000962:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000966:	d31f      	bcc.n	80009a8 <updateTouchSwitchState+0x138>
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	7e1b      	ldrb	r3, [r3, #24]
 800096c:	f083 0301 	eor.w	r3, r3, #1
 8000970:	b2db      	uxtb	r3, r3
 8000972:	2b00      	cmp	r3, #0
 8000974:	d018      	beq.n	80009a8 <updateTouchSwitchState+0x138>
                (*sw).longPressDetected = true;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2201      	movs	r2, #1
 800097a:	761a      	strb	r2, [r3, #24]
                printf("長按觸發\n");
 800097c:	4810      	ldr	r0, [pc, #64]	@ (80009c0 <updateTouchSwitchState+0x150>)
 800097e:	f005 f821 	bl	80059c4 <puts>
                (*sw).state = TOUCH_LONG_PRESSED;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2203      	movs	r2, #3
 8000986:	719a      	strb	r2, [r3, #6]
            break;
 8000988:	e00e      	b.n	80009a8 <updateTouchSwitchState+0x138>

        case TOUCH_LONG_PRESSED:
            if (pinState == GPIO_PIN_SET)
 800098a:	7dfb      	ldrb	r3, [r7, #23]
 800098c:	2b01      	cmp	r3, #1
 800098e:	d10d      	bne.n	80009ac <updateTouchSwitchState+0x13c>
            {
            	//SET代表按鈕已經放開
                (*sw).state = TOUCH_RELEASED;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2204      	movs	r2, #4
 8000994:	719a      	strb	r2, [r3, #6]
            }
            break;
 8000996:	e009      	b.n	80009ac <updateTouchSwitchState+0x13c>

        case TOUCH_RELEASED:
            (*sw).state = TOUCH_IDLE;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2200      	movs	r2, #0
 800099c:	719a      	strb	r2, [r3, #6]
            break;
 800099e:	e006      	b.n	80009ae <updateTouchSwitchState+0x13e>
            break;
 80009a0:	bf00      	nop
 80009a2:	e004      	b.n	80009ae <updateTouchSwitchState+0x13e>
            break;
 80009a4:	bf00      	nop
 80009a6:	e002      	b.n	80009ae <updateTouchSwitchState+0x13e>
            break;
 80009a8:	bf00      	nop
 80009aa:	e000      	b.n	80009ae <updateTouchSwitchState+0x13e>
            break;
 80009ac:	bf00      	nop
    }
}
 80009ae:	bf00      	nop
 80009b0:	3718      	adds	r7, #24
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	08006104 	.word	0x08006104
 80009bc:	0800610c 	.word	0x0800610c
 80009c0:	08006128 	.word	0x08006128

080009c4 <checkSwitchStateFSM>:

bool checkSwitchStateFSM(int sensorIndex, uint32_t switchDebounceDuration)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	6039      	str	r1, [r7, #0]
	static bool wasPressed[MAX_TOUCH_SWITCHES] = { false };  // 每個按鈕一個 flag
	//bool triggered = false;
	//HAL_Delay(60);
	uint32_t now = HAL_GetTick();
 80009ce:	f001 f817 	bl	8001a00 <HAL_GetTick>
 80009d2:	6138      	str	r0, [r7, #16]
	bool isTouchSwitchPressed = false;
 80009d4:	2300      	movs	r3, #0
 80009d6:	75fb      	strb	r3, [r7, #23]
	updateTouchSwitchState(&touchSwitches[sensorIndex-1], switchDebounceDuration);//&touchSwitches[i]==>取締一個SWITCH的地址  第二個..
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	1e5a      	subs	r2, r3, #1
 80009dc:	4613      	mov	r3, r2
 80009de:	00db      	lsls	r3, r3, #3
 80009e0:	1a9b      	subs	r3, r3, r2
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	4a15      	ldr	r2, [pc, #84]	@ (8000a3c <checkSwitchStateFSM+0x78>)
 80009e6:	4413      	add	r3, r2
 80009e8:	6839      	ldr	r1, [r7, #0]
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff ff40 	bl	8000870 <updateTouchSwitchState>
	TouchState touchSwitchCurrentState =touchSwitches[sensorIndex-1].state;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	1e5a      	subs	r2, r3, #1
 80009f4:	4911      	ldr	r1, [pc, #68]	@ (8000a3c <checkSwitchStateFSM+0x78>)
 80009f6:	4613      	mov	r3, r2
 80009f8:	00db      	lsls	r3, r3, #3
 80009fa:	1a9b      	subs	r3, r3, r2
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	440b      	add	r3, r1
 8000a00:	3306      	adds	r3, #6
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	73fb      	strb	r3, [r7, #15]
	if(touchSwitchCurrentState==TOUCH_PRESSED ||touchSwitchCurrentState==TOUCH_LONG_PRESSED)
 8000a06:	7bfb      	ldrb	r3, [r7, #15]
 8000a08:	2b02      	cmp	r3, #2
 8000a0a:	d002      	beq.n	8000a12 <checkSwitchStateFSM+0x4e>
 8000a0c:	7bfb      	ldrb	r3, [r7, #15]
 8000a0e:	2b03      	cmp	r3, #3
 8000a10:	d108      	bne.n	8000a24 <checkSwitchStateFSM+0x60>
		*/ //上面  第一次按下：觸發一次,之後持續按下都不會再回傳TRUE


		/////////////////
		//每次偵測有按下都會回傳TRUE
		if (!isTouchSwitchPressed)
 8000a12:	7dfb      	ldrb	r3, [r7, #23]
 8000a14:	f083 0301 	eor.w	r3, r3, #1
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d009      	beq.n	8000a32 <checkSwitchStateFSM+0x6e>
		{
			// ✅ 第一次按下：觸發一次
			//triggered = true;
			//wasPressed[sensorIndex-1] = true;  // 記得這次已經觸發
			isTouchSwitchPressed=true;//有按下
 8000a1e:	2301      	movs	r3, #1
 8000a20:	75fb      	strb	r3, [r7, #23]
		if (!isTouchSwitchPressed)
 8000a22:	e006      	b.n	8000a32 <checkSwitchStateFSM+0x6e>

	}
	else
	{
		// ✅ 鬆開：重置 flag，準備下次觸發
		wasPressed[sensorIndex-1] = false;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	3b01      	subs	r3, #1
 8000a28:	4a05      	ldr	r2, [pc, #20]	@ (8000a40 <checkSwitchStateFSM+0x7c>)
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	54d1      	strb	r1, [r2, r3]
		isTouchSwitchPressed=false;//沒按下
 8000a2e:	2300      	movs	r3, #0
 8000a30:	75fb      	strb	r3, [r7, #23]
	}

	return isTouchSwitchPressed;
 8000a32:	7dfb      	ldrb	r3, [r7, #23]


}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3718      	adds	r7, #24
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20000000 	.word	0x20000000
 8000a40:	200000fc 	.word	0x200000fc

08000a44 <getAllTouchSwitchState>:
            //multiTouchTriggered = false;
        }
}

bool getAllTouchSwitchState(bool isSwitch1Enabled,bool isSwitch2Enabled,bool isSwitch3Enabled,bool isSwitch4Enabled,uint32_t touchSwitchDebounceDuration)
{
 8000a44:	b590      	push	{r4, r7, lr}
 8000a46:	b08b      	sub	sp, #44	@ 0x2c
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4604      	mov	r4, r0
 8000a4c:	4608      	mov	r0, r1
 8000a4e:	4611      	mov	r1, r2
 8000a50:	461a      	mov	r2, r3
 8000a52:	4623      	mov	r3, r4
 8000a54:	71fb      	strb	r3, [r7, #7]
 8000a56:	4603      	mov	r3, r0
 8000a58:	71bb      	strb	r3, [r7, #6]
 8000a5a:	460b      	mov	r3, r1
 8000a5c:	717b      	strb	r3, [r7, #5]
 8000a5e:	4613      	mov	r3, r2
 8000a60:	713b      	strb	r3, [r7, #4]
	bool switchEnabled[NUM_SWITCHES] = { isSwitch1Enabled, isSwitch2Enabled, isSwitch3Enabled, isSwitch4Enabled };
 8000a62:	79fb      	ldrb	r3, [r7, #7]
 8000a64:	753b      	strb	r3, [r7, #20]
 8000a66:	79bb      	ldrb	r3, [r7, #6]
 8000a68:	757b      	strb	r3, [r7, #21]
	bool allTouchSwitchStateResult=false;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	//bool isTouchSwitch1Pressed = true;  // 開關1被按下
	bool isTouchSwitch1Pressed = false; // 開關1沒被按下
 8000a70:	2300      	movs	r3, #0
 8000a72:	76fb      	strb	r3, [r7, #27]
	bool isTouchSwitch2Pressed = false;
 8000a74:	2300      	movs	r3, #0
 8000a76:	76bb      	strb	r3, [r7, #26]
	bool isTouchSwitch3Pressed = false;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	767b      	strb	r3, [r7, #25]
	bool isTouchSwitch4Pressed = false;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	763b      	strb	r3, [r7, #24]
	uint8_t forceSensor2AveragedaValue=0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	75fb      	strb	r3, [r7, #23]
	uint8_t disabledCount = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	75bb      	strb	r3, [r7, #22]
	bool switchPressed[NUM_SWITCHES] = { isTouchSwitch1Pressed,isTouchSwitch2Pressed ,isTouchSwitch3Pressed ,isTouchSwitch4Pressed }; // 儲存各按鈕是否被按下
 8000a88:	7efb      	ldrb	r3, [r7, #27]
 8000a8a:	743b      	strb	r3, [r7, #16]
 8000a8c:	7ebb      	ldrb	r3, [r7, #26]
 8000a8e:	747b      	strb	r3, [r7, #17]
	uint8_t enabledSwitchIndices[NUM_SWITCHES]={0};
 8000a90:	2300      	movs	r3, #0
 8000a92:	81bb      	strh	r3, [r7, #12]
	uint8_t enabledSwitchCount=0;
 8000a94:	2300      	movs	r3, #0
 8000a96:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	uint8_t pressedCount=0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	//記錄哪些SENSOR有啟動
	for(int i=0;i<NUM_SWITCHES;i++)
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	623b      	str	r3, [r7, #32]
 8000aa4:	e016      	b.n	8000ad4 <getAllTouchSwitchState+0x90>
	{
		if(switchEnabled[i])
 8000aa6:	f107 0214 	add.w	r2, r7, #20
 8000aaa:	6a3b      	ldr	r3, [r7, #32]
 8000aac:	4413      	add	r3, r2
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d00c      	beq.n	8000ace <getAllTouchSwitchState+0x8a>
		{
			enabledSwitchIndices[enabledSwitchCount++]=i+1;// // 儲存 switch 編號（從 1 開始）
 8000ab4:	6a3b      	ldr	r3, [r7, #32]
 8000ab6:	b2da      	uxtb	r2, r3
 8000ab8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000abc:	1c59      	adds	r1, r3, #1
 8000abe:	f887 1026 	strb.w	r1, [r7, #38]	@ 0x26
 8000ac2:	3201      	adds	r2, #1
 8000ac4:	b2d2      	uxtb	r2, r2
 8000ac6:	3328      	adds	r3, #40	@ 0x28
 8000ac8:	443b      	add	r3, r7
 8000aca:	f803 2c1c 	strb.w	r2, [r3, #-28]
	for(int i=0;i<NUM_SWITCHES;i++)
 8000ace:	6a3b      	ldr	r3, [r7, #32]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	623b      	str	r3, [r7, #32]
 8000ad4:	6a3b      	ldr	r3, [r7, #32]
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	dde5      	ble.n	8000aa6 <getAllTouchSwitchState+0x62>
	//enabledSwitchIndices = {2, 3, 4} 第2 ,第3和第4個 sensor有啟動
	///

	//FSM 非堵塞

	for(int k=0;k<enabledSwitchCount;k++)
 8000ada:	2300      	movs	r3, #0
 8000adc:	61fb      	str	r3, [r7, #28]
 8000ade:	e029      	b.n	8000b34 <getAllTouchSwitchState+0xf0>
	{
		//for(int i=0;i<2;i++)
		//{
			switchPressed[enabledSwitchIndices[k]-1]=checkSwitchStateFSM(enabledSwitchIndices[k],touchSwitchDebounceDuration);
 8000ae0:	f107 020c 	add.w	r2, r7, #12
 8000ae4:	69fb      	ldr	r3, [r7, #28]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	4618      	mov	r0, r3
 8000aec:	f107 020c 	add.w	r2, r7, #12
 8000af0:	69fb      	ldr	r3, [r7, #28]
 8000af2:	4413      	add	r3, r2
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	1e5c      	subs	r4, r3, #1
 8000af8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8000afa:	f7ff ff63 	bl	80009c4 <checkSwitchStateFSM>
 8000afe:	4603      	mov	r3, r0
 8000b00:	461a      	mov	r2, r3
 8000b02:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8000b06:	443b      	add	r3, r7
 8000b08:	f803 2c18 	strb.w	r2, [r3, #-24]
			if(switchPressed[enabledSwitchIndices[k] - 1])
 8000b0c:	f107 020c 	add.w	r2, r7, #12
 8000b10:	69fb      	ldr	r3, [r7, #28]
 8000b12:	4413      	add	r3, r2
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	3b01      	subs	r3, #1
 8000b18:	3328      	adds	r3, #40	@ 0x28
 8000b1a:	443b      	add	r3, r7
 8000b1c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d004      	beq.n	8000b2e <getAllTouchSwitchState+0xea>
			{
				pressedCount++;
 8000b24:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000b28:	3301      	adds	r3, #1
 8000b2a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	for(int k=0;k<enabledSwitchCount;k++)
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	3301      	adds	r3, #1
 8000b32:	61fb      	str	r3, [r7, #28]
 8000b34:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000b38:	69fa      	ldr	r2, [r7, #28]
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	dbd0      	blt.n	8000ae0 <getAllTouchSwitchState+0x9c>
	}
	*/
	////////////////////////////////////////////////////////////

	//int pressedCount = isTouchSwitch1Pressed + isTouchSwitch2Pressed + isTouchSwitch3Pressed + isTouchSwitch4Pressed;
	if (pressedCount >= 1) {
 8000b3e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d005      	beq.n	8000b52 <getAllTouchSwitchState+0x10e>
	    // 上面再改成2
		allTouchSwitchStateResult=true;
 8000b46:	2301      	movs	r3, #1
 8000b48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		lightOnLED();//1個以上開關按下 就亮燈
 8000b4c:	f7ff fcd2 	bl	80004f4 <lightOnLED>
 8000b50:	e001      	b.n	8000b56 <getAllTouchSwitchState+0x112>
	}
	else
	{
	    // 開關1沒被按下要做的事
		lightOffLED();//沒開關按下
 8000b52:	f7ff fcdb 	bl	800050c <lightOffLED>
	}
	return allTouchSwitchStateResult;
 8000b56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	372c      	adds	r7, #44	@ 0x2c
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd90      	pop	{r4, r7, pc}
	...

08000b64 <HAL_GPIO_EXTI_Callback>:

}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
	if(GPIO_Pin == GPIO_PIN_13){
 8000b6e:	88fb      	ldrh	r3, [r7, #6]
 8000b70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b74:	d10e      	bne.n	8000b94 <HAL_GPIO_EXTI_Callback+0x30>
		ledTrigger = 1;
 8000b76:	4b09      	ldr	r3, [pc, #36]	@ (8000b9c <HAL_GPIO_EXTI_Callback+0x38>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b82:	4807      	ldr	r0, [pc, #28]	@ (8000ba0 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000b84:	f002 fc62 	bl	800344c <HAL_GPIO_WritePin>
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);  // 切換燈狀態
	    //HAL_Delay(200);
	    //將 PB8 Off
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b8e:	4804      	ldr	r0, [pc, #16]	@ (8000ba0 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000b90:	f002 fc5c 	bl	800344c <HAL_GPIO_WritePin>
		//x = (x == 0)? 1:0;
	}
}
 8000b94:	bf00      	nop
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	2000043c 	.word	0x2000043c
 8000ba0:	48000400 	.word	0x48000400

08000ba4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba4:	b5b0      	push	{r4, r5, r7, lr}
 8000ba6:	b0a2      	sub	sp, #136	@ 0x88
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  //char buffer[40]="";
  int arr[10] = {0};  // 全部初始化為 0
 8000baa:	f107 0320 	add.w	r3, r7, #32
 8000bae:	2228      	movs	r2, #40	@ 0x28
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f004 ffe6 	bl	8005b84 <memset>
  int a=sizeof(arr);  // ✅ 這裡是陣列大小  a=40   10*4
 8000bb8:	2328      	movs	r3, #40	@ 0x28
 8000bba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  int value=2;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bc4:	f000 feac 	bl	8001920 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bc8:	f000 f86c 	bl	8000ca4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000bcc:	f000 f8bb 	bl	8000d46 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bd0:	f000 fabe 	bl	8001150 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000bd4:	f000 f8e2 	bl	8000d9c <MX_ADC1_Init>
  MX_I2C1_Init();
 8000bd8:	f000 f9ba 	bl	8000f50 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000bdc:	f000 fa28 	bl	8001030 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000be0:	f000 fa56 	bl	8001090 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000be4:	f000 fa84 	bl	80010f0 <MX_USART3_UART_Init>
  MX_UART4_Init();
 8000be8:	f000 f9f2 	bl	8000fd0 <MX_UART4_Init>
  MX_ADC2_Init();
 8000bec:	f000 f94c 	bl	8000e88 <MX_ADC2_Init>
	 	}
		*/
	   /////////

	  //下方為同時讀取兩種感測器函式
	  ForceSwitchSensorConfig sensorInputConfig =
 8000bf0:	4b2a      	ldr	r3, [pc, #168]	@ (8000c9c <main+0xf8>)
 8000bf2:	f107 040c 	add.w	r4, r7, #12
 8000bf6:	461d      	mov	r5, r3
 8000bf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bfc:	682b      	ldr	r3, [r5, #0]
 8000bfe:	6023      	str	r3, [r4, #0]
	  //if(finalState.sensor2) { /* ... */ }
	  /////////////////////////////////////////////////////

	  //下方為讀取力量感測器函式//
	  // 全部力量感測器回傳值//
	  bool forceSensorFinalState=false;
 8000c00:	2300      	movs	r3, #0
 8000c02:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	  //從flash讀取力量感測器初始參數
	  uint32_t forceSensorPressDuration = 100;
 8000c06:	2364      	movs	r3, #100	@ 0x64
 8000c08:	67bb      	str	r3, [r7, #120]	@ 0x78
	  uint32_t forcePressValueThreshold = 3000; //
 8000c0a:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8000c0e:	677b      	str	r3, [r7, #116]	@ 0x74
	  bool isForceSensor1Enabled=true;
 8000c10:	2301      	movs	r3, #1
 8000c12:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
	  bool isForceSensor2Enabled=true;
 8000c16:	2301      	movs	r3, #1
 8000c18:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72

	  //呼叫讀取所有力量感測器數值
	  uint32_t forceSensorStartTime = HAL_GetTick();
 8000c1c:	f000 fef0 	bl	8001a00 <HAL_GetTick>
 8000c20:	66f8      	str	r0, [r7, #108]	@ 0x6c

	  forceSensorFinalState=getAllForceSensorState(isForceSensor1Enabled,isForceSensor2Enabled,forceSensorPressDuration,forcePressValueThreshold);
 8000c22:	f897 1072 	ldrb.w	r1, [r7, #114]	@ 0x72
 8000c26:	f897 0073 	ldrb.w	r0, [r7, #115]	@ 0x73
 8000c2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000c2c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8000c2e:	f7ff fd69 	bl	8000704 <getAllForceSensorState>
 8000c32:	4603      	mov	r3, r0
 8000c34:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	  uint32_t forceSensorEndTime = HAL_GetTick();
 8000c38:	f000 fee2 	bl	8001a00 <HAL_GetTick>
 8000c3c:	66b8      	str	r0, [r7, #104]	@ 0x68
	  uint32_t forceSensorDuration = forceSensorEndTime - forceSensorStartTime;
 8000c3e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000c40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000c42:	1ad3      	subs	r3, r2, r3
 8000c44:	667b      	str	r3, [r7, #100]	@ 0x64
	  ///////////////////////////////////////////////////////

	  //下方為讀取接觸開關感測器函式//
	  // 從flash讀取Touch switch enabled flags 初始參數
	  bool isTouchSwitch1Enabled = true;
 8000c46:	2301      	movs	r3, #1
 8000c48:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
	  bool isTouchSwitch2Enabled = true;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
	  //bool isTouchSwitch2Enabled = false;
	  //
	  //bool isTouchSwitch3Enabled = false;
	  bool isTouchSwitch3Enabled = true;
 8000c52:	2301      	movs	r3, #1
 8000c54:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
	  bool isTouchSwitch4Enabled = true;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
	  // Touch switch behavior parameters
	  uint32_t touchSwitchDebounceDuration = 100;
 8000c5e:	2364      	movs	r3, #100	@ 0x64
 8000c60:	65fb      	str	r3, [r7, #92]	@ 0x5c
	  uint32_t touchSwitchPressThreshold = 3000;
 8000c62:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8000c66:	65bb      	str	r3, [r7, #88]	@ 0x58
	  // 全部接袃開關回傳值
	  bool touchSwitchFinalState = false;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	  //呼叫讀取所有力量感測器數值
	  uint32_t touchSwitchStartTime = HAL_GetTick();
 8000c6e:	f000 fec7 	bl	8001a00 <HAL_GetTick>
 8000c72:	6538      	str	r0, [r7, #80]	@ 0x50

	  //touchSwitchFinalState = getAllTouchSwitchState(isTouchSwitch1Enabled,isTouchSwitch2Enabled,isTouchSwitch3Enabled,isTouchSwitch4Enabled,touchSwitchDebounceDuration);
	  //

	  uint32_t touchSwitchEndTime = HAL_GetTick();
 8000c74:	f000 fec4 	bl	8001a00 <HAL_GetTick>
 8000c78:	64f8      	str	r0, [r7, #76]	@ 0x4c
	  uint32_t touchSwitchDuration = touchSwitchEndTime - touchSwitchStartTime;
 8000c7a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000c7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000c7e:	1ad3      	subs	r3, r2, r3
 8000c80:	64bb      	str	r3, [r7, #72]	@ 0x48
	  //getAllTouchSwitchState();

	  //transmitDataUart(buffer);

	  //
	  char txData[] = "12345";
 8000c82:	4a07      	ldr	r2, [pc, #28]	@ (8000ca0 <main+0xfc>)
 8000c84:	1d3b      	adds	r3, r7, #4
 8000c86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c8a:	6018      	str	r0, [r3, #0]
 8000c8c:	3304      	adds	r3, #4
 8000c8e:	8019      	strh	r1, [r3, #0]
	      printf("Receive timeout or error\n");
	  }
*/
	  // 啟用力量感測器功能
	  //updateFSRState();   // 呼叫防彈跳判斷
	  HAL_Delay(50);     // 簡短延遲避免過度讀取ADC///////////////////////////////////////////////
 8000c90:	2032      	movs	r0, #50	@ 0x32
 8000c92:	f000 fec1 	bl	8001a18 <HAL_Delay>
  {
 8000c96:	bf00      	nop
 8000c98:	e7aa      	b.n	8000bf0 <main+0x4c>
 8000c9a:	bf00      	nop
 8000c9c:	08006138 	.word	0x08006138
 8000ca0:	0800614c 	.word	0x0800614c

08000ca4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b096      	sub	sp, #88	@ 0x58
 8000ca8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000caa:	f107 0314 	add.w	r3, r7, #20
 8000cae:	2244      	movs	r2, #68	@ 0x44
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f004 ff66 	bl	8005b84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb8:	463b      	mov	r3, r7
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]
 8000cc2:	60da      	str	r2, [r3, #12]
 8000cc4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000cc6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000cca:	f002 fd2f 	bl	800372c <HAL_PWREx_ControlVoltageScaling>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000cd4:	f000 fadc 	bl	8001290 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cdc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ce0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ce2:	2310      	movs	r3, #16
 8000ce4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cea:	2302      	movs	r3, #2
 8000cec:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000cf2:	230a      	movs	r3, #10
 8000cf4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000cf6:	2307      	movs	r3, #7
 8000cf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d02:	f107 0314 	add.w	r3, r7, #20
 8000d06:	4618      	mov	r0, r3
 8000d08:	f002 fd66 	bl	80037d8 <HAL_RCC_OscConfig>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000d12:	f000 fabd 	bl	8001290 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d16:	230f      	movs	r3, #15
 8000d18:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d22:	2300      	movs	r3, #0
 8000d24:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d26:	2300      	movs	r3, #0
 8000d28:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d2a:	463b      	mov	r3, r7
 8000d2c:	2104      	movs	r1, #4
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f003 f92e 	bl	8003f90 <HAL_RCC_ClockConfig>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000d3a:	f000 faa9 	bl	8001290 <Error_Handler>
  }
}
 8000d3e:	bf00      	nop
 8000d40:	3758      	adds	r7, #88	@ 0x58
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b0a2      	sub	sp, #136	@ 0x88
 8000d4a:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d4c:	463b      	mov	r3, r7
 8000d4e:	2288      	movs	r2, #136	@ 0x88
 8000d50:	2100      	movs	r1, #0
 8000d52:	4618      	mov	r0, r3
 8000d54:	f004 ff16 	bl	8005b84 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d58:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000d5c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000d5e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000d62:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000d64:	2302      	movs	r3, #2
 8000d66:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000d6c:	2308      	movs	r3, #8
 8000d6e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000d70:	2307      	movs	r3, #7
 8000d72:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000d74:	2302      	movs	r3, #2
 8000d76:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000d7c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000d80:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d82:	463b      	mov	r3, r7
 8000d84:	4618      	mov	r0, r3
 8000d86:	f003 fb27 	bl	80043d8 <HAL_RCCEx_PeriphCLKConfig>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8000d90:	f000 fa7e 	bl	8001290 <Error_Handler>
  }
}
 8000d94:	bf00      	nop
 8000d96:	3788      	adds	r7, #136	@ 0x88
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08a      	sub	sp, #40	@ 0x28
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000da2:	f107 031c 	add.w	r3, r7, #28
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000dae:	1d3b      	adds	r3, r7, #4
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
 8000dbc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000dbe:	4b2f      	ldr	r3, [pc, #188]	@ (8000e7c <MX_ADC1_Init+0xe0>)
 8000dc0:	4a2f      	ldr	r2, [pc, #188]	@ (8000e80 <MX_ADC1_Init+0xe4>)
 8000dc2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000dc4:	4b2d      	ldr	r3, [pc, #180]	@ (8000e7c <MX_ADC1_Init+0xe0>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dca:	4b2c      	ldr	r3, [pc, #176]	@ (8000e7c <MX_ADC1_Init+0xe0>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dd0:	4b2a      	ldr	r3, [pc, #168]	@ (8000e7c <MX_ADC1_Init+0xe0>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dd6:	4b29      	ldr	r3, [pc, #164]	@ (8000e7c <MX_ADC1_Init+0xe0>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ddc:	4b27      	ldr	r3, [pc, #156]	@ (8000e7c <MX_ADC1_Init+0xe0>)
 8000dde:	2204      	movs	r2, #4
 8000de0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000de2:	4b26      	ldr	r3, [pc, #152]	@ (8000e7c <MX_ADC1_Init+0xe0>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000de8:	4b24      	ldr	r3, [pc, #144]	@ (8000e7c <MX_ADC1_Init+0xe0>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000dee:	4b23      	ldr	r3, [pc, #140]	@ (8000e7c <MX_ADC1_Init+0xe0>)
 8000df0:	2201      	movs	r2, #1
 8000df2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000df4:	4b21      	ldr	r3, [pc, #132]	@ (8000e7c <MX_ADC1_Init+0xe0>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dfc:	4b1f      	ldr	r3, [pc, #124]	@ (8000e7c <MX_ADC1_Init+0xe0>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e02:	4b1e      	ldr	r3, [pc, #120]	@ (8000e7c <MX_ADC1_Init+0xe0>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e08:	4b1c      	ldr	r3, [pc, #112]	@ (8000e7c <MX_ADC1_Init+0xe0>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e10:	4b1a      	ldr	r3, [pc, #104]	@ (8000e7c <MX_ADC1_Init+0xe0>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000e16:	4b19      	ldr	r3, [pc, #100]	@ (8000e7c <MX_ADC1_Init+0xe0>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e1e:	4817      	ldr	r0, [pc, #92]	@ (8000e7c <MX_ADC1_Init+0xe0>)
 8000e20:	f001 f802 	bl	8001e28 <HAL_ADC_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000e2a:	f000 fa31 	bl	8001290 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e32:	f107 031c 	add.w	r3, r7, #28
 8000e36:	4619      	mov	r1, r3
 8000e38:	4810      	ldr	r0, [pc, #64]	@ (8000e7c <MX_ADC1_Init+0xe0>)
 8000e3a:	f001 ff83 	bl	8002d44 <HAL_ADCEx_MultiModeConfigChannel>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000e44:	f000 fa24 	bl	8001290 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e48:	4b0e      	ldr	r3, [pc, #56]	@ (8000e84 <MX_ADC1_Init+0xe8>)
 8000e4a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e4c:	2306      	movs	r3, #6
 8000e4e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e50:	2300      	movs	r3, #0
 8000e52:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e54:	237f      	movs	r3, #127	@ 0x7f
 8000e56:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e58:	2304      	movs	r3, #4
 8000e5a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e60:	1d3b      	adds	r3, r7, #4
 8000e62:	4619      	mov	r1, r3
 8000e64:	4805      	ldr	r0, [pc, #20]	@ (8000e7c <MX_ADC1_Init+0xe0>)
 8000e66:	f001 facf 	bl	8002408 <HAL_ADC_ConfigChannel>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000e70:	f000 fa0e 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e74:	bf00      	nop
 8000e76:	3728      	adds	r7, #40	@ 0x28
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20000100 	.word	0x20000100
 8000e80:	50040000 	.word	0x50040000
 8000e84:	04300002 	.word	0x04300002

08000e88 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e8e:	463b      	mov	r3, r7
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
 8000e9c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000e9e:	4b29      	ldr	r3, [pc, #164]	@ (8000f44 <MX_ADC2_Init+0xbc>)
 8000ea0:	4a29      	ldr	r2, [pc, #164]	@ (8000f48 <MX_ADC2_Init+0xc0>)
 8000ea2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ea4:	4b27      	ldr	r3, [pc, #156]	@ (8000f44 <MX_ADC2_Init+0xbc>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000eaa:	4b26      	ldr	r3, [pc, #152]	@ (8000f44 <MX_ADC2_Init+0xbc>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eb0:	4b24      	ldr	r3, [pc, #144]	@ (8000f44 <MX_ADC2_Init+0xbc>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000eb6:	4b23      	ldr	r3, [pc, #140]	@ (8000f44 <MX_ADC2_Init+0xbc>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ebc:	4b21      	ldr	r3, [pc, #132]	@ (8000f44 <MX_ADC2_Init+0xbc>)
 8000ebe:	2204      	movs	r2, #4
 8000ec0:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000ec2:	4b20      	ldr	r3, [pc, #128]	@ (8000f44 <MX_ADC2_Init+0xbc>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000ec8:	4b1e      	ldr	r3, [pc, #120]	@ (8000f44 <MX_ADC2_Init+0xbc>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000ece:	4b1d      	ldr	r3, [pc, #116]	@ (8000f44 <MX_ADC2_Init+0xbc>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f44 <MX_ADC2_Init+0xbc>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000edc:	4b19      	ldr	r3, [pc, #100]	@ (8000f44 <MX_ADC2_Init+0xbc>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ee2:	4b18      	ldr	r3, [pc, #96]	@ (8000f44 <MX_ADC2_Init+0xbc>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000ee8:	4b16      	ldr	r3, [pc, #88]	@ (8000f44 <MX_ADC2_Init+0xbc>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ef0:	4b14      	ldr	r3, [pc, #80]	@ (8000f44 <MX_ADC2_Init+0xbc>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000ef6:	4b13      	ldr	r3, [pc, #76]	@ (8000f44 <MX_ADC2_Init+0xbc>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000efe:	4811      	ldr	r0, [pc, #68]	@ (8000f44 <MX_ADC2_Init+0xbc>)
 8000f00:	f000 ff92 	bl	8001e28 <HAL_ADC_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000f0a:	f000 f9c1 	bl	8001290 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000f0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f4c <MX_ADC2_Init+0xc4>)
 8000f10:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f12:	2306      	movs	r3, #6
 8000f14:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f16:	2300      	movs	r3, #0
 8000f18:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f1a:	237f      	movs	r3, #127	@ 0x7f
 8000f1c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f1e:	2304      	movs	r3, #4
 8000f20:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f26:	463b      	mov	r3, r7
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4806      	ldr	r0, [pc, #24]	@ (8000f44 <MX_ADC2_Init+0xbc>)
 8000f2c:	f001 fa6c 	bl	8002408 <HAL_ADC_ConfigChannel>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8000f36:	f000 f9ab 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000f3a:	bf00      	nop
 8000f3c:	3718      	adds	r7, #24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000164 	.word	0x20000164
 8000f48:	50040100 	.word	0x50040100
 8000f4c:	08600004 	.word	0x08600004

08000f50 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f54:	4b1b      	ldr	r3, [pc, #108]	@ (8000fc4 <MX_I2C1_Init+0x74>)
 8000f56:	4a1c      	ldr	r2, [pc, #112]	@ (8000fc8 <MX_I2C1_Init+0x78>)
 8000f58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8000f5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fc4 <MX_I2C1_Init+0x74>)
 8000f5c:	4a1b      	ldr	r2, [pc, #108]	@ (8000fcc <MX_I2C1_Init+0x7c>)
 8000f5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f60:	4b18      	ldr	r3, [pc, #96]	@ (8000fc4 <MX_I2C1_Init+0x74>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f66:	4b17      	ldr	r3, [pc, #92]	@ (8000fc4 <MX_I2C1_Init+0x74>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f6c:	4b15      	ldr	r3, [pc, #84]	@ (8000fc4 <MX_I2C1_Init+0x74>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f72:	4b14      	ldr	r3, [pc, #80]	@ (8000fc4 <MX_I2C1_Init+0x74>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f78:	4b12      	ldr	r3, [pc, #72]	@ (8000fc4 <MX_I2C1_Init+0x74>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f7e:	4b11      	ldr	r3, [pc, #68]	@ (8000fc4 <MX_I2C1_Init+0x74>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f84:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc4 <MX_I2C1_Init+0x74>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f8a:	480e      	ldr	r0, [pc, #56]	@ (8000fc4 <MX_I2C1_Init+0x74>)
 8000f8c:	f002 fa8e 	bl	80034ac <HAL_I2C_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f96:	f000 f97b 	bl	8001290 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4809      	ldr	r0, [pc, #36]	@ (8000fc4 <MX_I2C1_Init+0x74>)
 8000f9e:	f002 fb20 	bl	80035e2 <HAL_I2CEx_ConfigAnalogFilter>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000fa8:	f000 f972 	bl	8001290 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000fac:	2100      	movs	r1, #0
 8000fae:	4805      	ldr	r0, [pc, #20]	@ (8000fc4 <MX_I2C1_Init+0x74>)
 8000fb0:	f002 fb62 	bl	8003678 <HAL_I2CEx_ConfigDigitalFilter>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000fba:	f000 f969 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	200001c8 	.word	0x200001c8
 8000fc8:	40005400 	.word	0x40005400
 8000fcc:	10d19ce4 	.word	0x10d19ce4

08000fd0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000fd4:	4b14      	ldr	r3, [pc, #80]	@ (8001028 <MX_UART4_Init+0x58>)
 8000fd6:	4a15      	ldr	r2, [pc, #84]	@ (800102c <MX_UART4_Init+0x5c>)
 8000fd8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000fda:	4b13      	ldr	r3, [pc, #76]	@ (8001028 <MX_UART4_Init+0x58>)
 8000fdc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fe0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000fe2:	4b11      	ldr	r3, [pc, #68]	@ (8001028 <MX_UART4_Init+0x58>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000fe8:	4b0f      	ldr	r3, [pc, #60]	@ (8001028 <MX_UART4_Init+0x58>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000fee:	4b0e      	ldr	r3, [pc, #56]	@ (8001028 <MX_UART4_Init+0x58>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8001028 <MX_UART4_Init+0x58>)
 8000ff6:	220c      	movs	r2, #12
 8000ff8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ffa:	4b0b      	ldr	r3, [pc, #44]	@ (8001028 <MX_UART4_Init+0x58>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001000:	4b09      	ldr	r3, [pc, #36]	@ (8001028 <MX_UART4_Init+0x58>)
 8001002:	2200      	movs	r2, #0
 8001004:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001006:	4b08      	ldr	r3, [pc, #32]	@ (8001028 <MX_UART4_Init+0x58>)
 8001008:	2200      	movs	r2, #0
 800100a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800100c:	4b06      	ldr	r3, [pc, #24]	@ (8001028 <MX_UART4_Init+0x58>)
 800100e:	2200      	movs	r2, #0
 8001010:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001012:	4805      	ldr	r0, [pc, #20]	@ (8001028 <MX_UART4_Init+0x58>)
 8001014:	f003 fe9c 	bl	8004d50 <HAL_UART_Init>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800101e:	f000 f937 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	2000021c 	.word	0x2000021c
 800102c:	40004c00 	.word	0x40004c00

08001030 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001034:	4b14      	ldr	r3, [pc, #80]	@ (8001088 <MX_USART1_UART_Init+0x58>)
 8001036:	4a15      	ldr	r2, [pc, #84]	@ (800108c <MX_USART1_UART_Init+0x5c>)
 8001038:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800103a:	4b13      	ldr	r3, [pc, #76]	@ (8001088 <MX_USART1_UART_Init+0x58>)
 800103c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001040:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001042:	4b11      	ldr	r3, [pc, #68]	@ (8001088 <MX_USART1_UART_Init+0x58>)
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001048:	4b0f      	ldr	r3, [pc, #60]	@ (8001088 <MX_USART1_UART_Init+0x58>)
 800104a:	2200      	movs	r2, #0
 800104c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800104e:	4b0e      	ldr	r3, [pc, #56]	@ (8001088 <MX_USART1_UART_Init+0x58>)
 8001050:	2200      	movs	r2, #0
 8001052:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001054:	4b0c      	ldr	r3, [pc, #48]	@ (8001088 <MX_USART1_UART_Init+0x58>)
 8001056:	220c      	movs	r2, #12
 8001058:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800105a:	4b0b      	ldr	r3, [pc, #44]	@ (8001088 <MX_USART1_UART_Init+0x58>)
 800105c:	2200      	movs	r2, #0
 800105e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001060:	4b09      	ldr	r3, [pc, #36]	@ (8001088 <MX_USART1_UART_Init+0x58>)
 8001062:	2200      	movs	r2, #0
 8001064:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001066:	4b08      	ldr	r3, [pc, #32]	@ (8001088 <MX_USART1_UART_Init+0x58>)
 8001068:	2200      	movs	r2, #0
 800106a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800106c:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <MX_USART1_UART_Init+0x58>)
 800106e:	2200      	movs	r2, #0
 8001070:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001072:	4805      	ldr	r0, [pc, #20]	@ (8001088 <MX_USART1_UART_Init+0x58>)
 8001074:	f003 fe6c 	bl	8004d50 <HAL_UART_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800107e:	f000 f907 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200002a4 	.word	0x200002a4
 800108c:	40013800 	.word	0x40013800

08001090 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001094:	4b14      	ldr	r3, [pc, #80]	@ (80010e8 <MX_USART2_UART_Init+0x58>)
 8001096:	4a15      	ldr	r2, [pc, #84]	@ (80010ec <MX_USART2_UART_Init+0x5c>)
 8001098:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800109a:	4b13      	ldr	r3, [pc, #76]	@ (80010e8 <MX_USART2_UART_Init+0x58>)
 800109c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010a2:	4b11      	ldr	r3, [pc, #68]	@ (80010e8 <MX_USART2_UART_Init+0x58>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010a8:	4b0f      	ldr	r3, [pc, #60]	@ (80010e8 <MX_USART2_UART_Init+0x58>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010ae:	4b0e      	ldr	r3, [pc, #56]	@ (80010e8 <MX_USART2_UART_Init+0x58>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010b4:	4b0c      	ldr	r3, [pc, #48]	@ (80010e8 <MX_USART2_UART_Init+0x58>)
 80010b6:	220c      	movs	r2, #12
 80010b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ba:	4b0b      	ldr	r3, [pc, #44]	@ (80010e8 <MX_USART2_UART_Init+0x58>)
 80010bc:	2200      	movs	r2, #0
 80010be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c0:	4b09      	ldr	r3, [pc, #36]	@ (80010e8 <MX_USART2_UART_Init+0x58>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010c6:	4b08      	ldr	r3, [pc, #32]	@ (80010e8 <MX_USART2_UART_Init+0x58>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010cc:	4b06      	ldr	r3, [pc, #24]	@ (80010e8 <MX_USART2_UART_Init+0x58>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010d2:	4805      	ldr	r0, [pc, #20]	@ (80010e8 <MX_USART2_UART_Init+0x58>)
 80010d4:	f003 fe3c 	bl	8004d50 <HAL_UART_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80010de:	f000 f8d7 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	2000032c 	.word	0x2000032c
 80010ec:	40004400 	.word	0x40004400

080010f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010f4:	4b14      	ldr	r3, [pc, #80]	@ (8001148 <MX_USART3_UART_Init+0x58>)
 80010f6:	4a15      	ldr	r2, [pc, #84]	@ (800114c <MX_USART3_UART_Init+0x5c>)
 80010f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80010fa:	4b13      	ldr	r3, [pc, #76]	@ (8001148 <MX_USART3_UART_Init+0x58>)
 80010fc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001100:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001102:	4b11      	ldr	r3, [pc, #68]	@ (8001148 <MX_USART3_UART_Init+0x58>)
 8001104:	2200      	movs	r2, #0
 8001106:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001108:	4b0f      	ldr	r3, [pc, #60]	@ (8001148 <MX_USART3_UART_Init+0x58>)
 800110a:	2200      	movs	r2, #0
 800110c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800110e:	4b0e      	ldr	r3, [pc, #56]	@ (8001148 <MX_USART3_UART_Init+0x58>)
 8001110:	2200      	movs	r2, #0
 8001112:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001114:	4b0c      	ldr	r3, [pc, #48]	@ (8001148 <MX_USART3_UART_Init+0x58>)
 8001116:	220c      	movs	r2, #12
 8001118:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800111a:	4b0b      	ldr	r3, [pc, #44]	@ (8001148 <MX_USART3_UART_Init+0x58>)
 800111c:	2200      	movs	r2, #0
 800111e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001120:	4b09      	ldr	r3, [pc, #36]	@ (8001148 <MX_USART3_UART_Init+0x58>)
 8001122:	2200      	movs	r2, #0
 8001124:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001126:	4b08      	ldr	r3, [pc, #32]	@ (8001148 <MX_USART3_UART_Init+0x58>)
 8001128:	2200      	movs	r2, #0
 800112a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800112c:	4b06      	ldr	r3, [pc, #24]	@ (8001148 <MX_USART3_UART_Init+0x58>)
 800112e:	2200      	movs	r2, #0
 8001130:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001132:	4805      	ldr	r0, [pc, #20]	@ (8001148 <MX_USART3_UART_Init+0x58>)
 8001134:	f003 fe0c 	bl	8004d50 <HAL_UART_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800113e:	f000 f8a7 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	200003b4 	.word	0x200003b4
 800114c:	40004800 	.word	0x40004800

08001150 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08a      	sub	sp, #40	@ 0x28
 8001154:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001156:	f107 0314 	add.w	r3, r7, #20
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]
 8001164:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001166:	4b47      	ldr	r3, [pc, #284]	@ (8001284 <MX_GPIO_Init+0x134>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116a:	4a46      	ldr	r2, [pc, #280]	@ (8001284 <MX_GPIO_Init+0x134>)
 800116c:	f043 0304 	orr.w	r3, r3, #4
 8001170:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001172:	4b44      	ldr	r3, [pc, #272]	@ (8001284 <MX_GPIO_Init+0x134>)
 8001174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001176:	f003 0304 	and.w	r3, r3, #4
 800117a:	613b      	str	r3, [r7, #16]
 800117c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800117e:	4b41      	ldr	r3, [pc, #260]	@ (8001284 <MX_GPIO_Init+0x134>)
 8001180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001182:	4a40      	ldr	r2, [pc, #256]	@ (8001284 <MX_GPIO_Init+0x134>)
 8001184:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001188:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800118a:	4b3e      	ldr	r3, [pc, #248]	@ (8001284 <MX_GPIO_Init+0x134>)
 800118c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800118e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001196:	4b3b      	ldr	r3, [pc, #236]	@ (8001284 <MX_GPIO_Init+0x134>)
 8001198:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119a:	4a3a      	ldr	r2, [pc, #232]	@ (8001284 <MX_GPIO_Init+0x134>)
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011a2:	4b38      	ldr	r3, [pc, #224]	@ (8001284 <MX_GPIO_Init+0x134>)
 80011a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	60bb      	str	r3, [r7, #8]
 80011ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ae:	4b35      	ldr	r3, [pc, #212]	@ (8001284 <MX_GPIO_Init+0x134>)
 80011b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b2:	4a34      	ldr	r2, [pc, #208]	@ (8001284 <MX_GPIO_Init+0x134>)
 80011b4:	f043 0302 	orr.w	r3, r3, #2
 80011b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ba:	4b32      	ldr	r3, [pc, #200]	@ (8001284 <MX_GPIO_Init+0x134>)
 80011bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2120      	movs	r1, #32
 80011ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011ce:	f002 f93d 	bl	800344c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 80011d2:	2200      	movs	r2, #0
 80011d4:	f244 1181 	movw	r1, #16769	@ 0x4181
 80011d8:	482b      	ldr	r0, [pc, #172]	@ (8001288 <MX_GPIO_Init+0x138>)
 80011da:	f002 f937 	bl	800344c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011e4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4619      	mov	r1, r3
 80011f4:	4825      	ldr	r0, [pc, #148]	@ (800128c <MX_GPIO_Init+0x13c>)
 80011f6:	f001 ff67 	bl	80030c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80011fa:	2320      	movs	r3, #32
 80011fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fe:	2301      	movs	r3, #1
 8001200:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001206:	2300      	movs	r3, #0
 8001208:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800120a:	f107 0314 	add.w	r3, r7, #20
 800120e:	4619      	mov	r1, r3
 8001210:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001214:	f001 ff58 	bl	80030c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_8;
 8001218:	f244 1381 	movw	r3, #16769	@ 0x4181
 800121c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121e:	2301      	movs	r3, #1
 8001220:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001226:	2300      	movs	r3, #0
 8001228:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122a:	f107 0314 	add.w	r3, r7, #20
 800122e:	4619      	mov	r1, r3
 8001230:	4815      	ldr	r0, [pc, #84]	@ (8001288 <MX_GPIO_Init+0x138>)
 8001232:	f001 ff49 	bl	80030c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8001236:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800123a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800123c:	2300      	movs	r3, #0
 800123e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001240:	2301      	movs	r3, #1
 8001242:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001244:	f107 0314 	add.w	r3, r7, #20
 8001248:	4619      	mov	r1, r3
 800124a:	4810      	ldr	r0, [pc, #64]	@ (800128c <MX_GPIO_Init+0x13c>)
 800124c:	f001 ff3c 	bl	80030c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001250:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001254:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001256:	2300      	movs	r3, #0
 8001258:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	4619      	mov	r1, r3
 8001264:	4809      	ldr	r0, [pc, #36]	@ (800128c <MX_GPIO_Init+0x13c>)
 8001266:	f001 ff2f 	bl	80030c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800126a:	2200      	movs	r2, #0
 800126c:	2100      	movs	r1, #0
 800126e:	2028      	movs	r0, #40	@ 0x28
 8001270:	f001 fef3 	bl	800305a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001274:	2028      	movs	r0, #40	@ 0x28
 8001276:	f001 ff0c 	bl	8003092 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800127a:	bf00      	nop
 800127c:	3728      	adds	r7, #40	@ 0x28
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40021000 	.word	0x40021000
 8001288:	48000400 	.word	0x48000400
 800128c:	48000800 	.word	0x48000800

08001290 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001294:	b672      	cpsid	i
}
 8001296:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001298:	bf00      	nop
 800129a:	e7fd      	b.n	8001298 <Error_Handler+0x8>

0800129c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a2:	4b0f      	ldr	r3, [pc, #60]	@ (80012e0 <HAL_MspInit+0x44>)
 80012a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012a6:	4a0e      	ldr	r2, [pc, #56]	@ (80012e0 <HAL_MspInit+0x44>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80012ae:	4b0c      	ldr	r3, [pc, #48]	@ (80012e0 <HAL_MspInit+0x44>)
 80012b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	607b      	str	r3, [r7, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ba:	4b09      	ldr	r3, [pc, #36]	@ (80012e0 <HAL_MspInit+0x44>)
 80012bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012be:	4a08      	ldr	r2, [pc, #32]	@ (80012e0 <HAL_MspInit+0x44>)
 80012c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80012c6:	4b06      	ldr	r3, [pc, #24]	@ (80012e0 <HAL_MspInit+0x44>)
 80012c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ce:	603b      	str	r3, [r7, #0]
 80012d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	40021000 	.word	0x40021000

080012e4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08c      	sub	sp, #48	@ 0x30
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ec:	f107 031c 	add.w	r3, r7, #28
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a33      	ldr	r2, [pc, #204]	@ (80013d0 <HAL_ADC_MspInit+0xec>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d12d      	bne.n	8001362 <HAL_ADC_MspInit+0x7e>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8001306:	4b33      	ldr	r3, [pc, #204]	@ (80013d4 <HAL_ADC_MspInit+0xf0>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	3301      	adds	r3, #1
 800130c:	4a31      	ldr	r2, [pc, #196]	@ (80013d4 <HAL_ADC_MspInit+0xf0>)
 800130e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001310:	4b30      	ldr	r3, [pc, #192]	@ (80013d4 <HAL_ADC_MspInit+0xf0>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d10b      	bne.n	8001330 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001318:	4b2f      	ldr	r3, [pc, #188]	@ (80013d8 <HAL_ADC_MspInit+0xf4>)
 800131a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800131c:	4a2e      	ldr	r2, [pc, #184]	@ (80013d8 <HAL_ADC_MspInit+0xf4>)
 800131e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001322:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001324:	4b2c      	ldr	r3, [pc, #176]	@ (80013d8 <HAL_ADC_MspInit+0xf4>)
 8001326:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001328:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800132c:	61bb      	str	r3, [r7, #24]
 800132e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001330:	4b29      	ldr	r3, [pc, #164]	@ (80013d8 <HAL_ADC_MspInit+0xf4>)
 8001332:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001334:	4a28      	ldr	r2, [pc, #160]	@ (80013d8 <HAL_ADC_MspInit+0xf4>)
 8001336:	f043 0304 	orr.w	r3, r3, #4
 800133a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800133c:	4b26      	ldr	r3, [pc, #152]	@ (80013d8 <HAL_ADC_MspInit+0xf4>)
 800133e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001340:	f003 0304 	and.w	r3, r3, #4
 8001344:	617b      	str	r3, [r7, #20]
 8001346:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001348:	2301      	movs	r3, #1
 800134a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800134c:	230b      	movs	r3, #11
 800134e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001354:	f107 031c 	add.w	r3, r7, #28
 8001358:	4619      	mov	r1, r3
 800135a:	4820      	ldr	r0, [pc, #128]	@ (80013dc <HAL_ADC_MspInit+0xf8>)
 800135c:	f001 feb4 	bl	80030c8 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001360:	e031      	b.n	80013c6 <HAL_ADC_MspInit+0xe2>
  else if(hadc->Instance==ADC2)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a1e      	ldr	r2, [pc, #120]	@ (80013e0 <HAL_ADC_MspInit+0xfc>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d12c      	bne.n	80013c6 <HAL_ADC_MspInit+0xe2>
    HAL_RCC_ADC_CLK_ENABLED++;
 800136c:	4b19      	ldr	r3, [pc, #100]	@ (80013d4 <HAL_ADC_MspInit+0xf0>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	3301      	adds	r3, #1
 8001372:	4a18      	ldr	r2, [pc, #96]	@ (80013d4 <HAL_ADC_MspInit+0xf0>)
 8001374:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001376:	4b17      	ldr	r3, [pc, #92]	@ (80013d4 <HAL_ADC_MspInit+0xf0>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d10b      	bne.n	8001396 <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 800137e:	4b16      	ldr	r3, [pc, #88]	@ (80013d8 <HAL_ADC_MspInit+0xf4>)
 8001380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001382:	4a15      	ldr	r2, [pc, #84]	@ (80013d8 <HAL_ADC_MspInit+0xf4>)
 8001384:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001388:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800138a:	4b13      	ldr	r3, [pc, #76]	@ (80013d8 <HAL_ADC_MspInit+0xf4>)
 800138c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001392:	613b      	str	r3, [r7, #16]
 8001394:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001396:	4b10      	ldr	r3, [pc, #64]	@ (80013d8 <HAL_ADC_MspInit+0xf4>)
 8001398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800139a:	4a0f      	ldr	r2, [pc, #60]	@ (80013d8 <HAL_ADC_MspInit+0xf4>)
 800139c:	f043 0304 	orr.w	r3, r3, #4
 80013a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013a2:	4b0d      	ldr	r3, [pc, #52]	@ (80013d8 <HAL_ADC_MspInit+0xf4>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a6:	f003 0304 	and.w	r3, r3, #4
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80013ae:	2302      	movs	r3, #2
 80013b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80013b2:	230b      	movs	r3, #11
 80013b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ba:	f107 031c 	add.w	r3, r7, #28
 80013be:	4619      	mov	r1, r3
 80013c0:	4806      	ldr	r0, [pc, #24]	@ (80013dc <HAL_ADC_MspInit+0xf8>)
 80013c2:	f001 fe81 	bl	80030c8 <HAL_GPIO_Init>
}
 80013c6:	bf00      	nop
 80013c8:	3730      	adds	r7, #48	@ 0x30
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	50040000 	.word	0x50040000
 80013d4:	20000440 	.word	0x20000440
 80013d8:	40021000 	.word	0x40021000
 80013dc:	48000800 	.word	0x48000800
 80013e0:	50040100 	.word	0x50040100

080013e4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b0ac      	sub	sp, #176	@ 0xb0
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ec:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013fc:	f107 0314 	add.w	r3, r7, #20
 8001400:	2288      	movs	r2, #136	@ 0x88
 8001402:	2100      	movs	r1, #0
 8001404:	4618      	mov	r0, r3
 8001406:	f004 fbbd 	bl	8005b84 <memset>
  if(hi2c->Instance==I2C1)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a21      	ldr	r2, [pc, #132]	@ (8001494 <HAL_I2C_MspInit+0xb0>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d13b      	bne.n	800148c <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001414:	2340      	movs	r3, #64	@ 0x40
 8001416:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001418:	2300      	movs	r3, #0
 800141a:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	4618      	mov	r0, r3
 8001422:	f002 ffd9 	bl	80043d8 <HAL_RCCEx_PeriphCLKConfig>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800142c:	f7ff ff30 	bl	8001290 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001430:	4b19      	ldr	r3, [pc, #100]	@ (8001498 <HAL_I2C_MspInit+0xb4>)
 8001432:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001434:	4a18      	ldr	r2, [pc, #96]	@ (8001498 <HAL_I2C_MspInit+0xb4>)
 8001436:	f043 0302 	orr.w	r3, r3, #2
 800143a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800143c:	4b16      	ldr	r3, [pc, #88]	@ (8001498 <HAL_I2C_MspInit+0xb4>)
 800143e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001440:	f003 0302 	and.w	r3, r3, #2
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001448:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800144c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001450:	2312      	movs	r3, #18
 8001452:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145c:	2303      	movs	r3, #3
 800145e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001462:	2304      	movs	r3, #4
 8001464:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001468:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800146c:	4619      	mov	r1, r3
 800146e:	480b      	ldr	r0, [pc, #44]	@ (800149c <HAL_I2C_MspInit+0xb8>)
 8001470:	f001 fe2a 	bl	80030c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001474:	4b08      	ldr	r3, [pc, #32]	@ (8001498 <HAL_I2C_MspInit+0xb4>)
 8001476:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001478:	4a07      	ldr	r2, [pc, #28]	@ (8001498 <HAL_I2C_MspInit+0xb4>)
 800147a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800147e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001480:	4b05      	ldr	r3, [pc, #20]	@ (8001498 <HAL_I2C_MspInit+0xb4>)
 8001482:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001484:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800148c:	bf00      	nop
 800148e:	37b0      	adds	r7, #176	@ 0xb0
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40005400 	.word	0x40005400
 8001498:	40021000 	.word	0x40021000
 800149c:	48000400 	.word	0x48000400

080014a0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b0b2      	sub	sp, #200	@ 0xc8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a8:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014bc:	2288      	movs	r2, #136	@ 0x88
 80014be:	2100      	movs	r1, #0
 80014c0:	4618      	mov	r0, r3
 80014c2:	f004 fb5f 	bl	8005b84 <memset>
  if(huart->Instance==UART4)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a84      	ldr	r2, [pc, #528]	@ (80016dc <HAL_UART_MspInit+0x23c>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d13c      	bne.n	800154a <HAL_UART_MspInit+0xaa>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80014d0:	2308      	movs	r3, #8
 80014d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80014d4:	2300      	movs	r3, #0
 80014d6:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014dc:	4618      	mov	r0, r3
 80014de:	f002 ff7b 	bl	80043d8 <HAL_RCCEx_PeriphCLKConfig>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014e8:	f7ff fed2 	bl	8001290 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80014ec:	4b7c      	ldr	r3, [pc, #496]	@ (80016e0 <HAL_UART_MspInit+0x240>)
 80014ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014f0:	4a7b      	ldr	r2, [pc, #492]	@ (80016e0 <HAL_UART_MspInit+0x240>)
 80014f2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80014f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80014f8:	4b79      	ldr	r3, [pc, #484]	@ (80016e0 <HAL_UART_MspInit+0x240>)
 80014fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001500:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001502:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001504:	4b76      	ldr	r3, [pc, #472]	@ (80016e0 <HAL_UART_MspInit+0x240>)
 8001506:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001508:	4a75      	ldr	r2, [pc, #468]	@ (80016e0 <HAL_UART_MspInit+0x240>)
 800150a:	f043 0301 	orr.w	r3, r3, #1
 800150e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001510:	4b73      	ldr	r3, [pc, #460]	@ (80016e0 <HAL_UART_MspInit+0x240>)
 8001512:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001514:	f003 0301 	and.w	r3, r3, #1
 8001518:	627b      	str	r3, [r7, #36]	@ 0x24
 800151a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800151c:	2303      	movs	r3, #3
 800151e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001522:	2302      	movs	r3, #2
 8001524:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152e:	2303      	movs	r3, #3
 8001530:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001534:	2308      	movs	r3, #8
 8001536:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153a:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800153e:	4619      	mov	r1, r3
 8001540:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001544:	f001 fdc0 	bl	80030c8 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8001548:	e0c4      	b.n	80016d4 <HAL_UART_MspInit+0x234>
  else if(huart->Instance==USART1)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a65      	ldr	r2, [pc, #404]	@ (80016e4 <HAL_UART_MspInit+0x244>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d13d      	bne.n	80015d0 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001554:	2301      	movs	r3, #1
 8001556:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001558:	2300      	movs	r3, #0
 800155a:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800155c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001560:	4618      	mov	r0, r3
 8001562:	f002 ff39 	bl	80043d8 <HAL_RCCEx_PeriphCLKConfig>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 800156c:	f7ff fe90 	bl	8001290 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001570:	4b5b      	ldr	r3, [pc, #364]	@ (80016e0 <HAL_UART_MspInit+0x240>)
 8001572:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001574:	4a5a      	ldr	r2, [pc, #360]	@ (80016e0 <HAL_UART_MspInit+0x240>)
 8001576:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800157a:	6613      	str	r3, [r2, #96]	@ 0x60
 800157c:	4b58      	ldr	r3, [pc, #352]	@ (80016e0 <HAL_UART_MspInit+0x240>)
 800157e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001580:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001584:	623b      	str	r3, [r7, #32]
 8001586:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001588:	4b55      	ldr	r3, [pc, #340]	@ (80016e0 <HAL_UART_MspInit+0x240>)
 800158a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800158c:	4a54      	ldr	r2, [pc, #336]	@ (80016e0 <HAL_UART_MspInit+0x240>)
 800158e:	f043 0301 	orr.w	r3, r3, #1
 8001592:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001594:	4b52      	ldr	r3, [pc, #328]	@ (80016e0 <HAL_UART_MspInit+0x240>)
 8001596:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001598:	f003 0301 	and.w	r3, r3, #1
 800159c:	61fb      	str	r3, [r7, #28]
 800159e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80015a0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80015a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a8:	2302      	movs	r3, #2
 80015aa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b4:	2303      	movs	r3, #3
 80015b6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015ba:	2307      	movs	r3, #7
 80015bc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c0:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80015c4:	4619      	mov	r1, r3
 80015c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015ca:	f001 fd7d 	bl	80030c8 <HAL_GPIO_Init>
}
 80015ce:	e081      	b.n	80016d4 <HAL_UART_MspInit+0x234>
  else if(huart->Instance==USART2)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a44      	ldr	r2, [pc, #272]	@ (80016e8 <HAL_UART_MspInit+0x248>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d13c      	bne.n	8001654 <HAL_UART_MspInit+0x1b4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80015da:	2302      	movs	r3, #2
 80015dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80015de:	2300      	movs	r3, #0
 80015e0:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015e6:	4618      	mov	r0, r3
 80015e8:	f002 fef6 	bl	80043d8 <HAL_RCCEx_PeriphCLKConfig>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <HAL_UART_MspInit+0x156>
      Error_Handler();
 80015f2:	f7ff fe4d 	bl	8001290 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80015f6:	4b3a      	ldr	r3, [pc, #232]	@ (80016e0 <HAL_UART_MspInit+0x240>)
 80015f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015fa:	4a39      	ldr	r2, [pc, #228]	@ (80016e0 <HAL_UART_MspInit+0x240>)
 80015fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001600:	6593      	str	r3, [r2, #88]	@ 0x58
 8001602:	4b37      	ldr	r3, [pc, #220]	@ (80016e0 <HAL_UART_MspInit+0x240>)
 8001604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800160a:	61bb      	str	r3, [r7, #24]
 800160c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800160e:	4b34      	ldr	r3, [pc, #208]	@ (80016e0 <HAL_UART_MspInit+0x240>)
 8001610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001612:	4a33      	ldr	r2, [pc, #204]	@ (80016e0 <HAL_UART_MspInit+0x240>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800161a:	4b31      	ldr	r3, [pc, #196]	@ (80016e0 <HAL_UART_MspInit+0x240>)
 800161c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	617b      	str	r3, [r7, #20]
 8001624:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001626:	230c      	movs	r3, #12
 8001628:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162c:	2302      	movs	r3, #2
 800162e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001638:	2303      	movs	r3, #3
 800163a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800163e:	2307      	movs	r3, #7
 8001640:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001644:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001648:	4619      	mov	r1, r3
 800164a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800164e:	f001 fd3b 	bl	80030c8 <HAL_GPIO_Init>
}
 8001652:	e03f      	b.n	80016d4 <HAL_UART_MspInit+0x234>
  else if(huart->Instance==USART3)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a24      	ldr	r2, [pc, #144]	@ (80016ec <HAL_UART_MspInit+0x24c>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d13a      	bne.n	80016d4 <HAL_UART_MspInit+0x234>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800165e:	2304      	movs	r3, #4
 8001660:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001662:	2300      	movs	r3, #0
 8001664:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001666:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800166a:	4618      	mov	r0, r3
 800166c:	f002 feb4 	bl	80043d8 <HAL_RCCEx_PeriphCLKConfig>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <HAL_UART_MspInit+0x1da>
      Error_Handler();
 8001676:	f7ff fe0b 	bl	8001290 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800167a:	4b19      	ldr	r3, [pc, #100]	@ (80016e0 <HAL_UART_MspInit+0x240>)
 800167c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800167e:	4a18      	ldr	r2, [pc, #96]	@ (80016e0 <HAL_UART_MspInit+0x240>)
 8001680:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001684:	6593      	str	r3, [r2, #88]	@ 0x58
 8001686:	4b16      	ldr	r3, [pc, #88]	@ (80016e0 <HAL_UART_MspInit+0x240>)
 8001688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800168a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800168e:	613b      	str	r3, [r7, #16]
 8001690:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001692:	4b13      	ldr	r3, [pc, #76]	@ (80016e0 <HAL_UART_MspInit+0x240>)
 8001694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001696:	4a12      	ldr	r2, [pc, #72]	@ (80016e0 <HAL_UART_MspInit+0x240>)
 8001698:	f043 0304 	orr.w	r3, r3, #4
 800169c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800169e:	4b10      	ldr	r3, [pc, #64]	@ (80016e0 <HAL_UART_MspInit+0x240>)
 80016a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016a2:	f003 0304 	and.w	r3, r3, #4
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80016aa:	2330      	movs	r3, #48	@ 0x30
 80016ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b0:	2302      	movs	r3, #2
 80016b2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016bc:	2303      	movs	r3, #3
 80016be:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016c2:	2307      	movs	r3, #7
 80016c4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016c8:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80016cc:	4619      	mov	r1, r3
 80016ce:	4808      	ldr	r0, [pc, #32]	@ (80016f0 <HAL_UART_MspInit+0x250>)
 80016d0:	f001 fcfa 	bl	80030c8 <HAL_GPIO_Init>
}
 80016d4:	bf00      	nop
 80016d6:	37c8      	adds	r7, #200	@ 0xc8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40004c00 	.word	0x40004c00
 80016e0:	40021000 	.word	0x40021000
 80016e4:	40013800 	.word	0x40013800
 80016e8:	40004400 	.word	0x40004400
 80016ec:	40004800 	.word	0x40004800
 80016f0:	48000800 	.word	0x48000800

080016f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016f8:	bf00      	nop
 80016fa:	e7fd      	b.n	80016f8 <NMI_Handler+0x4>

080016fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001700:	bf00      	nop
 8001702:	e7fd      	b.n	8001700 <HardFault_Handler+0x4>

08001704 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001708:	bf00      	nop
 800170a:	e7fd      	b.n	8001708 <MemManage_Handler+0x4>

0800170c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001710:	bf00      	nop
 8001712:	e7fd      	b.n	8001710 <BusFault_Handler+0x4>

08001714 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001718:	bf00      	nop
 800171a:	e7fd      	b.n	8001718 <UsageFault_Handler+0x4>

0800171c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr

08001746 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800174a:	f000 f945 	bl	80019d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}

08001752 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001756:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800175a:	f001 fe8f 	bl	800347c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}

08001762 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b086      	sub	sp, #24
 8001766:	af00      	add	r7, sp, #0
 8001768:	60f8      	str	r0, [r7, #12]
 800176a:	60b9      	str	r1, [r7, #8]
 800176c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800176e:	2300      	movs	r3, #0
 8001770:	617b      	str	r3, [r7, #20]
 8001772:	e00a      	b.n	800178a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001774:	f3af 8000 	nop.w
 8001778:	4601      	mov	r1, r0
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	1c5a      	adds	r2, r3, #1
 800177e:	60ba      	str	r2, [r7, #8]
 8001780:	b2ca      	uxtb	r2, r1
 8001782:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	3301      	adds	r3, #1
 8001788:	617b      	str	r3, [r7, #20]
 800178a:	697a      	ldr	r2, [r7, #20]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	429a      	cmp	r2, r3
 8001790:	dbf0      	blt.n	8001774 <_read+0x12>
  }

  return len;
 8001792:	687b      	ldr	r3, [r7, #4]
}
 8001794:	4618      	mov	r0, r3
 8001796:	3718      	adds	r7, #24
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]
 80017ac:	e009      	b.n	80017c2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	1c5a      	adds	r2, r3, #1
 80017b2:	60ba      	str	r2, [r7, #8]
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	3301      	adds	r3, #1
 80017c0:	617b      	str	r3, [r7, #20]
 80017c2:	697a      	ldr	r2, [r7, #20]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	dbf1      	blt.n	80017ae <_write+0x12>
  }
  return len;
 80017ca:	687b      	ldr	r3, [r7, #4]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3718      	adds	r7, #24
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <_close>:

int _close(int file)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017fc:	605a      	str	r2, [r3, #4]
  return 0;
 80017fe:	2300      	movs	r3, #0
}
 8001800:	4618      	mov	r0, r3
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <_isatty>:

int _isatty(int file)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001814:	2301      	movs	r3, #1
}
 8001816:	4618      	mov	r0, r3
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001822:	b480      	push	{r7}
 8001824:	b085      	sub	sp, #20
 8001826:	af00      	add	r7, sp, #0
 8001828:	60f8      	str	r0, [r7, #12]
 800182a:	60b9      	str	r1, [r7, #8]
 800182c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800182e:	2300      	movs	r3, #0
}
 8001830:	4618      	mov	r0, r3
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001844:	4a14      	ldr	r2, [pc, #80]	@ (8001898 <_sbrk+0x5c>)
 8001846:	4b15      	ldr	r3, [pc, #84]	@ (800189c <_sbrk+0x60>)
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001850:	4b13      	ldr	r3, [pc, #76]	@ (80018a0 <_sbrk+0x64>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d102      	bne.n	800185e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001858:	4b11      	ldr	r3, [pc, #68]	@ (80018a0 <_sbrk+0x64>)
 800185a:	4a12      	ldr	r2, [pc, #72]	@ (80018a4 <_sbrk+0x68>)
 800185c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800185e:	4b10      	ldr	r3, [pc, #64]	@ (80018a0 <_sbrk+0x64>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4413      	add	r3, r2
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	429a      	cmp	r2, r3
 800186a:	d207      	bcs.n	800187c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800186c:	f004 f9d8 	bl	8005c20 <__errno>
 8001870:	4603      	mov	r3, r0
 8001872:	220c      	movs	r2, #12
 8001874:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001876:	f04f 33ff 	mov.w	r3, #4294967295
 800187a:	e009      	b.n	8001890 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800187c:	4b08      	ldr	r3, [pc, #32]	@ (80018a0 <_sbrk+0x64>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001882:	4b07      	ldr	r3, [pc, #28]	@ (80018a0 <_sbrk+0x64>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4413      	add	r3, r2
 800188a:	4a05      	ldr	r2, [pc, #20]	@ (80018a0 <_sbrk+0x64>)
 800188c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800188e:	68fb      	ldr	r3, [r7, #12]
}
 8001890:	4618      	mov	r0, r3
 8001892:	3718      	adds	r7, #24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20018000 	.word	0x20018000
 800189c:	00000400 	.word	0x00000400
 80018a0:	20000444 	.word	0x20000444
 80018a4:	20000598 	.word	0x20000598

080018a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80018ac:	4b06      	ldr	r3, [pc, #24]	@ (80018c8 <SystemInit+0x20>)
 80018ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018b2:	4a05      	ldr	r2, [pc, #20]	@ (80018c8 <SystemInit+0x20>)
 80018b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80018cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001904 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018d0:	f7ff ffea 	bl	80018a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018d4:	480c      	ldr	r0, [pc, #48]	@ (8001908 <LoopForever+0x6>)
  ldr r1, =_edata
 80018d6:	490d      	ldr	r1, [pc, #52]	@ (800190c <LoopForever+0xa>)
  ldr r2, =_sidata
 80018d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001910 <LoopForever+0xe>)
  movs r3, #0
 80018da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018dc:	e002      	b.n	80018e4 <LoopCopyDataInit>

080018de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018e2:	3304      	adds	r3, #4

080018e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018e8:	d3f9      	bcc.n	80018de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001914 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018ec:	4c0a      	ldr	r4, [pc, #40]	@ (8001918 <LoopForever+0x16>)
  movs r3, #0
 80018ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018f0:	e001      	b.n	80018f6 <LoopFillZerobss>

080018f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018f4:	3204      	adds	r2, #4

080018f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018f8:	d3fb      	bcc.n	80018f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018fa:	f004 f997 	bl	8005c2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018fe:	f7ff f951 	bl	8000ba4 <main>

08001902 <LoopForever>:

LoopForever:
    b LoopForever
 8001902:	e7fe      	b.n	8001902 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001904:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001908:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800190c:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8001910:	080061ac 	.word	0x080061ac
  ldr r2, =_sbss
 8001914:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8001918:	20000598 	.word	0x20000598

0800191c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800191c:	e7fe      	b.n	800191c <ADC1_2_IRQHandler>
	...

08001920 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001926:	2300      	movs	r3, #0
 8001928:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800192a:	4b0c      	ldr	r3, [pc, #48]	@ (800195c <HAL_Init+0x3c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a0b      	ldr	r2, [pc, #44]	@ (800195c <HAL_Init+0x3c>)
 8001930:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001934:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001936:	2003      	movs	r0, #3
 8001938:	f001 fb84 	bl	8003044 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800193c:	2000      	movs	r0, #0
 800193e:	f000 f80f 	bl	8001960 <HAL_InitTick>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d002      	beq.n	800194e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	71fb      	strb	r3, [r7, #7]
 800194c:	e001      	b.n	8001952 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800194e:	f7ff fca5 	bl	800129c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001952:	79fb      	ldrb	r3, [r7, #7]
}
 8001954:	4618      	mov	r0, r3
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40022000 	.word	0x40022000

08001960 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001968:	2300      	movs	r3, #0
 800196a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800196c:	4b17      	ldr	r3, [pc, #92]	@ (80019cc <HAL_InitTick+0x6c>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d023      	beq.n	80019bc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001974:	4b16      	ldr	r3, [pc, #88]	@ (80019d0 <HAL_InitTick+0x70>)
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	4b14      	ldr	r3, [pc, #80]	@ (80019cc <HAL_InitTick+0x6c>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	4619      	mov	r1, r3
 800197e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001982:	fbb3 f3f1 	udiv	r3, r3, r1
 8001986:	fbb2 f3f3 	udiv	r3, r2, r3
 800198a:	4618      	mov	r0, r3
 800198c:	f001 fb8f 	bl	80030ae <HAL_SYSTICK_Config>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d10f      	bne.n	80019b6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2b0f      	cmp	r3, #15
 800199a:	d809      	bhi.n	80019b0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800199c:	2200      	movs	r2, #0
 800199e:	6879      	ldr	r1, [r7, #4]
 80019a0:	f04f 30ff 	mov.w	r0, #4294967295
 80019a4:	f001 fb59 	bl	800305a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019a8:	4a0a      	ldr	r2, [pc, #40]	@ (80019d4 <HAL_InitTick+0x74>)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6013      	str	r3, [r2, #0]
 80019ae:	e007      	b.n	80019c0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	73fb      	strb	r3, [r7, #15]
 80019b4:	e004      	b.n	80019c0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	73fb      	strb	r3, [r7, #15]
 80019ba:	e001      	b.n	80019c0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000040 	.word	0x20000040
 80019d0:	20000038 	.word	0x20000038
 80019d4:	2000003c 	.word	0x2000003c

080019d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019dc:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <HAL_IncTick+0x20>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	461a      	mov	r2, r3
 80019e2:	4b06      	ldr	r3, [pc, #24]	@ (80019fc <HAL_IncTick+0x24>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4413      	add	r3, r2
 80019e8:	4a04      	ldr	r2, [pc, #16]	@ (80019fc <HAL_IncTick+0x24>)
 80019ea:	6013      	str	r3, [r2, #0]
}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	20000040 	.word	0x20000040
 80019fc:	20000448 	.word	0x20000448

08001a00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  return uwTick;
 8001a04:	4b03      	ldr	r3, [pc, #12]	@ (8001a14 <HAL_GetTick+0x14>)
 8001a06:	681b      	ldr	r3, [r3, #0]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	20000448 	.word	0x20000448

08001a18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a20:	f7ff ffee 	bl	8001a00 <HAL_GetTick>
 8001a24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a30:	d005      	beq.n	8001a3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001a32:	4b0a      	ldr	r3, [pc, #40]	@ (8001a5c <HAL_Delay+0x44>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	461a      	mov	r2, r3
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a3e:	bf00      	nop
 8001a40:	f7ff ffde 	bl	8001a00 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	68fa      	ldr	r2, [r7, #12]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d8f7      	bhi.n	8001a40 <HAL_Delay+0x28>
  {
  }
}
 8001a50:	bf00      	nop
 8001a52:	bf00      	nop
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000040 	.word	0x20000040

08001a60 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	431a      	orrs	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	609a      	str	r2, [r3, #8]
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b083      	sub	sp, #12
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
 8001a8e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b087      	sub	sp, #28
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
 8001ad4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	3360      	adds	r3, #96	@ 0x60
 8001ada:	461a      	mov	r2, r3
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	4b08      	ldr	r3, [pc, #32]	@ (8001b0c <LL_ADC_SetOffset+0x44>)
 8001aea:	4013      	ands	r3, r2
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001af2:	683a      	ldr	r2, [r7, #0]
 8001af4:	430a      	orrs	r2, r1
 8001af6:	4313      	orrs	r3, r2
 8001af8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001b00:	bf00      	nop
 8001b02:	371c      	adds	r7, #28
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	03fff000 	.word	0x03fff000

08001b10 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	3360      	adds	r3, #96	@ 0x60
 8001b1e:	461a      	mov	r2, r3
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	4413      	add	r3, r2
 8001b26:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b087      	sub	sp, #28
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	3360      	adds	r3, #96	@ 0x60
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	4413      	add	r3, r2
 8001b54:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	431a      	orrs	r2, r3
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001b66:	bf00      	nop
 8001b68:	371c      	adds	r7, #28
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b083      	sub	sp, #12
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001b86:	2301      	movs	r3, #1
 8001b88:	e000      	b.n	8001b8c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b087      	sub	sp, #28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	3330      	adds	r3, #48	@ 0x30
 8001ba8:	461a      	mov	r2, r3
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	0a1b      	lsrs	r3, r3, #8
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	f003 030c 	and.w	r3, r3, #12
 8001bb4:	4413      	add	r3, r2
 8001bb6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	f003 031f 	and.w	r3, r3, #31
 8001bc2:	211f      	movs	r1, #31
 8001bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	401a      	ands	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	0e9b      	lsrs	r3, r3, #26
 8001bd0:	f003 011f 	and.w	r1, r3, #31
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	f003 031f 	and.w	r3, r3, #31
 8001bda:	fa01 f303 	lsl.w	r3, r1, r3
 8001bde:	431a      	orrs	r2, r3
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001be4:	bf00      	nop
 8001be6:	371c      	adds	r7, #28
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b087      	sub	sp, #28
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	3314      	adds	r3, #20
 8001c00:	461a      	mov	r2, r3
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	0e5b      	lsrs	r3, r3, #25
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	4413      	add	r3, r2
 8001c0e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	0d1b      	lsrs	r3, r3, #20
 8001c18:	f003 031f 	and.w	r3, r3, #31
 8001c1c:	2107      	movs	r1, #7
 8001c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c22:	43db      	mvns	r3, r3
 8001c24:	401a      	ands	r2, r3
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	0d1b      	lsrs	r3, r3, #20
 8001c2a:	f003 031f 	and.w	r3, r3, #31
 8001c2e:	6879      	ldr	r1, [r7, #4]
 8001c30:	fa01 f303 	lsl.w	r3, r1, r3
 8001c34:	431a      	orrs	r2, r3
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001c3a:	bf00      	nop
 8001c3c:	371c      	adds	r7, #28
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
	...

08001c48 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c60:	43db      	mvns	r3, r3
 8001c62:	401a      	ands	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f003 0318 	and.w	r3, r3, #24
 8001c6a:	4908      	ldr	r1, [pc, #32]	@ (8001c8c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001c6c:	40d9      	lsrs	r1, r3
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	400b      	ands	r3, r1
 8001c72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c76:	431a      	orrs	r2, r3
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001c7e:	bf00      	nop
 8001c80:	3714      	adds	r7, #20
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	0007ffff 	.word	0x0007ffff

08001c90 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 031f 	and.w	r3, r3, #31
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001cd8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	6093      	str	r3, [r2, #8]
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001cfc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001d00:	d101      	bne.n	8001d06 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d02:	2301      	movs	r3, #1
 8001d04:	e000      	b.n	8001d08 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001d24:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d28:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001d50:	d101      	bne.n	8001d56 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d52:	2301      	movs	r3, #1
 8001d54:	e000      	b.n	8001d58 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d74:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d78:	f043 0201 	orr.w	r2, r3, #1
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d101      	bne.n	8001da4 <LL_ADC_IsEnabled+0x18>
 8001da0:	2301      	movs	r3, #1
 8001da2:	e000      	b.n	8001da6 <LL_ADC_IsEnabled+0x1a>
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001db2:	b480      	push	{r7}
 8001db4:	b083      	sub	sp, #12
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001dc2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001dc6:	f043 0204 	orr.w	r2, r3, #4
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b083      	sub	sp, #12
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f003 0304 	and.w	r3, r3, #4
 8001dea:	2b04      	cmp	r3, #4
 8001dec:	d101      	bne.n	8001df2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001dee:	2301      	movs	r3, #1
 8001df0:	e000      	b.n	8001df4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f003 0308 	and.w	r3, r3, #8
 8001e10:	2b08      	cmp	r3, #8
 8001e12:	d101      	bne.n	8001e18 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e14:	2301      	movs	r3, #1
 8001e16:	e000      	b.n	8001e1a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
	...

08001e28 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e28:	b590      	push	{r4, r7, lr}
 8001e2a:	b089      	sub	sp, #36	@ 0x24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e30:	2300      	movs	r3, #0
 8001e32:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001e34:	2300      	movs	r3, #0
 8001e36:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e130      	b.n	80020a4 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d109      	bne.n	8001e64 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f7ff fa47 	bl	80012e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff ff3f 	bl	8001cec <LL_ADC_IsDeepPowerDownEnabled>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d004      	beq.n	8001e7e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff ff25 	bl	8001cc8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff ff5a 	bl	8001d3c <LL_ADC_IsInternalRegulatorEnabled>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d115      	bne.n	8001eba <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff ff3e 	bl	8001d14 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e98:	4b84      	ldr	r3, [pc, #528]	@ (80020ac <HAL_ADC_Init+0x284>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	099b      	lsrs	r3, r3, #6
 8001e9e:	4a84      	ldr	r2, [pc, #528]	@ (80020b0 <HAL_ADC_Init+0x288>)
 8001ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea4:	099b      	lsrs	r3, r3, #6
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001eac:	e002      	b.n	8001eb4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1f9      	bne.n	8001eae <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff ff3c 	bl	8001d3c <LL_ADC_IsInternalRegulatorEnabled>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d10d      	bne.n	8001ee6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ece:	f043 0210 	orr.w	r2, r3, #16
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eda:	f043 0201 	orr.w	r2, r3, #1
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff ff75 	bl	8001dda <LL_ADC_REG_IsConversionOngoing>
 8001ef0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ef6:	f003 0310 	and.w	r3, r3, #16
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f040 80c9 	bne.w	8002092 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f040 80c5 	bne.w	8002092 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f0c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001f10:	f043 0202 	orr.w	r2, r3, #2
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff ff35 	bl	8001d8c <LL_ADC_IsEnabled>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d115      	bne.n	8001f54 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f28:	4862      	ldr	r0, [pc, #392]	@ (80020b4 <HAL_ADC_Init+0x28c>)
 8001f2a:	f7ff ff2f 	bl	8001d8c <LL_ADC_IsEnabled>
 8001f2e:	4604      	mov	r4, r0
 8001f30:	4861      	ldr	r0, [pc, #388]	@ (80020b8 <HAL_ADC_Init+0x290>)
 8001f32:	f7ff ff2b 	bl	8001d8c <LL_ADC_IsEnabled>
 8001f36:	4603      	mov	r3, r0
 8001f38:	431c      	orrs	r4, r3
 8001f3a:	4860      	ldr	r0, [pc, #384]	@ (80020bc <HAL_ADC_Init+0x294>)
 8001f3c:	f7ff ff26 	bl	8001d8c <LL_ADC_IsEnabled>
 8001f40:	4603      	mov	r3, r0
 8001f42:	4323      	orrs	r3, r4
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d105      	bne.n	8001f54 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	485c      	ldr	r0, [pc, #368]	@ (80020c0 <HAL_ADC_Init+0x298>)
 8001f50:	f7ff fd86 	bl	8001a60 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	7e5b      	ldrb	r3, [r3, #25]
 8001f58:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f5e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001f64:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001f6a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f72:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f74:	4313      	orrs	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d106      	bne.n	8001f90 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f86:	3b01      	subs	r3, #1
 8001f88:	045b      	lsls	r3, r3, #17
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d009      	beq.n	8001fac <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f9c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fa4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68da      	ldr	r2, [r3, #12]
 8001fb2:	4b44      	ldr	r3, [pc, #272]	@ (80020c4 <HAL_ADC_Init+0x29c>)
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	6812      	ldr	r2, [r2, #0]
 8001fba:	69b9      	ldr	r1, [r7, #24]
 8001fbc:	430b      	orrs	r3, r1
 8001fbe:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff ff1b 	bl	8001e00 <LL_ADC_INJ_IsConversionOngoing>
 8001fca:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d13d      	bne.n	800204e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d13a      	bne.n	800204e <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001fdc:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001fe4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001ff4:	f023 0302 	bic.w	r3, r3, #2
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	6812      	ldr	r2, [r2, #0]
 8001ffc:	69b9      	ldr	r1, [r7, #24]
 8001ffe:	430b      	orrs	r3, r1
 8002000:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002008:	2b01      	cmp	r3, #1
 800200a:	d118      	bne.n	800203e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002016:	f023 0304 	bic.w	r3, r3, #4
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002022:	4311      	orrs	r1, r2
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002028:	4311      	orrs	r1, r2
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800202e:	430a      	orrs	r2, r1
 8002030:	431a      	orrs	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f042 0201 	orr.w	r2, r2, #1
 800203a:	611a      	str	r2, [r3, #16]
 800203c:	e007      	b.n	800204e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	691a      	ldr	r2, [r3, #16]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f022 0201 	bic.w	r2, r2, #1
 800204c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d10c      	bne.n	8002070 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205c:	f023 010f 	bic.w	r1, r3, #15
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69db      	ldr	r3, [r3, #28]
 8002064:	1e5a      	subs	r2, r3, #1
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	430a      	orrs	r2, r1
 800206c:	631a      	str	r2, [r3, #48]	@ 0x30
 800206e:	e007      	b.n	8002080 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f022 020f 	bic.w	r2, r2, #15
 800207e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002084:	f023 0303 	bic.w	r3, r3, #3
 8002088:	f043 0201 	orr.w	r2, r3, #1
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002090:	e007      	b.n	80020a2 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002096:	f043 0210 	orr.w	r2, r3, #16
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80020a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3724      	adds	r7, #36	@ 0x24
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd90      	pop	{r4, r7, pc}
 80020ac:	20000038 	.word	0x20000038
 80020b0:	053e2d63 	.word	0x053e2d63
 80020b4:	50040000 	.word	0x50040000
 80020b8:	50040100 	.word	0x50040100
 80020bc:	50040200 	.word	0x50040200
 80020c0:	50040300 	.word	0x50040300
 80020c4:	fff0c007 	.word	0xfff0c007

080020c8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020d0:	4857      	ldr	r0, [pc, #348]	@ (8002230 <HAL_ADC_Start+0x168>)
 80020d2:	f7ff fddd 	bl	8001c90 <LL_ADC_GetMultimode>
 80020d6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff fe7c 	bl	8001dda <LL_ADC_REG_IsConversionOngoing>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f040 809c 	bne.w	8002222 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d101      	bne.n	80020f8 <HAL_ADC_Start+0x30>
 80020f4:	2302      	movs	r3, #2
 80020f6:	e097      	b.n	8002228 <HAL_ADC_Start+0x160>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f000 fd73 	bl	8002bec <ADC_Enable>
 8002106:	4603      	mov	r3, r0
 8002108:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800210a:	7dfb      	ldrb	r3, [r7, #23]
 800210c:	2b00      	cmp	r3, #0
 800210e:	f040 8083 	bne.w	8002218 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002116:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800211a:	f023 0301 	bic.w	r3, r3, #1
 800211e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a42      	ldr	r2, [pc, #264]	@ (8002234 <HAL_ADC_Start+0x16c>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d002      	beq.n	8002136 <HAL_ADC_Start+0x6e>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	e000      	b.n	8002138 <HAL_ADC_Start+0x70>
 8002136:	4b40      	ldr	r3, [pc, #256]	@ (8002238 <HAL_ADC_Start+0x170>)
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	6812      	ldr	r2, [r2, #0]
 800213c:	4293      	cmp	r3, r2
 800213e:	d002      	beq.n	8002146 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d105      	bne.n	8002152 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800214a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002156:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800215a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800215e:	d106      	bne.n	800216e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002164:	f023 0206 	bic.w	r2, r3, #6
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	659a      	str	r2, [r3, #88]	@ 0x58
 800216c:	e002      	b.n	8002174 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	221c      	movs	r2, #28
 800217a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a2a      	ldr	r2, [pc, #168]	@ (8002234 <HAL_ADC_Start+0x16c>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d002      	beq.n	8002194 <HAL_ADC_Start+0xcc>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	e000      	b.n	8002196 <HAL_ADC_Start+0xce>
 8002194:	4b28      	ldr	r3, [pc, #160]	@ (8002238 <HAL_ADC_Start+0x170>)
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	6812      	ldr	r2, [r2, #0]
 800219a:	4293      	cmp	r3, r2
 800219c:	d008      	beq.n	80021b0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d005      	beq.n	80021b0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	2b05      	cmp	r3, #5
 80021a8:	d002      	beq.n	80021b0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	2b09      	cmp	r3, #9
 80021ae:	d114      	bne.n	80021da <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d007      	beq.n	80021ce <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021c2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80021c6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff fded 	bl	8001db2 <LL_ADC_REG_StartConversion>
 80021d8:	e025      	b.n	8002226 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021de:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a12      	ldr	r2, [pc, #72]	@ (8002234 <HAL_ADC_Start+0x16c>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d002      	beq.n	80021f6 <HAL_ADC_Start+0x12e>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	e000      	b.n	80021f8 <HAL_ADC_Start+0x130>
 80021f6:	4b10      	ldr	r3, [pc, #64]	@ (8002238 <HAL_ADC_Start+0x170>)
 80021f8:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00f      	beq.n	8002226 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800220a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800220e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	655a      	str	r2, [r3, #84]	@ 0x54
 8002216:	e006      	b.n	8002226 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002220:	e001      	b.n	8002226 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002222:	2302      	movs	r3, #2
 8002224:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002226:	7dfb      	ldrb	r3, [r7, #23]
}
 8002228:	4618      	mov	r0, r3
 800222a:	3718      	adds	r7, #24
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	50040300 	.word	0x50040300
 8002234:	50040100 	.word	0x50040100
 8002238:	50040000 	.word	0x50040000

0800223c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b088      	sub	sp, #32
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002246:	4866      	ldr	r0, [pc, #408]	@ (80023e0 <HAL_ADC_PollForConversion+0x1a4>)
 8002248:	f7ff fd22 	bl	8001c90 <LL_ADC_GetMultimode>
 800224c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	2b08      	cmp	r3, #8
 8002254:	d102      	bne.n	800225c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002256:	2308      	movs	r3, #8
 8002258:	61fb      	str	r3, [r7, #28]
 800225a:	e02a      	b.n	80022b2 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d005      	beq.n	800226e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	2b05      	cmp	r3, #5
 8002266:	d002      	beq.n	800226e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	2b09      	cmp	r3, #9
 800226c:	d111      	bne.n	8002292 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	2b00      	cmp	r3, #0
 800227a:	d007      	beq.n	800228c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002280:	f043 0220 	orr.w	r2, r3, #32
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e0a4      	b.n	80023d6 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800228c:	2304      	movs	r3, #4
 800228e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002290:	e00f      	b.n	80022b2 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002292:	4853      	ldr	r0, [pc, #332]	@ (80023e0 <HAL_ADC_PollForConversion+0x1a4>)
 8002294:	f7ff fd0a 	bl	8001cac <LL_ADC_GetMultiDMATransfer>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d007      	beq.n	80022ae <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022a2:	f043 0220 	orr.w	r2, r3, #32
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e093      	b.n	80023d6 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80022ae:	2304      	movs	r3, #4
 80022b0:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80022b2:	f7ff fba5 	bl	8001a00 <HAL_GetTick>
 80022b6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80022b8:	e021      	b.n	80022fe <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c0:	d01d      	beq.n	80022fe <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80022c2:	f7ff fb9d 	bl	8001a00 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d302      	bcc.n	80022d8 <HAL_ADC_PollForConversion+0x9c>
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d112      	bne.n	80022fe <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	4013      	ands	r3, r2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10b      	bne.n	80022fe <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022ea:	f043 0204 	orr.w	r2, r3, #4
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e06b      	b.n	80023d6 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	4013      	ands	r3, r2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d0d6      	beq.n	80022ba <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002310:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff fc28 	bl	8001b72 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d01c      	beq.n	8002362 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	7e5b      	ldrb	r3, [r3, #25]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d118      	bne.n	8002362 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0308 	and.w	r3, r3, #8
 800233a:	2b08      	cmp	r3, #8
 800233c:	d111      	bne.n	8002362 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002342:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800234e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d105      	bne.n	8002362 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800235a:	f043 0201 	orr.w	r2, r3, #1
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a1f      	ldr	r2, [pc, #124]	@ (80023e4 <HAL_ADC_PollForConversion+0x1a8>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d002      	beq.n	8002372 <HAL_ADC_PollForConversion+0x136>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	e000      	b.n	8002374 <HAL_ADC_PollForConversion+0x138>
 8002372:	4b1d      	ldr	r3, [pc, #116]	@ (80023e8 <HAL_ADC_PollForConversion+0x1ac>)
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	6812      	ldr	r2, [r2, #0]
 8002378:	4293      	cmp	r3, r2
 800237a:	d008      	beq.n	800238e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d005      	beq.n	800238e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	2b05      	cmp	r3, #5
 8002386:	d002      	beq.n	800238e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	2b09      	cmp	r3, #9
 800238c:	d104      	bne.n	8002398 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	61bb      	str	r3, [r7, #24]
 8002396:	e00c      	b.n	80023b2 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a11      	ldr	r2, [pc, #68]	@ (80023e4 <HAL_ADC_PollForConversion+0x1a8>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d002      	beq.n	80023a8 <HAL_ADC_PollForConversion+0x16c>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	e000      	b.n	80023aa <HAL_ADC_PollForConversion+0x16e>
 80023a8:	4b0f      	ldr	r3, [pc, #60]	@ (80023e8 <HAL_ADC_PollForConversion+0x1ac>)
 80023aa:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	2b08      	cmp	r3, #8
 80023b6:	d104      	bne.n	80023c2 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2208      	movs	r2, #8
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	e008      	b.n	80023d4 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d103      	bne.n	80023d4 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	220c      	movs	r2, #12
 80023d2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3720      	adds	r7, #32
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	50040300 	.word	0x50040300
 80023e4:	50040100 	.word	0x50040100
 80023e8:	50040000 	.word	0x50040000

080023ec <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
	...

08002408 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b0b6      	sub	sp, #216	@ 0xd8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002412:	2300      	movs	r3, #0
 8002414:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002418:	2300      	movs	r3, #0
 800241a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002422:	2b01      	cmp	r3, #1
 8002424:	d101      	bne.n	800242a <HAL_ADC_ConfigChannel+0x22>
 8002426:	2302      	movs	r3, #2
 8002428:	e3c9      	b.n	8002bbe <HAL_ADC_ConfigChannel+0x7b6>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2201      	movs	r2, #1
 800242e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff fccf 	bl	8001dda <LL_ADC_REG_IsConversionOngoing>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	f040 83aa 	bne.w	8002b98 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	2b05      	cmp	r3, #5
 8002452:	d824      	bhi.n	800249e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	3b02      	subs	r3, #2
 800245a:	2b03      	cmp	r3, #3
 800245c:	d81b      	bhi.n	8002496 <HAL_ADC_ConfigChannel+0x8e>
 800245e:	a201      	add	r2, pc, #4	@ (adr r2, 8002464 <HAL_ADC_ConfigChannel+0x5c>)
 8002460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002464:	08002475 	.word	0x08002475
 8002468:	0800247d 	.word	0x0800247d
 800246c:	08002485 	.word	0x08002485
 8002470:	0800248d 	.word	0x0800248d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002474:	230c      	movs	r3, #12
 8002476:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800247a:	e010      	b.n	800249e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800247c:	2312      	movs	r3, #18
 800247e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002482:	e00c      	b.n	800249e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002484:	2318      	movs	r3, #24
 8002486:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800248a:	e008      	b.n	800249e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800248c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002490:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002494:	e003      	b.n	800249e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002496:	2306      	movs	r3, #6
 8002498:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800249c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6818      	ldr	r0, [r3, #0]
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	461a      	mov	r2, r3
 80024a8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80024ac:	f7ff fb74 	bl	8001b98 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff fc90 	bl	8001dda <LL_ADC_REG_IsConversionOngoing>
 80024ba:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff fc9c 	bl	8001e00 <LL_ADC_INJ_IsConversionOngoing>
 80024c8:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f040 81a4 	bne.w	800281e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f040 819f 	bne.w	800281e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6818      	ldr	r0, [r3, #0]
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	6819      	ldr	r1, [r3, #0]
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	461a      	mov	r2, r3
 80024ee:	f7ff fb7f 	bl	8001bf0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	695a      	ldr	r2, [r3, #20]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	08db      	lsrs	r3, r3, #3
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	2b04      	cmp	r3, #4
 8002512:	d00a      	beq.n	800252a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6818      	ldr	r0, [r3, #0]
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	6919      	ldr	r1, [r3, #16]
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002524:	f7ff fad0 	bl	8001ac8 <LL_ADC_SetOffset>
 8002528:	e179      	b.n	800281e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2100      	movs	r1, #0
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff faed 	bl	8001b10 <LL_ADC_GetOffsetChannel>
 8002536:	4603      	mov	r3, r0
 8002538:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800253c:	2b00      	cmp	r3, #0
 800253e:	d10a      	bne.n	8002556 <HAL_ADC_ConfigChannel+0x14e>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2100      	movs	r1, #0
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff fae2 	bl	8001b10 <LL_ADC_GetOffsetChannel>
 800254c:	4603      	mov	r3, r0
 800254e:	0e9b      	lsrs	r3, r3, #26
 8002550:	f003 021f 	and.w	r2, r3, #31
 8002554:	e01e      	b.n	8002594 <HAL_ADC_ConfigChannel+0x18c>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2100      	movs	r1, #0
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff fad7 	bl	8001b10 <LL_ADC_GetOffsetChannel>
 8002562:	4603      	mov	r3, r0
 8002564:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002568:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800256c:	fa93 f3a3 	rbit	r3, r3
 8002570:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002574:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002578:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800257c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002580:	2b00      	cmp	r3, #0
 8002582:	d101      	bne.n	8002588 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002584:	2320      	movs	r3, #32
 8002586:	e004      	b.n	8002592 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002588:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800258c:	fab3 f383 	clz	r3, r3
 8002590:	b2db      	uxtb	r3, r3
 8002592:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800259c:	2b00      	cmp	r3, #0
 800259e:	d105      	bne.n	80025ac <HAL_ADC_ConfigChannel+0x1a4>
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	0e9b      	lsrs	r3, r3, #26
 80025a6:	f003 031f 	and.w	r3, r3, #31
 80025aa:	e018      	b.n	80025de <HAL_ADC_ConfigChannel+0x1d6>
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025b8:	fa93 f3a3 	rbit	r3, r3
 80025bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80025c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80025c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80025c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80025d0:	2320      	movs	r3, #32
 80025d2:	e004      	b.n	80025de <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80025d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80025d8:	fab3 f383 	clz	r3, r3
 80025dc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80025de:	429a      	cmp	r2, r3
 80025e0:	d106      	bne.n	80025f0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2200      	movs	r2, #0
 80025e8:	2100      	movs	r1, #0
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff faa6 	bl	8001b3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2101      	movs	r1, #1
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7ff fa8a 	bl	8001b10 <LL_ADC_GetOffsetChannel>
 80025fc:	4603      	mov	r3, r0
 80025fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002602:	2b00      	cmp	r3, #0
 8002604:	d10a      	bne.n	800261c <HAL_ADC_ConfigChannel+0x214>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2101      	movs	r1, #1
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff fa7f 	bl	8001b10 <LL_ADC_GetOffsetChannel>
 8002612:	4603      	mov	r3, r0
 8002614:	0e9b      	lsrs	r3, r3, #26
 8002616:	f003 021f 	and.w	r2, r3, #31
 800261a:	e01e      	b.n	800265a <HAL_ADC_ConfigChannel+0x252>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2101      	movs	r1, #1
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff fa74 	bl	8001b10 <LL_ADC_GetOffsetChannel>
 8002628:	4603      	mov	r3, r0
 800262a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002632:	fa93 f3a3 	rbit	r3, r3
 8002636:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800263a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800263e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002642:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800264a:	2320      	movs	r3, #32
 800264c:	e004      	b.n	8002658 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800264e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002652:	fab3 f383 	clz	r3, r3
 8002656:	b2db      	uxtb	r3, r3
 8002658:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002662:	2b00      	cmp	r3, #0
 8002664:	d105      	bne.n	8002672 <HAL_ADC_ConfigChannel+0x26a>
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	0e9b      	lsrs	r3, r3, #26
 800266c:	f003 031f 	and.w	r3, r3, #31
 8002670:	e018      	b.n	80026a4 <HAL_ADC_ConfigChannel+0x29c>
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800267e:	fa93 f3a3 	rbit	r3, r3
 8002682:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002686:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800268a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800268e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002692:	2b00      	cmp	r3, #0
 8002694:	d101      	bne.n	800269a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002696:	2320      	movs	r3, #32
 8002698:	e004      	b.n	80026a4 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800269a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800269e:	fab3 f383 	clz	r3, r3
 80026a2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d106      	bne.n	80026b6 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2200      	movs	r2, #0
 80026ae:	2101      	movs	r1, #1
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff fa43 	bl	8001b3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2102      	movs	r1, #2
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff fa27 	bl	8001b10 <LL_ADC_GetOffsetChannel>
 80026c2:	4603      	mov	r3, r0
 80026c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d10a      	bne.n	80026e2 <HAL_ADC_ConfigChannel+0x2da>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2102      	movs	r1, #2
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff fa1c 	bl	8001b10 <LL_ADC_GetOffsetChannel>
 80026d8:	4603      	mov	r3, r0
 80026da:	0e9b      	lsrs	r3, r3, #26
 80026dc:	f003 021f 	and.w	r2, r3, #31
 80026e0:	e01e      	b.n	8002720 <HAL_ADC_ConfigChannel+0x318>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2102      	movs	r1, #2
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff fa11 	bl	8001b10 <LL_ADC_GetOffsetChannel>
 80026ee:	4603      	mov	r3, r0
 80026f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80026f8:	fa93 f3a3 	rbit	r3, r3
 80026fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002700:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002704:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002708:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800270c:	2b00      	cmp	r3, #0
 800270e:	d101      	bne.n	8002714 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002710:	2320      	movs	r3, #32
 8002712:	e004      	b.n	800271e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002714:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002718:	fab3 f383 	clz	r3, r3
 800271c:	b2db      	uxtb	r3, r3
 800271e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002728:	2b00      	cmp	r3, #0
 800272a:	d105      	bne.n	8002738 <HAL_ADC_ConfigChannel+0x330>
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	0e9b      	lsrs	r3, r3, #26
 8002732:	f003 031f 	and.w	r3, r3, #31
 8002736:	e014      	b.n	8002762 <HAL_ADC_ConfigChannel+0x35a>
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002740:	fa93 f3a3 	rbit	r3, r3
 8002744:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002746:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002748:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800274c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002750:	2b00      	cmp	r3, #0
 8002752:	d101      	bne.n	8002758 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002754:	2320      	movs	r3, #32
 8002756:	e004      	b.n	8002762 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002758:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800275c:	fab3 f383 	clz	r3, r3
 8002760:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002762:	429a      	cmp	r2, r3
 8002764:	d106      	bne.n	8002774 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2200      	movs	r2, #0
 800276c:	2102      	movs	r1, #2
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff f9e4 	bl	8001b3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2103      	movs	r1, #3
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff f9c8 	bl	8001b10 <LL_ADC_GetOffsetChannel>
 8002780:	4603      	mov	r3, r0
 8002782:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10a      	bne.n	80027a0 <HAL_ADC_ConfigChannel+0x398>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2103      	movs	r1, #3
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff f9bd 	bl	8001b10 <LL_ADC_GetOffsetChannel>
 8002796:	4603      	mov	r3, r0
 8002798:	0e9b      	lsrs	r3, r3, #26
 800279a:	f003 021f 	and.w	r2, r3, #31
 800279e:	e017      	b.n	80027d0 <HAL_ADC_ConfigChannel+0x3c8>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2103      	movs	r1, #3
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff f9b2 	bl	8001b10 <LL_ADC_GetOffsetChannel>
 80027ac:	4603      	mov	r3, r0
 80027ae:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80027b2:	fa93 f3a3 	rbit	r3, r3
 80027b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80027b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027ba:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80027bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80027c2:	2320      	movs	r3, #32
 80027c4:	e003      	b.n	80027ce <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80027c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027c8:	fab3 f383 	clz	r3, r3
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d105      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0x3e0>
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	0e9b      	lsrs	r3, r3, #26
 80027e2:	f003 031f 	and.w	r3, r3, #31
 80027e6:	e011      	b.n	800280c <HAL_ADC_ConfigChannel+0x404>
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80027f0:	fa93 f3a3 	rbit	r3, r3
 80027f4:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80027f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80027f8:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80027fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002800:	2320      	movs	r3, #32
 8002802:	e003      	b.n	800280c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002804:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002806:	fab3 f383 	clz	r3, r3
 800280a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800280c:	429a      	cmp	r2, r3
 800280e:	d106      	bne.n	800281e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2200      	movs	r2, #0
 8002816:	2103      	movs	r1, #3
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff f98f 	bl	8001b3c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4618      	mov	r0, r3
 8002824:	f7ff fab2 	bl	8001d8c <LL_ADC_IsEnabled>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	f040 8140 	bne.w	8002ab0 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6818      	ldr	r0, [r3, #0]
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	6819      	ldr	r1, [r3, #0]
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	461a      	mov	r2, r3
 800283e:	f7ff fa03 	bl	8001c48 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	4a8f      	ldr	r2, [pc, #572]	@ (8002a84 <HAL_ADC_ConfigChannel+0x67c>)
 8002848:	4293      	cmp	r3, r2
 800284a:	f040 8131 	bne.w	8002ab0 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800285a:	2b00      	cmp	r3, #0
 800285c:	d10b      	bne.n	8002876 <HAL_ADC_ConfigChannel+0x46e>
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	0e9b      	lsrs	r3, r3, #26
 8002864:	3301      	adds	r3, #1
 8002866:	f003 031f 	and.w	r3, r3, #31
 800286a:	2b09      	cmp	r3, #9
 800286c:	bf94      	ite	ls
 800286e:	2301      	movls	r3, #1
 8002870:	2300      	movhi	r3, #0
 8002872:	b2db      	uxtb	r3, r3
 8002874:	e019      	b.n	80028aa <HAL_ADC_ConfigChannel+0x4a2>
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800287e:	fa93 f3a3 	rbit	r3, r3
 8002882:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002884:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002886:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002888:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800288e:	2320      	movs	r3, #32
 8002890:	e003      	b.n	800289a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002892:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002894:	fab3 f383 	clz	r3, r3
 8002898:	b2db      	uxtb	r3, r3
 800289a:	3301      	adds	r3, #1
 800289c:	f003 031f 	and.w	r3, r3, #31
 80028a0:	2b09      	cmp	r3, #9
 80028a2:	bf94      	ite	ls
 80028a4:	2301      	movls	r3, #1
 80028a6:	2300      	movhi	r3, #0
 80028a8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d079      	beq.n	80029a2 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d107      	bne.n	80028ca <HAL_ADC_ConfigChannel+0x4c2>
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	0e9b      	lsrs	r3, r3, #26
 80028c0:	3301      	adds	r3, #1
 80028c2:	069b      	lsls	r3, r3, #26
 80028c4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028c8:	e015      	b.n	80028f6 <HAL_ADC_ConfigChannel+0x4ee>
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80028d2:	fa93 f3a3 	rbit	r3, r3
 80028d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80028d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028da:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80028dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80028e2:	2320      	movs	r3, #32
 80028e4:	e003      	b.n	80028ee <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80028e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028e8:	fab3 f383 	clz	r3, r3
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	3301      	adds	r3, #1
 80028f0:	069b      	lsls	r3, r3, #26
 80028f2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d109      	bne.n	8002916 <HAL_ADC_ConfigChannel+0x50e>
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	0e9b      	lsrs	r3, r3, #26
 8002908:	3301      	adds	r3, #1
 800290a:	f003 031f 	and.w	r3, r3, #31
 800290e:	2101      	movs	r1, #1
 8002910:	fa01 f303 	lsl.w	r3, r1, r3
 8002914:	e017      	b.n	8002946 <HAL_ADC_ConfigChannel+0x53e>
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800291e:	fa93 f3a3 	rbit	r3, r3
 8002922:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002924:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002926:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002928:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800292e:	2320      	movs	r3, #32
 8002930:	e003      	b.n	800293a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002932:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002934:	fab3 f383 	clz	r3, r3
 8002938:	b2db      	uxtb	r3, r3
 800293a:	3301      	adds	r3, #1
 800293c:	f003 031f 	and.w	r3, r3, #31
 8002940:	2101      	movs	r1, #1
 8002942:	fa01 f303 	lsl.w	r3, r1, r3
 8002946:	ea42 0103 	orr.w	r1, r2, r3
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10a      	bne.n	800296c <HAL_ADC_ConfigChannel+0x564>
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	0e9b      	lsrs	r3, r3, #26
 800295c:	3301      	adds	r3, #1
 800295e:	f003 021f 	and.w	r2, r3, #31
 8002962:	4613      	mov	r3, r2
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	4413      	add	r3, r2
 8002968:	051b      	lsls	r3, r3, #20
 800296a:	e018      	b.n	800299e <HAL_ADC_ConfigChannel+0x596>
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002972:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002974:	fa93 f3a3 	rbit	r3, r3
 8002978:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800297a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800297c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800297e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002980:	2b00      	cmp	r3, #0
 8002982:	d101      	bne.n	8002988 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002984:	2320      	movs	r3, #32
 8002986:	e003      	b.n	8002990 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800298a:	fab3 f383 	clz	r3, r3
 800298e:	b2db      	uxtb	r3, r3
 8002990:	3301      	adds	r3, #1
 8002992:	f003 021f 	and.w	r2, r3, #31
 8002996:	4613      	mov	r3, r2
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	4413      	add	r3, r2
 800299c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800299e:	430b      	orrs	r3, r1
 80029a0:	e081      	b.n	8002aa6 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d107      	bne.n	80029be <HAL_ADC_ConfigChannel+0x5b6>
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	0e9b      	lsrs	r3, r3, #26
 80029b4:	3301      	adds	r3, #1
 80029b6:	069b      	lsls	r3, r3, #26
 80029b8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029bc:	e015      	b.n	80029ea <HAL_ADC_ConfigChannel+0x5e2>
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029c6:	fa93 f3a3 	rbit	r3, r3
 80029ca:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80029cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80029d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80029d6:	2320      	movs	r3, #32
 80029d8:	e003      	b.n	80029e2 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80029da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029dc:	fab3 f383 	clz	r3, r3
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	3301      	adds	r3, #1
 80029e4:	069b      	lsls	r3, r3, #26
 80029e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d109      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0x602>
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	0e9b      	lsrs	r3, r3, #26
 80029fc:	3301      	adds	r3, #1
 80029fe:	f003 031f 	and.w	r3, r3, #31
 8002a02:	2101      	movs	r1, #1
 8002a04:	fa01 f303 	lsl.w	r3, r1, r3
 8002a08:	e017      	b.n	8002a3a <HAL_ADC_ConfigChannel+0x632>
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	fa93 f3a3 	rbit	r3, r3
 8002a16:	61bb      	str	r3, [r7, #24]
  return result;
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002a1c:	6a3b      	ldr	r3, [r7, #32]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002a22:	2320      	movs	r3, #32
 8002a24:	e003      	b.n	8002a2e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002a26:	6a3b      	ldr	r3, [r7, #32]
 8002a28:	fab3 f383 	clz	r3, r3
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	3301      	adds	r3, #1
 8002a30:	f003 031f 	and.w	r3, r3, #31
 8002a34:	2101      	movs	r1, #1
 8002a36:	fa01 f303 	lsl.w	r3, r1, r3
 8002a3a:	ea42 0103 	orr.w	r1, r2, r3
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d10d      	bne.n	8002a66 <HAL_ADC_ConfigChannel+0x65e>
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	0e9b      	lsrs	r3, r3, #26
 8002a50:	3301      	adds	r3, #1
 8002a52:	f003 021f 	and.w	r2, r3, #31
 8002a56:	4613      	mov	r3, r2
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	4413      	add	r3, r2
 8002a5c:	3b1e      	subs	r3, #30
 8002a5e:	051b      	lsls	r3, r3, #20
 8002a60:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002a64:	e01e      	b.n	8002aa4 <HAL_ADC_ConfigChannel+0x69c>
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	fa93 f3a3 	rbit	r3, r3
 8002a72:	60fb      	str	r3, [r7, #12]
  return result;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d104      	bne.n	8002a88 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002a7e:	2320      	movs	r3, #32
 8002a80:	e006      	b.n	8002a90 <HAL_ADC_ConfigChannel+0x688>
 8002a82:	bf00      	nop
 8002a84:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	fab3 f383 	clz	r3, r3
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	3301      	adds	r3, #1
 8002a92:	f003 021f 	and.w	r2, r3, #31
 8002a96:	4613      	mov	r3, r2
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	4413      	add	r3, r2
 8002a9c:	3b1e      	subs	r3, #30
 8002a9e:	051b      	lsls	r3, r3, #20
 8002aa0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002aa4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002aa6:	683a      	ldr	r2, [r7, #0]
 8002aa8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002aaa:	4619      	mov	r1, r3
 8002aac:	f7ff f8a0 	bl	8001bf0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	4b44      	ldr	r3, [pc, #272]	@ (8002bc8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d07a      	beq.n	8002bb2 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002abc:	4843      	ldr	r0, [pc, #268]	@ (8002bcc <HAL_ADC_ConfigChannel+0x7c4>)
 8002abe:	f7fe fff5 	bl	8001aac <LL_ADC_GetCommonPathInternalCh>
 8002ac2:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a41      	ldr	r2, [pc, #260]	@ (8002bd0 <HAL_ADC_ConfigChannel+0x7c8>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d12c      	bne.n	8002b2a <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ad0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ad4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d126      	bne.n	8002b2a <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a3c      	ldr	r2, [pc, #240]	@ (8002bd4 <HAL_ADC_ConfigChannel+0x7cc>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d004      	beq.n	8002af0 <HAL_ADC_ConfigChannel+0x6e8>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a3b      	ldr	r2, [pc, #236]	@ (8002bd8 <HAL_ADC_ConfigChannel+0x7d0>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d15d      	bne.n	8002bac <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002af0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002af4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002af8:	4619      	mov	r1, r3
 8002afa:	4834      	ldr	r0, [pc, #208]	@ (8002bcc <HAL_ADC_ConfigChannel+0x7c4>)
 8002afc:	f7fe ffc3 	bl	8001a86 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b00:	4b36      	ldr	r3, [pc, #216]	@ (8002bdc <HAL_ADC_ConfigChannel+0x7d4>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	099b      	lsrs	r3, r3, #6
 8002b06:	4a36      	ldr	r2, [pc, #216]	@ (8002be0 <HAL_ADC_ConfigChannel+0x7d8>)
 8002b08:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0c:	099b      	lsrs	r3, r3, #6
 8002b0e:	1c5a      	adds	r2, r3, #1
 8002b10:	4613      	mov	r3, r2
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	4413      	add	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002b1a:	e002      	b.n	8002b22 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d1f9      	bne.n	8002b1c <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b28:	e040      	b.n	8002bac <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a2d      	ldr	r2, [pc, #180]	@ (8002be4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d118      	bne.n	8002b66 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b38:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d112      	bne.n	8002b66 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a23      	ldr	r2, [pc, #140]	@ (8002bd4 <HAL_ADC_ConfigChannel+0x7cc>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d004      	beq.n	8002b54 <HAL_ADC_ConfigChannel+0x74c>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a22      	ldr	r2, [pc, #136]	@ (8002bd8 <HAL_ADC_ConfigChannel+0x7d0>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d12d      	bne.n	8002bb0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b58:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	481b      	ldr	r0, [pc, #108]	@ (8002bcc <HAL_ADC_ConfigChannel+0x7c4>)
 8002b60:	f7fe ff91 	bl	8001a86 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b64:	e024      	b.n	8002bb0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a1f      	ldr	r2, [pc, #124]	@ (8002be8 <HAL_ADC_ConfigChannel+0x7e0>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d120      	bne.n	8002bb2 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d11a      	bne.n	8002bb2 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a14      	ldr	r2, [pc, #80]	@ (8002bd4 <HAL_ADC_ConfigChannel+0x7cc>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d115      	bne.n	8002bb2 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b86:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b8a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002b8e:	4619      	mov	r1, r3
 8002b90:	480e      	ldr	r0, [pc, #56]	@ (8002bcc <HAL_ADC_ConfigChannel+0x7c4>)
 8002b92:	f7fe ff78 	bl	8001a86 <LL_ADC_SetCommonPathInternalCh>
 8002b96:	e00c      	b.n	8002bb2 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b9c:	f043 0220 	orr.w	r2, r3, #32
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002baa:	e002      	b.n	8002bb2 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bac:	bf00      	nop
 8002bae:	e000      	b.n	8002bb2 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bb0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002bba:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	37d8      	adds	r7, #216	@ 0xd8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	80080000 	.word	0x80080000
 8002bcc:	50040300 	.word	0x50040300
 8002bd0:	c7520000 	.word	0xc7520000
 8002bd4:	50040000 	.word	0x50040000
 8002bd8:	50040200 	.word	0x50040200
 8002bdc:	20000038 	.word	0x20000038
 8002be0:	053e2d63 	.word	0x053e2d63
 8002be4:	cb840000 	.word	0xcb840000
 8002be8:	80000001 	.word	0x80000001

08002bec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7ff f8c5 	bl	8001d8c <LL_ADC_IsEnabled>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d169      	bne.n	8002cdc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689a      	ldr	r2, [r3, #8]
 8002c0e:	4b36      	ldr	r3, [pc, #216]	@ (8002ce8 <ADC_Enable+0xfc>)
 8002c10:	4013      	ands	r3, r2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00d      	beq.n	8002c32 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c1a:	f043 0210 	orr.w	r2, r3, #16
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c26:	f043 0201 	orr.w	r2, r3, #1
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e055      	b.n	8002cde <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7ff f894 	bl	8001d64 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002c3c:	482b      	ldr	r0, [pc, #172]	@ (8002cec <ADC_Enable+0x100>)
 8002c3e:	f7fe ff35 	bl	8001aac <LL_ADC_GetCommonPathInternalCh>
 8002c42:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002c44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d013      	beq.n	8002c74 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c4c:	4b28      	ldr	r3, [pc, #160]	@ (8002cf0 <ADC_Enable+0x104>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	099b      	lsrs	r3, r3, #6
 8002c52:	4a28      	ldr	r2, [pc, #160]	@ (8002cf4 <ADC_Enable+0x108>)
 8002c54:	fba2 2303 	umull	r2, r3, r2, r3
 8002c58:	099b      	lsrs	r3, r3, #6
 8002c5a:	1c5a      	adds	r2, r3, #1
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	4413      	add	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002c66:	e002      	b.n	8002c6e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d1f9      	bne.n	8002c68 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002c74:	f7fe fec4 	bl	8001a00 <HAL_GetTick>
 8002c78:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c7a:	e028      	b.n	8002cce <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff f883 	bl	8001d8c <LL_ADC_IsEnabled>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d104      	bne.n	8002c96 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7ff f867 	bl	8001d64 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c96:	f7fe feb3 	bl	8001a00 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d914      	bls.n	8002cce <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d00d      	beq.n	8002cce <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cb6:	f043 0210 	orr.w	r2, r3, #16
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cc2:	f043 0201 	orr.w	r2, r3, #1
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e007      	b.n	8002cde <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d1cf      	bne.n	8002c7c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	8000003f 	.word	0x8000003f
 8002cec:	50040300 	.word	0x50040300
 8002cf0:	20000038 	.word	0x20000038
 8002cf4:	053e2d63 	.word	0x053e2d63

08002cf8 <LL_ADC_IsEnabled>:
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d101      	bne.n	8002d10 <LL_ADC_IsEnabled+0x18>
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e000      	b.n	8002d12 <LL_ADC_IsEnabled+0x1a>
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr

08002d1e <LL_ADC_REG_IsConversionOngoing>:
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b083      	sub	sp, #12
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 0304 	and.w	r3, r3, #4
 8002d2e:	2b04      	cmp	r3, #4
 8002d30:	d101      	bne.n	8002d36 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d32:	2301      	movs	r3, #1
 8002d34:	e000      	b.n	8002d38 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002d44:	b590      	push	{r4, r7, lr}
 8002d46:	b09f      	sub	sp, #124	@ 0x7c
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d101      	bne.n	8002d62 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002d5e:	2302      	movs	r3, #2
 8002d60:	e093      	b.n	8002e8a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002d6e:	2300      	movs	r3, #0
 8002d70:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a47      	ldr	r2, [pc, #284]	@ (8002e94 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d102      	bne.n	8002d82 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002d7c:	4b46      	ldr	r3, [pc, #280]	@ (8002e98 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002d7e:	60bb      	str	r3, [r7, #8]
 8002d80:	e001      	b.n	8002d86 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002d82:	2300      	movs	r3, #0
 8002d84:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d10b      	bne.n	8002da4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d90:	f043 0220 	orr.w	r2, r3, #32
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e072      	b.n	8002e8a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff ffb9 	bl	8002d1e <LL_ADC_REG_IsConversionOngoing>
 8002dac:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff ffb3 	bl	8002d1e <LL_ADC_REG_IsConversionOngoing>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d154      	bne.n	8002e68 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002dbe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d151      	bne.n	8002e68 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002dc4:	4b35      	ldr	r3, [pc, #212]	@ (8002e9c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002dc6:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d02c      	beq.n	8002e2a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002dd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	6859      	ldr	r1, [r3, #4]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002de2:	035b      	lsls	r3, r3, #13
 8002de4:	430b      	orrs	r3, r1
 8002de6:	431a      	orrs	r2, r3
 8002de8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002dea:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002dec:	4829      	ldr	r0, [pc, #164]	@ (8002e94 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002dee:	f7ff ff83 	bl	8002cf8 <LL_ADC_IsEnabled>
 8002df2:	4604      	mov	r4, r0
 8002df4:	4828      	ldr	r0, [pc, #160]	@ (8002e98 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002df6:	f7ff ff7f 	bl	8002cf8 <LL_ADC_IsEnabled>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	431c      	orrs	r4, r3
 8002dfe:	4828      	ldr	r0, [pc, #160]	@ (8002ea0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002e00:	f7ff ff7a 	bl	8002cf8 <LL_ADC_IsEnabled>
 8002e04:	4603      	mov	r3, r0
 8002e06:	4323      	orrs	r3, r4
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d137      	bne.n	8002e7c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002e0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002e14:	f023 030f 	bic.w	r3, r3, #15
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	6811      	ldr	r1, [r2, #0]
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	6892      	ldr	r2, [r2, #8]
 8002e20:	430a      	orrs	r2, r1
 8002e22:	431a      	orrs	r2, r3
 8002e24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e26:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e28:	e028      	b.n	8002e7c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002e2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e34:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e36:	4817      	ldr	r0, [pc, #92]	@ (8002e94 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002e38:	f7ff ff5e 	bl	8002cf8 <LL_ADC_IsEnabled>
 8002e3c:	4604      	mov	r4, r0
 8002e3e:	4816      	ldr	r0, [pc, #88]	@ (8002e98 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002e40:	f7ff ff5a 	bl	8002cf8 <LL_ADC_IsEnabled>
 8002e44:	4603      	mov	r3, r0
 8002e46:	431c      	orrs	r4, r3
 8002e48:	4815      	ldr	r0, [pc, #84]	@ (8002ea0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002e4a:	f7ff ff55 	bl	8002cf8 <LL_ADC_IsEnabled>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	4323      	orrs	r3, r4
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d112      	bne.n	8002e7c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002e56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002e5e:	f023 030f 	bic.w	r3, r3, #15
 8002e62:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002e64:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e66:	e009      	b.n	8002e7c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e6c:	f043 0220 	orr.w	r2, r3, #32
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002e7a:	e000      	b.n	8002e7e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e7c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002e86:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	377c      	adds	r7, #124	@ 0x7c
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd90      	pop	{r4, r7, pc}
 8002e92:	bf00      	nop
 8002e94:	50040000 	.word	0x50040000
 8002e98:	50040100 	.word	0x50040100
 8002e9c:	50040300 	.word	0x50040300
 8002ea0:	50040200 	.word	0x50040200

08002ea4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f003 0307 	and.w	r3, r3, #7
 8002eb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002eb4:	4b0c      	ldr	r3, [pc, #48]	@ (8002ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eba:	68ba      	ldr	r2, [r7, #8]
 8002ebc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ecc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ed0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ed4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ed6:	4a04      	ldr	r2, [pc, #16]	@ (8002ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	60d3      	str	r3, [r2, #12]
}
 8002edc:	bf00      	nop
 8002ede:	3714      	adds	r7, #20
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr
 8002ee8:	e000ed00 	.word	0xe000ed00

08002eec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ef0:	4b04      	ldr	r3, [pc, #16]	@ (8002f04 <__NVIC_GetPriorityGrouping+0x18>)
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	0a1b      	lsrs	r3, r3, #8
 8002ef6:	f003 0307 	and.w	r3, r3, #7
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr
 8002f04:	e000ed00 	.word	0xe000ed00

08002f08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	4603      	mov	r3, r0
 8002f10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	db0b      	blt.n	8002f32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f1a:	79fb      	ldrb	r3, [r7, #7]
 8002f1c:	f003 021f 	and.w	r2, r3, #31
 8002f20:	4907      	ldr	r1, [pc, #28]	@ (8002f40 <__NVIC_EnableIRQ+0x38>)
 8002f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f26:	095b      	lsrs	r3, r3, #5
 8002f28:	2001      	movs	r0, #1
 8002f2a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f32:	bf00      	nop
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	e000e100 	.word	0xe000e100

08002f44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	6039      	str	r1, [r7, #0]
 8002f4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	db0a      	blt.n	8002f6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	b2da      	uxtb	r2, r3
 8002f5c:	490c      	ldr	r1, [pc, #48]	@ (8002f90 <__NVIC_SetPriority+0x4c>)
 8002f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f62:	0112      	lsls	r2, r2, #4
 8002f64:	b2d2      	uxtb	r2, r2
 8002f66:	440b      	add	r3, r1
 8002f68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f6c:	e00a      	b.n	8002f84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	b2da      	uxtb	r2, r3
 8002f72:	4908      	ldr	r1, [pc, #32]	@ (8002f94 <__NVIC_SetPriority+0x50>)
 8002f74:	79fb      	ldrb	r3, [r7, #7]
 8002f76:	f003 030f 	and.w	r3, r3, #15
 8002f7a:	3b04      	subs	r3, #4
 8002f7c:	0112      	lsls	r2, r2, #4
 8002f7e:	b2d2      	uxtb	r2, r2
 8002f80:	440b      	add	r3, r1
 8002f82:	761a      	strb	r2, [r3, #24]
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr
 8002f90:	e000e100 	.word	0xe000e100
 8002f94:	e000ed00 	.word	0xe000ed00

08002f98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b089      	sub	sp, #36	@ 0x24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f003 0307 	and.w	r3, r3, #7
 8002faa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	f1c3 0307 	rsb	r3, r3, #7
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	bf28      	it	cs
 8002fb6:	2304      	movcs	r3, #4
 8002fb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	3304      	adds	r3, #4
 8002fbe:	2b06      	cmp	r3, #6
 8002fc0:	d902      	bls.n	8002fc8 <NVIC_EncodePriority+0x30>
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	3b03      	subs	r3, #3
 8002fc6:	e000      	b.n	8002fca <NVIC_EncodePriority+0x32>
 8002fc8:	2300      	movs	r3, #0
 8002fca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	43da      	mvns	r2, r3
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	401a      	ands	r2, r3
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fe0:	f04f 31ff 	mov.w	r1, #4294967295
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fea:	43d9      	mvns	r1, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ff0:	4313      	orrs	r3, r2
         );
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3724      	adds	r7, #36	@ 0x24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
	...

08003000 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	3b01      	subs	r3, #1
 800300c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003010:	d301      	bcc.n	8003016 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003012:	2301      	movs	r3, #1
 8003014:	e00f      	b.n	8003036 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003016:	4a0a      	ldr	r2, [pc, #40]	@ (8003040 <SysTick_Config+0x40>)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	3b01      	subs	r3, #1
 800301c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800301e:	210f      	movs	r1, #15
 8003020:	f04f 30ff 	mov.w	r0, #4294967295
 8003024:	f7ff ff8e 	bl	8002f44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003028:	4b05      	ldr	r3, [pc, #20]	@ (8003040 <SysTick_Config+0x40>)
 800302a:	2200      	movs	r2, #0
 800302c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800302e:	4b04      	ldr	r3, [pc, #16]	@ (8003040 <SysTick_Config+0x40>)
 8003030:	2207      	movs	r2, #7
 8003032:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	e000e010 	.word	0xe000e010

08003044 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f7ff ff29 	bl	8002ea4 <__NVIC_SetPriorityGrouping>
}
 8003052:	bf00      	nop
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b086      	sub	sp, #24
 800305e:	af00      	add	r7, sp, #0
 8003060:	4603      	mov	r3, r0
 8003062:	60b9      	str	r1, [r7, #8]
 8003064:	607a      	str	r2, [r7, #4]
 8003066:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003068:	2300      	movs	r3, #0
 800306a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800306c:	f7ff ff3e 	bl	8002eec <__NVIC_GetPriorityGrouping>
 8003070:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	68b9      	ldr	r1, [r7, #8]
 8003076:	6978      	ldr	r0, [r7, #20]
 8003078:	f7ff ff8e 	bl	8002f98 <NVIC_EncodePriority>
 800307c:	4602      	mov	r2, r0
 800307e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003082:	4611      	mov	r1, r2
 8003084:	4618      	mov	r0, r3
 8003086:	f7ff ff5d 	bl	8002f44 <__NVIC_SetPriority>
}
 800308a:	bf00      	nop
 800308c:	3718      	adds	r7, #24
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b082      	sub	sp, #8
 8003096:	af00      	add	r7, sp, #0
 8003098:	4603      	mov	r3, r0
 800309a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800309c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff ff31 	bl	8002f08 <__NVIC_EnableIRQ>
}
 80030a6:	bf00      	nop
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b082      	sub	sp, #8
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7ff ffa2 	bl	8003000 <SysTick_Config>
 80030bc:	4603      	mov	r3, r0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
	...

080030c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b087      	sub	sp, #28
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030d2:	2300      	movs	r3, #0
 80030d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030d6:	e17f      	b.n	80033d8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	2101      	movs	r1, #1
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	fa01 f303 	lsl.w	r3, r1, r3
 80030e4:	4013      	ands	r3, r2
 80030e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f000 8171 	beq.w	80033d2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f003 0303 	and.w	r3, r3, #3
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d005      	beq.n	8003108 <HAL_GPIO_Init+0x40>
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f003 0303 	and.w	r3, r3, #3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d130      	bne.n	800316a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	2203      	movs	r2, #3
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	43db      	mvns	r3, r3
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	4013      	ands	r3, r2
 800311e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	68da      	ldr	r2, [r3, #12]
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	4313      	orrs	r3, r2
 8003130:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800313e:	2201      	movs	r2, #1
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	43db      	mvns	r3, r3
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	4013      	ands	r3, r2
 800314c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	091b      	lsrs	r3, r3, #4
 8003154:	f003 0201 	and.w	r2, r3, #1
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	4313      	orrs	r3, r2
 8003162:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f003 0303 	and.w	r3, r3, #3
 8003172:	2b03      	cmp	r3, #3
 8003174:	d118      	bne.n	80031a8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800317a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800317c:	2201      	movs	r2, #1
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	43db      	mvns	r3, r3
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	4013      	ands	r3, r2
 800318a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	08db      	lsrs	r3, r3, #3
 8003192:	f003 0201 	and.w	r2, r3, #1
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	4313      	orrs	r3, r2
 80031a0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f003 0303 	and.w	r3, r3, #3
 80031b0:	2b03      	cmp	r3, #3
 80031b2:	d017      	beq.n	80031e4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	2203      	movs	r2, #3
 80031c0:	fa02 f303 	lsl.w	r3, r2, r3
 80031c4:	43db      	mvns	r3, r3
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	4013      	ands	r3, r2
 80031ca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	4313      	orrs	r3, r2
 80031dc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f003 0303 	and.w	r3, r3, #3
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d123      	bne.n	8003238 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	08da      	lsrs	r2, r3, #3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	3208      	adds	r2, #8
 80031f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	f003 0307 	and.w	r3, r3, #7
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	220f      	movs	r2, #15
 8003208:	fa02 f303 	lsl.w	r3, r2, r3
 800320c:	43db      	mvns	r3, r3
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	4013      	ands	r3, r2
 8003212:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	691a      	ldr	r2, [r3, #16]
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	4313      	orrs	r3, r2
 8003228:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	08da      	lsrs	r2, r3, #3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	3208      	adds	r2, #8
 8003232:	6939      	ldr	r1, [r7, #16]
 8003234:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	2203      	movs	r2, #3
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	43db      	mvns	r3, r3
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	4013      	ands	r3, r2
 800324e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f003 0203 	and.w	r2, r3, #3
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	fa02 f303 	lsl.w	r3, r2, r3
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	4313      	orrs	r3, r2
 8003264:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003274:	2b00      	cmp	r3, #0
 8003276:	f000 80ac 	beq.w	80033d2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800327a:	4b5f      	ldr	r3, [pc, #380]	@ (80033f8 <HAL_GPIO_Init+0x330>)
 800327c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800327e:	4a5e      	ldr	r2, [pc, #376]	@ (80033f8 <HAL_GPIO_Init+0x330>)
 8003280:	f043 0301 	orr.w	r3, r3, #1
 8003284:	6613      	str	r3, [r2, #96]	@ 0x60
 8003286:	4b5c      	ldr	r3, [pc, #368]	@ (80033f8 <HAL_GPIO_Init+0x330>)
 8003288:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	60bb      	str	r3, [r7, #8]
 8003290:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003292:	4a5a      	ldr	r2, [pc, #360]	@ (80033fc <HAL_GPIO_Init+0x334>)
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	089b      	lsrs	r3, r3, #2
 8003298:	3302      	adds	r3, #2
 800329a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800329e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	f003 0303 	and.w	r3, r3, #3
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	220f      	movs	r2, #15
 80032aa:	fa02 f303 	lsl.w	r3, r2, r3
 80032ae:	43db      	mvns	r3, r3
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	4013      	ands	r3, r2
 80032b4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80032bc:	d025      	beq.n	800330a <HAL_GPIO_Init+0x242>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a4f      	ldr	r2, [pc, #316]	@ (8003400 <HAL_GPIO_Init+0x338>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d01f      	beq.n	8003306 <HAL_GPIO_Init+0x23e>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a4e      	ldr	r2, [pc, #312]	@ (8003404 <HAL_GPIO_Init+0x33c>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d019      	beq.n	8003302 <HAL_GPIO_Init+0x23a>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a4d      	ldr	r2, [pc, #308]	@ (8003408 <HAL_GPIO_Init+0x340>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d013      	beq.n	80032fe <HAL_GPIO_Init+0x236>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a4c      	ldr	r2, [pc, #304]	@ (800340c <HAL_GPIO_Init+0x344>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d00d      	beq.n	80032fa <HAL_GPIO_Init+0x232>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a4b      	ldr	r2, [pc, #300]	@ (8003410 <HAL_GPIO_Init+0x348>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d007      	beq.n	80032f6 <HAL_GPIO_Init+0x22e>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a4a      	ldr	r2, [pc, #296]	@ (8003414 <HAL_GPIO_Init+0x34c>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d101      	bne.n	80032f2 <HAL_GPIO_Init+0x22a>
 80032ee:	2306      	movs	r3, #6
 80032f0:	e00c      	b.n	800330c <HAL_GPIO_Init+0x244>
 80032f2:	2307      	movs	r3, #7
 80032f4:	e00a      	b.n	800330c <HAL_GPIO_Init+0x244>
 80032f6:	2305      	movs	r3, #5
 80032f8:	e008      	b.n	800330c <HAL_GPIO_Init+0x244>
 80032fa:	2304      	movs	r3, #4
 80032fc:	e006      	b.n	800330c <HAL_GPIO_Init+0x244>
 80032fe:	2303      	movs	r3, #3
 8003300:	e004      	b.n	800330c <HAL_GPIO_Init+0x244>
 8003302:	2302      	movs	r3, #2
 8003304:	e002      	b.n	800330c <HAL_GPIO_Init+0x244>
 8003306:	2301      	movs	r3, #1
 8003308:	e000      	b.n	800330c <HAL_GPIO_Init+0x244>
 800330a:	2300      	movs	r3, #0
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	f002 0203 	and.w	r2, r2, #3
 8003312:	0092      	lsls	r2, r2, #2
 8003314:	4093      	lsls	r3, r2
 8003316:	693a      	ldr	r2, [r7, #16]
 8003318:	4313      	orrs	r3, r2
 800331a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800331c:	4937      	ldr	r1, [pc, #220]	@ (80033fc <HAL_GPIO_Init+0x334>)
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	089b      	lsrs	r3, r3, #2
 8003322:	3302      	adds	r3, #2
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800332a:	4b3b      	ldr	r3, [pc, #236]	@ (8003418 <HAL_GPIO_Init+0x350>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	43db      	mvns	r3, r3
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	4013      	ands	r3, r2
 8003338:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	4313      	orrs	r3, r2
 800334c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800334e:	4a32      	ldr	r2, [pc, #200]	@ (8003418 <HAL_GPIO_Init+0x350>)
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003354:	4b30      	ldr	r3, [pc, #192]	@ (8003418 <HAL_GPIO_Init+0x350>)
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	43db      	mvns	r3, r3
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	4013      	ands	r3, r2
 8003362:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d003      	beq.n	8003378 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	4313      	orrs	r3, r2
 8003376:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003378:	4a27      	ldr	r2, [pc, #156]	@ (8003418 <HAL_GPIO_Init+0x350>)
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800337e:	4b26      	ldr	r3, [pc, #152]	@ (8003418 <HAL_GPIO_Init+0x350>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	43db      	mvns	r3, r3
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	4013      	ands	r3, r2
 800338c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d003      	beq.n	80033a2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	4313      	orrs	r3, r2
 80033a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80033a2:	4a1d      	ldr	r2, [pc, #116]	@ (8003418 <HAL_GPIO_Init+0x350>)
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80033a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003418 <HAL_GPIO_Init+0x350>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	43db      	mvns	r3, r3
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	4013      	ands	r3, r2
 80033b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d003      	beq.n	80033cc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80033cc:	4a12      	ldr	r2, [pc, #72]	@ (8003418 <HAL_GPIO_Init+0x350>)
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	3301      	adds	r3, #1
 80033d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	fa22 f303 	lsr.w	r3, r2, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f47f ae78 	bne.w	80030d8 <HAL_GPIO_Init+0x10>
  }
}
 80033e8:	bf00      	nop
 80033ea:	bf00      	nop
 80033ec:	371c      	adds	r7, #28
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	40021000 	.word	0x40021000
 80033fc:	40010000 	.word	0x40010000
 8003400:	48000400 	.word	0x48000400
 8003404:	48000800 	.word	0x48000800
 8003408:	48000c00 	.word	0x48000c00
 800340c:	48001000 	.word	0x48001000
 8003410:	48001400 	.word	0x48001400
 8003414:	48001800 	.word	0x48001800
 8003418:	40010400 	.word	0x40010400

0800341c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	460b      	mov	r3, r1
 8003426:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	691a      	ldr	r2, [r3, #16]
 800342c:	887b      	ldrh	r3, [r7, #2]
 800342e:	4013      	ands	r3, r2
 8003430:	2b00      	cmp	r3, #0
 8003432:	d002      	beq.n	800343a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003434:	2301      	movs	r3, #1
 8003436:	73fb      	strb	r3, [r7, #15]
 8003438:	e001      	b.n	800343e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800343a:	2300      	movs	r3, #0
 800343c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800343e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003440:	4618      	mov	r0, r3
 8003442:	3714      	adds	r7, #20
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	460b      	mov	r3, r1
 8003456:	807b      	strh	r3, [r7, #2]
 8003458:	4613      	mov	r3, r2
 800345a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800345c:	787b      	ldrb	r3, [r7, #1]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d003      	beq.n	800346a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003462:	887a      	ldrh	r2, [r7, #2]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003468:	e002      	b.n	8003470 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800346a:	887a      	ldrh	r2, [r7, #2]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	4603      	mov	r3, r0
 8003484:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003486:	4b08      	ldr	r3, [pc, #32]	@ (80034a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003488:	695a      	ldr	r2, [r3, #20]
 800348a:	88fb      	ldrh	r3, [r7, #6]
 800348c:	4013      	ands	r3, r2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d006      	beq.n	80034a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003492:	4a05      	ldr	r2, [pc, #20]	@ (80034a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003494:	88fb      	ldrh	r3, [r7, #6]
 8003496:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003498:	88fb      	ldrh	r3, [r7, #6]
 800349a:	4618      	mov	r0, r3
 800349c:	f7fd fb62 	bl	8000b64 <HAL_GPIO_EXTI_Callback>
  }
}
 80034a0:	bf00      	nop
 80034a2:	3708      	adds	r7, #8
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	40010400 	.word	0x40010400

080034ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e08d      	b.n	80035da <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d106      	bne.n	80034d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7fd ff86 	bl	80013e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2224      	movs	r2, #36	@ 0x24
 80034dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f022 0201 	bic.w	r2, r2, #1
 80034ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685a      	ldr	r2, [r3, #4]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80034fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800350c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d107      	bne.n	8003526 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	689a      	ldr	r2, [r3, #8]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003522:	609a      	str	r2, [r3, #8]
 8003524:	e006      	b.n	8003534 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	689a      	ldr	r2, [r3, #8]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003532:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	2b02      	cmp	r3, #2
 800353a:	d108      	bne.n	800354e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	685a      	ldr	r2, [r3, #4]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800354a:	605a      	str	r2, [r3, #4]
 800354c:	e007      	b.n	800355e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800355c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	6812      	ldr	r2, [r2, #0]
 8003568:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800356c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003570:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68da      	ldr	r2, [r3, #12]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003580:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	691a      	ldr	r2, [r3, #16]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	430a      	orrs	r2, r1
 800359a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	69d9      	ldr	r1, [r3, #28]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a1a      	ldr	r2, [r3, #32]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f042 0201 	orr.w	r2, r2, #1
 80035ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2220      	movs	r2, #32
 80035c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80035e2:	b480      	push	{r7}
 80035e4:	b083      	sub	sp, #12
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
 80035ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2b20      	cmp	r3, #32
 80035f6:	d138      	bne.n	800366a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d101      	bne.n	8003606 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003602:	2302      	movs	r3, #2
 8003604:	e032      	b.n	800366c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2224      	movs	r2, #36	@ 0x24
 8003612:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f022 0201 	bic.w	r2, r2, #1
 8003624:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003634:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	6819      	ldr	r1, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	683a      	ldr	r2, [r7, #0]
 8003642:	430a      	orrs	r2, r1
 8003644:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f042 0201 	orr.w	r2, r2, #1
 8003654:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2220      	movs	r2, #32
 800365a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003666:	2300      	movs	r3, #0
 8003668:	e000      	b.n	800366c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800366a:	2302      	movs	r3, #2
  }
}
 800366c:	4618      	mov	r0, r3
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003678:	b480      	push	{r7}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b20      	cmp	r3, #32
 800368c:	d139      	bne.n	8003702 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003694:	2b01      	cmp	r3, #1
 8003696:	d101      	bne.n	800369c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003698:	2302      	movs	r3, #2
 800369a:	e033      	b.n	8003704 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2224      	movs	r2, #36	@ 0x24
 80036a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 0201 	bic.w	r2, r2, #1
 80036ba:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80036ca:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	021b      	lsls	r3, r3, #8
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f042 0201 	orr.w	r2, r2, #1
 80036ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2220      	movs	r2, #32
 80036f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80036fe:	2300      	movs	r3, #0
 8003700:	e000      	b.n	8003704 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003702:	2302      	movs	r3, #2
  }
}
 8003704:	4618      	mov	r0, r3
 8003706:	3714      	adds	r7, #20
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003710:	b480      	push	{r7}
 8003712:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003714:	4b04      	ldr	r3, [pc, #16]	@ (8003728 <HAL_PWREx_GetVoltageRange+0x18>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800371c:	4618      	mov	r0, r3
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	40007000 	.word	0x40007000

0800372c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800373a:	d130      	bne.n	800379e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800373c:	4b23      	ldr	r3, [pc, #140]	@ (80037cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003744:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003748:	d038      	beq.n	80037bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800374a:	4b20      	ldr	r3, [pc, #128]	@ (80037cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003752:	4a1e      	ldr	r2, [pc, #120]	@ (80037cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003754:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003758:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800375a:	4b1d      	ldr	r3, [pc, #116]	@ (80037d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2232      	movs	r2, #50	@ 0x32
 8003760:	fb02 f303 	mul.w	r3, r2, r3
 8003764:	4a1b      	ldr	r2, [pc, #108]	@ (80037d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003766:	fba2 2303 	umull	r2, r3, r2, r3
 800376a:	0c9b      	lsrs	r3, r3, #18
 800376c:	3301      	adds	r3, #1
 800376e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003770:	e002      	b.n	8003778 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	3b01      	subs	r3, #1
 8003776:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003778:	4b14      	ldr	r3, [pc, #80]	@ (80037cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800377a:	695b      	ldr	r3, [r3, #20]
 800377c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003780:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003784:	d102      	bne.n	800378c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1f2      	bne.n	8003772 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800378c:	4b0f      	ldr	r3, [pc, #60]	@ (80037cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800378e:	695b      	ldr	r3, [r3, #20]
 8003790:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003794:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003798:	d110      	bne.n	80037bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e00f      	b.n	80037be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800379e:	4b0b      	ldr	r3, [pc, #44]	@ (80037cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80037a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037aa:	d007      	beq.n	80037bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80037ac:	4b07      	ldr	r3, [pc, #28]	@ (80037cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80037b4:	4a05      	ldr	r2, [pc, #20]	@ (80037cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80037ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3714      	adds	r7, #20
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	40007000 	.word	0x40007000
 80037d0:	20000038 	.word	0x20000038
 80037d4:	431bde83 	.word	0x431bde83

080037d8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b088      	sub	sp, #32
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d101      	bne.n	80037ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e3ca      	b.n	8003f80 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037ea:	4b97      	ldr	r3, [pc, #604]	@ (8003a48 <HAL_RCC_OscConfig+0x270>)
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f003 030c 	and.w	r3, r3, #12
 80037f2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037f4:	4b94      	ldr	r3, [pc, #592]	@ (8003a48 <HAL_RCC_OscConfig+0x270>)
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	f003 0303 	and.w	r3, r3, #3
 80037fc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0310 	and.w	r3, r3, #16
 8003806:	2b00      	cmp	r3, #0
 8003808:	f000 80e4 	beq.w	80039d4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d007      	beq.n	8003822 <HAL_RCC_OscConfig+0x4a>
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	2b0c      	cmp	r3, #12
 8003816:	f040 808b 	bne.w	8003930 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	2b01      	cmp	r3, #1
 800381e:	f040 8087 	bne.w	8003930 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003822:	4b89      	ldr	r3, [pc, #548]	@ (8003a48 <HAL_RCC_OscConfig+0x270>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d005      	beq.n	800383a <HAL_RCC_OscConfig+0x62>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e3a2      	b.n	8003f80 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a1a      	ldr	r2, [r3, #32]
 800383e:	4b82      	ldr	r3, [pc, #520]	@ (8003a48 <HAL_RCC_OscConfig+0x270>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0308 	and.w	r3, r3, #8
 8003846:	2b00      	cmp	r3, #0
 8003848:	d004      	beq.n	8003854 <HAL_RCC_OscConfig+0x7c>
 800384a:	4b7f      	ldr	r3, [pc, #508]	@ (8003a48 <HAL_RCC_OscConfig+0x270>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003852:	e005      	b.n	8003860 <HAL_RCC_OscConfig+0x88>
 8003854:	4b7c      	ldr	r3, [pc, #496]	@ (8003a48 <HAL_RCC_OscConfig+0x270>)
 8003856:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800385a:	091b      	lsrs	r3, r3, #4
 800385c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003860:	4293      	cmp	r3, r2
 8003862:	d223      	bcs.n	80038ac <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	4618      	mov	r0, r3
 800386a:	f000 fd55 	bl	8004318 <RCC_SetFlashLatencyFromMSIRange>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d001      	beq.n	8003878 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e383      	b.n	8003f80 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003878:	4b73      	ldr	r3, [pc, #460]	@ (8003a48 <HAL_RCC_OscConfig+0x270>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a72      	ldr	r2, [pc, #456]	@ (8003a48 <HAL_RCC_OscConfig+0x270>)
 800387e:	f043 0308 	orr.w	r3, r3, #8
 8003882:	6013      	str	r3, [r2, #0]
 8003884:	4b70      	ldr	r3, [pc, #448]	@ (8003a48 <HAL_RCC_OscConfig+0x270>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a1b      	ldr	r3, [r3, #32]
 8003890:	496d      	ldr	r1, [pc, #436]	@ (8003a48 <HAL_RCC_OscConfig+0x270>)
 8003892:	4313      	orrs	r3, r2
 8003894:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003896:	4b6c      	ldr	r3, [pc, #432]	@ (8003a48 <HAL_RCC_OscConfig+0x270>)
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	69db      	ldr	r3, [r3, #28]
 80038a2:	021b      	lsls	r3, r3, #8
 80038a4:	4968      	ldr	r1, [pc, #416]	@ (8003a48 <HAL_RCC_OscConfig+0x270>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	604b      	str	r3, [r1, #4]
 80038aa:	e025      	b.n	80038f8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038ac:	4b66      	ldr	r3, [pc, #408]	@ (8003a48 <HAL_RCC_OscConfig+0x270>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a65      	ldr	r2, [pc, #404]	@ (8003a48 <HAL_RCC_OscConfig+0x270>)
 80038b2:	f043 0308 	orr.w	r3, r3, #8
 80038b6:	6013      	str	r3, [r2, #0]
 80038b8:	4b63      	ldr	r3, [pc, #396]	@ (8003a48 <HAL_RCC_OscConfig+0x270>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a1b      	ldr	r3, [r3, #32]
 80038c4:	4960      	ldr	r1, [pc, #384]	@ (8003a48 <HAL_RCC_OscConfig+0x270>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038ca:	4b5f      	ldr	r3, [pc, #380]	@ (8003a48 <HAL_RCC_OscConfig+0x270>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	69db      	ldr	r3, [r3, #28]
 80038d6:	021b      	lsls	r3, r3, #8
 80038d8:	495b      	ldr	r1, [pc, #364]	@ (8003a48 <HAL_RCC_OscConfig+0x270>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d109      	bne.n	80038f8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a1b      	ldr	r3, [r3, #32]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f000 fd15 	bl	8004318 <RCC_SetFlashLatencyFromMSIRange>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e343      	b.n	8003f80 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038f8:	f000 fc4a 	bl	8004190 <HAL_RCC_GetSysClockFreq>
 80038fc:	4602      	mov	r2, r0
 80038fe:	4b52      	ldr	r3, [pc, #328]	@ (8003a48 <HAL_RCC_OscConfig+0x270>)
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	091b      	lsrs	r3, r3, #4
 8003904:	f003 030f 	and.w	r3, r3, #15
 8003908:	4950      	ldr	r1, [pc, #320]	@ (8003a4c <HAL_RCC_OscConfig+0x274>)
 800390a:	5ccb      	ldrb	r3, [r1, r3]
 800390c:	f003 031f 	and.w	r3, r3, #31
 8003910:	fa22 f303 	lsr.w	r3, r2, r3
 8003914:	4a4e      	ldr	r2, [pc, #312]	@ (8003a50 <HAL_RCC_OscConfig+0x278>)
 8003916:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003918:	4b4e      	ldr	r3, [pc, #312]	@ (8003a54 <HAL_RCC_OscConfig+0x27c>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4618      	mov	r0, r3
 800391e:	f7fe f81f 	bl	8001960 <HAL_InitTick>
 8003922:	4603      	mov	r3, r0
 8003924:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003926:	7bfb      	ldrb	r3, [r7, #15]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d052      	beq.n	80039d2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800392c:	7bfb      	ldrb	r3, [r7, #15]
 800392e:	e327      	b.n	8003f80 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d032      	beq.n	800399e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003938:	4b43      	ldr	r3, [pc, #268]	@ (8003a48 <HAL_RCC_OscConfig+0x270>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a42      	ldr	r2, [pc, #264]	@ (8003a48 <HAL_RCC_OscConfig+0x270>)
 800393e:	f043 0301 	orr.w	r3, r3, #1
 8003942:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003944:	f7fe f85c 	bl	8001a00 <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800394a:	e008      	b.n	800395e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800394c:	f7fe f858 	bl	8001a00 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e310      	b.n	8003f80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800395e:	4b3a      	ldr	r3, [pc, #232]	@ (8003a48 <HAL_RCC_OscConfig+0x270>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d0f0      	beq.n	800394c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800396a:	4b37      	ldr	r3, [pc, #220]	@ (8003a48 <HAL_RCC_OscConfig+0x270>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a36      	ldr	r2, [pc, #216]	@ (8003a48 <HAL_RCC_OscConfig+0x270>)
 8003970:	f043 0308 	orr.w	r3, r3, #8
 8003974:	6013      	str	r3, [r2, #0]
 8003976:	4b34      	ldr	r3, [pc, #208]	@ (8003a48 <HAL_RCC_OscConfig+0x270>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	4931      	ldr	r1, [pc, #196]	@ (8003a48 <HAL_RCC_OscConfig+0x270>)
 8003984:	4313      	orrs	r3, r2
 8003986:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003988:	4b2f      	ldr	r3, [pc, #188]	@ (8003a48 <HAL_RCC_OscConfig+0x270>)
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	69db      	ldr	r3, [r3, #28]
 8003994:	021b      	lsls	r3, r3, #8
 8003996:	492c      	ldr	r1, [pc, #176]	@ (8003a48 <HAL_RCC_OscConfig+0x270>)
 8003998:	4313      	orrs	r3, r2
 800399a:	604b      	str	r3, [r1, #4]
 800399c:	e01a      	b.n	80039d4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800399e:	4b2a      	ldr	r3, [pc, #168]	@ (8003a48 <HAL_RCC_OscConfig+0x270>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a29      	ldr	r2, [pc, #164]	@ (8003a48 <HAL_RCC_OscConfig+0x270>)
 80039a4:	f023 0301 	bic.w	r3, r3, #1
 80039a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80039aa:	f7fe f829 	bl	8001a00 <HAL_GetTick>
 80039ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80039b0:	e008      	b.n	80039c4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039b2:	f7fe f825 	bl	8001a00 <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d901      	bls.n	80039c4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e2dd      	b.n	8003f80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80039c4:	4b20      	ldr	r3, [pc, #128]	@ (8003a48 <HAL_RCC_OscConfig+0x270>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1f0      	bne.n	80039b2 <HAL_RCC_OscConfig+0x1da>
 80039d0:	e000      	b.n	80039d4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039d2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0301 	and.w	r3, r3, #1
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d074      	beq.n	8003aca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	2b08      	cmp	r3, #8
 80039e4:	d005      	beq.n	80039f2 <HAL_RCC_OscConfig+0x21a>
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	2b0c      	cmp	r3, #12
 80039ea:	d10e      	bne.n	8003a0a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	2b03      	cmp	r3, #3
 80039f0:	d10b      	bne.n	8003a0a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039f2:	4b15      	ldr	r3, [pc, #84]	@ (8003a48 <HAL_RCC_OscConfig+0x270>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d064      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x2f0>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d160      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e2ba      	b.n	8003f80 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a12:	d106      	bne.n	8003a22 <HAL_RCC_OscConfig+0x24a>
 8003a14:	4b0c      	ldr	r3, [pc, #48]	@ (8003a48 <HAL_RCC_OscConfig+0x270>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a0b      	ldr	r2, [pc, #44]	@ (8003a48 <HAL_RCC_OscConfig+0x270>)
 8003a1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a1e:	6013      	str	r3, [r2, #0]
 8003a20:	e026      	b.n	8003a70 <HAL_RCC_OscConfig+0x298>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a2a:	d115      	bne.n	8003a58 <HAL_RCC_OscConfig+0x280>
 8003a2c:	4b06      	ldr	r3, [pc, #24]	@ (8003a48 <HAL_RCC_OscConfig+0x270>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a05      	ldr	r2, [pc, #20]	@ (8003a48 <HAL_RCC_OscConfig+0x270>)
 8003a32:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a36:	6013      	str	r3, [r2, #0]
 8003a38:	4b03      	ldr	r3, [pc, #12]	@ (8003a48 <HAL_RCC_OscConfig+0x270>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a02      	ldr	r2, [pc, #8]	@ (8003a48 <HAL_RCC_OscConfig+0x270>)
 8003a3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a42:	6013      	str	r3, [r2, #0]
 8003a44:	e014      	b.n	8003a70 <HAL_RCC_OscConfig+0x298>
 8003a46:	bf00      	nop
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	08006154 	.word	0x08006154
 8003a50:	20000038 	.word	0x20000038
 8003a54:	2000003c 	.word	0x2000003c
 8003a58:	4ba0      	ldr	r3, [pc, #640]	@ (8003cdc <HAL_RCC_OscConfig+0x504>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a9f      	ldr	r2, [pc, #636]	@ (8003cdc <HAL_RCC_OscConfig+0x504>)
 8003a5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a62:	6013      	str	r3, [r2, #0]
 8003a64:	4b9d      	ldr	r3, [pc, #628]	@ (8003cdc <HAL_RCC_OscConfig+0x504>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a9c      	ldr	r2, [pc, #624]	@ (8003cdc <HAL_RCC_OscConfig+0x504>)
 8003a6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d013      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a78:	f7fd ffc2 	bl	8001a00 <HAL_GetTick>
 8003a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a7e:	e008      	b.n	8003a92 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a80:	f7fd ffbe 	bl	8001a00 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	2b64      	cmp	r3, #100	@ 0x64
 8003a8c:	d901      	bls.n	8003a92 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e276      	b.n	8003f80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a92:	4b92      	ldr	r3, [pc, #584]	@ (8003cdc <HAL_RCC_OscConfig+0x504>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d0f0      	beq.n	8003a80 <HAL_RCC_OscConfig+0x2a8>
 8003a9e:	e014      	b.n	8003aca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa0:	f7fd ffae 	bl	8001a00 <HAL_GetTick>
 8003aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003aa6:	e008      	b.n	8003aba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003aa8:	f7fd ffaa 	bl	8001a00 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b64      	cmp	r3, #100	@ 0x64
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e262      	b.n	8003f80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003aba:	4b88      	ldr	r3, [pc, #544]	@ (8003cdc <HAL_RCC_OscConfig+0x504>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1f0      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x2d0>
 8003ac6:	e000      	b.n	8003aca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ac8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d060      	beq.n	8003b98 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	2b04      	cmp	r3, #4
 8003ada:	d005      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x310>
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	2b0c      	cmp	r3, #12
 8003ae0:	d119      	bne.n	8003b16 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d116      	bne.n	8003b16 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ae8:	4b7c      	ldr	r3, [pc, #496]	@ (8003cdc <HAL_RCC_OscConfig+0x504>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d005      	beq.n	8003b00 <HAL_RCC_OscConfig+0x328>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d101      	bne.n	8003b00 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e23f      	b.n	8003f80 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b00:	4b76      	ldr	r3, [pc, #472]	@ (8003cdc <HAL_RCC_OscConfig+0x504>)
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	061b      	lsls	r3, r3, #24
 8003b0e:	4973      	ldr	r1, [pc, #460]	@ (8003cdc <HAL_RCC_OscConfig+0x504>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b14:	e040      	b.n	8003b98 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d023      	beq.n	8003b66 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b1e:	4b6f      	ldr	r3, [pc, #444]	@ (8003cdc <HAL_RCC_OscConfig+0x504>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a6e      	ldr	r2, [pc, #440]	@ (8003cdc <HAL_RCC_OscConfig+0x504>)
 8003b24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2a:	f7fd ff69 	bl	8001a00 <HAL_GetTick>
 8003b2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b30:	e008      	b.n	8003b44 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b32:	f7fd ff65 	bl	8001a00 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d901      	bls.n	8003b44 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e21d      	b.n	8003f80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b44:	4b65      	ldr	r3, [pc, #404]	@ (8003cdc <HAL_RCC_OscConfig+0x504>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d0f0      	beq.n	8003b32 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b50:	4b62      	ldr	r3, [pc, #392]	@ (8003cdc <HAL_RCC_OscConfig+0x504>)
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	061b      	lsls	r3, r3, #24
 8003b5e:	495f      	ldr	r1, [pc, #380]	@ (8003cdc <HAL_RCC_OscConfig+0x504>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	604b      	str	r3, [r1, #4]
 8003b64:	e018      	b.n	8003b98 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b66:	4b5d      	ldr	r3, [pc, #372]	@ (8003cdc <HAL_RCC_OscConfig+0x504>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a5c      	ldr	r2, [pc, #368]	@ (8003cdc <HAL_RCC_OscConfig+0x504>)
 8003b6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b72:	f7fd ff45 	bl	8001a00 <HAL_GetTick>
 8003b76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b78:	e008      	b.n	8003b8c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b7a:	f7fd ff41 	bl	8001a00 <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d901      	bls.n	8003b8c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e1f9      	b.n	8003f80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b8c:	4b53      	ldr	r3, [pc, #332]	@ (8003cdc <HAL_RCC_OscConfig+0x504>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1f0      	bne.n	8003b7a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0308 	and.w	r3, r3, #8
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d03c      	beq.n	8003c1e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d01c      	beq.n	8003be6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bac:	4b4b      	ldr	r3, [pc, #300]	@ (8003cdc <HAL_RCC_OscConfig+0x504>)
 8003bae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bb2:	4a4a      	ldr	r2, [pc, #296]	@ (8003cdc <HAL_RCC_OscConfig+0x504>)
 8003bb4:	f043 0301 	orr.w	r3, r3, #1
 8003bb8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bbc:	f7fd ff20 	bl	8001a00 <HAL_GetTick>
 8003bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bc2:	e008      	b.n	8003bd6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bc4:	f7fd ff1c 	bl	8001a00 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e1d4      	b.n	8003f80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bd6:	4b41      	ldr	r3, [pc, #260]	@ (8003cdc <HAL_RCC_OscConfig+0x504>)
 8003bd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bdc:	f003 0302 	and.w	r3, r3, #2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d0ef      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x3ec>
 8003be4:	e01b      	b.n	8003c1e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003be6:	4b3d      	ldr	r3, [pc, #244]	@ (8003cdc <HAL_RCC_OscConfig+0x504>)
 8003be8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bec:	4a3b      	ldr	r2, [pc, #236]	@ (8003cdc <HAL_RCC_OscConfig+0x504>)
 8003bee:	f023 0301 	bic.w	r3, r3, #1
 8003bf2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf6:	f7fd ff03 	bl	8001a00 <HAL_GetTick>
 8003bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bfc:	e008      	b.n	8003c10 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bfe:	f7fd feff 	bl	8001a00 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d901      	bls.n	8003c10 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e1b7      	b.n	8003f80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c10:	4b32      	ldr	r3, [pc, #200]	@ (8003cdc <HAL_RCC_OscConfig+0x504>)
 8003c12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c16:	f003 0302 	and.w	r3, r3, #2
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1ef      	bne.n	8003bfe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0304 	and.w	r3, r3, #4
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	f000 80a6 	beq.w	8003d78 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003c30:	4b2a      	ldr	r3, [pc, #168]	@ (8003cdc <HAL_RCC_OscConfig+0x504>)
 8003c32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d10d      	bne.n	8003c58 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c3c:	4b27      	ldr	r3, [pc, #156]	@ (8003cdc <HAL_RCC_OscConfig+0x504>)
 8003c3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c40:	4a26      	ldr	r2, [pc, #152]	@ (8003cdc <HAL_RCC_OscConfig+0x504>)
 8003c42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c46:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c48:	4b24      	ldr	r3, [pc, #144]	@ (8003cdc <HAL_RCC_OscConfig+0x504>)
 8003c4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c50:	60bb      	str	r3, [r7, #8]
 8003c52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c54:	2301      	movs	r3, #1
 8003c56:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c58:	4b21      	ldr	r3, [pc, #132]	@ (8003ce0 <HAL_RCC_OscConfig+0x508>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d118      	bne.n	8003c96 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c64:	4b1e      	ldr	r3, [pc, #120]	@ (8003ce0 <HAL_RCC_OscConfig+0x508>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a1d      	ldr	r2, [pc, #116]	@ (8003ce0 <HAL_RCC_OscConfig+0x508>)
 8003c6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c70:	f7fd fec6 	bl	8001a00 <HAL_GetTick>
 8003c74:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c76:	e008      	b.n	8003c8a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c78:	f7fd fec2 	bl	8001a00 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e17a      	b.n	8003f80 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c8a:	4b15      	ldr	r3, [pc, #84]	@ (8003ce0 <HAL_RCC_OscConfig+0x508>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d0f0      	beq.n	8003c78 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d108      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x4d8>
 8003c9e:	4b0f      	ldr	r3, [pc, #60]	@ (8003cdc <HAL_RCC_OscConfig+0x504>)
 8003ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ca4:	4a0d      	ldr	r2, [pc, #52]	@ (8003cdc <HAL_RCC_OscConfig+0x504>)
 8003ca6:	f043 0301 	orr.w	r3, r3, #1
 8003caa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003cae:	e029      	b.n	8003d04 <HAL_RCC_OscConfig+0x52c>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	2b05      	cmp	r3, #5
 8003cb6:	d115      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x50c>
 8003cb8:	4b08      	ldr	r3, [pc, #32]	@ (8003cdc <HAL_RCC_OscConfig+0x504>)
 8003cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cbe:	4a07      	ldr	r2, [pc, #28]	@ (8003cdc <HAL_RCC_OscConfig+0x504>)
 8003cc0:	f043 0304 	orr.w	r3, r3, #4
 8003cc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003cc8:	4b04      	ldr	r3, [pc, #16]	@ (8003cdc <HAL_RCC_OscConfig+0x504>)
 8003cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cce:	4a03      	ldr	r2, [pc, #12]	@ (8003cdc <HAL_RCC_OscConfig+0x504>)
 8003cd0:	f043 0301 	orr.w	r3, r3, #1
 8003cd4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003cd8:	e014      	b.n	8003d04 <HAL_RCC_OscConfig+0x52c>
 8003cda:	bf00      	nop
 8003cdc:	40021000 	.word	0x40021000
 8003ce0:	40007000 	.word	0x40007000
 8003ce4:	4b9c      	ldr	r3, [pc, #624]	@ (8003f58 <HAL_RCC_OscConfig+0x780>)
 8003ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cea:	4a9b      	ldr	r2, [pc, #620]	@ (8003f58 <HAL_RCC_OscConfig+0x780>)
 8003cec:	f023 0301 	bic.w	r3, r3, #1
 8003cf0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003cf4:	4b98      	ldr	r3, [pc, #608]	@ (8003f58 <HAL_RCC_OscConfig+0x780>)
 8003cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cfa:	4a97      	ldr	r2, [pc, #604]	@ (8003f58 <HAL_RCC_OscConfig+0x780>)
 8003cfc:	f023 0304 	bic.w	r3, r3, #4
 8003d00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d016      	beq.n	8003d3a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d0c:	f7fd fe78 	bl	8001a00 <HAL_GetTick>
 8003d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d12:	e00a      	b.n	8003d2a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d14:	f7fd fe74 	bl	8001a00 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e12a      	b.n	8003f80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d2a:	4b8b      	ldr	r3, [pc, #556]	@ (8003f58 <HAL_RCC_OscConfig+0x780>)
 8003d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d30:	f003 0302 	and.w	r3, r3, #2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d0ed      	beq.n	8003d14 <HAL_RCC_OscConfig+0x53c>
 8003d38:	e015      	b.n	8003d66 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d3a:	f7fd fe61 	bl	8001a00 <HAL_GetTick>
 8003d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d40:	e00a      	b.n	8003d58 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d42:	f7fd fe5d 	bl	8001a00 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d901      	bls.n	8003d58 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e113      	b.n	8003f80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d58:	4b7f      	ldr	r3, [pc, #508]	@ (8003f58 <HAL_RCC_OscConfig+0x780>)
 8003d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1ed      	bne.n	8003d42 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d66:	7ffb      	ldrb	r3, [r7, #31]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d105      	bne.n	8003d78 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d6c:	4b7a      	ldr	r3, [pc, #488]	@ (8003f58 <HAL_RCC_OscConfig+0x780>)
 8003d6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d70:	4a79      	ldr	r2, [pc, #484]	@ (8003f58 <HAL_RCC_OscConfig+0x780>)
 8003d72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d76:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f000 80fe 	beq.w	8003f7e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	f040 80d0 	bne.w	8003f2c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003d8c:	4b72      	ldr	r3, [pc, #456]	@ (8003f58 <HAL_RCC_OscConfig+0x780>)
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f003 0203 	and.w	r2, r3, #3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d130      	bne.n	8003e02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003daa:	3b01      	subs	r3, #1
 8003dac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d127      	bne.n	8003e02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dbc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d11f      	bne.n	8003e02 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003dcc:	2a07      	cmp	r2, #7
 8003dce:	bf14      	ite	ne
 8003dd0:	2201      	movne	r2, #1
 8003dd2:	2200      	moveq	r2, #0
 8003dd4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d113      	bne.n	8003e02 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003de4:	085b      	lsrs	r3, r3, #1
 8003de6:	3b01      	subs	r3, #1
 8003de8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d109      	bne.n	8003e02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df8:	085b      	lsrs	r3, r3, #1
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d06e      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	2b0c      	cmp	r3, #12
 8003e06:	d069      	beq.n	8003edc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003e08:	4b53      	ldr	r3, [pc, #332]	@ (8003f58 <HAL_RCC_OscConfig+0x780>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d105      	bne.n	8003e20 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003e14:	4b50      	ldr	r3, [pc, #320]	@ (8003f58 <HAL_RCC_OscConfig+0x780>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d001      	beq.n	8003e24 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e0ad      	b.n	8003f80 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003e24:	4b4c      	ldr	r3, [pc, #304]	@ (8003f58 <HAL_RCC_OscConfig+0x780>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a4b      	ldr	r2, [pc, #300]	@ (8003f58 <HAL_RCC_OscConfig+0x780>)
 8003e2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e2e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e30:	f7fd fde6 	bl	8001a00 <HAL_GetTick>
 8003e34:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e36:	e008      	b.n	8003e4a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e38:	f7fd fde2 	bl	8001a00 <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d901      	bls.n	8003e4a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e09a      	b.n	8003f80 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e4a:	4b43      	ldr	r3, [pc, #268]	@ (8003f58 <HAL_RCC_OscConfig+0x780>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d1f0      	bne.n	8003e38 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e56:	4b40      	ldr	r3, [pc, #256]	@ (8003f58 <HAL_RCC_OscConfig+0x780>)
 8003e58:	68da      	ldr	r2, [r3, #12]
 8003e5a:	4b40      	ldr	r3, [pc, #256]	@ (8003f5c <HAL_RCC_OscConfig+0x784>)
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003e66:	3a01      	subs	r2, #1
 8003e68:	0112      	lsls	r2, r2, #4
 8003e6a:	4311      	orrs	r1, r2
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003e70:	0212      	lsls	r2, r2, #8
 8003e72:	4311      	orrs	r1, r2
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003e78:	0852      	lsrs	r2, r2, #1
 8003e7a:	3a01      	subs	r2, #1
 8003e7c:	0552      	lsls	r2, r2, #21
 8003e7e:	4311      	orrs	r1, r2
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003e84:	0852      	lsrs	r2, r2, #1
 8003e86:	3a01      	subs	r2, #1
 8003e88:	0652      	lsls	r2, r2, #25
 8003e8a:	4311      	orrs	r1, r2
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003e90:	0912      	lsrs	r2, r2, #4
 8003e92:	0452      	lsls	r2, r2, #17
 8003e94:	430a      	orrs	r2, r1
 8003e96:	4930      	ldr	r1, [pc, #192]	@ (8003f58 <HAL_RCC_OscConfig+0x780>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003e9c:	4b2e      	ldr	r3, [pc, #184]	@ (8003f58 <HAL_RCC_OscConfig+0x780>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a2d      	ldr	r2, [pc, #180]	@ (8003f58 <HAL_RCC_OscConfig+0x780>)
 8003ea2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ea6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ea8:	4b2b      	ldr	r3, [pc, #172]	@ (8003f58 <HAL_RCC_OscConfig+0x780>)
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	4a2a      	ldr	r2, [pc, #168]	@ (8003f58 <HAL_RCC_OscConfig+0x780>)
 8003eae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003eb2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003eb4:	f7fd fda4 	bl	8001a00 <HAL_GetTick>
 8003eb8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eba:	e008      	b.n	8003ece <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ebc:	f7fd fda0 	bl	8001a00 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e058      	b.n	8003f80 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ece:	4b22      	ldr	r3, [pc, #136]	@ (8003f58 <HAL_RCC_OscConfig+0x780>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d0f0      	beq.n	8003ebc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003eda:	e050      	b.n	8003f7e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e04f      	b.n	8003f80 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ee0:	4b1d      	ldr	r3, [pc, #116]	@ (8003f58 <HAL_RCC_OscConfig+0x780>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d148      	bne.n	8003f7e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003eec:	4b1a      	ldr	r3, [pc, #104]	@ (8003f58 <HAL_RCC_OscConfig+0x780>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a19      	ldr	r2, [pc, #100]	@ (8003f58 <HAL_RCC_OscConfig+0x780>)
 8003ef2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ef6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ef8:	4b17      	ldr	r3, [pc, #92]	@ (8003f58 <HAL_RCC_OscConfig+0x780>)
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	4a16      	ldr	r2, [pc, #88]	@ (8003f58 <HAL_RCC_OscConfig+0x780>)
 8003efe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f02:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f04:	f7fd fd7c 	bl	8001a00 <HAL_GetTick>
 8003f08:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f0a:	e008      	b.n	8003f1e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f0c:	f7fd fd78 	bl	8001a00 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e030      	b.n	8003f80 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8003f58 <HAL_RCC_OscConfig+0x780>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d0f0      	beq.n	8003f0c <HAL_RCC_OscConfig+0x734>
 8003f2a:	e028      	b.n	8003f7e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	2b0c      	cmp	r3, #12
 8003f30:	d023      	beq.n	8003f7a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f32:	4b09      	ldr	r3, [pc, #36]	@ (8003f58 <HAL_RCC_OscConfig+0x780>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a08      	ldr	r2, [pc, #32]	@ (8003f58 <HAL_RCC_OscConfig+0x780>)
 8003f38:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f3e:	f7fd fd5f 	bl	8001a00 <HAL_GetTick>
 8003f42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f44:	e00c      	b.n	8003f60 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f46:	f7fd fd5b 	bl	8001a00 <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d905      	bls.n	8003f60 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e013      	b.n	8003f80 <HAL_RCC_OscConfig+0x7a8>
 8003f58:	40021000 	.word	0x40021000
 8003f5c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f60:	4b09      	ldr	r3, [pc, #36]	@ (8003f88 <HAL_RCC_OscConfig+0x7b0>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1ec      	bne.n	8003f46 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003f6c:	4b06      	ldr	r3, [pc, #24]	@ (8003f88 <HAL_RCC_OscConfig+0x7b0>)
 8003f6e:	68da      	ldr	r2, [r3, #12]
 8003f70:	4905      	ldr	r1, [pc, #20]	@ (8003f88 <HAL_RCC_OscConfig+0x7b0>)
 8003f72:	4b06      	ldr	r3, [pc, #24]	@ (8003f8c <HAL_RCC_OscConfig+0x7b4>)
 8003f74:	4013      	ands	r3, r2
 8003f76:	60cb      	str	r3, [r1, #12]
 8003f78:	e001      	b.n	8003f7e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e000      	b.n	8003f80 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3720      	adds	r7, #32
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	40021000 	.word	0x40021000
 8003f8c:	feeefffc 	.word	0xfeeefffc

08003f90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e0e7      	b.n	8004174 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fa4:	4b75      	ldr	r3, [pc, #468]	@ (800417c <HAL_RCC_ClockConfig+0x1ec>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0307 	and.w	r3, r3, #7
 8003fac:	683a      	ldr	r2, [r7, #0]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d910      	bls.n	8003fd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fb2:	4b72      	ldr	r3, [pc, #456]	@ (800417c <HAL_RCC_ClockConfig+0x1ec>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f023 0207 	bic.w	r2, r3, #7
 8003fba:	4970      	ldr	r1, [pc, #448]	@ (800417c <HAL_RCC_ClockConfig+0x1ec>)
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fc2:	4b6e      	ldr	r3, [pc, #440]	@ (800417c <HAL_RCC_ClockConfig+0x1ec>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0307 	and.w	r3, r3, #7
 8003fca:	683a      	ldr	r2, [r7, #0]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d001      	beq.n	8003fd4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e0cf      	b.n	8004174 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0302 	and.w	r3, r3, #2
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d010      	beq.n	8004002 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689a      	ldr	r2, [r3, #8]
 8003fe4:	4b66      	ldr	r3, [pc, #408]	@ (8004180 <HAL_RCC_ClockConfig+0x1f0>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d908      	bls.n	8004002 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ff0:	4b63      	ldr	r3, [pc, #396]	@ (8004180 <HAL_RCC_ClockConfig+0x1f0>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	4960      	ldr	r1, [pc, #384]	@ (8004180 <HAL_RCC_ClockConfig+0x1f0>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b00      	cmp	r3, #0
 800400c:	d04c      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	2b03      	cmp	r3, #3
 8004014:	d107      	bne.n	8004026 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004016:	4b5a      	ldr	r3, [pc, #360]	@ (8004180 <HAL_RCC_ClockConfig+0x1f0>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d121      	bne.n	8004066 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e0a6      	b.n	8004174 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2b02      	cmp	r3, #2
 800402c:	d107      	bne.n	800403e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800402e:	4b54      	ldr	r3, [pc, #336]	@ (8004180 <HAL_RCC_ClockConfig+0x1f0>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d115      	bne.n	8004066 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e09a      	b.n	8004174 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d107      	bne.n	8004056 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004046:	4b4e      	ldr	r3, [pc, #312]	@ (8004180 <HAL_RCC_ClockConfig+0x1f0>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d109      	bne.n	8004066 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e08e      	b.n	8004174 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004056:	4b4a      	ldr	r3, [pc, #296]	@ (8004180 <HAL_RCC_ClockConfig+0x1f0>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e086      	b.n	8004174 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004066:	4b46      	ldr	r3, [pc, #280]	@ (8004180 <HAL_RCC_ClockConfig+0x1f0>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f023 0203 	bic.w	r2, r3, #3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	4943      	ldr	r1, [pc, #268]	@ (8004180 <HAL_RCC_ClockConfig+0x1f0>)
 8004074:	4313      	orrs	r3, r2
 8004076:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004078:	f7fd fcc2 	bl	8001a00 <HAL_GetTick>
 800407c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800407e:	e00a      	b.n	8004096 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004080:	f7fd fcbe 	bl	8001a00 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800408e:	4293      	cmp	r3, r2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e06e      	b.n	8004174 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004096:	4b3a      	ldr	r3, [pc, #232]	@ (8004180 <HAL_RCC_ClockConfig+0x1f0>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f003 020c 	and.w	r2, r3, #12
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d1eb      	bne.n	8004080 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d010      	beq.n	80040d6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	4b31      	ldr	r3, [pc, #196]	@ (8004180 <HAL_RCC_ClockConfig+0x1f0>)
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d208      	bcs.n	80040d6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040c4:	4b2e      	ldr	r3, [pc, #184]	@ (8004180 <HAL_RCC_ClockConfig+0x1f0>)
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	492b      	ldr	r1, [pc, #172]	@ (8004180 <HAL_RCC_ClockConfig+0x1f0>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040d6:	4b29      	ldr	r3, [pc, #164]	@ (800417c <HAL_RCC_ClockConfig+0x1ec>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0307 	and.w	r3, r3, #7
 80040de:	683a      	ldr	r2, [r7, #0]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d210      	bcs.n	8004106 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040e4:	4b25      	ldr	r3, [pc, #148]	@ (800417c <HAL_RCC_ClockConfig+0x1ec>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f023 0207 	bic.w	r2, r3, #7
 80040ec:	4923      	ldr	r1, [pc, #140]	@ (800417c <HAL_RCC_ClockConfig+0x1ec>)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040f4:	4b21      	ldr	r3, [pc, #132]	@ (800417c <HAL_RCC_ClockConfig+0x1ec>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0307 	and.w	r3, r3, #7
 80040fc:	683a      	ldr	r2, [r7, #0]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d001      	beq.n	8004106 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e036      	b.n	8004174 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0304 	and.w	r3, r3, #4
 800410e:	2b00      	cmp	r3, #0
 8004110:	d008      	beq.n	8004124 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004112:	4b1b      	ldr	r3, [pc, #108]	@ (8004180 <HAL_RCC_ClockConfig+0x1f0>)
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	4918      	ldr	r1, [pc, #96]	@ (8004180 <HAL_RCC_ClockConfig+0x1f0>)
 8004120:	4313      	orrs	r3, r2
 8004122:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0308 	and.w	r3, r3, #8
 800412c:	2b00      	cmp	r3, #0
 800412e:	d009      	beq.n	8004144 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004130:	4b13      	ldr	r3, [pc, #76]	@ (8004180 <HAL_RCC_ClockConfig+0x1f0>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	00db      	lsls	r3, r3, #3
 800413e:	4910      	ldr	r1, [pc, #64]	@ (8004180 <HAL_RCC_ClockConfig+0x1f0>)
 8004140:	4313      	orrs	r3, r2
 8004142:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004144:	f000 f824 	bl	8004190 <HAL_RCC_GetSysClockFreq>
 8004148:	4602      	mov	r2, r0
 800414a:	4b0d      	ldr	r3, [pc, #52]	@ (8004180 <HAL_RCC_ClockConfig+0x1f0>)
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	091b      	lsrs	r3, r3, #4
 8004150:	f003 030f 	and.w	r3, r3, #15
 8004154:	490b      	ldr	r1, [pc, #44]	@ (8004184 <HAL_RCC_ClockConfig+0x1f4>)
 8004156:	5ccb      	ldrb	r3, [r1, r3]
 8004158:	f003 031f 	and.w	r3, r3, #31
 800415c:	fa22 f303 	lsr.w	r3, r2, r3
 8004160:	4a09      	ldr	r2, [pc, #36]	@ (8004188 <HAL_RCC_ClockConfig+0x1f8>)
 8004162:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004164:	4b09      	ldr	r3, [pc, #36]	@ (800418c <HAL_RCC_ClockConfig+0x1fc>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4618      	mov	r0, r3
 800416a:	f7fd fbf9 	bl	8001960 <HAL_InitTick>
 800416e:	4603      	mov	r3, r0
 8004170:	72fb      	strb	r3, [r7, #11]

  return status;
 8004172:	7afb      	ldrb	r3, [r7, #11]
}
 8004174:	4618      	mov	r0, r3
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	40022000 	.word	0x40022000
 8004180:	40021000 	.word	0x40021000
 8004184:	08006154 	.word	0x08006154
 8004188:	20000038 	.word	0x20000038
 800418c:	2000003c 	.word	0x2000003c

08004190 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004190:	b480      	push	{r7}
 8004192:	b089      	sub	sp, #36	@ 0x24
 8004194:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004196:	2300      	movs	r3, #0
 8004198:	61fb      	str	r3, [r7, #28]
 800419a:	2300      	movs	r3, #0
 800419c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800419e:	4b3e      	ldr	r3, [pc, #248]	@ (8004298 <HAL_RCC_GetSysClockFreq+0x108>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f003 030c 	and.w	r3, r3, #12
 80041a6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041a8:	4b3b      	ldr	r3, [pc, #236]	@ (8004298 <HAL_RCC_GetSysClockFreq+0x108>)
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	f003 0303 	and.w	r3, r3, #3
 80041b0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d005      	beq.n	80041c4 <HAL_RCC_GetSysClockFreq+0x34>
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	2b0c      	cmp	r3, #12
 80041bc:	d121      	bne.n	8004202 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d11e      	bne.n	8004202 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80041c4:	4b34      	ldr	r3, [pc, #208]	@ (8004298 <HAL_RCC_GetSysClockFreq+0x108>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0308 	and.w	r3, r3, #8
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d107      	bne.n	80041e0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80041d0:	4b31      	ldr	r3, [pc, #196]	@ (8004298 <HAL_RCC_GetSysClockFreq+0x108>)
 80041d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041d6:	0a1b      	lsrs	r3, r3, #8
 80041d8:	f003 030f 	and.w	r3, r3, #15
 80041dc:	61fb      	str	r3, [r7, #28]
 80041de:	e005      	b.n	80041ec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80041e0:	4b2d      	ldr	r3, [pc, #180]	@ (8004298 <HAL_RCC_GetSysClockFreq+0x108>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	091b      	lsrs	r3, r3, #4
 80041e6:	f003 030f 	and.w	r3, r3, #15
 80041ea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80041ec:	4a2b      	ldr	r2, [pc, #172]	@ (800429c <HAL_RCC_GetSysClockFreq+0x10c>)
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041f4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d10d      	bne.n	8004218 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004200:	e00a      	b.n	8004218 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	2b04      	cmp	r3, #4
 8004206:	d102      	bne.n	800420e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004208:	4b25      	ldr	r3, [pc, #148]	@ (80042a0 <HAL_RCC_GetSysClockFreq+0x110>)
 800420a:	61bb      	str	r3, [r7, #24]
 800420c:	e004      	b.n	8004218 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	2b08      	cmp	r3, #8
 8004212:	d101      	bne.n	8004218 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004214:	4b23      	ldr	r3, [pc, #140]	@ (80042a4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004216:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	2b0c      	cmp	r3, #12
 800421c:	d134      	bne.n	8004288 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800421e:	4b1e      	ldr	r3, [pc, #120]	@ (8004298 <HAL_RCC_GetSysClockFreq+0x108>)
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	f003 0303 	and.w	r3, r3, #3
 8004226:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	2b02      	cmp	r3, #2
 800422c:	d003      	beq.n	8004236 <HAL_RCC_GetSysClockFreq+0xa6>
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	2b03      	cmp	r3, #3
 8004232:	d003      	beq.n	800423c <HAL_RCC_GetSysClockFreq+0xac>
 8004234:	e005      	b.n	8004242 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004236:	4b1a      	ldr	r3, [pc, #104]	@ (80042a0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004238:	617b      	str	r3, [r7, #20]
      break;
 800423a:	e005      	b.n	8004248 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800423c:	4b19      	ldr	r3, [pc, #100]	@ (80042a4 <HAL_RCC_GetSysClockFreq+0x114>)
 800423e:	617b      	str	r3, [r7, #20]
      break;
 8004240:	e002      	b.n	8004248 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	617b      	str	r3, [r7, #20]
      break;
 8004246:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004248:	4b13      	ldr	r3, [pc, #76]	@ (8004298 <HAL_RCC_GetSysClockFreq+0x108>)
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	091b      	lsrs	r3, r3, #4
 800424e:	f003 0307 	and.w	r3, r3, #7
 8004252:	3301      	adds	r3, #1
 8004254:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004256:	4b10      	ldr	r3, [pc, #64]	@ (8004298 <HAL_RCC_GetSysClockFreq+0x108>)
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	0a1b      	lsrs	r3, r3, #8
 800425c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004260:	697a      	ldr	r2, [r7, #20]
 8004262:	fb03 f202 	mul.w	r2, r3, r2
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	fbb2 f3f3 	udiv	r3, r2, r3
 800426c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800426e:	4b0a      	ldr	r3, [pc, #40]	@ (8004298 <HAL_RCC_GetSysClockFreq+0x108>)
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	0e5b      	lsrs	r3, r3, #25
 8004274:	f003 0303 	and.w	r3, r3, #3
 8004278:	3301      	adds	r3, #1
 800427a:	005b      	lsls	r3, r3, #1
 800427c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800427e:	697a      	ldr	r2, [r7, #20]
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	fbb2 f3f3 	udiv	r3, r2, r3
 8004286:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004288:	69bb      	ldr	r3, [r7, #24]
}
 800428a:	4618      	mov	r0, r3
 800428c:	3724      	adds	r7, #36	@ 0x24
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	40021000 	.word	0x40021000
 800429c:	0800616c 	.word	0x0800616c
 80042a0:	00f42400 	.word	0x00f42400
 80042a4:	007a1200 	.word	0x007a1200

080042a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042a8:	b480      	push	{r7}
 80042aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042ac:	4b03      	ldr	r3, [pc, #12]	@ (80042bc <HAL_RCC_GetHCLKFreq+0x14>)
 80042ae:	681b      	ldr	r3, [r3, #0]
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	20000038 	.word	0x20000038

080042c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80042c4:	f7ff fff0 	bl	80042a8 <HAL_RCC_GetHCLKFreq>
 80042c8:	4602      	mov	r2, r0
 80042ca:	4b06      	ldr	r3, [pc, #24]	@ (80042e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	0a1b      	lsrs	r3, r3, #8
 80042d0:	f003 0307 	and.w	r3, r3, #7
 80042d4:	4904      	ldr	r1, [pc, #16]	@ (80042e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80042d6:	5ccb      	ldrb	r3, [r1, r3]
 80042d8:	f003 031f 	and.w	r3, r3, #31
 80042dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	40021000 	.word	0x40021000
 80042e8:	08006164 	.word	0x08006164

080042ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80042f0:	f7ff ffda 	bl	80042a8 <HAL_RCC_GetHCLKFreq>
 80042f4:	4602      	mov	r2, r0
 80042f6:	4b06      	ldr	r3, [pc, #24]	@ (8004310 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	0adb      	lsrs	r3, r3, #11
 80042fc:	f003 0307 	and.w	r3, r3, #7
 8004300:	4904      	ldr	r1, [pc, #16]	@ (8004314 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004302:	5ccb      	ldrb	r3, [r1, r3]
 8004304:	f003 031f 	and.w	r3, r3, #31
 8004308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800430c:	4618      	mov	r0, r3
 800430e:	bd80      	pop	{r7, pc}
 8004310:	40021000 	.word	0x40021000
 8004314:	08006164 	.word	0x08006164

08004318 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004320:	2300      	movs	r3, #0
 8004322:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004324:	4b2a      	ldr	r3, [pc, #168]	@ (80043d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004328:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d003      	beq.n	8004338 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004330:	f7ff f9ee 	bl	8003710 <HAL_PWREx_GetVoltageRange>
 8004334:	6178      	str	r0, [r7, #20]
 8004336:	e014      	b.n	8004362 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004338:	4b25      	ldr	r3, [pc, #148]	@ (80043d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800433a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800433c:	4a24      	ldr	r2, [pc, #144]	@ (80043d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800433e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004342:	6593      	str	r3, [r2, #88]	@ 0x58
 8004344:	4b22      	ldr	r3, [pc, #136]	@ (80043d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004346:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004348:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800434c:	60fb      	str	r3, [r7, #12]
 800434e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004350:	f7ff f9de 	bl	8003710 <HAL_PWREx_GetVoltageRange>
 8004354:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004356:	4b1e      	ldr	r3, [pc, #120]	@ (80043d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800435a:	4a1d      	ldr	r2, [pc, #116]	@ (80043d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800435c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004360:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004368:	d10b      	bne.n	8004382 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2b80      	cmp	r3, #128	@ 0x80
 800436e:	d919      	bls.n	80043a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2ba0      	cmp	r3, #160	@ 0xa0
 8004374:	d902      	bls.n	800437c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004376:	2302      	movs	r3, #2
 8004378:	613b      	str	r3, [r7, #16]
 800437a:	e013      	b.n	80043a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800437c:	2301      	movs	r3, #1
 800437e:	613b      	str	r3, [r7, #16]
 8004380:	e010      	b.n	80043a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2b80      	cmp	r3, #128	@ 0x80
 8004386:	d902      	bls.n	800438e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004388:	2303      	movs	r3, #3
 800438a:	613b      	str	r3, [r7, #16]
 800438c:	e00a      	b.n	80043a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2b80      	cmp	r3, #128	@ 0x80
 8004392:	d102      	bne.n	800439a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004394:	2302      	movs	r3, #2
 8004396:	613b      	str	r3, [r7, #16]
 8004398:	e004      	b.n	80043a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2b70      	cmp	r3, #112	@ 0x70
 800439e:	d101      	bne.n	80043a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80043a0:	2301      	movs	r3, #1
 80043a2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80043a4:	4b0b      	ldr	r3, [pc, #44]	@ (80043d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f023 0207 	bic.w	r2, r3, #7
 80043ac:	4909      	ldr	r1, [pc, #36]	@ (80043d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80043b4:	4b07      	ldr	r3, [pc, #28]	@ (80043d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0307 	and.w	r3, r3, #7
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d001      	beq.n	80043c6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e000      	b.n	80043c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3718      	adds	r7, #24
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	40021000 	.word	0x40021000
 80043d4:	40022000 	.word	0x40022000

080043d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b086      	sub	sp, #24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80043e0:	2300      	movs	r3, #0
 80043e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043e4:	2300      	movs	r3, #0
 80043e6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d041      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80043f8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80043fc:	d02a      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80043fe:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004402:	d824      	bhi.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004404:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004408:	d008      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800440a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800440e:	d81e      	bhi.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004410:	2b00      	cmp	r3, #0
 8004412:	d00a      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004414:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004418:	d010      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800441a:	e018      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800441c:	4b86      	ldr	r3, [pc, #536]	@ (8004638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	4a85      	ldr	r2, [pc, #532]	@ (8004638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004422:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004426:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004428:	e015      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	3304      	adds	r3, #4
 800442e:	2100      	movs	r1, #0
 8004430:	4618      	mov	r0, r3
 8004432:	f000 fabb 	bl	80049ac <RCCEx_PLLSAI1_Config>
 8004436:	4603      	mov	r3, r0
 8004438:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800443a:	e00c      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	3320      	adds	r3, #32
 8004440:	2100      	movs	r1, #0
 8004442:	4618      	mov	r0, r3
 8004444:	f000 fba6 	bl	8004b94 <RCCEx_PLLSAI2_Config>
 8004448:	4603      	mov	r3, r0
 800444a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800444c:	e003      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	74fb      	strb	r3, [r7, #19]
      break;
 8004452:	e000      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004454:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004456:	7cfb      	ldrb	r3, [r7, #19]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d10b      	bne.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800445c:	4b76      	ldr	r3, [pc, #472]	@ (8004638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800445e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004462:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800446a:	4973      	ldr	r1, [pc, #460]	@ (8004638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800446c:	4313      	orrs	r3, r2
 800446e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004472:	e001      	b.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004474:	7cfb      	ldrb	r3, [r7, #19]
 8004476:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d041      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004488:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800448c:	d02a      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800448e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004492:	d824      	bhi.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004494:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004498:	d008      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800449a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800449e:	d81e      	bhi.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x106>
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d00a      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80044a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80044a8:	d010      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80044aa:	e018      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80044ac:	4b62      	ldr	r3, [pc, #392]	@ (8004638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	4a61      	ldr	r2, [pc, #388]	@ (8004638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044b6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80044b8:	e015      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	3304      	adds	r3, #4
 80044be:	2100      	movs	r1, #0
 80044c0:	4618      	mov	r0, r3
 80044c2:	f000 fa73 	bl	80049ac <RCCEx_PLLSAI1_Config>
 80044c6:	4603      	mov	r3, r0
 80044c8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80044ca:	e00c      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	3320      	adds	r3, #32
 80044d0:	2100      	movs	r1, #0
 80044d2:	4618      	mov	r0, r3
 80044d4:	f000 fb5e 	bl	8004b94 <RCCEx_PLLSAI2_Config>
 80044d8:	4603      	mov	r3, r0
 80044da:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80044dc:	e003      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	74fb      	strb	r3, [r7, #19]
      break;
 80044e2:	e000      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80044e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044e6:	7cfb      	ldrb	r3, [r7, #19]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d10b      	bne.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80044ec:	4b52      	ldr	r3, [pc, #328]	@ (8004638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044f2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80044fa:	494f      	ldr	r1, [pc, #316]	@ (8004638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004502:	e001      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004504:	7cfb      	ldrb	r3, [r7, #19]
 8004506:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004510:	2b00      	cmp	r3, #0
 8004512:	f000 80a0 	beq.w	8004656 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004516:	2300      	movs	r3, #0
 8004518:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800451a:	4b47      	ldr	r3, [pc, #284]	@ (8004638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800451c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800451e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d101      	bne.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004526:	2301      	movs	r3, #1
 8004528:	e000      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800452a:	2300      	movs	r3, #0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00d      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004530:	4b41      	ldr	r3, [pc, #260]	@ (8004638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004534:	4a40      	ldr	r2, [pc, #256]	@ (8004638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004536:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800453a:	6593      	str	r3, [r2, #88]	@ 0x58
 800453c:	4b3e      	ldr	r3, [pc, #248]	@ (8004638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800453e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004540:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004544:	60bb      	str	r3, [r7, #8]
 8004546:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004548:	2301      	movs	r3, #1
 800454a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800454c:	4b3b      	ldr	r3, [pc, #236]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a3a      	ldr	r2, [pc, #232]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004552:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004556:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004558:	f7fd fa52 	bl	8001a00 <HAL_GetTick>
 800455c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800455e:	e009      	b.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004560:	f7fd fa4e 	bl	8001a00 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	2b02      	cmp	r3, #2
 800456c:	d902      	bls.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	74fb      	strb	r3, [r7, #19]
        break;
 8004572:	e005      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004574:	4b31      	ldr	r3, [pc, #196]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800457c:	2b00      	cmp	r3, #0
 800457e:	d0ef      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004580:	7cfb      	ldrb	r3, [r7, #19]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d15c      	bne.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004586:	4b2c      	ldr	r3, [pc, #176]	@ (8004638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004588:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800458c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004590:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d01f      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d019      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80045a4:	4b24      	ldr	r3, [pc, #144]	@ (8004638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80045b0:	4b21      	ldr	r3, [pc, #132]	@ (8004638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045b6:	4a20      	ldr	r2, [pc, #128]	@ (8004638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80045c0:	4b1d      	ldr	r3, [pc, #116]	@ (8004638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045c6:	4a1c      	ldr	r2, [pc, #112]	@ (8004638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80045d0:	4a19      	ldr	r2, [pc, #100]	@ (8004638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d016      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e2:	f7fd fa0d 	bl	8001a00 <HAL_GetTick>
 80045e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045e8:	e00b      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ea:	f7fd fa09 	bl	8001a00 <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d902      	bls.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	74fb      	strb	r3, [r7, #19]
            break;
 8004600:	e006      	b.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004602:	4b0d      	ldr	r3, [pc, #52]	@ (8004638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004604:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d0ec      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004610:	7cfb      	ldrb	r3, [r7, #19]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10c      	bne.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004616:	4b08      	ldr	r3, [pc, #32]	@ (8004638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004618:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800461c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004626:	4904      	ldr	r1, [pc, #16]	@ (8004638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004628:	4313      	orrs	r3, r2
 800462a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800462e:	e009      	b.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004630:	7cfb      	ldrb	r3, [r7, #19]
 8004632:	74bb      	strb	r3, [r7, #18]
 8004634:	e006      	b.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004636:	bf00      	nop
 8004638:	40021000 	.word	0x40021000
 800463c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004640:	7cfb      	ldrb	r3, [r7, #19]
 8004642:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004644:	7c7b      	ldrb	r3, [r7, #17]
 8004646:	2b01      	cmp	r3, #1
 8004648:	d105      	bne.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800464a:	4b9e      	ldr	r3, [pc, #632]	@ (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800464c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800464e:	4a9d      	ldr	r2, [pc, #628]	@ (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004650:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004654:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00a      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004662:	4b98      	ldr	r3, [pc, #608]	@ (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004664:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004668:	f023 0203 	bic.w	r2, r3, #3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004670:	4994      	ldr	r1, [pc, #592]	@ (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004672:	4313      	orrs	r3, r2
 8004674:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00a      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004684:	4b8f      	ldr	r3, [pc, #572]	@ (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800468a:	f023 020c 	bic.w	r2, r3, #12
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004692:	498c      	ldr	r1, [pc, #560]	@ (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004694:	4313      	orrs	r3, r2
 8004696:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0304 	and.w	r3, r3, #4
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00a      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80046a6:	4b87      	ldr	r3, [pc, #540]	@ (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b4:	4983      	ldr	r1, [pc, #524]	@ (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0308 	and.w	r3, r3, #8
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00a      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80046c8:	4b7e      	ldr	r3, [pc, #504]	@ (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046d6:	497b      	ldr	r1, [pc, #492]	@ (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0310 	and.w	r3, r3, #16
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00a      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80046ea:	4b76      	ldr	r3, [pc, #472]	@ (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046f8:	4972      	ldr	r1, [pc, #456]	@ (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0320 	and.w	r3, r3, #32
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00a      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800470c:	4b6d      	ldr	r3, [pc, #436]	@ (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800470e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004712:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800471a:	496a      	ldr	r1, [pc, #424]	@ (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800471c:	4313      	orrs	r3, r2
 800471e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00a      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800472e:	4b65      	ldr	r3, [pc, #404]	@ (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004730:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004734:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800473c:	4961      	ldr	r1, [pc, #388]	@ (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800473e:	4313      	orrs	r3, r2
 8004740:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800474c:	2b00      	cmp	r3, #0
 800474e:	d00a      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004750:	4b5c      	ldr	r3, [pc, #368]	@ (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004756:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800475e:	4959      	ldr	r1, [pc, #356]	@ (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004760:	4313      	orrs	r3, r2
 8004762:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00a      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004772:	4b54      	ldr	r3, [pc, #336]	@ (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004774:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004778:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004780:	4950      	ldr	r1, [pc, #320]	@ (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004782:	4313      	orrs	r3, r2
 8004784:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00a      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004794:	4b4b      	ldr	r3, [pc, #300]	@ (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800479a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047a2:	4948      	ldr	r1, [pc, #288]	@ (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00a      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047b6:	4b43      	ldr	r3, [pc, #268]	@ (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047c4:	493f      	ldr	r1, [pc, #252]	@ (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d028      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047d8:	4b3a      	ldr	r3, [pc, #232]	@ (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047de:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047e6:	4937      	ldr	r1, [pc, #220]	@ (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80047f6:	d106      	bne.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047f8:	4b32      	ldr	r3, [pc, #200]	@ (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	4a31      	ldr	r2, [pc, #196]	@ (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004802:	60d3      	str	r3, [r2, #12]
 8004804:	e011      	b.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800480a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800480e:	d10c      	bne.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	3304      	adds	r3, #4
 8004814:	2101      	movs	r1, #1
 8004816:	4618      	mov	r0, r3
 8004818:	f000 f8c8 	bl	80049ac <RCCEx_PLLSAI1_Config>
 800481c:	4603      	mov	r3, r0
 800481e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004820:	7cfb      	ldrb	r3, [r7, #19]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d001      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004826:	7cfb      	ldrb	r3, [r7, #19]
 8004828:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d028      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004836:	4b23      	ldr	r3, [pc, #140]	@ (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004838:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800483c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004844:	491f      	ldr	r1, [pc, #124]	@ (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004846:	4313      	orrs	r3, r2
 8004848:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004850:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004854:	d106      	bne.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004856:	4b1b      	ldr	r3, [pc, #108]	@ (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	4a1a      	ldr	r2, [pc, #104]	@ (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800485c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004860:	60d3      	str	r3, [r2, #12]
 8004862:	e011      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004868:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800486c:	d10c      	bne.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	3304      	adds	r3, #4
 8004872:	2101      	movs	r1, #1
 8004874:	4618      	mov	r0, r3
 8004876:	f000 f899 	bl	80049ac <RCCEx_PLLSAI1_Config>
 800487a:	4603      	mov	r3, r0
 800487c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800487e:	7cfb      	ldrb	r3, [r7, #19]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d001      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004884:	7cfb      	ldrb	r3, [r7, #19]
 8004886:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d02b      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004894:	4b0b      	ldr	r3, [pc, #44]	@ (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800489a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048a2:	4908      	ldr	r1, [pc, #32]	@ (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80048b2:	d109      	bne.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048b4:	4b03      	ldr	r3, [pc, #12]	@ (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	4a02      	ldr	r2, [pc, #8]	@ (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80048be:	60d3      	str	r3, [r2, #12]
 80048c0:	e014      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x514>
 80048c2:	bf00      	nop
 80048c4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80048d0:	d10c      	bne.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	3304      	adds	r3, #4
 80048d6:	2101      	movs	r1, #1
 80048d8:	4618      	mov	r0, r3
 80048da:	f000 f867 	bl	80049ac <RCCEx_PLLSAI1_Config>
 80048de:	4603      	mov	r3, r0
 80048e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048e2:	7cfb      	ldrb	r3, [r7, #19]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d001      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80048e8:	7cfb      	ldrb	r3, [r7, #19]
 80048ea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d02f      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048f8:	4b2b      	ldr	r3, [pc, #172]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048fe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004906:	4928      	ldr	r1, [pc, #160]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004908:	4313      	orrs	r3, r2
 800490a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004912:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004916:	d10d      	bne.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	3304      	adds	r3, #4
 800491c:	2102      	movs	r1, #2
 800491e:	4618      	mov	r0, r3
 8004920:	f000 f844 	bl	80049ac <RCCEx_PLLSAI1_Config>
 8004924:	4603      	mov	r3, r0
 8004926:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004928:	7cfb      	ldrb	r3, [r7, #19]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d014      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800492e:	7cfb      	ldrb	r3, [r7, #19]
 8004930:	74bb      	strb	r3, [r7, #18]
 8004932:	e011      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004938:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800493c:	d10c      	bne.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	3320      	adds	r3, #32
 8004942:	2102      	movs	r1, #2
 8004944:	4618      	mov	r0, r3
 8004946:	f000 f925 	bl	8004b94 <RCCEx_PLLSAI2_Config>
 800494a:	4603      	mov	r3, r0
 800494c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800494e:	7cfb      	ldrb	r3, [r7, #19]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d001      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004954:	7cfb      	ldrb	r3, [r7, #19]
 8004956:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d00a      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004964:	4b10      	ldr	r3, [pc, #64]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800496a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004972:	490d      	ldr	r1, [pc, #52]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004974:	4313      	orrs	r3, r2
 8004976:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00b      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004986:	4b08      	ldr	r3, [pc, #32]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004988:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800498c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004996:	4904      	ldr	r1, [pc, #16]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004998:	4313      	orrs	r3, r2
 800499a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800499e:	7cbb      	ldrb	r3, [r7, #18]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3718      	adds	r7, #24
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	40021000 	.word	0x40021000

080049ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049b6:	2300      	movs	r3, #0
 80049b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80049ba:	4b75      	ldr	r3, [pc, #468]	@ (8004b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	f003 0303 	and.w	r3, r3, #3
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d018      	beq.n	80049f8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80049c6:	4b72      	ldr	r3, [pc, #456]	@ (8004b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	f003 0203 	and.w	r2, r3, #3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d10d      	bne.n	80049f2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
       ||
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d009      	beq.n	80049f2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80049de:	4b6c      	ldr	r3, [pc, #432]	@ (8004b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	091b      	lsrs	r3, r3, #4
 80049e4:	f003 0307 	and.w	r3, r3, #7
 80049e8:	1c5a      	adds	r2, r3, #1
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
       ||
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d047      	beq.n	8004a82 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	73fb      	strb	r3, [r7, #15]
 80049f6:	e044      	b.n	8004a82 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2b03      	cmp	r3, #3
 80049fe:	d018      	beq.n	8004a32 <RCCEx_PLLSAI1_Config+0x86>
 8004a00:	2b03      	cmp	r3, #3
 8004a02:	d825      	bhi.n	8004a50 <RCCEx_PLLSAI1_Config+0xa4>
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d002      	beq.n	8004a0e <RCCEx_PLLSAI1_Config+0x62>
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d009      	beq.n	8004a20 <RCCEx_PLLSAI1_Config+0x74>
 8004a0c:	e020      	b.n	8004a50 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a0e:	4b60      	ldr	r3, [pc, #384]	@ (8004b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d11d      	bne.n	8004a56 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a1e:	e01a      	b.n	8004a56 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a20:	4b5b      	ldr	r3, [pc, #364]	@ (8004b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d116      	bne.n	8004a5a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a30:	e013      	b.n	8004a5a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a32:	4b57      	ldr	r3, [pc, #348]	@ (8004b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d10f      	bne.n	8004a5e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a3e:	4b54      	ldr	r3, [pc, #336]	@ (8004b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d109      	bne.n	8004a5e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a4e:	e006      	b.n	8004a5e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	73fb      	strb	r3, [r7, #15]
      break;
 8004a54:	e004      	b.n	8004a60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a56:	bf00      	nop
 8004a58:	e002      	b.n	8004a60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a5a:	bf00      	nop
 8004a5c:	e000      	b.n	8004a60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a5e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a60:	7bfb      	ldrb	r3, [r7, #15]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d10d      	bne.n	8004a82 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a66:	4b4a      	ldr	r3, [pc, #296]	@ (8004b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6819      	ldr	r1, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	3b01      	subs	r3, #1
 8004a78:	011b      	lsls	r3, r3, #4
 8004a7a:	430b      	orrs	r3, r1
 8004a7c:	4944      	ldr	r1, [pc, #272]	@ (8004b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a82:	7bfb      	ldrb	r3, [r7, #15]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d17d      	bne.n	8004b84 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004a88:	4b41      	ldr	r3, [pc, #260]	@ (8004b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a40      	ldr	r2, [pc, #256]	@ (8004b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a8e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004a92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a94:	f7fc ffb4 	bl	8001a00 <HAL_GetTick>
 8004a98:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a9a:	e009      	b.n	8004ab0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a9c:	f7fc ffb0 	bl	8001a00 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d902      	bls.n	8004ab0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	73fb      	strb	r3, [r7, #15]
        break;
 8004aae:	e005      	b.n	8004abc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ab0:	4b37      	ldr	r3, [pc, #220]	@ (8004b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1ef      	bne.n	8004a9c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004abc:	7bfb      	ldrb	r3, [r7, #15]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d160      	bne.n	8004b84 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d111      	bne.n	8004aec <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ac8:	4b31      	ldr	r3, [pc, #196]	@ (8004b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004ad0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	6892      	ldr	r2, [r2, #8]
 8004ad8:	0211      	lsls	r1, r2, #8
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	68d2      	ldr	r2, [r2, #12]
 8004ade:	0912      	lsrs	r2, r2, #4
 8004ae0:	0452      	lsls	r2, r2, #17
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	492a      	ldr	r1, [pc, #168]	@ (8004b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	610b      	str	r3, [r1, #16]
 8004aea:	e027      	b.n	8004b3c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d112      	bne.n	8004b18 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004af2:	4b27      	ldr	r3, [pc, #156]	@ (8004b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004afa:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	6892      	ldr	r2, [r2, #8]
 8004b02:	0211      	lsls	r1, r2, #8
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	6912      	ldr	r2, [r2, #16]
 8004b08:	0852      	lsrs	r2, r2, #1
 8004b0a:	3a01      	subs	r2, #1
 8004b0c:	0552      	lsls	r2, r2, #21
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	491f      	ldr	r1, [pc, #124]	@ (8004b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	610b      	str	r3, [r1, #16]
 8004b16:	e011      	b.n	8004b3c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b18:	4b1d      	ldr	r3, [pc, #116]	@ (8004b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004b20:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	6892      	ldr	r2, [r2, #8]
 8004b28:	0211      	lsls	r1, r2, #8
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	6952      	ldr	r2, [r2, #20]
 8004b2e:	0852      	lsrs	r2, r2, #1
 8004b30:	3a01      	subs	r2, #1
 8004b32:	0652      	lsls	r2, r2, #25
 8004b34:	430a      	orrs	r2, r1
 8004b36:	4916      	ldr	r1, [pc, #88]	@ (8004b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004b3c:	4b14      	ldr	r3, [pc, #80]	@ (8004b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a13      	ldr	r2, [pc, #76]	@ (8004b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b42:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004b46:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b48:	f7fc ff5a 	bl	8001a00 <HAL_GetTick>
 8004b4c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b4e:	e009      	b.n	8004b64 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b50:	f7fc ff56 	bl	8001a00 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d902      	bls.n	8004b64 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	73fb      	strb	r3, [r7, #15]
          break;
 8004b62:	e005      	b.n	8004b70 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b64:	4b0a      	ldr	r3, [pc, #40]	@ (8004b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d0ef      	beq.n	8004b50 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004b70:	7bfb      	ldrb	r3, [r7, #15]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d106      	bne.n	8004b84 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004b76:	4b06      	ldr	r3, [pc, #24]	@ (8004b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b78:	691a      	ldr	r2, [r3, #16]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	4904      	ldr	r1, [pc, #16]	@ (8004b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3710      	adds	r7, #16
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	40021000 	.word	0x40021000

08004b94 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004ba2:	4b6a      	ldr	r3, [pc, #424]	@ (8004d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	f003 0303 	and.w	r3, r3, #3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d018      	beq.n	8004be0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004bae:	4b67      	ldr	r3, [pc, #412]	@ (8004d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	f003 0203 	and.w	r2, r3, #3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d10d      	bne.n	8004bda <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
       ||
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d009      	beq.n	8004bda <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004bc6:	4b61      	ldr	r3, [pc, #388]	@ (8004d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	091b      	lsrs	r3, r3, #4
 8004bcc:	f003 0307 	and.w	r3, r3, #7
 8004bd0:	1c5a      	adds	r2, r3, #1
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
       ||
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d047      	beq.n	8004c6a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	73fb      	strb	r3, [r7, #15]
 8004bde:	e044      	b.n	8004c6a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2b03      	cmp	r3, #3
 8004be6:	d018      	beq.n	8004c1a <RCCEx_PLLSAI2_Config+0x86>
 8004be8:	2b03      	cmp	r3, #3
 8004bea:	d825      	bhi.n	8004c38 <RCCEx_PLLSAI2_Config+0xa4>
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d002      	beq.n	8004bf6 <RCCEx_PLLSAI2_Config+0x62>
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d009      	beq.n	8004c08 <RCCEx_PLLSAI2_Config+0x74>
 8004bf4:	e020      	b.n	8004c38 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004bf6:	4b55      	ldr	r3, [pc, #340]	@ (8004d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0302 	and.w	r3, r3, #2
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d11d      	bne.n	8004c3e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c06:	e01a      	b.n	8004c3e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c08:	4b50      	ldr	r3, [pc, #320]	@ (8004d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d116      	bne.n	8004c42 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c18:	e013      	b.n	8004c42 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c1a:	4b4c      	ldr	r3, [pc, #304]	@ (8004d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d10f      	bne.n	8004c46 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c26:	4b49      	ldr	r3, [pc, #292]	@ (8004d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d109      	bne.n	8004c46 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c36:	e006      	b.n	8004c46 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c3c:	e004      	b.n	8004c48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004c3e:	bf00      	nop
 8004c40:	e002      	b.n	8004c48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004c42:	bf00      	nop
 8004c44:	e000      	b.n	8004c48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004c46:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c48:	7bfb      	ldrb	r3, [r7, #15]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d10d      	bne.n	8004c6a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c4e:	4b3f      	ldr	r3, [pc, #252]	@ (8004d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6819      	ldr	r1, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	011b      	lsls	r3, r3, #4
 8004c62:	430b      	orrs	r3, r1
 8004c64:	4939      	ldr	r1, [pc, #228]	@ (8004d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004c6a:	7bfb      	ldrb	r3, [r7, #15]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d167      	bne.n	8004d40 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004c70:	4b36      	ldr	r3, [pc, #216]	@ (8004d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a35      	ldr	r2, [pc, #212]	@ (8004d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c7c:	f7fc fec0 	bl	8001a00 <HAL_GetTick>
 8004c80:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c82:	e009      	b.n	8004c98 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c84:	f7fc febc 	bl	8001a00 <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d902      	bls.n	8004c98 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	73fb      	strb	r3, [r7, #15]
        break;
 8004c96:	e005      	b.n	8004ca4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c98:	4b2c      	ldr	r3, [pc, #176]	@ (8004d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1ef      	bne.n	8004c84 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004ca4:	7bfb      	ldrb	r3, [r7, #15]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d14a      	bne.n	8004d40 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d111      	bne.n	8004cd4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004cb0:	4b26      	ldr	r3, [pc, #152]	@ (8004d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004cb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	6892      	ldr	r2, [r2, #8]
 8004cc0:	0211      	lsls	r1, r2, #8
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	68d2      	ldr	r2, [r2, #12]
 8004cc6:	0912      	lsrs	r2, r2, #4
 8004cc8:	0452      	lsls	r2, r2, #17
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	491f      	ldr	r1, [pc, #124]	@ (8004d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	614b      	str	r3, [r1, #20]
 8004cd2:	e011      	b.n	8004cf8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004cd4:	4b1d      	ldr	r3, [pc, #116]	@ (8004d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cd6:	695b      	ldr	r3, [r3, #20]
 8004cd8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004cdc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	6892      	ldr	r2, [r2, #8]
 8004ce4:	0211      	lsls	r1, r2, #8
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	6912      	ldr	r2, [r2, #16]
 8004cea:	0852      	lsrs	r2, r2, #1
 8004cec:	3a01      	subs	r2, #1
 8004cee:	0652      	lsls	r2, r2, #25
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	4916      	ldr	r1, [pc, #88]	@ (8004d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004cf8:	4b14      	ldr	r3, [pc, #80]	@ (8004d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a13      	ldr	r2, [pc, #76]	@ (8004d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d02:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d04:	f7fc fe7c 	bl	8001a00 <HAL_GetTick>
 8004d08:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d0a:	e009      	b.n	8004d20 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d0c:	f7fc fe78 	bl	8001a00 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d902      	bls.n	8004d20 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	73fb      	strb	r3, [r7, #15]
          break;
 8004d1e:	e005      	b.n	8004d2c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d20:	4b0a      	ldr	r3, [pc, #40]	@ (8004d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d0ef      	beq.n	8004d0c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004d2c:	7bfb      	ldrb	r3, [r7, #15]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d106      	bne.n	8004d40 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004d32:	4b06      	ldr	r3, [pc, #24]	@ (8004d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d34:	695a      	ldr	r2, [r3, #20]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	4904      	ldr	r1, [pc, #16]	@ (8004d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	40021000 	.word	0x40021000

08004d50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d101      	bne.n	8004d62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e040      	b.n	8004de4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d106      	bne.n	8004d78 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f7fc fb94 	bl	80014a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2224      	movs	r2, #36	@ 0x24
 8004d7c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f022 0201 	bic.w	r2, r2, #1
 8004d8c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d002      	beq.n	8004d9c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 fae0 	bl	800535c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 f825 	bl	8004dec <UART_SetConfig>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d101      	bne.n	8004dac <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e01b      	b.n	8004de4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	685a      	ldr	r2, [r3, #4]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004dba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	689a      	ldr	r2, [r3, #8]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004dca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f042 0201 	orr.w	r2, r2, #1
 8004dda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f000 fb5f 	bl	80054a0 <UART_CheckIdleState>
 8004de2:	4603      	mov	r3, r0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3708      	adds	r7, #8
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004df0:	b08a      	sub	sp, #40	@ 0x28
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004df6:	2300      	movs	r3, #0
 8004df8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	689a      	ldr	r2, [r3, #8]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	431a      	orrs	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	431a      	orrs	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	69db      	ldr	r3, [r3, #28]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	4ba4      	ldr	r3, [pc, #656]	@ (80050ac <UART_SetConfig+0x2c0>)
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	6812      	ldr	r2, [r2, #0]
 8004e22:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004e24:	430b      	orrs	r3, r1
 8004e26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	68da      	ldr	r2, [r3, #12]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a99      	ldr	r2, [pc, #612]	@ (80050b0 <UART_SetConfig+0x2c4>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d004      	beq.n	8004e58 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e54:	4313      	orrs	r3, r2
 8004e56:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a90      	ldr	r2, [pc, #576]	@ (80050b4 <UART_SetConfig+0x2c8>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d126      	bne.n	8004ec4 <UART_SetConfig+0xd8>
 8004e76:	4b90      	ldr	r3, [pc, #576]	@ (80050b8 <UART_SetConfig+0x2cc>)
 8004e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e7c:	f003 0303 	and.w	r3, r3, #3
 8004e80:	2b03      	cmp	r3, #3
 8004e82:	d81b      	bhi.n	8004ebc <UART_SetConfig+0xd0>
 8004e84:	a201      	add	r2, pc, #4	@ (adr r2, 8004e8c <UART_SetConfig+0xa0>)
 8004e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e8a:	bf00      	nop
 8004e8c:	08004e9d 	.word	0x08004e9d
 8004e90:	08004ead 	.word	0x08004ead
 8004e94:	08004ea5 	.word	0x08004ea5
 8004e98:	08004eb5 	.word	0x08004eb5
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ea2:	e116      	b.n	80050d2 <UART_SetConfig+0x2e6>
 8004ea4:	2302      	movs	r3, #2
 8004ea6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004eaa:	e112      	b.n	80050d2 <UART_SetConfig+0x2e6>
 8004eac:	2304      	movs	r3, #4
 8004eae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004eb2:	e10e      	b.n	80050d2 <UART_SetConfig+0x2e6>
 8004eb4:	2308      	movs	r3, #8
 8004eb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004eba:	e10a      	b.n	80050d2 <UART_SetConfig+0x2e6>
 8004ebc:	2310      	movs	r3, #16
 8004ebe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ec2:	e106      	b.n	80050d2 <UART_SetConfig+0x2e6>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a7c      	ldr	r2, [pc, #496]	@ (80050bc <UART_SetConfig+0x2d0>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d138      	bne.n	8004f40 <UART_SetConfig+0x154>
 8004ece:	4b7a      	ldr	r3, [pc, #488]	@ (80050b8 <UART_SetConfig+0x2cc>)
 8004ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ed4:	f003 030c 	and.w	r3, r3, #12
 8004ed8:	2b0c      	cmp	r3, #12
 8004eda:	d82d      	bhi.n	8004f38 <UART_SetConfig+0x14c>
 8004edc:	a201      	add	r2, pc, #4	@ (adr r2, 8004ee4 <UART_SetConfig+0xf8>)
 8004ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee2:	bf00      	nop
 8004ee4:	08004f19 	.word	0x08004f19
 8004ee8:	08004f39 	.word	0x08004f39
 8004eec:	08004f39 	.word	0x08004f39
 8004ef0:	08004f39 	.word	0x08004f39
 8004ef4:	08004f29 	.word	0x08004f29
 8004ef8:	08004f39 	.word	0x08004f39
 8004efc:	08004f39 	.word	0x08004f39
 8004f00:	08004f39 	.word	0x08004f39
 8004f04:	08004f21 	.word	0x08004f21
 8004f08:	08004f39 	.word	0x08004f39
 8004f0c:	08004f39 	.word	0x08004f39
 8004f10:	08004f39 	.word	0x08004f39
 8004f14:	08004f31 	.word	0x08004f31
 8004f18:	2300      	movs	r3, #0
 8004f1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f1e:	e0d8      	b.n	80050d2 <UART_SetConfig+0x2e6>
 8004f20:	2302      	movs	r3, #2
 8004f22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f26:	e0d4      	b.n	80050d2 <UART_SetConfig+0x2e6>
 8004f28:	2304      	movs	r3, #4
 8004f2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f2e:	e0d0      	b.n	80050d2 <UART_SetConfig+0x2e6>
 8004f30:	2308      	movs	r3, #8
 8004f32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f36:	e0cc      	b.n	80050d2 <UART_SetConfig+0x2e6>
 8004f38:	2310      	movs	r3, #16
 8004f3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f3e:	e0c8      	b.n	80050d2 <UART_SetConfig+0x2e6>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a5e      	ldr	r2, [pc, #376]	@ (80050c0 <UART_SetConfig+0x2d4>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d125      	bne.n	8004f96 <UART_SetConfig+0x1aa>
 8004f4a:	4b5b      	ldr	r3, [pc, #364]	@ (80050b8 <UART_SetConfig+0x2cc>)
 8004f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f50:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004f54:	2b30      	cmp	r3, #48	@ 0x30
 8004f56:	d016      	beq.n	8004f86 <UART_SetConfig+0x19a>
 8004f58:	2b30      	cmp	r3, #48	@ 0x30
 8004f5a:	d818      	bhi.n	8004f8e <UART_SetConfig+0x1a2>
 8004f5c:	2b20      	cmp	r3, #32
 8004f5e:	d00a      	beq.n	8004f76 <UART_SetConfig+0x18a>
 8004f60:	2b20      	cmp	r3, #32
 8004f62:	d814      	bhi.n	8004f8e <UART_SetConfig+0x1a2>
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d002      	beq.n	8004f6e <UART_SetConfig+0x182>
 8004f68:	2b10      	cmp	r3, #16
 8004f6a:	d008      	beq.n	8004f7e <UART_SetConfig+0x192>
 8004f6c:	e00f      	b.n	8004f8e <UART_SetConfig+0x1a2>
 8004f6e:	2300      	movs	r3, #0
 8004f70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f74:	e0ad      	b.n	80050d2 <UART_SetConfig+0x2e6>
 8004f76:	2302      	movs	r3, #2
 8004f78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f7c:	e0a9      	b.n	80050d2 <UART_SetConfig+0x2e6>
 8004f7e:	2304      	movs	r3, #4
 8004f80:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f84:	e0a5      	b.n	80050d2 <UART_SetConfig+0x2e6>
 8004f86:	2308      	movs	r3, #8
 8004f88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f8c:	e0a1      	b.n	80050d2 <UART_SetConfig+0x2e6>
 8004f8e:	2310      	movs	r3, #16
 8004f90:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f94:	e09d      	b.n	80050d2 <UART_SetConfig+0x2e6>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a4a      	ldr	r2, [pc, #296]	@ (80050c4 <UART_SetConfig+0x2d8>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d125      	bne.n	8004fec <UART_SetConfig+0x200>
 8004fa0:	4b45      	ldr	r3, [pc, #276]	@ (80050b8 <UART_SetConfig+0x2cc>)
 8004fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fa6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004faa:	2bc0      	cmp	r3, #192	@ 0xc0
 8004fac:	d016      	beq.n	8004fdc <UART_SetConfig+0x1f0>
 8004fae:	2bc0      	cmp	r3, #192	@ 0xc0
 8004fb0:	d818      	bhi.n	8004fe4 <UART_SetConfig+0x1f8>
 8004fb2:	2b80      	cmp	r3, #128	@ 0x80
 8004fb4:	d00a      	beq.n	8004fcc <UART_SetConfig+0x1e0>
 8004fb6:	2b80      	cmp	r3, #128	@ 0x80
 8004fb8:	d814      	bhi.n	8004fe4 <UART_SetConfig+0x1f8>
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d002      	beq.n	8004fc4 <UART_SetConfig+0x1d8>
 8004fbe:	2b40      	cmp	r3, #64	@ 0x40
 8004fc0:	d008      	beq.n	8004fd4 <UART_SetConfig+0x1e8>
 8004fc2:	e00f      	b.n	8004fe4 <UART_SetConfig+0x1f8>
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fca:	e082      	b.n	80050d2 <UART_SetConfig+0x2e6>
 8004fcc:	2302      	movs	r3, #2
 8004fce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fd2:	e07e      	b.n	80050d2 <UART_SetConfig+0x2e6>
 8004fd4:	2304      	movs	r3, #4
 8004fd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fda:	e07a      	b.n	80050d2 <UART_SetConfig+0x2e6>
 8004fdc:	2308      	movs	r3, #8
 8004fde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fe2:	e076      	b.n	80050d2 <UART_SetConfig+0x2e6>
 8004fe4:	2310      	movs	r3, #16
 8004fe6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fea:	e072      	b.n	80050d2 <UART_SetConfig+0x2e6>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a35      	ldr	r2, [pc, #212]	@ (80050c8 <UART_SetConfig+0x2dc>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d12a      	bne.n	800504c <UART_SetConfig+0x260>
 8004ff6:	4b30      	ldr	r3, [pc, #192]	@ (80050b8 <UART_SetConfig+0x2cc>)
 8004ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ffc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005000:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005004:	d01a      	beq.n	800503c <UART_SetConfig+0x250>
 8005006:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800500a:	d81b      	bhi.n	8005044 <UART_SetConfig+0x258>
 800500c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005010:	d00c      	beq.n	800502c <UART_SetConfig+0x240>
 8005012:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005016:	d815      	bhi.n	8005044 <UART_SetConfig+0x258>
 8005018:	2b00      	cmp	r3, #0
 800501a:	d003      	beq.n	8005024 <UART_SetConfig+0x238>
 800501c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005020:	d008      	beq.n	8005034 <UART_SetConfig+0x248>
 8005022:	e00f      	b.n	8005044 <UART_SetConfig+0x258>
 8005024:	2300      	movs	r3, #0
 8005026:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800502a:	e052      	b.n	80050d2 <UART_SetConfig+0x2e6>
 800502c:	2302      	movs	r3, #2
 800502e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005032:	e04e      	b.n	80050d2 <UART_SetConfig+0x2e6>
 8005034:	2304      	movs	r3, #4
 8005036:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800503a:	e04a      	b.n	80050d2 <UART_SetConfig+0x2e6>
 800503c:	2308      	movs	r3, #8
 800503e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005042:	e046      	b.n	80050d2 <UART_SetConfig+0x2e6>
 8005044:	2310      	movs	r3, #16
 8005046:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800504a:	e042      	b.n	80050d2 <UART_SetConfig+0x2e6>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a17      	ldr	r2, [pc, #92]	@ (80050b0 <UART_SetConfig+0x2c4>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d13a      	bne.n	80050cc <UART_SetConfig+0x2e0>
 8005056:	4b18      	ldr	r3, [pc, #96]	@ (80050b8 <UART_SetConfig+0x2cc>)
 8005058:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800505c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005060:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005064:	d01a      	beq.n	800509c <UART_SetConfig+0x2b0>
 8005066:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800506a:	d81b      	bhi.n	80050a4 <UART_SetConfig+0x2b8>
 800506c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005070:	d00c      	beq.n	800508c <UART_SetConfig+0x2a0>
 8005072:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005076:	d815      	bhi.n	80050a4 <UART_SetConfig+0x2b8>
 8005078:	2b00      	cmp	r3, #0
 800507a:	d003      	beq.n	8005084 <UART_SetConfig+0x298>
 800507c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005080:	d008      	beq.n	8005094 <UART_SetConfig+0x2a8>
 8005082:	e00f      	b.n	80050a4 <UART_SetConfig+0x2b8>
 8005084:	2300      	movs	r3, #0
 8005086:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800508a:	e022      	b.n	80050d2 <UART_SetConfig+0x2e6>
 800508c:	2302      	movs	r3, #2
 800508e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005092:	e01e      	b.n	80050d2 <UART_SetConfig+0x2e6>
 8005094:	2304      	movs	r3, #4
 8005096:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800509a:	e01a      	b.n	80050d2 <UART_SetConfig+0x2e6>
 800509c:	2308      	movs	r3, #8
 800509e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050a2:	e016      	b.n	80050d2 <UART_SetConfig+0x2e6>
 80050a4:	2310      	movs	r3, #16
 80050a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050aa:	e012      	b.n	80050d2 <UART_SetConfig+0x2e6>
 80050ac:	efff69f3 	.word	0xefff69f3
 80050b0:	40008000 	.word	0x40008000
 80050b4:	40013800 	.word	0x40013800
 80050b8:	40021000 	.word	0x40021000
 80050bc:	40004400 	.word	0x40004400
 80050c0:	40004800 	.word	0x40004800
 80050c4:	40004c00 	.word	0x40004c00
 80050c8:	40005000 	.word	0x40005000
 80050cc:	2310      	movs	r3, #16
 80050ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a9f      	ldr	r2, [pc, #636]	@ (8005354 <UART_SetConfig+0x568>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d17a      	bne.n	80051d2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80050dc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80050e0:	2b08      	cmp	r3, #8
 80050e2:	d824      	bhi.n	800512e <UART_SetConfig+0x342>
 80050e4:	a201      	add	r2, pc, #4	@ (adr r2, 80050ec <UART_SetConfig+0x300>)
 80050e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ea:	bf00      	nop
 80050ec:	08005111 	.word	0x08005111
 80050f0:	0800512f 	.word	0x0800512f
 80050f4:	08005119 	.word	0x08005119
 80050f8:	0800512f 	.word	0x0800512f
 80050fc:	0800511f 	.word	0x0800511f
 8005100:	0800512f 	.word	0x0800512f
 8005104:	0800512f 	.word	0x0800512f
 8005108:	0800512f 	.word	0x0800512f
 800510c:	08005127 	.word	0x08005127
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005110:	f7ff f8d6 	bl	80042c0 <HAL_RCC_GetPCLK1Freq>
 8005114:	61f8      	str	r0, [r7, #28]
        break;
 8005116:	e010      	b.n	800513a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005118:	4b8f      	ldr	r3, [pc, #572]	@ (8005358 <UART_SetConfig+0x56c>)
 800511a:	61fb      	str	r3, [r7, #28]
        break;
 800511c:	e00d      	b.n	800513a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800511e:	f7ff f837 	bl	8004190 <HAL_RCC_GetSysClockFreq>
 8005122:	61f8      	str	r0, [r7, #28]
        break;
 8005124:	e009      	b.n	800513a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005126:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800512a:	61fb      	str	r3, [r7, #28]
        break;
 800512c:	e005      	b.n	800513a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800512e:	2300      	movs	r3, #0
 8005130:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005138:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	2b00      	cmp	r3, #0
 800513e:	f000 80fb 	beq.w	8005338 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	685a      	ldr	r2, [r3, #4]
 8005146:	4613      	mov	r3, r2
 8005148:	005b      	lsls	r3, r3, #1
 800514a:	4413      	add	r3, r2
 800514c:	69fa      	ldr	r2, [r7, #28]
 800514e:	429a      	cmp	r2, r3
 8005150:	d305      	bcc.n	800515e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005158:	69fa      	ldr	r2, [r7, #28]
 800515a:	429a      	cmp	r2, r3
 800515c:	d903      	bls.n	8005166 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005164:	e0e8      	b.n	8005338 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	2200      	movs	r2, #0
 800516a:	461c      	mov	r4, r3
 800516c:	4615      	mov	r5, r2
 800516e:	f04f 0200 	mov.w	r2, #0
 8005172:	f04f 0300 	mov.w	r3, #0
 8005176:	022b      	lsls	r3, r5, #8
 8005178:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800517c:	0222      	lsls	r2, r4, #8
 800517e:	68f9      	ldr	r1, [r7, #12]
 8005180:	6849      	ldr	r1, [r1, #4]
 8005182:	0849      	lsrs	r1, r1, #1
 8005184:	2000      	movs	r0, #0
 8005186:	4688      	mov	r8, r1
 8005188:	4681      	mov	r9, r0
 800518a:	eb12 0a08 	adds.w	sl, r2, r8
 800518e:	eb43 0b09 	adc.w	fp, r3, r9
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	603b      	str	r3, [r7, #0]
 800519a:	607a      	str	r2, [r7, #4]
 800519c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051a0:	4650      	mov	r0, sl
 80051a2:	4659      	mov	r1, fp
 80051a4:	f7fb f810 	bl	80001c8 <__aeabi_uldivmod>
 80051a8:	4602      	mov	r2, r0
 80051aa:	460b      	mov	r3, r1
 80051ac:	4613      	mov	r3, r2
 80051ae:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051b6:	d308      	bcc.n	80051ca <UART_SetConfig+0x3de>
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051be:	d204      	bcs.n	80051ca <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	69ba      	ldr	r2, [r7, #24]
 80051c6:	60da      	str	r2, [r3, #12]
 80051c8:	e0b6      	b.n	8005338 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80051d0:	e0b2      	b.n	8005338 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	69db      	ldr	r3, [r3, #28]
 80051d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051da:	d15e      	bne.n	800529a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80051dc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80051e0:	2b08      	cmp	r3, #8
 80051e2:	d828      	bhi.n	8005236 <UART_SetConfig+0x44a>
 80051e4:	a201      	add	r2, pc, #4	@ (adr r2, 80051ec <UART_SetConfig+0x400>)
 80051e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ea:	bf00      	nop
 80051ec:	08005211 	.word	0x08005211
 80051f0:	08005219 	.word	0x08005219
 80051f4:	08005221 	.word	0x08005221
 80051f8:	08005237 	.word	0x08005237
 80051fc:	08005227 	.word	0x08005227
 8005200:	08005237 	.word	0x08005237
 8005204:	08005237 	.word	0x08005237
 8005208:	08005237 	.word	0x08005237
 800520c:	0800522f 	.word	0x0800522f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005210:	f7ff f856 	bl	80042c0 <HAL_RCC_GetPCLK1Freq>
 8005214:	61f8      	str	r0, [r7, #28]
        break;
 8005216:	e014      	b.n	8005242 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005218:	f7ff f868 	bl	80042ec <HAL_RCC_GetPCLK2Freq>
 800521c:	61f8      	str	r0, [r7, #28]
        break;
 800521e:	e010      	b.n	8005242 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005220:	4b4d      	ldr	r3, [pc, #308]	@ (8005358 <UART_SetConfig+0x56c>)
 8005222:	61fb      	str	r3, [r7, #28]
        break;
 8005224:	e00d      	b.n	8005242 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005226:	f7fe ffb3 	bl	8004190 <HAL_RCC_GetSysClockFreq>
 800522a:	61f8      	str	r0, [r7, #28]
        break;
 800522c:	e009      	b.n	8005242 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800522e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005232:	61fb      	str	r3, [r7, #28]
        break;
 8005234:	e005      	b.n	8005242 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005236:	2300      	movs	r3, #0
 8005238:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005240:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d077      	beq.n	8005338 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	005a      	lsls	r2, r3, #1
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	085b      	lsrs	r3, r3, #1
 8005252:	441a      	add	r2, r3
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	fbb2 f3f3 	udiv	r3, r2, r3
 800525c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	2b0f      	cmp	r3, #15
 8005262:	d916      	bls.n	8005292 <UART_SetConfig+0x4a6>
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800526a:	d212      	bcs.n	8005292 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	b29b      	uxth	r3, r3
 8005270:	f023 030f 	bic.w	r3, r3, #15
 8005274:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	085b      	lsrs	r3, r3, #1
 800527a:	b29b      	uxth	r3, r3
 800527c:	f003 0307 	and.w	r3, r3, #7
 8005280:	b29a      	uxth	r2, r3
 8005282:	8afb      	ldrh	r3, [r7, #22]
 8005284:	4313      	orrs	r3, r2
 8005286:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	8afa      	ldrh	r2, [r7, #22]
 800528e:	60da      	str	r2, [r3, #12]
 8005290:	e052      	b.n	8005338 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005298:	e04e      	b.n	8005338 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800529a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800529e:	2b08      	cmp	r3, #8
 80052a0:	d827      	bhi.n	80052f2 <UART_SetConfig+0x506>
 80052a2:	a201      	add	r2, pc, #4	@ (adr r2, 80052a8 <UART_SetConfig+0x4bc>)
 80052a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a8:	080052cd 	.word	0x080052cd
 80052ac:	080052d5 	.word	0x080052d5
 80052b0:	080052dd 	.word	0x080052dd
 80052b4:	080052f3 	.word	0x080052f3
 80052b8:	080052e3 	.word	0x080052e3
 80052bc:	080052f3 	.word	0x080052f3
 80052c0:	080052f3 	.word	0x080052f3
 80052c4:	080052f3 	.word	0x080052f3
 80052c8:	080052eb 	.word	0x080052eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052cc:	f7fe fff8 	bl	80042c0 <HAL_RCC_GetPCLK1Freq>
 80052d0:	61f8      	str	r0, [r7, #28]
        break;
 80052d2:	e014      	b.n	80052fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052d4:	f7ff f80a 	bl	80042ec <HAL_RCC_GetPCLK2Freq>
 80052d8:	61f8      	str	r0, [r7, #28]
        break;
 80052da:	e010      	b.n	80052fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052dc:	4b1e      	ldr	r3, [pc, #120]	@ (8005358 <UART_SetConfig+0x56c>)
 80052de:	61fb      	str	r3, [r7, #28]
        break;
 80052e0:	e00d      	b.n	80052fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052e2:	f7fe ff55 	bl	8004190 <HAL_RCC_GetSysClockFreq>
 80052e6:	61f8      	str	r0, [r7, #28]
        break;
 80052e8:	e009      	b.n	80052fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052ee:	61fb      	str	r3, [r7, #28]
        break;
 80052f0:	e005      	b.n	80052fe <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80052f2:	2300      	movs	r3, #0
 80052f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80052fc:	bf00      	nop
    }

    if (pclk != 0U)
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d019      	beq.n	8005338 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	085a      	lsrs	r2, r3, #1
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	441a      	add	r2, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	fbb2 f3f3 	udiv	r3, r2, r3
 8005316:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	2b0f      	cmp	r3, #15
 800531c:	d909      	bls.n	8005332 <UART_SetConfig+0x546>
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005324:	d205      	bcs.n	8005332 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	b29a      	uxth	r2, r3
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	60da      	str	r2, [r3, #12]
 8005330:	e002      	b.n	8005338 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2200      	movs	r2, #0
 800533c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2200      	movs	r2, #0
 8005342:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005344:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005348:	4618      	mov	r0, r3
 800534a:	3728      	adds	r7, #40	@ 0x28
 800534c:	46bd      	mov	sp, r7
 800534e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005352:	bf00      	nop
 8005354:	40008000 	.word	0x40008000
 8005358:	00f42400 	.word	0x00f42400

0800535c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005368:	f003 0308 	and.w	r3, r3, #8
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00a      	beq.n	8005386 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	430a      	orrs	r2, r1
 8005384:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800538a:	f003 0301 	and.w	r3, r3, #1
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00a      	beq.n	80053a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	430a      	orrs	r2, r1
 80053a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ac:	f003 0302 	and.w	r3, r3, #2
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00a      	beq.n	80053ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	430a      	orrs	r2, r1
 80053c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ce:	f003 0304 	and.w	r3, r3, #4
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00a      	beq.n	80053ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	430a      	orrs	r2, r1
 80053ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f0:	f003 0310 	and.w	r3, r3, #16
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00a      	beq.n	800540e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	430a      	orrs	r2, r1
 800540c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005412:	f003 0320 	and.w	r3, r3, #32
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00a      	beq.n	8005430 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	430a      	orrs	r2, r1
 800542e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005434:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005438:	2b00      	cmp	r3, #0
 800543a:	d01a      	beq.n	8005472 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	430a      	orrs	r2, r1
 8005450:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005456:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800545a:	d10a      	bne.n	8005472 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	430a      	orrs	r2, r1
 8005470:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005476:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00a      	beq.n	8005494 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	430a      	orrs	r2, r1
 8005492:	605a      	str	r2, [r3, #4]
  }
}
 8005494:	bf00      	nop
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b098      	sub	sp, #96	@ 0x60
 80054a4:	af02      	add	r7, sp, #8
 80054a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80054b0:	f7fc faa6 	bl	8001a00 <HAL_GetTick>
 80054b4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0308 	and.w	r3, r3, #8
 80054c0:	2b08      	cmp	r3, #8
 80054c2:	d12e      	bne.n	8005522 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80054c8:	9300      	str	r3, [sp, #0]
 80054ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054cc:	2200      	movs	r2, #0
 80054ce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 f88c 	bl	80055f0 <UART_WaitOnFlagUntilTimeout>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d021      	beq.n	8005522 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054e6:	e853 3f00 	ldrex	r3, [r3]
 80054ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80054ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	461a      	mov	r2, r3
 80054fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80054fe:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005500:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005502:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005504:	e841 2300 	strex	r3, r2, [r1]
 8005508:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800550a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800550c:	2b00      	cmp	r3, #0
 800550e:	d1e6      	bne.n	80054de <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2220      	movs	r2, #32
 8005514:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e062      	b.n	80055e8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0304 	and.w	r3, r3, #4
 800552c:	2b04      	cmp	r3, #4
 800552e:	d149      	bne.n	80055c4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005530:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005534:	9300      	str	r3, [sp, #0]
 8005536:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005538:	2200      	movs	r2, #0
 800553a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 f856 	bl	80055f0 <UART_WaitOnFlagUntilTimeout>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d03c      	beq.n	80055c4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005552:	e853 3f00 	ldrex	r3, [r3]
 8005556:	623b      	str	r3, [r7, #32]
   return(result);
 8005558:	6a3b      	ldr	r3, [r7, #32]
 800555a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800555e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	461a      	mov	r2, r3
 8005566:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005568:	633b      	str	r3, [r7, #48]	@ 0x30
 800556a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800556e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005570:	e841 2300 	strex	r3, r2, [r1]
 8005574:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1e6      	bne.n	800554a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	3308      	adds	r3, #8
 8005582:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	e853 3f00 	ldrex	r3, [r3]
 800558a:	60fb      	str	r3, [r7, #12]
   return(result);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f023 0301 	bic.w	r3, r3, #1
 8005592:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	3308      	adds	r3, #8
 800559a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800559c:	61fa      	str	r2, [r7, #28]
 800559e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a0:	69b9      	ldr	r1, [r7, #24]
 80055a2:	69fa      	ldr	r2, [r7, #28]
 80055a4:	e841 2300 	strex	r3, r2, [r1]
 80055a8:	617b      	str	r3, [r7, #20]
   return(result);
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d1e5      	bne.n	800557c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2220      	movs	r2, #32
 80055b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e011      	b.n	80055e8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2220      	movs	r2, #32
 80055c8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2220      	movs	r2, #32
 80055ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80055e6:	2300      	movs	r3, #0
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3758      	adds	r7, #88	@ 0x58
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	603b      	str	r3, [r7, #0]
 80055fc:	4613      	mov	r3, r2
 80055fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005600:	e04f      	b.n	80056a2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005608:	d04b      	beq.n	80056a2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800560a:	f7fc f9f9 	bl	8001a00 <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	69ba      	ldr	r2, [r7, #24]
 8005616:	429a      	cmp	r2, r3
 8005618:	d302      	bcc.n	8005620 <UART_WaitOnFlagUntilTimeout+0x30>
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d101      	bne.n	8005624 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	e04e      	b.n	80056c2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0304 	and.w	r3, r3, #4
 800562e:	2b00      	cmp	r3, #0
 8005630:	d037      	beq.n	80056a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	2b80      	cmp	r3, #128	@ 0x80
 8005636:	d034      	beq.n	80056a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	2b40      	cmp	r3, #64	@ 0x40
 800563c:	d031      	beq.n	80056a2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	69db      	ldr	r3, [r3, #28]
 8005644:	f003 0308 	and.w	r3, r3, #8
 8005648:	2b08      	cmp	r3, #8
 800564a:	d110      	bne.n	800566e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2208      	movs	r2, #8
 8005652:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005654:	68f8      	ldr	r0, [r7, #12]
 8005656:	f000 f838 	bl	80056ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2208      	movs	r2, #8
 800565e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e029      	b.n	80056c2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	69db      	ldr	r3, [r3, #28]
 8005674:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005678:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800567c:	d111      	bne.n	80056a2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005686:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005688:	68f8      	ldr	r0, [r7, #12]
 800568a:	f000 f81e 	bl	80056ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2220      	movs	r2, #32
 8005692:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e00f      	b.n	80056c2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	69da      	ldr	r2, [r3, #28]
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	4013      	ands	r3, r2
 80056ac:	68ba      	ldr	r2, [r7, #8]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	bf0c      	ite	eq
 80056b2:	2301      	moveq	r3, #1
 80056b4:	2300      	movne	r3, #0
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	461a      	mov	r2, r3
 80056ba:	79fb      	ldrb	r3, [r7, #7]
 80056bc:	429a      	cmp	r2, r3
 80056be:	d0a0      	beq.n	8005602 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3710      	adds	r7, #16
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}

080056ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b095      	sub	sp, #84	@ 0x54
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056da:	e853 3f00 	ldrex	r3, [r3]
 80056de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80056e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	461a      	mov	r2, r3
 80056ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80056f2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80056f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80056f8:	e841 2300 	strex	r3, r2, [r1]
 80056fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80056fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005700:	2b00      	cmp	r3, #0
 8005702:	d1e6      	bne.n	80056d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	3308      	adds	r3, #8
 800570a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800570c:	6a3b      	ldr	r3, [r7, #32]
 800570e:	e853 3f00 	ldrex	r3, [r3]
 8005712:	61fb      	str	r3, [r7, #28]
   return(result);
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	f023 0301 	bic.w	r3, r3, #1
 800571a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	3308      	adds	r3, #8
 8005722:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005724:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005726:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005728:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800572a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800572c:	e841 2300 	strex	r3, r2, [r1]
 8005730:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005734:	2b00      	cmp	r3, #0
 8005736:	d1e5      	bne.n	8005704 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800573c:	2b01      	cmp	r3, #1
 800573e:	d118      	bne.n	8005772 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	e853 3f00 	ldrex	r3, [r3]
 800574c:	60bb      	str	r3, [r7, #8]
   return(result);
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	f023 0310 	bic.w	r3, r3, #16
 8005754:	647b      	str	r3, [r7, #68]	@ 0x44
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	461a      	mov	r2, r3
 800575c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800575e:	61bb      	str	r3, [r7, #24]
 8005760:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005762:	6979      	ldr	r1, [r7, #20]
 8005764:	69ba      	ldr	r2, [r7, #24]
 8005766:	e841 2300 	strex	r3, r2, [r1]
 800576a:	613b      	str	r3, [r7, #16]
   return(result);
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1e6      	bne.n	8005740 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2220      	movs	r2, #32
 8005776:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005786:	bf00      	nop
 8005788:	3754      	adds	r7, #84	@ 0x54
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
	...

08005794 <std>:
 8005794:	2300      	movs	r3, #0
 8005796:	b510      	push	{r4, lr}
 8005798:	4604      	mov	r4, r0
 800579a:	e9c0 3300 	strd	r3, r3, [r0]
 800579e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80057a2:	6083      	str	r3, [r0, #8]
 80057a4:	8181      	strh	r1, [r0, #12]
 80057a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80057a8:	81c2      	strh	r2, [r0, #14]
 80057aa:	6183      	str	r3, [r0, #24]
 80057ac:	4619      	mov	r1, r3
 80057ae:	2208      	movs	r2, #8
 80057b0:	305c      	adds	r0, #92	@ 0x5c
 80057b2:	f000 f9e7 	bl	8005b84 <memset>
 80057b6:	4b0d      	ldr	r3, [pc, #52]	@ (80057ec <std+0x58>)
 80057b8:	6263      	str	r3, [r4, #36]	@ 0x24
 80057ba:	4b0d      	ldr	r3, [pc, #52]	@ (80057f0 <std+0x5c>)
 80057bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80057be:	4b0d      	ldr	r3, [pc, #52]	@ (80057f4 <std+0x60>)
 80057c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80057c2:	4b0d      	ldr	r3, [pc, #52]	@ (80057f8 <std+0x64>)
 80057c4:	6323      	str	r3, [r4, #48]	@ 0x30
 80057c6:	4b0d      	ldr	r3, [pc, #52]	@ (80057fc <std+0x68>)
 80057c8:	6224      	str	r4, [r4, #32]
 80057ca:	429c      	cmp	r4, r3
 80057cc:	d006      	beq.n	80057dc <std+0x48>
 80057ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80057d2:	4294      	cmp	r4, r2
 80057d4:	d002      	beq.n	80057dc <std+0x48>
 80057d6:	33d0      	adds	r3, #208	@ 0xd0
 80057d8:	429c      	cmp	r4, r3
 80057da:	d105      	bne.n	80057e8 <std+0x54>
 80057dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80057e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057e4:	f000 ba46 	b.w	8005c74 <__retarget_lock_init_recursive>
 80057e8:	bd10      	pop	{r4, pc}
 80057ea:	bf00      	nop
 80057ec:	080059d5 	.word	0x080059d5
 80057f0:	080059f7 	.word	0x080059f7
 80057f4:	08005a2f 	.word	0x08005a2f
 80057f8:	08005a53 	.word	0x08005a53
 80057fc:	2000044c 	.word	0x2000044c

08005800 <stdio_exit_handler>:
 8005800:	4a02      	ldr	r2, [pc, #8]	@ (800580c <stdio_exit_handler+0xc>)
 8005802:	4903      	ldr	r1, [pc, #12]	@ (8005810 <stdio_exit_handler+0x10>)
 8005804:	4803      	ldr	r0, [pc, #12]	@ (8005814 <stdio_exit_handler+0x14>)
 8005806:	f000 b869 	b.w	80058dc <_fwalk_sglue>
 800580a:	bf00      	nop
 800580c:	20000044 	.word	0x20000044
 8005810:	08005f75 	.word	0x08005f75
 8005814:	20000054 	.word	0x20000054

08005818 <cleanup_stdio>:
 8005818:	6841      	ldr	r1, [r0, #4]
 800581a:	4b0c      	ldr	r3, [pc, #48]	@ (800584c <cleanup_stdio+0x34>)
 800581c:	4299      	cmp	r1, r3
 800581e:	b510      	push	{r4, lr}
 8005820:	4604      	mov	r4, r0
 8005822:	d001      	beq.n	8005828 <cleanup_stdio+0x10>
 8005824:	f000 fba6 	bl	8005f74 <_fflush_r>
 8005828:	68a1      	ldr	r1, [r4, #8]
 800582a:	4b09      	ldr	r3, [pc, #36]	@ (8005850 <cleanup_stdio+0x38>)
 800582c:	4299      	cmp	r1, r3
 800582e:	d002      	beq.n	8005836 <cleanup_stdio+0x1e>
 8005830:	4620      	mov	r0, r4
 8005832:	f000 fb9f 	bl	8005f74 <_fflush_r>
 8005836:	68e1      	ldr	r1, [r4, #12]
 8005838:	4b06      	ldr	r3, [pc, #24]	@ (8005854 <cleanup_stdio+0x3c>)
 800583a:	4299      	cmp	r1, r3
 800583c:	d004      	beq.n	8005848 <cleanup_stdio+0x30>
 800583e:	4620      	mov	r0, r4
 8005840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005844:	f000 bb96 	b.w	8005f74 <_fflush_r>
 8005848:	bd10      	pop	{r4, pc}
 800584a:	bf00      	nop
 800584c:	2000044c 	.word	0x2000044c
 8005850:	200004b4 	.word	0x200004b4
 8005854:	2000051c 	.word	0x2000051c

08005858 <global_stdio_init.part.0>:
 8005858:	b510      	push	{r4, lr}
 800585a:	4b0b      	ldr	r3, [pc, #44]	@ (8005888 <global_stdio_init.part.0+0x30>)
 800585c:	4c0b      	ldr	r4, [pc, #44]	@ (800588c <global_stdio_init.part.0+0x34>)
 800585e:	4a0c      	ldr	r2, [pc, #48]	@ (8005890 <global_stdio_init.part.0+0x38>)
 8005860:	601a      	str	r2, [r3, #0]
 8005862:	4620      	mov	r0, r4
 8005864:	2200      	movs	r2, #0
 8005866:	2104      	movs	r1, #4
 8005868:	f7ff ff94 	bl	8005794 <std>
 800586c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005870:	2201      	movs	r2, #1
 8005872:	2109      	movs	r1, #9
 8005874:	f7ff ff8e 	bl	8005794 <std>
 8005878:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800587c:	2202      	movs	r2, #2
 800587e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005882:	2112      	movs	r1, #18
 8005884:	f7ff bf86 	b.w	8005794 <std>
 8005888:	20000584 	.word	0x20000584
 800588c:	2000044c 	.word	0x2000044c
 8005890:	08005801 	.word	0x08005801

08005894 <__sfp_lock_acquire>:
 8005894:	4801      	ldr	r0, [pc, #4]	@ (800589c <__sfp_lock_acquire+0x8>)
 8005896:	f000 b9ee 	b.w	8005c76 <__retarget_lock_acquire_recursive>
 800589a:	bf00      	nop
 800589c:	2000058d 	.word	0x2000058d

080058a0 <__sfp_lock_release>:
 80058a0:	4801      	ldr	r0, [pc, #4]	@ (80058a8 <__sfp_lock_release+0x8>)
 80058a2:	f000 b9e9 	b.w	8005c78 <__retarget_lock_release_recursive>
 80058a6:	bf00      	nop
 80058a8:	2000058d 	.word	0x2000058d

080058ac <__sinit>:
 80058ac:	b510      	push	{r4, lr}
 80058ae:	4604      	mov	r4, r0
 80058b0:	f7ff fff0 	bl	8005894 <__sfp_lock_acquire>
 80058b4:	6a23      	ldr	r3, [r4, #32]
 80058b6:	b11b      	cbz	r3, 80058c0 <__sinit+0x14>
 80058b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058bc:	f7ff bff0 	b.w	80058a0 <__sfp_lock_release>
 80058c0:	4b04      	ldr	r3, [pc, #16]	@ (80058d4 <__sinit+0x28>)
 80058c2:	6223      	str	r3, [r4, #32]
 80058c4:	4b04      	ldr	r3, [pc, #16]	@ (80058d8 <__sinit+0x2c>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d1f5      	bne.n	80058b8 <__sinit+0xc>
 80058cc:	f7ff ffc4 	bl	8005858 <global_stdio_init.part.0>
 80058d0:	e7f2      	b.n	80058b8 <__sinit+0xc>
 80058d2:	bf00      	nop
 80058d4:	08005819 	.word	0x08005819
 80058d8:	20000584 	.word	0x20000584

080058dc <_fwalk_sglue>:
 80058dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058e0:	4607      	mov	r7, r0
 80058e2:	4688      	mov	r8, r1
 80058e4:	4614      	mov	r4, r2
 80058e6:	2600      	movs	r6, #0
 80058e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80058ec:	f1b9 0901 	subs.w	r9, r9, #1
 80058f0:	d505      	bpl.n	80058fe <_fwalk_sglue+0x22>
 80058f2:	6824      	ldr	r4, [r4, #0]
 80058f4:	2c00      	cmp	r4, #0
 80058f6:	d1f7      	bne.n	80058e8 <_fwalk_sglue+0xc>
 80058f8:	4630      	mov	r0, r6
 80058fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058fe:	89ab      	ldrh	r3, [r5, #12]
 8005900:	2b01      	cmp	r3, #1
 8005902:	d907      	bls.n	8005914 <_fwalk_sglue+0x38>
 8005904:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005908:	3301      	adds	r3, #1
 800590a:	d003      	beq.n	8005914 <_fwalk_sglue+0x38>
 800590c:	4629      	mov	r1, r5
 800590e:	4638      	mov	r0, r7
 8005910:	47c0      	blx	r8
 8005912:	4306      	orrs	r6, r0
 8005914:	3568      	adds	r5, #104	@ 0x68
 8005916:	e7e9      	b.n	80058ec <_fwalk_sglue+0x10>

08005918 <_puts_r>:
 8005918:	6a03      	ldr	r3, [r0, #32]
 800591a:	b570      	push	{r4, r5, r6, lr}
 800591c:	6884      	ldr	r4, [r0, #8]
 800591e:	4605      	mov	r5, r0
 8005920:	460e      	mov	r6, r1
 8005922:	b90b      	cbnz	r3, 8005928 <_puts_r+0x10>
 8005924:	f7ff ffc2 	bl	80058ac <__sinit>
 8005928:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800592a:	07db      	lsls	r3, r3, #31
 800592c:	d405      	bmi.n	800593a <_puts_r+0x22>
 800592e:	89a3      	ldrh	r3, [r4, #12]
 8005930:	0598      	lsls	r0, r3, #22
 8005932:	d402      	bmi.n	800593a <_puts_r+0x22>
 8005934:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005936:	f000 f99e 	bl	8005c76 <__retarget_lock_acquire_recursive>
 800593a:	89a3      	ldrh	r3, [r4, #12]
 800593c:	0719      	lsls	r1, r3, #28
 800593e:	d502      	bpl.n	8005946 <_puts_r+0x2e>
 8005940:	6923      	ldr	r3, [r4, #16]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d135      	bne.n	80059b2 <_puts_r+0x9a>
 8005946:	4621      	mov	r1, r4
 8005948:	4628      	mov	r0, r5
 800594a:	f000 f8c5 	bl	8005ad8 <__swsetup_r>
 800594e:	b380      	cbz	r0, 80059b2 <_puts_r+0x9a>
 8005950:	f04f 35ff 	mov.w	r5, #4294967295
 8005954:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005956:	07da      	lsls	r2, r3, #31
 8005958:	d405      	bmi.n	8005966 <_puts_r+0x4e>
 800595a:	89a3      	ldrh	r3, [r4, #12]
 800595c:	059b      	lsls	r3, r3, #22
 800595e:	d402      	bmi.n	8005966 <_puts_r+0x4e>
 8005960:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005962:	f000 f989 	bl	8005c78 <__retarget_lock_release_recursive>
 8005966:	4628      	mov	r0, r5
 8005968:	bd70      	pop	{r4, r5, r6, pc}
 800596a:	2b00      	cmp	r3, #0
 800596c:	da04      	bge.n	8005978 <_puts_r+0x60>
 800596e:	69a2      	ldr	r2, [r4, #24]
 8005970:	429a      	cmp	r2, r3
 8005972:	dc17      	bgt.n	80059a4 <_puts_r+0x8c>
 8005974:	290a      	cmp	r1, #10
 8005976:	d015      	beq.n	80059a4 <_puts_r+0x8c>
 8005978:	6823      	ldr	r3, [r4, #0]
 800597a:	1c5a      	adds	r2, r3, #1
 800597c:	6022      	str	r2, [r4, #0]
 800597e:	7019      	strb	r1, [r3, #0]
 8005980:	68a3      	ldr	r3, [r4, #8]
 8005982:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005986:	3b01      	subs	r3, #1
 8005988:	60a3      	str	r3, [r4, #8]
 800598a:	2900      	cmp	r1, #0
 800598c:	d1ed      	bne.n	800596a <_puts_r+0x52>
 800598e:	2b00      	cmp	r3, #0
 8005990:	da11      	bge.n	80059b6 <_puts_r+0x9e>
 8005992:	4622      	mov	r2, r4
 8005994:	210a      	movs	r1, #10
 8005996:	4628      	mov	r0, r5
 8005998:	f000 f85f 	bl	8005a5a <__swbuf_r>
 800599c:	3001      	adds	r0, #1
 800599e:	d0d7      	beq.n	8005950 <_puts_r+0x38>
 80059a0:	250a      	movs	r5, #10
 80059a2:	e7d7      	b.n	8005954 <_puts_r+0x3c>
 80059a4:	4622      	mov	r2, r4
 80059a6:	4628      	mov	r0, r5
 80059a8:	f000 f857 	bl	8005a5a <__swbuf_r>
 80059ac:	3001      	adds	r0, #1
 80059ae:	d1e7      	bne.n	8005980 <_puts_r+0x68>
 80059b0:	e7ce      	b.n	8005950 <_puts_r+0x38>
 80059b2:	3e01      	subs	r6, #1
 80059b4:	e7e4      	b.n	8005980 <_puts_r+0x68>
 80059b6:	6823      	ldr	r3, [r4, #0]
 80059b8:	1c5a      	adds	r2, r3, #1
 80059ba:	6022      	str	r2, [r4, #0]
 80059bc:	220a      	movs	r2, #10
 80059be:	701a      	strb	r2, [r3, #0]
 80059c0:	e7ee      	b.n	80059a0 <_puts_r+0x88>
	...

080059c4 <puts>:
 80059c4:	4b02      	ldr	r3, [pc, #8]	@ (80059d0 <puts+0xc>)
 80059c6:	4601      	mov	r1, r0
 80059c8:	6818      	ldr	r0, [r3, #0]
 80059ca:	f7ff bfa5 	b.w	8005918 <_puts_r>
 80059ce:	bf00      	nop
 80059d0:	20000050 	.word	0x20000050

080059d4 <__sread>:
 80059d4:	b510      	push	{r4, lr}
 80059d6:	460c      	mov	r4, r1
 80059d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059dc:	f000 f8fc 	bl	8005bd8 <_read_r>
 80059e0:	2800      	cmp	r0, #0
 80059e2:	bfab      	itete	ge
 80059e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80059e6:	89a3      	ldrhlt	r3, [r4, #12]
 80059e8:	181b      	addge	r3, r3, r0
 80059ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80059ee:	bfac      	ite	ge
 80059f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80059f2:	81a3      	strhlt	r3, [r4, #12]
 80059f4:	bd10      	pop	{r4, pc}

080059f6 <__swrite>:
 80059f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059fa:	461f      	mov	r7, r3
 80059fc:	898b      	ldrh	r3, [r1, #12]
 80059fe:	05db      	lsls	r3, r3, #23
 8005a00:	4605      	mov	r5, r0
 8005a02:	460c      	mov	r4, r1
 8005a04:	4616      	mov	r6, r2
 8005a06:	d505      	bpl.n	8005a14 <__swrite+0x1e>
 8005a08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a0c:	2302      	movs	r3, #2
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f000 f8d0 	bl	8005bb4 <_lseek_r>
 8005a14:	89a3      	ldrh	r3, [r4, #12]
 8005a16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a1e:	81a3      	strh	r3, [r4, #12]
 8005a20:	4632      	mov	r2, r6
 8005a22:	463b      	mov	r3, r7
 8005a24:	4628      	mov	r0, r5
 8005a26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a2a:	f000 b8e7 	b.w	8005bfc <_write_r>

08005a2e <__sseek>:
 8005a2e:	b510      	push	{r4, lr}
 8005a30:	460c      	mov	r4, r1
 8005a32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a36:	f000 f8bd 	bl	8005bb4 <_lseek_r>
 8005a3a:	1c43      	adds	r3, r0, #1
 8005a3c:	89a3      	ldrh	r3, [r4, #12]
 8005a3e:	bf15      	itete	ne
 8005a40:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005a42:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005a46:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005a4a:	81a3      	strheq	r3, [r4, #12]
 8005a4c:	bf18      	it	ne
 8005a4e:	81a3      	strhne	r3, [r4, #12]
 8005a50:	bd10      	pop	{r4, pc}

08005a52 <__sclose>:
 8005a52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a56:	f000 b89d 	b.w	8005b94 <_close_r>

08005a5a <__swbuf_r>:
 8005a5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a5c:	460e      	mov	r6, r1
 8005a5e:	4614      	mov	r4, r2
 8005a60:	4605      	mov	r5, r0
 8005a62:	b118      	cbz	r0, 8005a6c <__swbuf_r+0x12>
 8005a64:	6a03      	ldr	r3, [r0, #32]
 8005a66:	b90b      	cbnz	r3, 8005a6c <__swbuf_r+0x12>
 8005a68:	f7ff ff20 	bl	80058ac <__sinit>
 8005a6c:	69a3      	ldr	r3, [r4, #24]
 8005a6e:	60a3      	str	r3, [r4, #8]
 8005a70:	89a3      	ldrh	r3, [r4, #12]
 8005a72:	071a      	lsls	r2, r3, #28
 8005a74:	d501      	bpl.n	8005a7a <__swbuf_r+0x20>
 8005a76:	6923      	ldr	r3, [r4, #16]
 8005a78:	b943      	cbnz	r3, 8005a8c <__swbuf_r+0x32>
 8005a7a:	4621      	mov	r1, r4
 8005a7c:	4628      	mov	r0, r5
 8005a7e:	f000 f82b 	bl	8005ad8 <__swsetup_r>
 8005a82:	b118      	cbz	r0, 8005a8c <__swbuf_r+0x32>
 8005a84:	f04f 37ff 	mov.w	r7, #4294967295
 8005a88:	4638      	mov	r0, r7
 8005a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a8c:	6823      	ldr	r3, [r4, #0]
 8005a8e:	6922      	ldr	r2, [r4, #16]
 8005a90:	1a98      	subs	r0, r3, r2
 8005a92:	6963      	ldr	r3, [r4, #20]
 8005a94:	b2f6      	uxtb	r6, r6
 8005a96:	4283      	cmp	r3, r0
 8005a98:	4637      	mov	r7, r6
 8005a9a:	dc05      	bgt.n	8005aa8 <__swbuf_r+0x4e>
 8005a9c:	4621      	mov	r1, r4
 8005a9e:	4628      	mov	r0, r5
 8005aa0:	f000 fa68 	bl	8005f74 <_fflush_r>
 8005aa4:	2800      	cmp	r0, #0
 8005aa6:	d1ed      	bne.n	8005a84 <__swbuf_r+0x2a>
 8005aa8:	68a3      	ldr	r3, [r4, #8]
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	60a3      	str	r3, [r4, #8]
 8005aae:	6823      	ldr	r3, [r4, #0]
 8005ab0:	1c5a      	adds	r2, r3, #1
 8005ab2:	6022      	str	r2, [r4, #0]
 8005ab4:	701e      	strb	r6, [r3, #0]
 8005ab6:	6962      	ldr	r2, [r4, #20]
 8005ab8:	1c43      	adds	r3, r0, #1
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d004      	beq.n	8005ac8 <__swbuf_r+0x6e>
 8005abe:	89a3      	ldrh	r3, [r4, #12]
 8005ac0:	07db      	lsls	r3, r3, #31
 8005ac2:	d5e1      	bpl.n	8005a88 <__swbuf_r+0x2e>
 8005ac4:	2e0a      	cmp	r6, #10
 8005ac6:	d1df      	bne.n	8005a88 <__swbuf_r+0x2e>
 8005ac8:	4621      	mov	r1, r4
 8005aca:	4628      	mov	r0, r5
 8005acc:	f000 fa52 	bl	8005f74 <_fflush_r>
 8005ad0:	2800      	cmp	r0, #0
 8005ad2:	d0d9      	beq.n	8005a88 <__swbuf_r+0x2e>
 8005ad4:	e7d6      	b.n	8005a84 <__swbuf_r+0x2a>
	...

08005ad8 <__swsetup_r>:
 8005ad8:	b538      	push	{r3, r4, r5, lr}
 8005ada:	4b29      	ldr	r3, [pc, #164]	@ (8005b80 <__swsetup_r+0xa8>)
 8005adc:	4605      	mov	r5, r0
 8005ade:	6818      	ldr	r0, [r3, #0]
 8005ae0:	460c      	mov	r4, r1
 8005ae2:	b118      	cbz	r0, 8005aec <__swsetup_r+0x14>
 8005ae4:	6a03      	ldr	r3, [r0, #32]
 8005ae6:	b90b      	cbnz	r3, 8005aec <__swsetup_r+0x14>
 8005ae8:	f7ff fee0 	bl	80058ac <__sinit>
 8005aec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005af0:	0719      	lsls	r1, r3, #28
 8005af2:	d422      	bmi.n	8005b3a <__swsetup_r+0x62>
 8005af4:	06da      	lsls	r2, r3, #27
 8005af6:	d407      	bmi.n	8005b08 <__swsetup_r+0x30>
 8005af8:	2209      	movs	r2, #9
 8005afa:	602a      	str	r2, [r5, #0]
 8005afc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b00:	81a3      	strh	r3, [r4, #12]
 8005b02:	f04f 30ff 	mov.w	r0, #4294967295
 8005b06:	e033      	b.n	8005b70 <__swsetup_r+0x98>
 8005b08:	0758      	lsls	r0, r3, #29
 8005b0a:	d512      	bpl.n	8005b32 <__swsetup_r+0x5a>
 8005b0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005b0e:	b141      	cbz	r1, 8005b22 <__swsetup_r+0x4a>
 8005b10:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005b14:	4299      	cmp	r1, r3
 8005b16:	d002      	beq.n	8005b1e <__swsetup_r+0x46>
 8005b18:	4628      	mov	r0, r5
 8005b1a:	f000 f8af 	bl	8005c7c <_free_r>
 8005b1e:	2300      	movs	r3, #0
 8005b20:	6363      	str	r3, [r4, #52]	@ 0x34
 8005b22:	89a3      	ldrh	r3, [r4, #12]
 8005b24:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005b28:	81a3      	strh	r3, [r4, #12]
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	6063      	str	r3, [r4, #4]
 8005b2e:	6923      	ldr	r3, [r4, #16]
 8005b30:	6023      	str	r3, [r4, #0]
 8005b32:	89a3      	ldrh	r3, [r4, #12]
 8005b34:	f043 0308 	orr.w	r3, r3, #8
 8005b38:	81a3      	strh	r3, [r4, #12]
 8005b3a:	6923      	ldr	r3, [r4, #16]
 8005b3c:	b94b      	cbnz	r3, 8005b52 <__swsetup_r+0x7a>
 8005b3e:	89a3      	ldrh	r3, [r4, #12]
 8005b40:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005b44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b48:	d003      	beq.n	8005b52 <__swsetup_r+0x7a>
 8005b4a:	4621      	mov	r1, r4
 8005b4c:	4628      	mov	r0, r5
 8005b4e:	f000 fa5f 	bl	8006010 <__smakebuf_r>
 8005b52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b56:	f013 0201 	ands.w	r2, r3, #1
 8005b5a:	d00a      	beq.n	8005b72 <__swsetup_r+0x9a>
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	60a2      	str	r2, [r4, #8]
 8005b60:	6962      	ldr	r2, [r4, #20]
 8005b62:	4252      	negs	r2, r2
 8005b64:	61a2      	str	r2, [r4, #24]
 8005b66:	6922      	ldr	r2, [r4, #16]
 8005b68:	b942      	cbnz	r2, 8005b7c <__swsetup_r+0xa4>
 8005b6a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005b6e:	d1c5      	bne.n	8005afc <__swsetup_r+0x24>
 8005b70:	bd38      	pop	{r3, r4, r5, pc}
 8005b72:	0799      	lsls	r1, r3, #30
 8005b74:	bf58      	it	pl
 8005b76:	6962      	ldrpl	r2, [r4, #20]
 8005b78:	60a2      	str	r2, [r4, #8]
 8005b7a:	e7f4      	b.n	8005b66 <__swsetup_r+0x8e>
 8005b7c:	2000      	movs	r0, #0
 8005b7e:	e7f7      	b.n	8005b70 <__swsetup_r+0x98>
 8005b80:	20000050 	.word	0x20000050

08005b84 <memset>:
 8005b84:	4402      	add	r2, r0
 8005b86:	4603      	mov	r3, r0
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d100      	bne.n	8005b8e <memset+0xa>
 8005b8c:	4770      	bx	lr
 8005b8e:	f803 1b01 	strb.w	r1, [r3], #1
 8005b92:	e7f9      	b.n	8005b88 <memset+0x4>

08005b94 <_close_r>:
 8005b94:	b538      	push	{r3, r4, r5, lr}
 8005b96:	4d06      	ldr	r5, [pc, #24]	@ (8005bb0 <_close_r+0x1c>)
 8005b98:	2300      	movs	r3, #0
 8005b9a:	4604      	mov	r4, r0
 8005b9c:	4608      	mov	r0, r1
 8005b9e:	602b      	str	r3, [r5, #0]
 8005ba0:	f7fb fe18 	bl	80017d4 <_close>
 8005ba4:	1c43      	adds	r3, r0, #1
 8005ba6:	d102      	bne.n	8005bae <_close_r+0x1a>
 8005ba8:	682b      	ldr	r3, [r5, #0]
 8005baa:	b103      	cbz	r3, 8005bae <_close_r+0x1a>
 8005bac:	6023      	str	r3, [r4, #0]
 8005bae:	bd38      	pop	{r3, r4, r5, pc}
 8005bb0:	20000588 	.word	0x20000588

08005bb4 <_lseek_r>:
 8005bb4:	b538      	push	{r3, r4, r5, lr}
 8005bb6:	4d07      	ldr	r5, [pc, #28]	@ (8005bd4 <_lseek_r+0x20>)
 8005bb8:	4604      	mov	r4, r0
 8005bba:	4608      	mov	r0, r1
 8005bbc:	4611      	mov	r1, r2
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	602a      	str	r2, [r5, #0]
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	f7fb fe2d 	bl	8001822 <_lseek>
 8005bc8:	1c43      	adds	r3, r0, #1
 8005bca:	d102      	bne.n	8005bd2 <_lseek_r+0x1e>
 8005bcc:	682b      	ldr	r3, [r5, #0]
 8005bce:	b103      	cbz	r3, 8005bd2 <_lseek_r+0x1e>
 8005bd0:	6023      	str	r3, [r4, #0]
 8005bd2:	bd38      	pop	{r3, r4, r5, pc}
 8005bd4:	20000588 	.word	0x20000588

08005bd8 <_read_r>:
 8005bd8:	b538      	push	{r3, r4, r5, lr}
 8005bda:	4d07      	ldr	r5, [pc, #28]	@ (8005bf8 <_read_r+0x20>)
 8005bdc:	4604      	mov	r4, r0
 8005bde:	4608      	mov	r0, r1
 8005be0:	4611      	mov	r1, r2
 8005be2:	2200      	movs	r2, #0
 8005be4:	602a      	str	r2, [r5, #0]
 8005be6:	461a      	mov	r2, r3
 8005be8:	f7fb fdbb 	bl	8001762 <_read>
 8005bec:	1c43      	adds	r3, r0, #1
 8005bee:	d102      	bne.n	8005bf6 <_read_r+0x1e>
 8005bf0:	682b      	ldr	r3, [r5, #0]
 8005bf2:	b103      	cbz	r3, 8005bf6 <_read_r+0x1e>
 8005bf4:	6023      	str	r3, [r4, #0]
 8005bf6:	bd38      	pop	{r3, r4, r5, pc}
 8005bf8:	20000588 	.word	0x20000588

08005bfc <_write_r>:
 8005bfc:	b538      	push	{r3, r4, r5, lr}
 8005bfe:	4d07      	ldr	r5, [pc, #28]	@ (8005c1c <_write_r+0x20>)
 8005c00:	4604      	mov	r4, r0
 8005c02:	4608      	mov	r0, r1
 8005c04:	4611      	mov	r1, r2
 8005c06:	2200      	movs	r2, #0
 8005c08:	602a      	str	r2, [r5, #0]
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	f7fb fdc6 	bl	800179c <_write>
 8005c10:	1c43      	adds	r3, r0, #1
 8005c12:	d102      	bne.n	8005c1a <_write_r+0x1e>
 8005c14:	682b      	ldr	r3, [r5, #0]
 8005c16:	b103      	cbz	r3, 8005c1a <_write_r+0x1e>
 8005c18:	6023      	str	r3, [r4, #0]
 8005c1a:	bd38      	pop	{r3, r4, r5, pc}
 8005c1c:	20000588 	.word	0x20000588

08005c20 <__errno>:
 8005c20:	4b01      	ldr	r3, [pc, #4]	@ (8005c28 <__errno+0x8>)
 8005c22:	6818      	ldr	r0, [r3, #0]
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	20000050 	.word	0x20000050

08005c2c <__libc_init_array>:
 8005c2c:	b570      	push	{r4, r5, r6, lr}
 8005c2e:	4d0d      	ldr	r5, [pc, #52]	@ (8005c64 <__libc_init_array+0x38>)
 8005c30:	4c0d      	ldr	r4, [pc, #52]	@ (8005c68 <__libc_init_array+0x3c>)
 8005c32:	1b64      	subs	r4, r4, r5
 8005c34:	10a4      	asrs	r4, r4, #2
 8005c36:	2600      	movs	r6, #0
 8005c38:	42a6      	cmp	r6, r4
 8005c3a:	d109      	bne.n	8005c50 <__libc_init_array+0x24>
 8005c3c:	4d0b      	ldr	r5, [pc, #44]	@ (8005c6c <__libc_init_array+0x40>)
 8005c3e:	4c0c      	ldr	r4, [pc, #48]	@ (8005c70 <__libc_init_array+0x44>)
 8005c40:	f000 fa54 	bl	80060ec <_init>
 8005c44:	1b64      	subs	r4, r4, r5
 8005c46:	10a4      	asrs	r4, r4, #2
 8005c48:	2600      	movs	r6, #0
 8005c4a:	42a6      	cmp	r6, r4
 8005c4c:	d105      	bne.n	8005c5a <__libc_init_array+0x2e>
 8005c4e:	bd70      	pop	{r4, r5, r6, pc}
 8005c50:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c54:	4798      	blx	r3
 8005c56:	3601      	adds	r6, #1
 8005c58:	e7ee      	b.n	8005c38 <__libc_init_array+0xc>
 8005c5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c5e:	4798      	blx	r3
 8005c60:	3601      	adds	r6, #1
 8005c62:	e7f2      	b.n	8005c4a <__libc_init_array+0x1e>
 8005c64:	080061a4 	.word	0x080061a4
 8005c68:	080061a4 	.word	0x080061a4
 8005c6c:	080061a4 	.word	0x080061a4
 8005c70:	080061a8 	.word	0x080061a8

08005c74 <__retarget_lock_init_recursive>:
 8005c74:	4770      	bx	lr

08005c76 <__retarget_lock_acquire_recursive>:
 8005c76:	4770      	bx	lr

08005c78 <__retarget_lock_release_recursive>:
 8005c78:	4770      	bx	lr
	...

08005c7c <_free_r>:
 8005c7c:	b538      	push	{r3, r4, r5, lr}
 8005c7e:	4605      	mov	r5, r0
 8005c80:	2900      	cmp	r1, #0
 8005c82:	d041      	beq.n	8005d08 <_free_r+0x8c>
 8005c84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c88:	1f0c      	subs	r4, r1, #4
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	bfb8      	it	lt
 8005c8e:	18e4      	addlt	r4, r4, r3
 8005c90:	f000 f8e0 	bl	8005e54 <__malloc_lock>
 8005c94:	4a1d      	ldr	r2, [pc, #116]	@ (8005d0c <_free_r+0x90>)
 8005c96:	6813      	ldr	r3, [r2, #0]
 8005c98:	b933      	cbnz	r3, 8005ca8 <_free_r+0x2c>
 8005c9a:	6063      	str	r3, [r4, #4]
 8005c9c:	6014      	str	r4, [r2, #0]
 8005c9e:	4628      	mov	r0, r5
 8005ca0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ca4:	f000 b8dc 	b.w	8005e60 <__malloc_unlock>
 8005ca8:	42a3      	cmp	r3, r4
 8005caa:	d908      	bls.n	8005cbe <_free_r+0x42>
 8005cac:	6820      	ldr	r0, [r4, #0]
 8005cae:	1821      	adds	r1, r4, r0
 8005cb0:	428b      	cmp	r3, r1
 8005cb2:	bf01      	itttt	eq
 8005cb4:	6819      	ldreq	r1, [r3, #0]
 8005cb6:	685b      	ldreq	r3, [r3, #4]
 8005cb8:	1809      	addeq	r1, r1, r0
 8005cba:	6021      	streq	r1, [r4, #0]
 8005cbc:	e7ed      	b.n	8005c9a <_free_r+0x1e>
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	b10b      	cbz	r3, 8005cc8 <_free_r+0x4c>
 8005cc4:	42a3      	cmp	r3, r4
 8005cc6:	d9fa      	bls.n	8005cbe <_free_r+0x42>
 8005cc8:	6811      	ldr	r1, [r2, #0]
 8005cca:	1850      	adds	r0, r2, r1
 8005ccc:	42a0      	cmp	r0, r4
 8005cce:	d10b      	bne.n	8005ce8 <_free_r+0x6c>
 8005cd0:	6820      	ldr	r0, [r4, #0]
 8005cd2:	4401      	add	r1, r0
 8005cd4:	1850      	adds	r0, r2, r1
 8005cd6:	4283      	cmp	r3, r0
 8005cd8:	6011      	str	r1, [r2, #0]
 8005cda:	d1e0      	bne.n	8005c9e <_free_r+0x22>
 8005cdc:	6818      	ldr	r0, [r3, #0]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	6053      	str	r3, [r2, #4]
 8005ce2:	4408      	add	r0, r1
 8005ce4:	6010      	str	r0, [r2, #0]
 8005ce6:	e7da      	b.n	8005c9e <_free_r+0x22>
 8005ce8:	d902      	bls.n	8005cf0 <_free_r+0x74>
 8005cea:	230c      	movs	r3, #12
 8005cec:	602b      	str	r3, [r5, #0]
 8005cee:	e7d6      	b.n	8005c9e <_free_r+0x22>
 8005cf0:	6820      	ldr	r0, [r4, #0]
 8005cf2:	1821      	adds	r1, r4, r0
 8005cf4:	428b      	cmp	r3, r1
 8005cf6:	bf04      	itt	eq
 8005cf8:	6819      	ldreq	r1, [r3, #0]
 8005cfa:	685b      	ldreq	r3, [r3, #4]
 8005cfc:	6063      	str	r3, [r4, #4]
 8005cfe:	bf04      	itt	eq
 8005d00:	1809      	addeq	r1, r1, r0
 8005d02:	6021      	streq	r1, [r4, #0]
 8005d04:	6054      	str	r4, [r2, #4]
 8005d06:	e7ca      	b.n	8005c9e <_free_r+0x22>
 8005d08:	bd38      	pop	{r3, r4, r5, pc}
 8005d0a:	bf00      	nop
 8005d0c:	20000594 	.word	0x20000594

08005d10 <sbrk_aligned>:
 8005d10:	b570      	push	{r4, r5, r6, lr}
 8005d12:	4e0f      	ldr	r6, [pc, #60]	@ (8005d50 <sbrk_aligned+0x40>)
 8005d14:	460c      	mov	r4, r1
 8005d16:	6831      	ldr	r1, [r6, #0]
 8005d18:	4605      	mov	r5, r0
 8005d1a:	b911      	cbnz	r1, 8005d22 <sbrk_aligned+0x12>
 8005d1c:	f000 f9d6 	bl	80060cc <_sbrk_r>
 8005d20:	6030      	str	r0, [r6, #0]
 8005d22:	4621      	mov	r1, r4
 8005d24:	4628      	mov	r0, r5
 8005d26:	f000 f9d1 	bl	80060cc <_sbrk_r>
 8005d2a:	1c43      	adds	r3, r0, #1
 8005d2c:	d103      	bne.n	8005d36 <sbrk_aligned+0x26>
 8005d2e:	f04f 34ff 	mov.w	r4, #4294967295
 8005d32:	4620      	mov	r0, r4
 8005d34:	bd70      	pop	{r4, r5, r6, pc}
 8005d36:	1cc4      	adds	r4, r0, #3
 8005d38:	f024 0403 	bic.w	r4, r4, #3
 8005d3c:	42a0      	cmp	r0, r4
 8005d3e:	d0f8      	beq.n	8005d32 <sbrk_aligned+0x22>
 8005d40:	1a21      	subs	r1, r4, r0
 8005d42:	4628      	mov	r0, r5
 8005d44:	f000 f9c2 	bl	80060cc <_sbrk_r>
 8005d48:	3001      	adds	r0, #1
 8005d4a:	d1f2      	bne.n	8005d32 <sbrk_aligned+0x22>
 8005d4c:	e7ef      	b.n	8005d2e <sbrk_aligned+0x1e>
 8005d4e:	bf00      	nop
 8005d50:	20000590 	.word	0x20000590

08005d54 <_malloc_r>:
 8005d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d58:	1ccd      	adds	r5, r1, #3
 8005d5a:	f025 0503 	bic.w	r5, r5, #3
 8005d5e:	3508      	adds	r5, #8
 8005d60:	2d0c      	cmp	r5, #12
 8005d62:	bf38      	it	cc
 8005d64:	250c      	movcc	r5, #12
 8005d66:	2d00      	cmp	r5, #0
 8005d68:	4606      	mov	r6, r0
 8005d6a:	db01      	blt.n	8005d70 <_malloc_r+0x1c>
 8005d6c:	42a9      	cmp	r1, r5
 8005d6e:	d904      	bls.n	8005d7a <_malloc_r+0x26>
 8005d70:	230c      	movs	r3, #12
 8005d72:	6033      	str	r3, [r6, #0]
 8005d74:	2000      	movs	r0, #0
 8005d76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005e50 <_malloc_r+0xfc>
 8005d7e:	f000 f869 	bl	8005e54 <__malloc_lock>
 8005d82:	f8d8 3000 	ldr.w	r3, [r8]
 8005d86:	461c      	mov	r4, r3
 8005d88:	bb44      	cbnz	r4, 8005ddc <_malloc_r+0x88>
 8005d8a:	4629      	mov	r1, r5
 8005d8c:	4630      	mov	r0, r6
 8005d8e:	f7ff ffbf 	bl	8005d10 <sbrk_aligned>
 8005d92:	1c43      	adds	r3, r0, #1
 8005d94:	4604      	mov	r4, r0
 8005d96:	d158      	bne.n	8005e4a <_malloc_r+0xf6>
 8005d98:	f8d8 4000 	ldr.w	r4, [r8]
 8005d9c:	4627      	mov	r7, r4
 8005d9e:	2f00      	cmp	r7, #0
 8005da0:	d143      	bne.n	8005e2a <_malloc_r+0xd6>
 8005da2:	2c00      	cmp	r4, #0
 8005da4:	d04b      	beq.n	8005e3e <_malloc_r+0xea>
 8005da6:	6823      	ldr	r3, [r4, #0]
 8005da8:	4639      	mov	r1, r7
 8005daa:	4630      	mov	r0, r6
 8005dac:	eb04 0903 	add.w	r9, r4, r3
 8005db0:	f000 f98c 	bl	80060cc <_sbrk_r>
 8005db4:	4581      	cmp	r9, r0
 8005db6:	d142      	bne.n	8005e3e <_malloc_r+0xea>
 8005db8:	6821      	ldr	r1, [r4, #0]
 8005dba:	1a6d      	subs	r5, r5, r1
 8005dbc:	4629      	mov	r1, r5
 8005dbe:	4630      	mov	r0, r6
 8005dc0:	f7ff ffa6 	bl	8005d10 <sbrk_aligned>
 8005dc4:	3001      	adds	r0, #1
 8005dc6:	d03a      	beq.n	8005e3e <_malloc_r+0xea>
 8005dc8:	6823      	ldr	r3, [r4, #0]
 8005dca:	442b      	add	r3, r5
 8005dcc:	6023      	str	r3, [r4, #0]
 8005dce:	f8d8 3000 	ldr.w	r3, [r8]
 8005dd2:	685a      	ldr	r2, [r3, #4]
 8005dd4:	bb62      	cbnz	r2, 8005e30 <_malloc_r+0xdc>
 8005dd6:	f8c8 7000 	str.w	r7, [r8]
 8005dda:	e00f      	b.n	8005dfc <_malloc_r+0xa8>
 8005ddc:	6822      	ldr	r2, [r4, #0]
 8005dde:	1b52      	subs	r2, r2, r5
 8005de0:	d420      	bmi.n	8005e24 <_malloc_r+0xd0>
 8005de2:	2a0b      	cmp	r2, #11
 8005de4:	d917      	bls.n	8005e16 <_malloc_r+0xc2>
 8005de6:	1961      	adds	r1, r4, r5
 8005de8:	42a3      	cmp	r3, r4
 8005dea:	6025      	str	r5, [r4, #0]
 8005dec:	bf18      	it	ne
 8005dee:	6059      	strne	r1, [r3, #4]
 8005df0:	6863      	ldr	r3, [r4, #4]
 8005df2:	bf08      	it	eq
 8005df4:	f8c8 1000 	streq.w	r1, [r8]
 8005df8:	5162      	str	r2, [r4, r5]
 8005dfa:	604b      	str	r3, [r1, #4]
 8005dfc:	4630      	mov	r0, r6
 8005dfe:	f000 f82f 	bl	8005e60 <__malloc_unlock>
 8005e02:	f104 000b 	add.w	r0, r4, #11
 8005e06:	1d23      	adds	r3, r4, #4
 8005e08:	f020 0007 	bic.w	r0, r0, #7
 8005e0c:	1ac2      	subs	r2, r0, r3
 8005e0e:	bf1c      	itt	ne
 8005e10:	1a1b      	subne	r3, r3, r0
 8005e12:	50a3      	strne	r3, [r4, r2]
 8005e14:	e7af      	b.n	8005d76 <_malloc_r+0x22>
 8005e16:	6862      	ldr	r2, [r4, #4]
 8005e18:	42a3      	cmp	r3, r4
 8005e1a:	bf0c      	ite	eq
 8005e1c:	f8c8 2000 	streq.w	r2, [r8]
 8005e20:	605a      	strne	r2, [r3, #4]
 8005e22:	e7eb      	b.n	8005dfc <_malloc_r+0xa8>
 8005e24:	4623      	mov	r3, r4
 8005e26:	6864      	ldr	r4, [r4, #4]
 8005e28:	e7ae      	b.n	8005d88 <_malloc_r+0x34>
 8005e2a:	463c      	mov	r4, r7
 8005e2c:	687f      	ldr	r7, [r7, #4]
 8005e2e:	e7b6      	b.n	8005d9e <_malloc_r+0x4a>
 8005e30:	461a      	mov	r2, r3
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	42a3      	cmp	r3, r4
 8005e36:	d1fb      	bne.n	8005e30 <_malloc_r+0xdc>
 8005e38:	2300      	movs	r3, #0
 8005e3a:	6053      	str	r3, [r2, #4]
 8005e3c:	e7de      	b.n	8005dfc <_malloc_r+0xa8>
 8005e3e:	230c      	movs	r3, #12
 8005e40:	6033      	str	r3, [r6, #0]
 8005e42:	4630      	mov	r0, r6
 8005e44:	f000 f80c 	bl	8005e60 <__malloc_unlock>
 8005e48:	e794      	b.n	8005d74 <_malloc_r+0x20>
 8005e4a:	6005      	str	r5, [r0, #0]
 8005e4c:	e7d6      	b.n	8005dfc <_malloc_r+0xa8>
 8005e4e:	bf00      	nop
 8005e50:	20000594 	.word	0x20000594

08005e54 <__malloc_lock>:
 8005e54:	4801      	ldr	r0, [pc, #4]	@ (8005e5c <__malloc_lock+0x8>)
 8005e56:	f7ff bf0e 	b.w	8005c76 <__retarget_lock_acquire_recursive>
 8005e5a:	bf00      	nop
 8005e5c:	2000058c 	.word	0x2000058c

08005e60 <__malloc_unlock>:
 8005e60:	4801      	ldr	r0, [pc, #4]	@ (8005e68 <__malloc_unlock+0x8>)
 8005e62:	f7ff bf09 	b.w	8005c78 <__retarget_lock_release_recursive>
 8005e66:	bf00      	nop
 8005e68:	2000058c 	.word	0x2000058c

08005e6c <__sflush_r>:
 8005e6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e74:	0716      	lsls	r6, r2, #28
 8005e76:	4605      	mov	r5, r0
 8005e78:	460c      	mov	r4, r1
 8005e7a:	d454      	bmi.n	8005f26 <__sflush_r+0xba>
 8005e7c:	684b      	ldr	r3, [r1, #4]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	dc02      	bgt.n	8005e88 <__sflush_r+0x1c>
 8005e82:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	dd48      	ble.n	8005f1a <__sflush_r+0xae>
 8005e88:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005e8a:	2e00      	cmp	r6, #0
 8005e8c:	d045      	beq.n	8005f1a <__sflush_r+0xae>
 8005e8e:	2300      	movs	r3, #0
 8005e90:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005e94:	682f      	ldr	r7, [r5, #0]
 8005e96:	6a21      	ldr	r1, [r4, #32]
 8005e98:	602b      	str	r3, [r5, #0]
 8005e9a:	d030      	beq.n	8005efe <__sflush_r+0x92>
 8005e9c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005e9e:	89a3      	ldrh	r3, [r4, #12]
 8005ea0:	0759      	lsls	r1, r3, #29
 8005ea2:	d505      	bpl.n	8005eb0 <__sflush_r+0x44>
 8005ea4:	6863      	ldr	r3, [r4, #4]
 8005ea6:	1ad2      	subs	r2, r2, r3
 8005ea8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005eaa:	b10b      	cbz	r3, 8005eb0 <__sflush_r+0x44>
 8005eac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005eae:	1ad2      	subs	r2, r2, r3
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005eb4:	6a21      	ldr	r1, [r4, #32]
 8005eb6:	4628      	mov	r0, r5
 8005eb8:	47b0      	blx	r6
 8005eba:	1c43      	adds	r3, r0, #1
 8005ebc:	89a3      	ldrh	r3, [r4, #12]
 8005ebe:	d106      	bne.n	8005ece <__sflush_r+0x62>
 8005ec0:	6829      	ldr	r1, [r5, #0]
 8005ec2:	291d      	cmp	r1, #29
 8005ec4:	d82b      	bhi.n	8005f1e <__sflush_r+0xb2>
 8005ec6:	4a2a      	ldr	r2, [pc, #168]	@ (8005f70 <__sflush_r+0x104>)
 8005ec8:	40ca      	lsrs	r2, r1
 8005eca:	07d6      	lsls	r6, r2, #31
 8005ecc:	d527      	bpl.n	8005f1e <__sflush_r+0xb2>
 8005ece:	2200      	movs	r2, #0
 8005ed0:	6062      	str	r2, [r4, #4]
 8005ed2:	04d9      	lsls	r1, r3, #19
 8005ed4:	6922      	ldr	r2, [r4, #16]
 8005ed6:	6022      	str	r2, [r4, #0]
 8005ed8:	d504      	bpl.n	8005ee4 <__sflush_r+0x78>
 8005eda:	1c42      	adds	r2, r0, #1
 8005edc:	d101      	bne.n	8005ee2 <__sflush_r+0x76>
 8005ede:	682b      	ldr	r3, [r5, #0]
 8005ee0:	b903      	cbnz	r3, 8005ee4 <__sflush_r+0x78>
 8005ee2:	6560      	str	r0, [r4, #84]	@ 0x54
 8005ee4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005ee6:	602f      	str	r7, [r5, #0]
 8005ee8:	b1b9      	cbz	r1, 8005f1a <__sflush_r+0xae>
 8005eea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005eee:	4299      	cmp	r1, r3
 8005ef0:	d002      	beq.n	8005ef8 <__sflush_r+0x8c>
 8005ef2:	4628      	mov	r0, r5
 8005ef4:	f7ff fec2 	bl	8005c7c <_free_r>
 8005ef8:	2300      	movs	r3, #0
 8005efa:	6363      	str	r3, [r4, #52]	@ 0x34
 8005efc:	e00d      	b.n	8005f1a <__sflush_r+0xae>
 8005efe:	2301      	movs	r3, #1
 8005f00:	4628      	mov	r0, r5
 8005f02:	47b0      	blx	r6
 8005f04:	4602      	mov	r2, r0
 8005f06:	1c50      	adds	r0, r2, #1
 8005f08:	d1c9      	bne.n	8005e9e <__sflush_r+0x32>
 8005f0a:	682b      	ldr	r3, [r5, #0]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d0c6      	beq.n	8005e9e <__sflush_r+0x32>
 8005f10:	2b1d      	cmp	r3, #29
 8005f12:	d001      	beq.n	8005f18 <__sflush_r+0xac>
 8005f14:	2b16      	cmp	r3, #22
 8005f16:	d11e      	bne.n	8005f56 <__sflush_r+0xea>
 8005f18:	602f      	str	r7, [r5, #0]
 8005f1a:	2000      	movs	r0, #0
 8005f1c:	e022      	b.n	8005f64 <__sflush_r+0xf8>
 8005f1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f22:	b21b      	sxth	r3, r3
 8005f24:	e01b      	b.n	8005f5e <__sflush_r+0xf2>
 8005f26:	690f      	ldr	r7, [r1, #16]
 8005f28:	2f00      	cmp	r7, #0
 8005f2a:	d0f6      	beq.n	8005f1a <__sflush_r+0xae>
 8005f2c:	0793      	lsls	r3, r2, #30
 8005f2e:	680e      	ldr	r6, [r1, #0]
 8005f30:	bf08      	it	eq
 8005f32:	694b      	ldreq	r3, [r1, #20]
 8005f34:	600f      	str	r7, [r1, #0]
 8005f36:	bf18      	it	ne
 8005f38:	2300      	movne	r3, #0
 8005f3a:	eba6 0807 	sub.w	r8, r6, r7
 8005f3e:	608b      	str	r3, [r1, #8]
 8005f40:	f1b8 0f00 	cmp.w	r8, #0
 8005f44:	dde9      	ble.n	8005f1a <__sflush_r+0xae>
 8005f46:	6a21      	ldr	r1, [r4, #32]
 8005f48:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005f4a:	4643      	mov	r3, r8
 8005f4c:	463a      	mov	r2, r7
 8005f4e:	4628      	mov	r0, r5
 8005f50:	47b0      	blx	r6
 8005f52:	2800      	cmp	r0, #0
 8005f54:	dc08      	bgt.n	8005f68 <__sflush_r+0xfc>
 8005f56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f5e:	81a3      	strh	r3, [r4, #12]
 8005f60:	f04f 30ff 	mov.w	r0, #4294967295
 8005f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f68:	4407      	add	r7, r0
 8005f6a:	eba8 0800 	sub.w	r8, r8, r0
 8005f6e:	e7e7      	b.n	8005f40 <__sflush_r+0xd4>
 8005f70:	20400001 	.word	0x20400001

08005f74 <_fflush_r>:
 8005f74:	b538      	push	{r3, r4, r5, lr}
 8005f76:	690b      	ldr	r3, [r1, #16]
 8005f78:	4605      	mov	r5, r0
 8005f7a:	460c      	mov	r4, r1
 8005f7c:	b913      	cbnz	r3, 8005f84 <_fflush_r+0x10>
 8005f7e:	2500      	movs	r5, #0
 8005f80:	4628      	mov	r0, r5
 8005f82:	bd38      	pop	{r3, r4, r5, pc}
 8005f84:	b118      	cbz	r0, 8005f8e <_fflush_r+0x1a>
 8005f86:	6a03      	ldr	r3, [r0, #32]
 8005f88:	b90b      	cbnz	r3, 8005f8e <_fflush_r+0x1a>
 8005f8a:	f7ff fc8f 	bl	80058ac <__sinit>
 8005f8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d0f3      	beq.n	8005f7e <_fflush_r+0xa>
 8005f96:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005f98:	07d0      	lsls	r0, r2, #31
 8005f9a:	d404      	bmi.n	8005fa6 <_fflush_r+0x32>
 8005f9c:	0599      	lsls	r1, r3, #22
 8005f9e:	d402      	bmi.n	8005fa6 <_fflush_r+0x32>
 8005fa0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005fa2:	f7ff fe68 	bl	8005c76 <__retarget_lock_acquire_recursive>
 8005fa6:	4628      	mov	r0, r5
 8005fa8:	4621      	mov	r1, r4
 8005faa:	f7ff ff5f 	bl	8005e6c <__sflush_r>
 8005fae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005fb0:	07da      	lsls	r2, r3, #31
 8005fb2:	4605      	mov	r5, r0
 8005fb4:	d4e4      	bmi.n	8005f80 <_fflush_r+0xc>
 8005fb6:	89a3      	ldrh	r3, [r4, #12]
 8005fb8:	059b      	lsls	r3, r3, #22
 8005fba:	d4e1      	bmi.n	8005f80 <_fflush_r+0xc>
 8005fbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005fbe:	f7ff fe5b 	bl	8005c78 <__retarget_lock_release_recursive>
 8005fc2:	e7dd      	b.n	8005f80 <_fflush_r+0xc>

08005fc4 <__swhatbuf_r>:
 8005fc4:	b570      	push	{r4, r5, r6, lr}
 8005fc6:	460c      	mov	r4, r1
 8005fc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fcc:	2900      	cmp	r1, #0
 8005fce:	b096      	sub	sp, #88	@ 0x58
 8005fd0:	4615      	mov	r5, r2
 8005fd2:	461e      	mov	r6, r3
 8005fd4:	da0d      	bge.n	8005ff2 <__swhatbuf_r+0x2e>
 8005fd6:	89a3      	ldrh	r3, [r4, #12]
 8005fd8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005fdc:	f04f 0100 	mov.w	r1, #0
 8005fe0:	bf14      	ite	ne
 8005fe2:	2340      	movne	r3, #64	@ 0x40
 8005fe4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005fe8:	2000      	movs	r0, #0
 8005fea:	6031      	str	r1, [r6, #0]
 8005fec:	602b      	str	r3, [r5, #0]
 8005fee:	b016      	add	sp, #88	@ 0x58
 8005ff0:	bd70      	pop	{r4, r5, r6, pc}
 8005ff2:	466a      	mov	r2, sp
 8005ff4:	f000 f848 	bl	8006088 <_fstat_r>
 8005ff8:	2800      	cmp	r0, #0
 8005ffa:	dbec      	blt.n	8005fd6 <__swhatbuf_r+0x12>
 8005ffc:	9901      	ldr	r1, [sp, #4]
 8005ffe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006002:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006006:	4259      	negs	r1, r3
 8006008:	4159      	adcs	r1, r3
 800600a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800600e:	e7eb      	b.n	8005fe8 <__swhatbuf_r+0x24>

08006010 <__smakebuf_r>:
 8006010:	898b      	ldrh	r3, [r1, #12]
 8006012:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006014:	079d      	lsls	r5, r3, #30
 8006016:	4606      	mov	r6, r0
 8006018:	460c      	mov	r4, r1
 800601a:	d507      	bpl.n	800602c <__smakebuf_r+0x1c>
 800601c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006020:	6023      	str	r3, [r4, #0]
 8006022:	6123      	str	r3, [r4, #16]
 8006024:	2301      	movs	r3, #1
 8006026:	6163      	str	r3, [r4, #20]
 8006028:	b003      	add	sp, #12
 800602a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800602c:	ab01      	add	r3, sp, #4
 800602e:	466a      	mov	r2, sp
 8006030:	f7ff ffc8 	bl	8005fc4 <__swhatbuf_r>
 8006034:	9f00      	ldr	r7, [sp, #0]
 8006036:	4605      	mov	r5, r0
 8006038:	4639      	mov	r1, r7
 800603a:	4630      	mov	r0, r6
 800603c:	f7ff fe8a 	bl	8005d54 <_malloc_r>
 8006040:	b948      	cbnz	r0, 8006056 <__smakebuf_r+0x46>
 8006042:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006046:	059a      	lsls	r2, r3, #22
 8006048:	d4ee      	bmi.n	8006028 <__smakebuf_r+0x18>
 800604a:	f023 0303 	bic.w	r3, r3, #3
 800604e:	f043 0302 	orr.w	r3, r3, #2
 8006052:	81a3      	strh	r3, [r4, #12]
 8006054:	e7e2      	b.n	800601c <__smakebuf_r+0xc>
 8006056:	89a3      	ldrh	r3, [r4, #12]
 8006058:	6020      	str	r0, [r4, #0]
 800605a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800605e:	81a3      	strh	r3, [r4, #12]
 8006060:	9b01      	ldr	r3, [sp, #4]
 8006062:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006066:	b15b      	cbz	r3, 8006080 <__smakebuf_r+0x70>
 8006068:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800606c:	4630      	mov	r0, r6
 800606e:	f000 f81d 	bl	80060ac <_isatty_r>
 8006072:	b128      	cbz	r0, 8006080 <__smakebuf_r+0x70>
 8006074:	89a3      	ldrh	r3, [r4, #12]
 8006076:	f023 0303 	bic.w	r3, r3, #3
 800607a:	f043 0301 	orr.w	r3, r3, #1
 800607e:	81a3      	strh	r3, [r4, #12]
 8006080:	89a3      	ldrh	r3, [r4, #12]
 8006082:	431d      	orrs	r5, r3
 8006084:	81a5      	strh	r5, [r4, #12]
 8006086:	e7cf      	b.n	8006028 <__smakebuf_r+0x18>

08006088 <_fstat_r>:
 8006088:	b538      	push	{r3, r4, r5, lr}
 800608a:	4d07      	ldr	r5, [pc, #28]	@ (80060a8 <_fstat_r+0x20>)
 800608c:	2300      	movs	r3, #0
 800608e:	4604      	mov	r4, r0
 8006090:	4608      	mov	r0, r1
 8006092:	4611      	mov	r1, r2
 8006094:	602b      	str	r3, [r5, #0]
 8006096:	f7fb fba9 	bl	80017ec <_fstat>
 800609a:	1c43      	adds	r3, r0, #1
 800609c:	d102      	bne.n	80060a4 <_fstat_r+0x1c>
 800609e:	682b      	ldr	r3, [r5, #0]
 80060a0:	b103      	cbz	r3, 80060a4 <_fstat_r+0x1c>
 80060a2:	6023      	str	r3, [r4, #0]
 80060a4:	bd38      	pop	{r3, r4, r5, pc}
 80060a6:	bf00      	nop
 80060a8:	20000588 	.word	0x20000588

080060ac <_isatty_r>:
 80060ac:	b538      	push	{r3, r4, r5, lr}
 80060ae:	4d06      	ldr	r5, [pc, #24]	@ (80060c8 <_isatty_r+0x1c>)
 80060b0:	2300      	movs	r3, #0
 80060b2:	4604      	mov	r4, r0
 80060b4:	4608      	mov	r0, r1
 80060b6:	602b      	str	r3, [r5, #0]
 80060b8:	f7fb fba8 	bl	800180c <_isatty>
 80060bc:	1c43      	adds	r3, r0, #1
 80060be:	d102      	bne.n	80060c6 <_isatty_r+0x1a>
 80060c0:	682b      	ldr	r3, [r5, #0]
 80060c2:	b103      	cbz	r3, 80060c6 <_isatty_r+0x1a>
 80060c4:	6023      	str	r3, [r4, #0]
 80060c6:	bd38      	pop	{r3, r4, r5, pc}
 80060c8:	20000588 	.word	0x20000588

080060cc <_sbrk_r>:
 80060cc:	b538      	push	{r3, r4, r5, lr}
 80060ce:	4d06      	ldr	r5, [pc, #24]	@ (80060e8 <_sbrk_r+0x1c>)
 80060d0:	2300      	movs	r3, #0
 80060d2:	4604      	mov	r4, r0
 80060d4:	4608      	mov	r0, r1
 80060d6:	602b      	str	r3, [r5, #0]
 80060d8:	f7fb fbb0 	bl	800183c <_sbrk>
 80060dc:	1c43      	adds	r3, r0, #1
 80060de:	d102      	bne.n	80060e6 <_sbrk_r+0x1a>
 80060e0:	682b      	ldr	r3, [r5, #0]
 80060e2:	b103      	cbz	r3, 80060e6 <_sbrk_r+0x1a>
 80060e4:	6023      	str	r3, [r4, #0]
 80060e6:	bd38      	pop	{r3, r4, r5, pc}
 80060e8:	20000588 	.word	0x20000588

080060ec <_init>:
 80060ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ee:	bf00      	nop
 80060f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060f2:	bc08      	pop	{r3}
 80060f4:	469e      	mov	lr, r3
 80060f6:	4770      	bx	lr

080060f8 <_fini>:
 80060f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060fa:	bf00      	nop
 80060fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060fe:	bc08      	pop	{r3}
 8006100:	469e      	mov	lr, r3
 8006102:	4770      	bx	lr
